/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.hdinsight.job.implementation;

import retrofit2.Retrofit;
import com.microsoft.azure.hdinsight.job.Jobs;
import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.hdinsight.job.models.AppState;
import com.microsoft.azure.hdinsight.job.models.JobDetailRootJsonObject;
import com.microsoft.azure.hdinsight.job.models.JobListJsonObject;
import com.microsoft.azure.hdinsight.job.models.JobOperationsErrorResponseException;
import com.microsoft.azure.hdinsight.job.models.JobSubmissionJsonResponse;
import com.microsoft.azure.hdinsight.job.models.SparkBatchJob;
import com.microsoft.azure.hdinsight.job.models.SparkBatchJobCollection;
import com.microsoft.azure.hdinsight.job.models.SparkBatchJobRequest;
import com.microsoft.azure.hdinsight.job.models.SparkJobDeletedResult;
import com.microsoft.azure.hdinsight.job.models.SparkJobLog;
import com.microsoft.azure.hdinsight.job.models.SparkJobState;
import com.microsoft.azure.hdinsight.job.models.SparkSessionCollection;
import com.microsoft.azure.hdinsight.job.models.SparkSessionJob;
import com.microsoft.azure.hdinsight.job.models.SparkSessionJobRequest;
import com.microsoft.azure.hdinsight.job.models.SparkStatement;
import com.microsoft.azure.hdinsight.job.models.SparkStatementCancellationResult;
import com.microsoft.azure.hdinsight.job.models.SparkStatementCollection;
import com.microsoft.azure.hdinsight.job.models.SparkStatementRequest;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.InputStream;
import java.io.IOException;
import java.util.List;
import okhttp3.MediaType;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Jobs.
 */
public class JobsImpl implements Jobs {
    /** The Retrofit service to perform REST calls. */
    private JobsService service;
    /** The service client containing this operation class. */
    private HDInsightJobClientImpl client;

    /**
     * Initializes an instance of JobsImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public JobsImpl(Retrofit retrofit, HDInsightJobClientImpl client) {
        this.service = retrofit.create(JobsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Jobs to be
     * used by Retrofit to perform actually REST calls.
     */
    interface JobsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs get" })
        @GET("templeton/v1/jobs/{jobId}")
        Observable<Response<ResponseBody>> get(@Path("jobId") String jobId, @Query("user.name") String username, @Query("fields") String fields, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs kill" })
        @HTTP(path = "templeton/v1/jobs/{jobId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> kill(@Path("jobId") String jobId, @Query("user.name") String username, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs list" })
        @GET("templeton/v1/jobs")
        Observable<Response<ResponseBody>> list(@Query("user.name") String username, @Query("showall") String showall, @Query("fields") String fields, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs listAfterJobId" })
        @GET("templeton/v1/jobs")
        Observable<Response<ResponseBody>> listAfterJobId(@Query("user.name") String username, @Query("jobid") String jobid, @Query("numrecords") Integer numrecords, @Query("showall") String showall, @Query("fields") String fields, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/text", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs submitHiveJob" })
        @POST("templeton/v1/hive")
        Observable<Response<ResponseBody>> submitHiveJob(@Query("user.name") String username, @Body RequestBody content, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: text/plain", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs submitMapReduceJob" })
        @POST("templeton/v1/mapreduce/jar")
        Observable<Response<ResponseBody>> submitMapReduceJob(@Query("user.name") String username, @Body RequestBody content, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: text/plain", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs submitMapReduceStreamingJob" })
        @POST("templeton/v1/mapreduce/streaming")
        Observable<Response<ResponseBody>> submitMapReduceStreamingJob(@Query("user.name") String username, @Body RequestBody content, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: text/plain", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs submitPigJob" })
        @POST("templeton/v1/pig")
        Observable<Response<ResponseBody>> submitPigJob(@Query("user.name") String username, @Body RequestBody content, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: text/plain", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs submitSqoopJob" })
        @POST("templeton/v1/sqoop")
        Observable<Response<ResponseBody>> submitSqoopJob(@Query("user.name") String username, @Body RequestBody content, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs getAppState" })
        @GET("ws/v1/cluster/apps/{appId}/state")
        Observable<Response<ResponseBody>> getAppState(@Path("appId") String appId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs listSparkBatchJob" })
        @GET("livy/batches")
        Observable<Response<ResponseBody>> listSparkBatchJob(@Query("from") Integer from, @Query("size") Integer size, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs submitSparkBatchJob" })
        @POST("livy/batches")
        Observable<Response<ResponseBody>> submitSparkBatchJob(@Header("X-Requested-By") String requestedBy, @Body SparkBatchJobRequest sparkBatchJobRequest, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs getSparkBatchJob" })
        @GET("livy/batches/{batchId}")
        Observable<Response<ResponseBody>> getSparkBatchJob(@Path("batchId") int batchId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs deleteSparkBatch" })
        @HTTP(path = "livy/batches/{batchId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteSparkBatch(@Path("batchId") int batchId, @Header("X-Requested-By") String requestedBy, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs getSparkBatchLog" })
        @GET("livy/batches/{batchId}/log")
        Observable<Response<ResponseBody>> getSparkBatchLog(@Path("batchId") int batchId, @Query("from") Integer from, @Query("size") Integer size, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs getSparkBatchState" })
        @GET("livy/batches/{batchId}/state")
        Observable<Response<ResponseBody>> getSparkBatchState(@Path("batchId") int batchId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs listSparkSessionJob" })
        @GET("livy/sessions")
        Observable<Response<ResponseBody>> listSparkSessionJob(@Query("from") Integer from, @Query("size") Integer size, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs submitSparkSessionJob" })
        @POST("livy/sessions")
        Observable<Response<ResponseBody>> submitSparkSessionJob(@Header("X-Requested-By") String requestedBy, @Body SparkSessionJobRequest sparkSessionJobRequest, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs getSparkSessionJob" })
        @GET("livy/sessions/{sessionId}")
        Observable<Response<ResponseBody>> getSparkSessionJob(@Path("sessionId") int sessionId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs deleteSparkSessionJob" })
        @HTTP(path = "livy/sessions/{sessionId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteSparkSessionJob(@Path("sessionId") int sessionId, @Header("X-Requested-By") String requestedBy, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs getSparkSessionLog" })
        @GET("livy/sessions/{sessionId}/log")
        Observable<Response<ResponseBody>> getSparkSessionLog(@Path("sessionId") int sessionId, @Query("from") Integer from, @Query("size") Integer size, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs getSparkSessionState" })
        @GET("livy/sessions/{sessionId}/state")
        Observable<Response<ResponseBody>> getSparkSessionState(@Path("sessionId") int sessionId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs listSparkStatementJob" })
        @GET("livy/sessions/{sessionId}/statements")
        Observable<Response<ResponseBody>> listSparkStatementJob(@Path("sessionId") int sessionId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs submitSparkStatementJob" })
        @POST("livy/sessions/{sessionId}/statements")
        Observable<Response<ResponseBody>> submitSparkStatementJob(@Path("sessionId") int sessionId, @Header("X-Requested-By") String requestedBy, @Body SparkStatementRequest sparkStatementRequest, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs getSparkStatementJob" })
        @GET("livy/sessions/{sessionId}/statements/{statementId}")
        Observable<Response<ResponseBody>> getSparkStatementJob(@Path("sessionId") int sessionId, @Path("statementId") int statementId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs deleteSparkStatementJob" })
        @POST("livy/sessions/{sessionId}/statements/{statementId}/cancel")
        Observable<Response<ResponseBody>> deleteSparkStatementJob(@Path("sessionId") int sessionId, @Path("statementId") int statementId, @Header("X-Requested-By") String requestedBy, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets job details from the specified HDInsight cluster.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobDetailRootJsonObject object if successful.
     */
    public JobDetailRootJsonObject get(String jobId) {
        return getWithServiceResponseAsync(jobId).toBlocking().single().body();
    }

    /**
     * Gets job details from the specified HDInsight cluster.
     *
     * @param jobId The id of the job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobDetailRootJsonObject> getAsync(String jobId, final ServiceCallback<JobDetailRootJsonObject> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(jobId), serviceCallback);
    }

    /**
     * Gets job details from the specified HDInsight cluster.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDetailRootJsonObject object
     */
    public Observable<JobDetailRootJsonObject> getAsync(String jobId) {
        return getWithServiceResponseAsync(jobId).map(new Func1<ServiceResponse<JobDetailRootJsonObject>, JobDetailRootJsonObject>() {
            @Override
            public JobDetailRootJsonObject call(ServiceResponse<JobDetailRootJsonObject> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets job details from the specified HDInsight cluster.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDetailRootJsonObject object
     */
    public Observable<ServiceResponse<JobDetailRootJsonObject>> getWithServiceResponseAsync(String jobId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (jobId == null) {
            throw new IllegalArgumentException("Parameter jobId is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        final String fields = "*";
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.get(jobId, this.client.username(), fields, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobDetailRootJsonObject>>>() {
                @Override
                public Observable<ServiceResponse<JobDetailRootJsonObject>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobDetailRootJsonObject> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobDetailRootJsonObject> getDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobDetailRootJsonObject, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobDetailRootJsonObject>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

    /**
     * Initiates cancel on given running job in the specified HDInsight.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobDetailRootJsonObject object if successful.
     */
    public JobDetailRootJsonObject kill(String jobId) {
        return killWithServiceResponseAsync(jobId).toBlocking().single().body();
    }

    /**
     * Initiates cancel on given running job in the specified HDInsight.
     *
     * @param jobId The id of the job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobDetailRootJsonObject> killAsync(String jobId, final ServiceCallback<JobDetailRootJsonObject> serviceCallback) {
        return ServiceFuture.fromResponse(killWithServiceResponseAsync(jobId), serviceCallback);
    }

    /**
     * Initiates cancel on given running job in the specified HDInsight.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDetailRootJsonObject object
     */
    public Observable<JobDetailRootJsonObject> killAsync(String jobId) {
        return killWithServiceResponseAsync(jobId).map(new Func1<ServiceResponse<JobDetailRootJsonObject>, JobDetailRootJsonObject>() {
            @Override
            public JobDetailRootJsonObject call(ServiceResponse<JobDetailRootJsonObject> response) {
                return response.body();
            }
        });
    }

    /**
     * Initiates cancel on given running job in the specified HDInsight.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDetailRootJsonObject object
     */
    public Observable<ServiceResponse<JobDetailRootJsonObject>> killWithServiceResponseAsync(String jobId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (jobId == null) {
            throw new IllegalArgumentException("Parameter jobId is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.kill(jobId, this.client.username(), this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobDetailRootJsonObject>>>() {
                @Override
                public Observable<ServiceResponse<JobDetailRootJsonObject>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobDetailRootJsonObject> clientResponse = killDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobDetailRootJsonObject> killDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobDetailRootJsonObject, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobDetailRootJsonObject>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the list of jobs from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;JobListJsonObject&gt; object if successful.
     */
    public List<JobListJsonObject> list() {
        return listWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Gets the list of jobs from the specified HDInsight cluster.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobListJsonObject>> listAsync(final ServiceCallback<List<JobListJsonObject>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Gets the list of jobs from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    public Observable<List<JobListJsonObject>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<List<JobListJsonObject>>, List<JobListJsonObject>>() {
            @Override
            public List<JobListJsonObject> call(ServiceResponse<List<JobListJsonObject>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the list of jobs from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    public Observable<ServiceResponse<List<JobListJsonObject>>> listWithServiceResponseAsync() {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        final String showall = "true";
        final String fields = "*";
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.list(this.client.username(), showall, fields, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<JobListJsonObject>>>>() {
                @Override
                public Observable<ServiceResponse<List<JobListJsonObject>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<JobListJsonObject>> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<JobListJsonObject>> listDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<JobListJsonObject>, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<JobListJsonObject>>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;JobListJsonObject&gt; object if successful.
     */
    public List<JobListJsonObject> listAfterJobId() {
        return listAfterJobIdWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobListJsonObject>> listAfterJobIdAsync(final ServiceCallback<List<JobListJsonObject>> serviceCallback) {
        return ServiceFuture.fromResponse(listAfterJobIdWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    public Observable<List<JobListJsonObject>> listAfterJobIdAsync() {
        return listAfterJobIdWithServiceResponseAsync().map(new Func1<ServiceResponse<List<JobListJsonObject>>, List<JobListJsonObject>>() {
            @Override
            public List<JobListJsonObject> call(ServiceResponse<List<JobListJsonObject>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    public Observable<ServiceResponse<List<JobListJsonObject>>> listAfterJobIdWithServiceResponseAsync() {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        final String showall = "true";
        final String fields = "*";
        final String jobid = null;
        final Integer numrecords = null;
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.listAfterJobId(this.client.username(), jobid, numrecords, showall, fields, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<JobListJsonObject>>>>() {
                @Override
                public Observable<ServiceResponse<List<JobListJsonObject>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<JobListJsonObject>> clientResponse = listAfterJobIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param jobid JobId from where to list jobs.
     * @param numrecords Number of jobs to fetch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;JobListJsonObject&gt; object if successful.
     */
    public List<JobListJsonObject> listAfterJobId(String jobid, Integer numrecords) {
        return listAfterJobIdWithServiceResponseAsync(jobid, numrecords).toBlocking().single().body();
    }

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param jobid JobId from where to list jobs.
     * @param numrecords Number of jobs to fetch.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobListJsonObject>> listAfterJobIdAsync(String jobid, Integer numrecords, final ServiceCallback<List<JobListJsonObject>> serviceCallback) {
        return ServiceFuture.fromResponse(listAfterJobIdWithServiceResponseAsync(jobid, numrecords), serviceCallback);
    }

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param jobid JobId from where to list jobs.
     * @param numrecords Number of jobs to fetch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    public Observable<List<JobListJsonObject>> listAfterJobIdAsync(String jobid, Integer numrecords) {
        return listAfterJobIdWithServiceResponseAsync(jobid, numrecords).map(new Func1<ServiceResponse<List<JobListJsonObject>>, List<JobListJsonObject>>() {
            @Override
            public List<JobListJsonObject> call(ServiceResponse<List<JobListJsonObject>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param jobid JobId from where to list jobs.
     * @param numrecords Number of jobs to fetch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    public Observable<ServiceResponse<List<JobListJsonObject>>> listAfterJobIdWithServiceResponseAsync(String jobid, Integer numrecords) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        final String showall = "true";
        final String fields = "*";
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.listAfterJobId(this.client.username(), jobid, numrecords, showall, fields, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<JobListJsonObject>>>>() {
                @Override
                public Observable<ServiceResponse<List<JobListJsonObject>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<JobListJsonObject>> clientResponse = listAfterJobIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<JobListJsonObject>> listAfterJobIdDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<JobListJsonObject>, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<JobListJsonObject>>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

    /**
     * Submits a Hive job to an HDInsight cluster.
     *
     * @param content The content of the Hive job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    public JobSubmissionJsonResponse submitHiveJob(byte[] content) {
        return submitHiveJobWithServiceResponseAsync(content).toBlocking().single().body();
    }

    /**
     * Submits a Hive job to an HDInsight cluster.
     *
     * @param content The content of the Hive job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobSubmissionJsonResponse> submitHiveJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback) {
        return ServiceFuture.fromResponse(submitHiveJobWithServiceResponseAsync(content), serviceCallback);
    }

    /**
     * Submits a Hive job to an HDInsight cluster.
     *
     * @param content The content of the Hive job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<JobSubmissionJsonResponse> submitHiveJobAsync(byte[] content) {
        return submitHiveJobWithServiceResponseAsync(content).map(new Func1<ServiceResponse<JobSubmissionJsonResponse>, JobSubmissionJsonResponse>() {
            @Override
            public JobSubmissionJsonResponse call(ServiceResponse<JobSubmissionJsonResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Submits a Hive job to an HDInsight cluster.
     *
     * @param content The content of the Hive job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<ServiceResponse<JobSubmissionJsonResponse>> submitHiveJobWithServiceResponseAsync(byte[] content) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        if (content == null) {
            throw new IllegalArgumentException("Parameter content is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        RequestBody contentConverted = RequestBody.create(MediaType.parse("application/text"), content);
        return service.submitHiveJob(this.client.username(), contentConverted, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobSubmissionJsonResponse>>>() {
                @Override
                public Observable<ServiceResponse<JobSubmissionJsonResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobSubmissionJsonResponse> clientResponse = submitHiveJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobSubmissionJsonResponse> submitHiveJobDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobSubmissionJsonResponse, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobSubmissionJsonResponse>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

    /**
     * Submits a MapReduce job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    public JobSubmissionJsonResponse submitMapReduceJob(byte[] content) {
        return submitMapReduceJobWithServiceResponseAsync(content).toBlocking().single().body();
    }

    /**
     * Submits a MapReduce job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobSubmissionJsonResponse> submitMapReduceJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback) {
        return ServiceFuture.fromResponse(submitMapReduceJobWithServiceResponseAsync(content), serviceCallback);
    }

    /**
     * Submits a MapReduce job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<JobSubmissionJsonResponse> submitMapReduceJobAsync(byte[] content) {
        return submitMapReduceJobWithServiceResponseAsync(content).map(new Func1<ServiceResponse<JobSubmissionJsonResponse>, JobSubmissionJsonResponse>() {
            @Override
            public JobSubmissionJsonResponse call(ServiceResponse<JobSubmissionJsonResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Submits a MapReduce job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<ServiceResponse<JobSubmissionJsonResponse>> submitMapReduceJobWithServiceResponseAsync(byte[] content) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        if (content == null) {
            throw new IllegalArgumentException("Parameter content is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        RequestBody contentConverted = RequestBody.create(MediaType.parse("text/plain"), content);
        return service.submitMapReduceJob(this.client.username(), contentConverted, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobSubmissionJsonResponse>>>() {
                @Override
                public Observable<ServiceResponse<JobSubmissionJsonResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobSubmissionJsonResponse> clientResponse = submitMapReduceJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobSubmissionJsonResponse> submitMapReduceJobDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobSubmissionJsonResponse, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobSubmissionJsonResponse>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

    /**
     * Submits a MapReduce streaming job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    public JobSubmissionJsonResponse submitMapReduceStreamingJob(byte[] content) {
        return submitMapReduceStreamingJobWithServiceResponseAsync(content).toBlocking().single().body();
    }

    /**
     * Submits a MapReduce streaming job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobSubmissionJsonResponse> submitMapReduceStreamingJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback) {
        return ServiceFuture.fromResponse(submitMapReduceStreamingJobWithServiceResponseAsync(content), serviceCallback);
    }

    /**
     * Submits a MapReduce streaming job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<JobSubmissionJsonResponse> submitMapReduceStreamingJobAsync(byte[] content) {
        return submitMapReduceStreamingJobWithServiceResponseAsync(content).map(new Func1<ServiceResponse<JobSubmissionJsonResponse>, JobSubmissionJsonResponse>() {
            @Override
            public JobSubmissionJsonResponse call(ServiceResponse<JobSubmissionJsonResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Submits a MapReduce streaming job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<ServiceResponse<JobSubmissionJsonResponse>> submitMapReduceStreamingJobWithServiceResponseAsync(byte[] content) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        if (content == null) {
            throw new IllegalArgumentException("Parameter content is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        RequestBody contentConverted = RequestBody.create(MediaType.parse("text/plain"), content);
        return service.submitMapReduceStreamingJob(this.client.username(), contentConverted, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobSubmissionJsonResponse>>>() {
                @Override
                public Observable<ServiceResponse<JobSubmissionJsonResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobSubmissionJsonResponse> clientResponse = submitMapReduceStreamingJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobSubmissionJsonResponse> submitMapReduceStreamingJobDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobSubmissionJsonResponse, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobSubmissionJsonResponse>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

    /**
     * Submits a Pig job to an HDInsight cluster.
     *
     * @param content The content of the Pig job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    public JobSubmissionJsonResponse submitPigJob(byte[] content) {
        return submitPigJobWithServiceResponseAsync(content).toBlocking().single().body();
    }

    /**
     * Submits a Pig job to an HDInsight cluster.
     *
     * @param content The content of the Pig job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobSubmissionJsonResponse> submitPigJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback) {
        return ServiceFuture.fromResponse(submitPigJobWithServiceResponseAsync(content), serviceCallback);
    }

    /**
     * Submits a Pig job to an HDInsight cluster.
     *
     * @param content The content of the Pig job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<JobSubmissionJsonResponse> submitPigJobAsync(byte[] content) {
        return submitPigJobWithServiceResponseAsync(content).map(new Func1<ServiceResponse<JobSubmissionJsonResponse>, JobSubmissionJsonResponse>() {
            @Override
            public JobSubmissionJsonResponse call(ServiceResponse<JobSubmissionJsonResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Submits a Pig job to an HDInsight cluster.
     *
     * @param content The content of the Pig job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<ServiceResponse<JobSubmissionJsonResponse>> submitPigJobWithServiceResponseAsync(byte[] content) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        if (content == null) {
            throw new IllegalArgumentException("Parameter content is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        RequestBody contentConverted = RequestBody.create(MediaType.parse("text/plain"), content);
        return service.submitPigJob(this.client.username(), contentConverted, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobSubmissionJsonResponse>>>() {
                @Override
                public Observable<ServiceResponse<JobSubmissionJsonResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobSubmissionJsonResponse> clientResponse = submitPigJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobSubmissionJsonResponse> submitPigJobDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobSubmissionJsonResponse, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobSubmissionJsonResponse>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

    /**
     * Submits a Sqoop job to an HDInsight cluster.
     *
     * @param content The content of the Sqoop job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    public JobSubmissionJsonResponse submitSqoopJob(byte[] content) {
        return submitSqoopJobWithServiceResponseAsync(content).toBlocking().single().body();
    }

    /**
     * Submits a Sqoop job to an HDInsight cluster.
     *
     * @param content The content of the Sqoop job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobSubmissionJsonResponse> submitSqoopJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback) {
        return ServiceFuture.fromResponse(submitSqoopJobWithServiceResponseAsync(content), serviceCallback);
    }

    /**
     * Submits a Sqoop job to an HDInsight cluster.
     *
     * @param content The content of the Sqoop job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<JobSubmissionJsonResponse> submitSqoopJobAsync(byte[] content) {
        return submitSqoopJobWithServiceResponseAsync(content).map(new Func1<ServiceResponse<JobSubmissionJsonResponse>, JobSubmissionJsonResponse>() {
            @Override
            public JobSubmissionJsonResponse call(ServiceResponse<JobSubmissionJsonResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Submits a Sqoop job to an HDInsight cluster.
     *
     * @param content The content of the Sqoop job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<ServiceResponse<JobSubmissionJsonResponse>> submitSqoopJobWithServiceResponseAsync(byte[] content) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        if (content == null) {
            throw new IllegalArgumentException("Parameter content is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        RequestBody contentConverted = RequestBody.create(MediaType.parse("text/plain"), content);
        return service.submitSqoopJob(this.client.username(), contentConverted, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobSubmissionJsonResponse>>>() {
                @Override
                public Observable<ServiceResponse<JobSubmissionJsonResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobSubmissionJsonResponse> clientResponse = submitSqoopJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobSubmissionJsonResponse> submitSqoopJobDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobSubmissionJsonResponse, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobSubmissionJsonResponse>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets application state from the specified HDInsight cluster.
     *
     * @param appId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AppState object if successful.
     */
    public AppState getAppState(String appId) {
        return getAppStateWithServiceResponseAsync(appId).toBlocking().single().body();
    }

    /**
     * Gets application state from the specified HDInsight cluster.
     *
     * @param appId The id of the job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AppState> getAppStateAsync(String appId, final ServiceCallback<AppState> serviceCallback) {
        return ServiceFuture.fromResponse(getAppStateWithServiceResponseAsync(appId), serviceCallback);
    }

    /**
     * Gets application state from the specified HDInsight cluster.
     *
     * @param appId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AppState object
     */
    public Observable<AppState> getAppStateAsync(String appId) {
        return getAppStateWithServiceResponseAsync(appId).map(new Func1<ServiceResponse<AppState>, AppState>() {
            @Override
            public AppState call(ServiceResponse<AppState> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets application state from the specified HDInsight cluster.
     *
     * @param appId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AppState object
     */
    public Observable<ServiceResponse<AppState>> getAppStateWithServiceResponseAsync(String appId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.getAppState(appId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AppState>>>() {
                @Override
                public Observable<ServiceResponse<AppState>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AppState> clientResponse = getAppStateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AppState> getAppStateDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AppState, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AppState>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

    /**
     * List all spark batch jobs.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkBatchJobCollection object if successful.
     */
    public SparkBatchJobCollection listSparkBatchJob() {
        return listSparkBatchJobWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * List all spark batch jobs.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkBatchJobCollection> listSparkBatchJobAsync(final ServiceCallback<SparkBatchJobCollection> serviceCallback) {
        return ServiceFuture.fromResponse(listSparkBatchJobWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * List all spark batch jobs.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJobCollection object
     */
    public Observable<SparkBatchJobCollection> listSparkBatchJobAsync() {
        return listSparkBatchJobWithServiceResponseAsync().map(new Func1<ServiceResponse<SparkBatchJobCollection>, SparkBatchJobCollection>() {
            @Override
            public SparkBatchJobCollection call(ServiceResponse<SparkBatchJobCollection> response) {
                return response.body();
            }
        });
    }

    /**
     * List all spark batch jobs.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJobCollection object
     */
    public Observable<ServiceResponse<SparkBatchJobCollection>> listSparkBatchJobWithServiceResponseAsync() {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        final Integer from = null;
        final Integer size = null;
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.listSparkBatchJob(from, size, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkBatchJobCollection>>>() {
                @Override
                public Observable<ServiceResponse<SparkBatchJobCollection>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkBatchJobCollection> clientResponse = listSparkBatchJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List all spark batch jobs.
     *
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkBatchJobCollection object if successful.
     */
    public SparkBatchJobCollection listSparkBatchJob(Integer from, Integer size) {
        return listSparkBatchJobWithServiceResponseAsync(from, size).toBlocking().single().body();
    }

    /**
     * List all spark batch jobs.
     *
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkBatchJobCollection> listSparkBatchJobAsync(Integer from, Integer size, final ServiceCallback<SparkBatchJobCollection> serviceCallback) {
        return ServiceFuture.fromResponse(listSparkBatchJobWithServiceResponseAsync(from, size), serviceCallback);
    }

    /**
     * List all spark batch jobs.
     *
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJobCollection object
     */
    public Observable<SparkBatchJobCollection> listSparkBatchJobAsync(Integer from, Integer size) {
        return listSparkBatchJobWithServiceResponseAsync(from, size).map(new Func1<ServiceResponse<SparkBatchJobCollection>, SparkBatchJobCollection>() {
            @Override
            public SparkBatchJobCollection call(ServiceResponse<SparkBatchJobCollection> response) {
                return response.body();
            }
        });
    }

    /**
     * List all spark batch jobs.
     *
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJobCollection object
     */
    public Observable<ServiceResponse<SparkBatchJobCollection>> listSparkBatchJobWithServiceResponseAsync(Integer from, Integer size) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.listSparkBatchJob(from, size, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkBatchJobCollection>>>() {
                @Override
                public Observable<ServiceResponse<SparkBatchJobCollection>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkBatchJobCollection> clientResponse = listSparkBatchJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SparkBatchJobCollection> listSparkBatchJobDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SparkBatchJobCollection, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SparkBatchJobCollection>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a new spark batch job.
     *
     * @param sparkBatchJobRequest Livy compatible batch job request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkBatchJob object if successful.
     */
    public SparkBatchJob submitSparkBatchJob(SparkBatchJobRequest sparkBatchJobRequest) {
        return submitSparkBatchJobWithServiceResponseAsync(sparkBatchJobRequest).toBlocking().single().body();
    }

    /**
     * Create a new spark batch job.
     *
     * @param sparkBatchJobRequest Livy compatible batch job request payload.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkBatchJob> submitSparkBatchJobAsync(SparkBatchJobRequest sparkBatchJobRequest, final ServiceCallback<SparkBatchJob> serviceCallback) {
        return ServiceFuture.fromResponse(submitSparkBatchJobWithServiceResponseAsync(sparkBatchJobRequest), serviceCallback);
    }

    /**
     * Create a new spark batch job.
     *
     * @param sparkBatchJobRequest Livy compatible batch job request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJob object
     */
    public Observable<SparkBatchJob> submitSparkBatchJobAsync(SparkBatchJobRequest sparkBatchJobRequest) {
        return submitSparkBatchJobWithServiceResponseAsync(sparkBatchJobRequest).map(new Func1<ServiceResponse<SparkBatchJob>, SparkBatchJob>() {
            @Override
            public SparkBatchJob call(ServiceResponse<SparkBatchJob> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a new spark batch job.
     *
     * @param sparkBatchJobRequest Livy compatible batch job request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJob object
     */
    public Observable<ServiceResponse<SparkBatchJob>> submitSparkBatchJobWithServiceResponseAsync(SparkBatchJobRequest sparkBatchJobRequest) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (sparkBatchJobRequest == null) {
            throw new IllegalArgumentException("Parameter sparkBatchJobRequest is required and cannot be null.");
        }
        Validator.validate(sparkBatchJobRequest);
        final String requestedBy = null;
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.submitSparkBatchJob(requestedBy, sparkBatchJobRequest, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkBatchJob>>>() {
                @Override
                public Observable<ServiceResponse<SparkBatchJob>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkBatchJob> clientResponse = submitSparkBatchJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create a new spark batch job.
     *
     * @param sparkBatchJobRequest Livy compatible batch job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkBatchJob object if successful.
     */
    public SparkBatchJob submitSparkBatchJob(SparkBatchJobRequest sparkBatchJobRequest, String requestedBy) {
        return submitSparkBatchJobWithServiceResponseAsync(sparkBatchJobRequest, requestedBy).toBlocking().single().body();
    }

    /**
     * Create a new spark batch job.
     *
     * @param sparkBatchJobRequest Livy compatible batch job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkBatchJob> submitSparkBatchJobAsync(SparkBatchJobRequest sparkBatchJobRequest, String requestedBy, final ServiceCallback<SparkBatchJob> serviceCallback) {
        return ServiceFuture.fromResponse(submitSparkBatchJobWithServiceResponseAsync(sparkBatchJobRequest, requestedBy), serviceCallback);
    }

    /**
     * Create a new spark batch job.
     *
     * @param sparkBatchJobRequest Livy compatible batch job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJob object
     */
    public Observable<SparkBatchJob> submitSparkBatchJobAsync(SparkBatchJobRequest sparkBatchJobRequest, String requestedBy) {
        return submitSparkBatchJobWithServiceResponseAsync(sparkBatchJobRequest, requestedBy).map(new Func1<ServiceResponse<SparkBatchJob>, SparkBatchJob>() {
            @Override
            public SparkBatchJob call(ServiceResponse<SparkBatchJob> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a new spark batch job.
     *
     * @param sparkBatchJobRequest Livy compatible batch job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJob object
     */
    public Observable<ServiceResponse<SparkBatchJob>> submitSparkBatchJobWithServiceResponseAsync(SparkBatchJobRequest sparkBatchJobRequest, String requestedBy) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (sparkBatchJobRequest == null) {
            throw new IllegalArgumentException("Parameter sparkBatchJobRequest is required and cannot be null.");
        }
        Validator.validate(sparkBatchJobRequest);
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.submitSparkBatchJob(requestedBy, sparkBatchJobRequest, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkBatchJob>>>() {
                @Override
                public Observable<ServiceResponse<SparkBatchJob>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkBatchJob> clientResponse = submitSparkBatchJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SparkBatchJob> submitSparkBatchJobDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SparkBatchJob, CloudException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<SparkBatchJob>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a single spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkBatchJob object if successful.
     */
    public SparkBatchJob getSparkBatchJob(int batchId) {
        return getSparkBatchJobWithServiceResponseAsync(batchId).toBlocking().single().body();
    }

    /**
     * Gets a single spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkBatchJob> getSparkBatchJobAsync(int batchId, final ServiceCallback<SparkBatchJob> serviceCallback) {
        return ServiceFuture.fromResponse(getSparkBatchJobWithServiceResponseAsync(batchId), serviceCallback);
    }

    /**
     * Gets a single spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJob object
     */
    public Observable<SparkBatchJob> getSparkBatchJobAsync(int batchId) {
        return getSparkBatchJobWithServiceResponseAsync(batchId).map(new Func1<ServiceResponse<SparkBatchJob>, SparkBatchJob>() {
            @Override
            public SparkBatchJob call(ServiceResponse<SparkBatchJob> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a single spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkBatchJob object
     */
    public Observable<ServiceResponse<SparkBatchJob>> getSparkBatchJobWithServiceResponseAsync(int batchId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.getSparkBatchJob(batchId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkBatchJob>>>() {
                @Override
                public Observable<ServiceResponse<SparkBatchJob>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkBatchJob> clientResponse = getSparkBatchJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SparkBatchJob> getSparkBatchJobDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SparkBatchJob, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SparkBatchJob>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Cancels a running spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobDeletedResult object if successful.
     */
    public SparkJobDeletedResult deleteSparkBatch(int batchId) {
        return deleteSparkBatchWithServiceResponseAsync(batchId).toBlocking().single().body();
    }

    /**
     * Cancels a running spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkJobDeletedResult> deleteSparkBatchAsync(int batchId, final ServiceCallback<SparkJobDeletedResult> serviceCallback) {
        return ServiceFuture.fromResponse(deleteSparkBatchWithServiceResponseAsync(batchId), serviceCallback);
    }

    /**
     * Cancels a running spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobDeletedResult object
     */
    public Observable<SparkJobDeletedResult> deleteSparkBatchAsync(int batchId) {
        return deleteSparkBatchWithServiceResponseAsync(batchId).map(new Func1<ServiceResponse<SparkJobDeletedResult>, SparkJobDeletedResult>() {
            @Override
            public SparkJobDeletedResult call(ServiceResponse<SparkJobDeletedResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancels a running spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobDeletedResult object
     */
    public Observable<ServiceResponse<SparkJobDeletedResult>> deleteSparkBatchWithServiceResponseAsync(int batchId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        final String requestedBy = null;
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.deleteSparkBatch(batchId, requestedBy, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkJobDeletedResult>>>() {
                @Override
                public Observable<ServiceResponse<SparkJobDeletedResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkJobDeletedResult> clientResponse = deleteSparkBatchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Cancels a running spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobDeletedResult object if successful.
     */
    public SparkJobDeletedResult deleteSparkBatch(int batchId, String requestedBy) {
        return deleteSparkBatchWithServiceResponseAsync(batchId, requestedBy).toBlocking().single().body();
    }

    /**
     * Cancels a running spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkJobDeletedResult> deleteSparkBatchAsync(int batchId, String requestedBy, final ServiceCallback<SparkJobDeletedResult> serviceCallback) {
        return ServiceFuture.fromResponse(deleteSparkBatchWithServiceResponseAsync(batchId, requestedBy), serviceCallback);
    }

    /**
     * Cancels a running spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobDeletedResult object
     */
    public Observable<SparkJobDeletedResult> deleteSparkBatchAsync(int batchId, String requestedBy) {
        return deleteSparkBatchWithServiceResponseAsync(batchId, requestedBy).map(new Func1<ServiceResponse<SparkJobDeletedResult>, SparkJobDeletedResult>() {
            @Override
            public SparkJobDeletedResult call(ServiceResponse<SparkJobDeletedResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancels a running spark batch job.
     *
     * @param batchId Identifier for the batch job.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobDeletedResult object
     */
    public Observable<ServiceResponse<SparkJobDeletedResult>> deleteSparkBatchWithServiceResponseAsync(int batchId, String requestedBy) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.deleteSparkBatch(batchId, requestedBy, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkJobDeletedResult>>>() {
                @Override
                public Observable<ServiceResponse<SparkJobDeletedResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkJobDeletedResult> clientResponse = deleteSparkBatchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SparkJobDeletedResult> deleteSparkBatchDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SparkJobDeletedResult, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SparkJobDeletedResult>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a single spark batch job logs.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobLog object if successful.
     */
    public SparkJobLog getSparkBatchLog(int batchId) {
        return getSparkBatchLogWithServiceResponseAsync(batchId).toBlocking().single().body();
    }

    /**
     * Gets a single spark batch job logs.
     *
     * @param batchId Identifier for the batch job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkJobLog> getSparkBatchLogAsync(int batchId, final ServiceCallback<SparkJobLog> serviceCallback) {
        return ServiceFuture.fromResponse(getSparkBatchLogWithServiceResponseAsync(batchId), serviceCallback);
    }

    /**
     * Gets a single spark batch job logs.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobLog object
     */
    public Observable<SparkJobLog> getSparkBatchLogAsync(int batchId) {
        return getSparkBatchLogWithServiceResponseAsync(batchId).map(new Func1<ServiceResponse<SparkJobLog>, SparkJobLog>() {
            @Override
            public SparkJobLog call(ServiceResponse<SparkJobLog> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a single spark batch job logs.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobLog object
     */
    public Observable<ServiceResponse<SparkJobLog>> getSparkBatchLogWithServiceResponseAsync(int batchId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        final Integer from = null;
        final Integer size = null;
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.getSparkBatchLog(batchId, from, size, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkJobLog>>>() {
                @Override
                public Observable<ServiceResponse<SparkJobLog>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkJobLog> clientResponse = getSparkBatchLogDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets a single spark batch job logs.
     *
     * @param batchId Identifier for the batch job.
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobLog object if successful.
     */
    public SparkJobLog getSparkBatchLog(int batchId, Integer from, Integer size) {
        return getSparkBatchLogWithServiceResponseAsync(batchId, from, size).toBlocking().single().body();
    }

    /**
     * Gets a single spark batch job logs.
     *
     * @param batchId Identifier for the batch job.
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkJobLog> getSparkBatchLogAsync(int batchId, Integer from, Integer size, final ServiceCallback<SparkJobLog> serviceCallback) {
        return ServiceFuture.fromResponse(getSparkBatchLogWithServiceResponseAsync(batchId, from, size), serviceCallback);
    }

    /**
     * Gets a single spark batch job logs.
     *
     * @param batchId Identifier for the batch job.
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobLog object
     */
    public Observable<SparkJobLog> getSparkBatchLogAsync(int batchId, Integer from, Integer size) {
        return getSparkBatchLogWithServiceResponseAsync(batchId, from, size).map(new Func1<ServiceResponse<SparkJobLog>, SparkJobLog>() {
            @Override
            public SparkJobLog call(ServiceResponse<SparkJobLog> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a single spark batch job logs.
     *
     * @param batchId Identifier for the batch job.
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobLog object
     */
    public Observable<ServiceResponse<SparkJobLog>> getSparkBatchLogWithServiceResponseAsync(int batchId, Integer from, Integer size) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.getSparkBatchLog(batchId, from, size, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkJobLog>>>() {
                @Override
                public Observable<ServiceResponse<SparkJobLog>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkJobLog> clientResponse = getSparkBatchLogDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SparkJobLog> getSparkBatchLogDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SparkJobLog, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SparkJobLog>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a single spark batch state.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobState object if successful.
     */
    public SparkJobState getSparkBatchState(int batchId) {
        return getSparkBatchStateWithServiceResponseAsync(batchId).toBlocking().single().body();
    }

    /**
     * Gets a single spark batch state.
     *
     * @param batchId Identifier for the batch job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkJobState> getSparkBatchStateAsync(int batchId, final ServiceCallback<SparkJobState> serviceCallback) {
        return ServiceFuture.fromResponse(getSparkBatchStateWithServiceResponseAsync(batchId), serviceCallback);
    }

    /**
     * Gets a single spark batch state.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobState object
     */
    public Observable<SparkJobState> getSparkBatchStateAsync(int batchId) {
        return getSparkBatchStateWithServiceResponseAsync(batchId).map(new Func1<ServiceResponse<SparkJobState>, SparkJobState>() {
            @Override
            public SparkJobState call(ServiceResponse<SparkJobState> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a single spark batch state.
     *
     * @param batchId Identifier for the batch job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobState object
     */
    public Observable<ServiceResponse<SparkJobState>> getSparkBatchStateWithServiceResponseAsync(int batchId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.getSparkBatchState(batchId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkJobState>>>() {
                @Override
                public Observable<ServiceResponse<SparkJobState>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkJobState> clientResponse = getSparkBatchStateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SparkJobState> getSparkBatchStateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SparkJobState, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SparkJobState>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List all spark sessions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkSessionCollection object if successful.
     */
    public SparkSessionCollection listSparkSessionJob() {
        return listSparkSessionJobWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * List all spark sessions.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkSessionCollection> listSparkSessionJobAsync(final ServiceCallback<SparkSessionCollection> serviceCallback) {
        return ServiceFuture.fromResponse(listSparkSessionJobWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * List all spark sessions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionCollection object
     */
    public Observable<SparkSessionCollection> listSparkSessionJobAsync() {
        return listSparkSessionJobWithServiceResponseAsync().map(new Func1<ServiceResponse<SparkSessionCollection>, SparkSessionCollection>() {
            @Override
            public SparkSessionCollection call(ServiceResponse<SparkSessionCollection> response) {
                return response.body();
            }
        });
    }

    /**
     * List all spark sessions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionCollection object
     */
    public Observable<ServiceResponse<SparkSessionCollection>> listSparkSessionJobWithServiceResponseAsync() {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        final Integer from = null;
        final Integer size = null;
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.listSparkSessionJob(from, size, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkSessionCollection>>>() {
                @Override
                public Observable<ServiceResponse<SparkSessionCollection>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkSessionCollection> clientResponse = listSparkSessionJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List all spark sessions.
     *
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkSessionCollection object if successful.
     */
    public SparkSessionCollection listSparkSessionJob(Integer from, Integer size) {
        return listSparkSessionJobWithServiceResponseAsync(from, size).toBlocking().single().body();
    }

    /**
     * List all spark sessions.
     *
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkSessionCollection> listSparkSessionJobAsync(Integer from, Integer size, final ServiceCallback<SparkSessionCollection> serviceCallback) {
        return ServiceFuture.fromResponse(listSparkSessionJobWithServiceResponseAsync(from, size), serviceCallback);
    }

    /**
     * List all spark sessions.
     *
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionCollection object
     */
    public Observable<SparkSessionCollection> listSparkSessionJobAsync(Integer from, Integer size) {
        return listSparkSessionJobWithServiceResponseAsync(from, size).map(new Func1<ServiceResponse<SparkSessionCollection>, SparkSessionCollection>() {
            @Override
            public SparkSessionCollection call(ServiceResponse<SparkSessionCollection> response) {
                return response.body();
            }
        });
    }

    /**
     * List all spark sessions.
     *
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionCollection object
     */
    public Observable<ServiceResponse<SparkSessionCollection>> listSparkSessionJobWithServiceResponseAsync(Integer from, Integer size) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.listSparkSessionJob(from, size, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkSessionCollection>>>() {
                @Override
                public Observable<ServiceResponse<SparkSessionCollection>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkSessionCollection> clientResponse = listSparkSessionJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SparkSessionCollection> listSparkSessionJobDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SparkSessionCollection, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SparkSessionCollection>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a new spark session.
     *
     * @param sparkSessionJobRequest Livy compatible session job request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkSessionJob object if successful.
     */
    public SparkSessionJob submitSparkSessionJob(SparkSessionJobRequest sparkSessionJobRequest) {
        return submitSparkSessionJobWithServiceResponseAsync(sparkSessionJobRequest).toBlocking().single().body();
    }

    /**
     * Create a new spark session.
     *
     * @param sparkSessionJobRequest Livy compatible session job request payload.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkSessionJob> submitSparkSessionJobAsync(SparkSessionJobRequest sparkSessionJobRequest, final ServiceCallback<SparkSessionJob> serviceCallback) {
        return ServiceFuture.fromResponse(submitSparkSessionJobWithServiceResponseAsync(sparkSessionJobRequest), serviceCallback);
    }

    /**
     * Create a new spark session.
     *
     * @param sparkSessionJobRequest Livy compatible session job request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionJob object
     */
    public Observable<SparkSessionJob> submitSparkSessionJobAsync(SparkSessionJobRequest sparkSessionJobRequest) {
        return submitSparkSessionJobWithServiceResponseAsync(sparkSessionJobRequest).map(new Func1<ServiceResponse<SparkSessionJob>, SparkSessionJob>() {
            @Override
            public SparkSessionJob call(ServiceResponse<SparkSessionJob> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a new spark session.
     *
     * @param sparkSessionJobRequest Livy compatible session job request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionJob object
     */
    public Observable<ServiceResponse<SparkSessionJob>> submitSparkSessionJobWithServiceResponseAsync(SparkSessionJobRequest sparkSessionJobRequest) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (sparkSessionJobRequest == null) {
            throw new IllegalArgumentException("Parameter sparkSessionJobRequest is required and cannot be null.");
        }
        Validator.validate(sparkSessionJobRequest);
        final String requestedBy = null;
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.submitSparkSessionJob(requestedBy, sparkSessionJobRequest, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkSessionJob>>>() {
                @Override
                public Observable<ServiceResponse<SparkSessionJob>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkSessionJob> clientResponse = submitSparkSessionJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create a new spark session.
     *
     * @param sparkSessionJobRequest Livy compatible session job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkSessionJob object if successful.
     */
    public SparkSessionJob submitSparkSessionJob(SparkSessionJobRequest sparkSessionJobRequest, String requestedBy) {
        return submitSparkSessionJobWithServiceResponseAsync(sparkSessionJobRequest, requestedBy).toBlocking().single().body();
    }

    /**
     * Create a new spark session.
     *
     * @param sparkSessionJobRequest Livy compatible session job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkSessionJob> submitSparkSessionJobAsync(SparkSessionJobRequest sparkSessionJobRequest, String requestedBy, final ServiceCallback<SparkSessionJob> serviceCallback) {
        return ServiceFuture.fromResponse(submitSparkSessionJobWithServiceResponseAsync(sparkSessionJobRequest, requestedBy), serviceCallback);
    }

    /**
     * Create a new spark session.
     *
     * @param sparkSessionJobRequest Livy compatible session job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionJob object
     */
    public Observable<SparkSessionJob> submitSparkSessionJobAsync(SparkSessionJobRequest sparkSessionJobRequest, String requestedBy) {
        return submitSparkSessionJobWithServiceResponseAsync(sparkSessionJobRequest, requestedBy).map(new Func1<ServiceResponse<SparkSessionJob>, SparkSessionJob>() {
            @Override
            public SparkSessionJob call(ServiceResponse<SparkSessionJob> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a new spark session.
     *
     * @param sparkSessionJobRequest Livy compatible session job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionJob object
     */
    public Observable<ServiceResponse<SparkSessionJob>> submitSparkSessionJobWithServiceResponseAsync(SparkSessionJobRequest sparkSessionJobRequest, String requestedBy) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (sparkSessionJobRequest == null) {
            throw new IllegalArgumentException("Parameter sparkSessionJobRequest is required and cannot be null.");
        }
        Validator.validate(sparkSessionJobRequest);
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.submitSparkSessionJob(requestedBy, sparkSessionJobRequest, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkSessionJob>>>() {
                @Override
                public Observable<ServiceResponse<SparkSessionJob>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkSessionJob> clientResponse = submitSparkSessionJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SparkSessionJob> submitSparkSessionJobDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SparkSessionJob, CloudException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<SparkSessionJob>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a single spark session.
     *
     * @param sessionId Identifier for the session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkSessionJob object if successful.
     */
    public SparkSessionJob getSparkSessionJob(int sessionId) {
        return getSparkSessionJobWithServiceResponseAsync(sessionId).toBlocking().single().body();
    }

    /**
     * Gets a single spark session.
     *
     * @param sessionId Identifier for the session.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkSessionJob> getSparkSessionJobAsync(int sessionId, final ServiceCallback<SparkSessionJob> serviceCallback) {
        return ServiceFuture.fromResponse(getSparkSessionJobWithServiceResponseAsync(sessionId), serviceCallback);
    }

    /**
     * Gets a single spark session.
     *
     * @param sessionId Identifier for the session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionJob object
     */
    public Observable<SparkSessionJob> getSparkSessionJobAsync(int sessionId) {
        return getSparkSessionJobWithServiceResponseAsync(sessionId).map(new Func1<ServiceResponse<SparkSessionJob>, SparkSessionJob>() {
            @Override
            public SparkSessionJob call(ServiceResponse<SparkSessionJob> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a single spark session.
     *
     * @param sessionId Identifier for the session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkSessionJob object
     */
    public Observable<ServiceResponse<SparkSessionJob>> getSparkSessionJobWithServiceResponseAsync(int sessionId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.getSparkSessionJob(sessionId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkSessionJob>>>() {
                @Override
                public Observable<ServiceResponse<SparkSessionJob>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkSessionJob> clientResponse = getSparkSessionJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SparkSessionJob> getSparkSessionJobDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SparkSessionJob, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SparkSessionJob>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Cancels a running spark session.
     *
     * @param sessionId Identifier for the session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobDeletedResult object if successful.
     */
    public SparkJobDeletedResult deleteSparkSessionJob(int sessionId) {
        return deleteSparkSessionJobWithServiceResponseAsync(sessionId).toBlocking().single().body();
    }

    /**
     * Cancels a running spark session.
     *
     * @param sessionId Identifier for the session.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkJobDeletedResult> deleteSparkSessionJobAsync(int sessionId, final ServiceCallback<SparkJobDeletedResult> serviceCallback) {
        return ServiceFuture.fromResponse(deleteSparkSessionJobWithServiceResponseAsync(sessionId), serviceCallback);
    }

    /**
     * Cancels a running spark session.
     *
     * @param sessionId Identifier for the session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobDeletedResult object
     */
    public Observable<SparkJobDeletedResult> deleteSparkSessionJobAsync(int sessionId) {
        return deleteSparkSessionJobWithServiceResponseAsync(sessionId).map(new Func1<ServiceResponse<SparkJobDeletedResult>, SparkJobDeletedResult>() {
            @Override
            public SparkJobDeletedResult call(ServiceResponse<SparkJobDeletedResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancels a running spark session.
     *
     * @param sessionId Identifier for the session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobDeletedResult object
     */
    public Observable<ServiceResponse<SparkJobDeletedResult>> deleteSparkSessionJobWithServiceResponseAsync(int sessionId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        final String requestedBy = null;
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.deleteSparkSessionJob(sessionId, requestedBy, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkJobDeletedResult>>>() {
                @Override
                public Observable<ServiceResponse<SparkJobDeletedResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkJobDeletedResult> clientResponse = deleteSparkSessionJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Cancels a running spark session.
     *
     * @param sessionId Identifier for the session.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobDeletedResult object if successful.
     */
    public SparkJobDeletedResult deleteSparkSessionJob(int sessionId, String requestedBy) {
        return deleteSparkSessionJobWithServiceResponseAsync(sessionId, requestedBy).toBlocking().single().body();
    }

    /**
     * Cancels a running spark session.
     *
     * @param sessionId Identifier for the session.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkJobDeletedResult> deleteSparkSessionJobAsync(int sessionId, String requestedBy, final ServiceCallback<SparkJobDeletedResult> serviceCallback) {
        return ServiceFuture.fromResponse(deleteSparkSessionJobWithServiceResponseAsync(sessionId, requestedBy), serviceCallback);
    }

    /**
     * Cancels a running spark session.
     *
     * @param sessionId Identifier for the session.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobDeletedResult object
     */
    public Observable<SparkJobDeletedResult> deleteSparkSessionJobAsync(int sessionId, String requestedBy) {
        return deleteSparkSessionJobWithServiceResponseAsync(sessionId, requestedBy).map(new Func1<ServiceResponse<SparkJobDeletedResult>, SparkJobDeletedResult>() {
            @Override
            public SparkJobDeletedResult call(ServiceResponse<SparkJobDeletedResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancels a running spark session.
     *
     * @param sessionId Identifier for the session.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobDeletedResult object
     */
    public Observable<ServiceResponse<SparkJobDeletedResult>> deleteSparkSessionJobWithServiceResponseAsync(int sessionId, String requestedBy) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.deleteSparkSessionJob(sessionId, requestedBy, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkJobDeletedResult>>>() {
                @Override
                public Observable<ServiceResponse<SparkJobDeletedResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkJobDeletedResult> clientResponse = deleteSparkSessionJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SparkJobDeletedResult> deleteSparkSessionJobDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SparkJobDeletedResult, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SparkJobDeletedResult>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a single spark session job logs.
     *
     * @param sessionId Identifier for the session job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobLog object if successful.
     */
    public SparkJobLog getSparkSessionLog(int sessionId) {
        return getSparkSessionLogWithServiceResponseAsync(sessionId).toBlocking().single().body();
    }

    /**
     * Gets a single spark session job logs.
     *
     * @param sessionId Identifier for the session job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkJobLog> getSparkSessionLogAsync(int sessionId, final ServiceCallback<SparkJobLog> serviceCallback) {
        return ServiceFuture.fromResponse(getSparkSessionLogWithServiceResponseAsync(sessionId), serviceCallback);
    }

    /**
     * Gets a single spark session job logs.
     *
     * @param sessionId Identifier for the session job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobLog object
     */
    public Observable<SparkJobLog> getSparkSessionLogAsync(int sessionId) {
        return getSparkSessionLogWithServiceResponseAsync(sessionId).map(new Func1<ServiceResponse<SparkJobLog>, SparkJobLog>() {
            @Override
            public SparkJobLog call(ServiceResponse<SparkJobLog> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a single spark session job logs.
     *
     * @param sessionId Identifier for the session job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobLog object
     */
    public Observable<ServiceResponse<SparkJobLog>> getSparkSessionLogWithServiceResponseAsync(int sessionId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        final Integer from = null;
        final Integer size = null;
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.getSparkSessionLog(sessionId, from, size, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkJobLog>>>() {
                @Override
                public Observable<ServiceResponse<SparkJobLog>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkJobLog> clientResponse = getSparkSessionLogDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets a single spark session job logs.
     *
     * @param sessionId Identifier for the session job.
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobLog object if successful.
     */
    public SparkJobLog getSparkSessionLog(int sessionId, Integer from, Integer size) {
        return getSparkSessionLogWithServiceResponseAsync(sessionId, from, size).toBlocking().single().body();
    }

    /**
     * Gets a single spark session job logs.
     *
     * @param sessionId Identifier for the session job.
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkJobLog> getSparkSessionLogAsync(int sessionId, Integer from, Integer size, final ServiceCallback<SparkJobLog> serviceCallback) {
        return ServiceFuture.fromResponse(getSparkSessionLogWithServiceResponseAsync(sessionId, from, size), serviceCallback);
    }

    /**
     * Gets a single spark session job logs.
     *
     * @param sessionId Identifier for the session job.
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobLog object
     */
    public Observable<SparkJobLog> getSparkSessionLogAsync(int sessionId, Integer from, Integer size) {
        return getSparkSessionLogWithServiceResponseAsync(sessionId, from, size).map(new Func1<ServiceResponse<SparkJobLog>, SparkJobLog>() {
            @Override
            public SparkJobLog call(ServiceResponse<SparkJobLog> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a single spark session job logs.
     *
     * @param sessionId Identifier for the session job.
     * @param from Optional param specifying which index the list should begin from.
     * @param size Optional param specifying the size of the returned list.
                 By default it is 20 and that is the maximum.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobLog object
     */
    public Observable<ServiceResponse<SparkJobLog>> getSparkSessionLogWithServiceResponseAsync(int sessionId, Integer from, Integer size) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.getSparkSessionLog(sessionId, from, size, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkJobLog>>>() {
                @Override
                public Observable<ServiceResponse<SparkJobLog>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkJobLog> clientResponse = getSparkSessionLogDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SparkJobLog> getSparkSessionLogDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SparkJobLog, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SparkJobLog>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a single spark session job state.
     *
     * @param sessionId Identifier for the session job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkJobState object if successful.
     */
    public SparkJobState getSparkSessionState(int sessionId) {
        return getSparkSessionStateWithServiceResponseAsync(sessionId).toBlocking().single().body();
    }

    /**
     * Gets a single spark session job state.
     *
     * @param sessionId Identifier for the session job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkJobState> getSparkSessionStateAsync(int sessionId, final ServiceCallback<SparkJobState> serviceCallback) {
        return ServiceFuture.fromResponse(getSparkSessionStateWithServiceResponseAsync(sessionId), serviceCallback);
    }

    /**
     * Gets a single spark session job state.
     *
     * @param sessionId Identifier for the session job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobState object
     */
    public Observable<SparkJobState> getSparkSessionStateAsync(int sessionId) {
        return getSparkSessionStateWithServiceResponseAsync(sessionId).map(new Func1<ServiceResponse<SparkJobState>, SparkJobState>() {
            @Override
            public SparkJobState call(ServiceResponse<SparkJobState> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a single spark session job state.
     *
     * @param sessionId Identifier for the session job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkJobState object
     */
    public Observable<ServiceResponse<SparkJobState>> getSparkSessionStateWithServiceResponseAsync(int sessionId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.getSparkSessionState(sessionId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkJobState>>>() {
                @Override
                public Observable<ServiceResponse<SparkJobState>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkJobState> clientResponse = getSparkSessionStateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SparkJobState> getSparkSessionStateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SparkJobState, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SparkJobState>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a list of statements within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkStatementCollection object if successful.
     */
    public SparkStatementCollection listSparkStatementJob(int sessionId) {
        return listSparkStatementJobWithServiceResponseAsync(sessionId).toBlocking().single().body();
    }

    /**
     * Gets a list of statements within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkStatementCollection> listSparkStatementJobAsync(int sessionId, final ServiceCallback<SparkStatementCollection> serviceCallback) {
        return ServiceFuture.fromResponse(listSparkStatementJobWithServiceResponseAsync(sessionId), serviceCallback);
    }

    /**
     * Gets a list of statements within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatementCollection object
     */
    public Observable<SparkStatementCollection> listSparkStatementJobAsync(int sessionId) {
        return listSparkStatementJobWithServiceResponseAsync(sessionId).map(new Func1<ServiceResponse<SparkStatementCollection>, SparkStatementCollection>() {
            @Override
            public SparkStatementCollection call(ServiceResponse<SparkStatementCollection> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a list of statements within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatementCollection object
     */
    public Observable<ServiceResponse<SparkStatementCollection>> listSparkStatementJobWithServiceResponseAsync(int sessionId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.listSparkStatementJob(sessionId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkStatementCollection>>>() {
                @Override
                public Observable<ServiceResponse<SparkStatementCollection>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkStatementCollection> clientResponse = listSparkStatementJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SparkStatementCollection> listSparkStatementJobDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SparkStatementCollection, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SparkStatementCollection>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param sparkStatementRequest Livy compatible batch job request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkStatement object if successful.
     */
    public SparkStatement submitSparkStatementJob(int sessionId, SparkStatementRequest sparkStatementRequest) {
        return submitSparkStatementJobWithServiceResponseAsync(sessionId, sparkStatementRequest).toBlocking().single().body();
    }

    /**
     * Create a statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param sparkStatementRequest Livy compatible batch job request payload.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkStatement> submitSparkStatementJobAsync(int sessionId, SparkStatementRequest sparkStatementRequest, final ServiceCallback<SparkStatement> serviceCallback) {
        return ServiceFuture.fromResponse(submitSparkStatementJobWithServiceResponseAsync(sessionId, sparkStatementRequest), serviceCallback);
    }

    /**
     * Create a statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param sparkStatementRequest Livy compatible batch job request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatement object
     */
    public Observable<SparkStatement> submitSparkStatementJobAsync(int sessionId, SparkStatementRequest sparkStatementRequest) {
        return submitSparkStatementJobWithServiceResponseAsync(sessionId, sparkStatementRequest).map(new Func1<ServiceResponse<SparkStatement>, SparkStatement>() {
            @Override
            public SparkStatement call(ServiceResponse<SparkStatement> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param sparkStatementRequest Livy compatible batch job request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatement object
     */
    public Observable<ServiceResponse<SparkStatement>> submitSparkStatementJobWithServiceResponseAsync(int sessionId, SparkStatementRequest sparkStatementRequest) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (sparkStatementRequest == null) {
            throw new IllegalArgumentException("Parameter sparkStatementRequest is required and cannot be null.");
        }
        Validator.validate(sparkStatementRequest);
        final String requestedBy = null;
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.submitSparkStatementJob(sessionId, requestedBy, sparkStatementRequest, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkStatement>>>() {
                @Override
                public Observable<ServiceResponse<SparkStatement>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkStatement> clientResponse = submitSparkStatementJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create a statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param sparkStatementRequest Livy compatible batch job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkStatement object if successful.
     */
    public SparkStatement submitSparkStatementJob(int sessionId, SparkStatementRequest sparkStatementRequest, String requestedBy) {
        return submitSparkStatementJobWithServiceResponseAsync(sessionId, sparkStatementRequest, requestedBy).toBlocking().single().body();
    }

    /**
     * Create a statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param sparkStatementRequest Livy compatible batch job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkStatement> submitSparkStatementJobAsync(int sessionId, SparkStatementRequest sparkStatementRequest, String requestedBy, final ServiceCallback<SparkStatement> serviceCallback) {
        return ServiceFuture.fromResponse(submitSparkStatementJobWithServiceResponseAsync(sessionId, sparkStatementRequest, requestedBy), serviceCallback);
    }

    /**
     * Create a statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param sparkStatementRequest Livy compatible batch job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatement object
     */
    public Observable<SparkStatement> submitSparkStatementJobAsync(int sessionId, SparkStatementRequest sparkStatementRequest, String requestedBy) {
        return submitSparkStatementJobWithServiceResponseAsync(sessionId, sparkStatementRequest, requestedBy).map(new Func1<ServiceResponse<SparkStatement>, SparkStatement>() {
            @Override
            public SparkStatement call(ServiceResponse<SparkStatement> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param sparkStatementRequest Livy compatible batch job request payload.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatement object
     */
    public Observable<ServiceResponse<SparkStatement>> submitSparkStatementJobWithServiceResponseAsync(int sessionId, SparkStatementRequest sparkStatementRequest, String requestedBy) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (sparkStatementRequest == null) {
            throw new IllegalArgumentException("Parameter sparkStatementRequest is required and cannot be null.");
        }
        Validator.validate(sparkStatementRequest);
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.submitSparkStatementJob(sessionId, requestedBy, sparkStatementRequest, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkStatement>>>() {
                @Override
                public Observable<ServiceResponse<SparkStatement>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkStatement> clientResponse = submitSparkStatementJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SparkStatement> submitSparkStatementJobDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SparkStatement, CloudException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<SparkStatement>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a single statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkStatement object if successful.
     */
    public SparkStatement getSparkStatementJob(int sessionId, int statementId) {
        return getSparkStatementJobWithServiceResponseAsync(sessionId, statementId).toBlocking().single().body();
    }

    /**
     * Gets a single statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkStatement> getSparkStatementJobAsync(int sessionId, int statementId, final ServiceCallback<SparkStatement> serviceCallback) {
        return ServiceFuture.fromResponse(getSparkStatementJobWithServiceResponseAsync(sessionId, statementId), serviceCallback);
    }

    /**
     * Gets a single statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatement object
     */
    public Observable<SparkStatement> getSparkStatementJobAsync(int sessionId, int statementId) {
        return getSparkStatementJobWithServiceResponseAsync(sessionId, statementId).map(new Func1<ServiceResponse<SparkStatement>, SparkStatement>() {
            @Override
            public SparkStatement call(ServiceResponse<SparkStatement> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a single statement within a spark session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatement object
     */
    public Observable<ServiceResponse<SparkStatement>> getSparkStatementJobWithServiceResponseAsync(int sessionId, int statementId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.getSparkStatementJob(sessionId, statementId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkStatement>>>() {
                @Override
                public Observable<ServiceResponse<SparkStatement>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkStatement> clientResponse = getSparkStatementJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SparkStatement> getSparkStatementJobDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SparkStatement, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SparkStatement>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Kill a statement within a session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkStatementCancellationResult object if successful.
     */
    public SparkStatementCancellationResult deleteSparkStatementJob(int sessionId, int statementId) {
        return deleteSparkStatementJobWithServiceResponseAsync(sessionId, statementId).toBlocking().single().body();
    }

    /**
     * Kill a statement within a session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkStatementCancellationResult> deleteSparkStatementJobAsync(int sessionId, int statementId, final ServiceCallback<SparkStatementCancellationResult> serviceCallback) {
        return ServiceFuture.fromResponse(deleteSparkStatementJobWithServiceResponseAsync(sessionId, statementId), serviceCallback);
    }

    /**
     * Kill a statement within a session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatementCancellationResult object
     */
    public Observable<SparkStatementCancellationResult> deleteSparkStatementJobAsync(int sessionId, int statementId) {
        return deleteSparkStatementJobWithServiceResponseAsync(sessionId, statementId).map(new Func1<ServiceResponse<SparkStatementCancellationResult>, SparkStatementCancellationResult>() {
            @Override
            public SparkStatementCancellationResult call(ServiceResponse<SparkStatementCancellationResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Kill a statement within a session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatementCancellationResult object
     */
    public Observable<ServiceResponse<SparkStatementCancellationResult>> deleteSparkStatementJobWithServiceResponseAsync(int sessionId, int statementId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        final String requestedBy = null;
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.deleteSparkStatementJob(sessionId, statementId, requestedBy, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkStatementCancellationResult>>>() {
                @Override
                public Observable<ServiceResponse<SparkStatementCancellationResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkStatementCancellationResult> clientResponse = deleteSparkStatementJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Kill a statement within a session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SparkStatementCancellationResult object if successful.
     */
    public SparkStatementCancellationResult deleteSparkStatementJob(int sessionId, int statementId, String requestedBy) {
        return deleteSparkStatementJobWithServiceResponseAsync(sessionId, statementId, requestedBy).toBlocking().single().body();
    }

    /**
     * Kill a statement within a session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SparkStatementCancellationResult> deleteSparkStatementJobAsync(int sessionId, int statementId, String requestedBy, final ServiceCallback<SparkStatementCancellationResult> serviceCallback) {
        return ServiceFuture.fromResponse(deleteSparkStatementJobWithServiceResponseAsync(sessionId, statementId, requestedBy), serviceCallback);
    }

    /**
     * Kill a statement within a session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatementCancellationResult object
     */
    public Observable<SparkStatementCancellationResult> deleteSparkStatementJobAsync(int sessionId, int statementId, String requestedBy) {
        return deleteSparkStatementJobWithServiceResponseAsync(sessionId, statementId, requestedBy).map(new Func1<ServiceResponse<SparkStatementCancellationResult>, SparkStatementCancellationResult>() {
            @Override
            public SparkStatementCancellationResult call(ServiceResponse<SparkStatementCancellationResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Kill a statement within a session.
     *
     * @param sessionId Identifier for the session.
     * @param statementId Identifier for the statement.
     * @param requestedBy Add default value for X-Requested-By in header.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SparkStatementCancellationResult object
     */
    public Observable<ServiceResponse<SparkStatementCancellationResult>> deleteSparkStatementJobWithServiceResponseAsync(int sessionId, int statementId, String requestedBy) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{endpoint}", this.client.endpoint());
        return service.deleteSparkStatementJob(sessionId, statementId, requestedBy, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SparkStatementCancellationResult>>>() {
                @Override
                public Observable<ServiceResponse<SparkStatementCancellationResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SparkStatementCancellationResult> clientResponse = deleteSparkStatementJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SparkStatementCancellationResult> deleteSparkStatementJobDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SparkStatementCancellationResult, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SparkStatementCancellationResult>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
