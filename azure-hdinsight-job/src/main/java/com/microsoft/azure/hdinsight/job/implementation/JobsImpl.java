/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.hdinsight.job.implementation;

import retrofit2.Retrofit;
import com.microsoft.azure.hdinsight.job.Jobs;
import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.hdinsight.job.models.AppState;
import com.microsoft.azure.hdinsight.job.models.JobDetailRootJsonObject;
import com.microsoft.azure.hdinsight.job.models.JobListJsonObject;
import com.microsoft.azure.hdinsight.job.models.JobOperationsErrorResponseException;
import com.microsoft.azure.hdinsight.job.models.JobSubmissionJsonResponse;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.InputStream;
import java.io.IOException;
import java.util.List;
import okhttp3.MediaType;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Jobs.
 */
public class JobsImpl implements Jobs {
    /** The Retrofit service to perform REST calls. */
    private JobsService service;
    /** The service client containing this operation class. */
    private HDInsightJobManagementClientImpl client;

    /**
     * Initializes an instance of JobsImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public JobsImpl(Retrofit retrofit, HDInsightJobManagementClientImpl client) {
        this.service = retrofit.create(JobsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Jobs to be
     * used by Retrofit to perform actually REST calls.
     */
    interface JobsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs get" })
        @GET("templeton/v1/jobs/{jobId}")
        Observable<Response<ResponseBody>> get(@Path("jobId") String jobId, @Query("user.name") String username, @Query("fields") String fields, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs kill" })
        @HTTP(path = "templeton/v1/jobs/{jobId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> kill(@Path("jobId") String jobId, @Query("user.name") String username, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs list" })
        @GET("templeton/v1/jobs")
        Observable<Response<ResponseBody>> list(@Query("user.name") String username, @Query("showall") String showall, @Query("fields") String fields, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs listAfterJobId" })
        @GET("templeton/v1/jobs")
        Observable<Response<ResponseBody>> listAfterJobId(@Query("user.name") String username, @Query("jobid") String jobid, @Query("numrecords") Integer numrecords, @Query("showall") String showall, @Query("fields") String fields, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/text", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs submitHiveJob" })
        @POST("templeton/v1/hive")
        Observable<Response<ResponseBody>> submitHiveJob(@Query("user.name") String username, @Body RequestBody content, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: text/plain", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs submitMapReduceJob" })
        @POST("templeton/v1/mapreduce/jar")
        Observable<Response<ResponseBody>> submitMapReduceJob(@Query("user.name") String username, @Body RequestBody content, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: text/plain", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs submitMapReduceStreamingJob" })
        @POST("templeton/v1/mapreduce/streaming")
        Observable<Response<ResponseBody>> submitMapReduceStreamingJob(@Query("user.name") String username, @Body RequestBody content, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: text/plain", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs submitPigJob" })
        @POST("templeton/v1/pig")
        Observable<Response<ResponseBody>> submitPigJob(@Query("user.name") String username, @Body RequestBody content, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: text/plain", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs submitSqoopJob" })
        @POST("templeton/v1/sqoop")
        Observable<Response<ResponseBody>> submitSqoopJob(@Query("user.name") String username, @Body RequestBody content, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.hdinsight.job.Jobs getAppState" })
        @GET("ws/v1/cluster/apps/{appId}/state")
        Observable<Response<ResponseBody>> getAppState(@Path("appId") String appId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets job details from the specified HDInsight cluster.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobDetailRootJsonObject object if successful.
     */
    public JobDetailRootJsonObject get(String jobId) {
        return getWithServiceResponseAsync(jobId).toBlocking().single().body();
    }

    /**
     * Gets job details from the specified HDInsight cluster.
     *
     * @param jobId The id of the job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobDetailRootJsonObject> getAsync(String jobId, final ServiceCallback<JobDetailRootJsonObject> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(jobId), serviceCallback);
    }

    /**
     * Gets job details from the specified HDInsight cluster.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDetailRootJsonObject object
     */
    public Observable<JobDetailRootJsonObject> getAsync(String jobId) {
        return getWithServiceResponseAsync(jobId).map(new Func1<ServiceResponse<JobDetailRootJsonObject>, JobDetailRootJsonObject>() {
            @Override
            public JobDetailRootJsonObject call(ServiceResponse<JobDetailRootJsonObject> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets job details from the specified HDInsight cluster.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDetailRootJsonObject object
     */
    public Observable<ServiceResponse<JobDetailRootJsonObject>> getWithServiceResponseAsync(String jobId) {
        if (this.client.clusterDnsName() == null) {
            throw new IllegalArgumentException("Parameter this.client.clusterDnsName() is required and cannot be null.");
        }
        if (jobId == null) {
            throw new IllegalArgumentException("Parameter jobId is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        final String fields = "*";
        String parameterizedHost = Joiner.on(", ").join("{clusterDnsName}", this.client.clusterDnsName());
        return service.get(jobId, this.client.username(), fields, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobDetailRootJsonObject>>>() {
                @Override
                public Observable<ServiceResponse<JobDetailRootJsonObject>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobDetailRootJsonObject> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobDetailRootJsonObject> getDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobDetailRootJsonObject, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobDetailRootJsonObject>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

    /**
     * Initiates cancel on given running job in the specified HDInsight.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobDetailRootJsonObject object if successful.
     */
    public JobDetailRootJsonObject kill(String jobId) {
        return killWithServiceResponseAsync(jobId).toBlocking().single().body();
    }

    /**
     * Initiates cancel on given running job in the specified HDInsight.
     *
     * @param jobId The id of the job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobDetailRootJsonObject> killAsync(String jobId, final ServiceCallback<JobDetailRootJsonObject> serviceCallback) {
        return ServiceFuture.fromResponse(killWithServiceResponseAsync(jobId), serviceCallback);
    }

    /**
     * Initiates cancel on given running job in the specified HDInsight.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDetailRootJsonObject object
     */
    public Observable<JobDetailRootJsonObject> killAsync(String jobId) {
        return killWithServiceResponseAsync(jobId).map(new Func1<ServiceResponse<JobDetailRootJsonObject>, JobDetailRootJsonObject>() {
            @Override
            public JobDetailRootJsonObject call(ServiceResponse<JobDetailRootJsonObject> response) {
                return response.body();
            }
        });
    }

    /**
     * Initiates cancel on given running job in the specified HDInsight.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobDetailRootJsonObject object
     */
    public Observable<ServiceResponse<JobDetailRootJsonObject>> killWithServiceResponseAsync(String jobId) {
        if (this.client.clusterDnsName() == null) {
            throw new IllegalArgumentException("Parameter this.client.clusterDnsName() is required and cannot be null.");
        }
        if (jobId == null) {
            throw new IllegalArgumentException("Parameter jobId is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{clusterDnsName}", this.client.clusterDnsName());
        return service.kill(jobId, this.client.username(), this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobDetailRootJsonObject>>>() {
                @Override
                public Observable<ServiceResponse<JobDetailRootJsonObject>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobDetailRootJsonObject> clientResponse = killDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobDetailRootJsonObject> killDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobDetailRootJsonObject, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobDetailRootJsonObject>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the list of jobs from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;JobListJsonObject&gt; object if successful.
     */
    public List<JobListJsonObject> list() {
        return listWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Gets the list of jobs from the specified HDInsight cluster.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobListJsonObject>> listAsync(final ServiceCallback<List<JobListJsonObject>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Gets the list of jobs from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    public Observable<List<JobListJsonObject>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<List<JobListJsonObject>>, List<JobListJsonObject>>() {
            @Override
            public List<JobListJsonObject> call(ServiceResponse<List<JobListJsonObject>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the list of jobs from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    public Observable<ServiceResponse<List<JobListJsonObject>>> listWithServiceResponseAsync() {
        if (this.client.clusterDnsName() == null) {
            throw new IllegalArgumentException("Parameter this.client.clusterDnsName() is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        final String showall = "true";
        final String fields = "*";
        String parameterizedHost = Joiner.on(", ").join("{clusterDnsName}", this.client.clusterDnsName());
        return service.list(this.client.username(), showall, fields, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<JobListJsonObject>>>>() {
                @Override
                public Observable<ServiceResponse<List<JobListJsonObject>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<JobListJsonObject>> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<JobListJsonObject>> listDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<JobListJsonObject>, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<JobListJsonObject>>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;JobListJsonObject&gt; object if successful.
     */
    public List<JobListJsonObject> listAfterJobId() {
        return listAfterJobIdWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobListJsonObject>> listAfterJobIdAsync(final ServiceCallback<List<JobListJsonObject>> serviceCallback) {
        return ServiceFuture.fromResponse(listAfterJobIdWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    public Observable<List<JobListJsonObject>> listAfterJobIdAsync() {
        return listAfterJobIdWithServiceResponseAsync().map(new Func1<ServiceResponse<List<JobListJsonObject>>, List<JobListJsonObject>>() {
            @Override
            public List<JobListJsonObject> call(ServiceResponse<List<JobListJsonObject>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    public Observable<ServiceResponse<List<JobListJsonObject>>> listAfterJobIdWithServiceResponseAsync() {
        if (this.client.clusterDnsName() == null) {
            throw new IllegalArgumentException("Parameter this.client.clusterDnsName() is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        final String showall = "true";
        final String fields = "*";
        final String jobid = null;
        final Integer numrecords = null;
        String parameterizedHost = Joiner.on(", ").join("{clusterDnsName}", this.client.clusterDnsName());
        return service.listAfterJobId(this.client.username(), jobid, numrecords, showall, fields, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<JobListJsonObject>>>>() {
                @Override
                public Observable<ServiceResponse<List<JobListJsonObject>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<JobListJsonObject>> clientResponse = listAfterJobIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param jobid JobId from where to list jobs.
     * @param numrecords Number of jobs to fetch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;JobListJsonObject&gt; object if successful.
     */
    public List<JobListJsonObject> listAfterJobId(String jobid, Integer numrecords) {
        return listAfterJobIdWithServiceResponseAsync(jobid, numrecords).toBlocking().single().body();
    }

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param jobid JobId from where to list jobs.
     * @param numrecords Number of jobs to fetch.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobListJsonObject>> listAfterJobIdAsync(String jobid, Integer numrecords, final ServiceCallback<List<JobListJsonObject>> serviceCallback) {
        return ServiceFuture.fromResponse(listAfterJobIdWithServiceResponseAsync(jobid, numrecords), serviceCallback);
    }

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param jobid JobId from where to list jobs.
     * @param numrecords Number of jobs to fetch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    public Observable<List<JobListJsonObject>> listAfterJobIdAsync(String jobid, Integer numrecords) {
        return listAfterJobIdWithServiceResponseAsync(jobid, numrecords).map(new Func1<ServiceResponse<List<JobListJsonObject>>, List<JobListJsonObject>>() {
            @Override
            public List<JobListJsonObject> call(ServiceResponse<List<JobListJsonObject>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     *
     * @param jobid JobId from where to list jobs.
     * @param numrecords Number of jobs to fetch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;JobListJsonObject&gt; object
     */
    public Observable<ServiceResponse<List<JobListJsonObject>>> listAfterJobIdWithServiceResponseAsync(String jobid, Integer numrecords) {
        if (this.client.clusterDnsName() == null) {
            throw new IllegalArgumentException("Parameter this.client.clusterDnsName() is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        final String showall = "true";
        final String fields = "*";
        String parameterizedHost = Joiner.on(", ").join("{clusterDnsName}", this.client.clusterDnsName());
        return service.listAfterJobId(this.client.username(), jobid, numrecords, showall, fields, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<JobListJsonObject>>>>() {
                @Override
                public Observable<ServiceResponse<List<JobListJsonObject>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<JobListJsonObject>> clientResponse = listAfterJobIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<JobListJsonObject>> listAfterJobIdDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<JobListJsonObject>, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<JobListJsonObject>>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

    /**
     * Submits a Hive job to an HDInsight cluster.
     *
     * @param content The content of the Hive job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    public JobSubmissionJsonResponse submitHiveJob(byte[] content) {
        return submitHiveJobWithServiceResponseAsync(content).toBlocking().single().body();
    }

    /**
     * Submits a Hive job to an HDInsight cluster.
     *
     * @param content The content of the Hive job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobSubmissionJsonResponse> submitHiveJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback) {
        return ServiceFuture.fromResponse(submitHiveJobWithServiceResponseAsync(content), serviceCallback);
    }

    /**
     * Submits a Hive job to an HDInsight cluster.
     *
     * @param content The content of the Hive job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<JobSubmissionJsonResponse> submitHiveJobAsync(byte[] content) {
        return submitHiveJobWithServiceResponseAsync(content).map(new Func1<ServiceResponse<JobSubmissionJsonResponse>, JobSubmissionJsonResponse>() {
            @Override
            public JobSubmissionJsonResponse call(ServiceResponse<JobSubmissionJsonResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Submits a Hive job to an HDInsight cluster.
     *
     * @param content The content of the Hive job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<ServiceResponse<JobSubmissionJsonResponse>> submitHiveJobWithServiceResponseAsync(byte[] content) {
        if (this.client.clusterDnsName() == null) {
            throw new IllegalArgumentException("Parameter this.client.clusterDnsName() is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        if (content == null) {
            throw new IllegalArgumentException("Parameter content is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{clusterDnsName}", this.client.clusterDnsName());
        RequestBody contentConverted = RequestBody.create(MediaType.parse("application/text"), content);
        return service.submitHiveJob(this.client.username(), contentConverted, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobSubmissionJsonResponse>>>() {
                @Override
                public Observable<ServiceResponse<JobSubmissionJsonResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobSubmissionJsonResponse> clientResponse = submitHiveJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobSubmissionJsonResponse> submitHiveJobDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobSubmissionJsonResponse, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobSubmissionJsonResponse>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

    /**
     * Submits a MapReduce job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    public JobSubmissionJsonResponse submitMapReduceJob(byte[] content) {
        return submitMapReduceJobWithServiceResponseAsync(content).toBlocking().single().body();
    }

    /**
     * Submits a MapReduce job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobSubmissionJsonResponse> submitMapReduceJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback) {
        return ServiceFuture.fromResponse(submitMapReduceJobWithServiceResponseAsync(content), serviceCallback);
    }

    /**
     * Submits a MapReduce job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<JobSubmissionJsonResponse> submitMapReduceJobAsync(byte[] content) {
        return submitMapReduceJobWithServiceResponseAsync(content).map(new Func1<ServiceResponse<JobSubmissionJsonResponse>, JobSubmissionJsonResponse>() {
            @Override
            public JobSubmissionJsonResponse call(ServiceResponse<JobSubmissionJsonResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Submits a MapReduce job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<ServiceResponse<JobSubmissionJsonResponse>> submitMapReduceJobWithServiceResponseAsync(byte[] content) {
        if (this.client.clusterDnsName() == null) {
            throw new IllegalArgumentException("Parameter this.client.clusterDnsName() is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        if (content == null) {
            throw new IllegalArgumentException("Parameter content is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{clusterDnsName}", this.client.clusterDnsName());
        RequestBody contentConverted = RequestBody.create(MediaType.parse("text/plain"), content);
        return service.submitMapReduceJob(this.client.username(), contentConverted, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobSubmissionJsonResponse>>>() {
                @Override
                public Observable<ServiceResponse<JobSubmissionJsonResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobSubmissionJsonResponse> clientResponse = submitMapReduceJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobSubmissionJsonResponse> submitMapReduceJobDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobSubmissionJsonResponse, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobSubmissionJsonResponse>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

    /**
     * Submits a MapReduce streaming job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    public JobSubmissionJsonResponse submitMapReduceStreamingJob(byte[] content) {
        return submitMapReduceStreamingJobWithServiceResponseAsync(content).toBlocking().single().body();
    }

    /**
     * Submits a MapReduce streaming job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobSubmissionJsonResponse> submitMapReduceStreamingJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback) {
        return ServiceFuture.fromResponse(submitMapReduceStreamingJobWithServiceResponseAsync(content), serviceCallback);
    }

    /**
     * Submits a MapReduce streaming job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<JobSubmissionJsonResponse> submitMapReduceStreamingJobAsync(byte[] content) {
        return submitMapReduceStreamingJobWithServiceResponseAsync(content).map(new Func1<ServiceResponse<JobSubmissionJsonResponse>, JobSubmissionJsonResponse>() {
            @Override
            public JobSubmissionJsonResponse call(ServiceResponse<JobSubmissionJsonResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Submits a MapReduce streaming job to an HDInsight cluster.
     *
     * @param content The content of the MapReduce job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<ServiceResponse<JobSubmissionJsonResponse>> submitMapReduceStreamingJobWithServiceResponseAsync(byte[] content) {
        if (this.client.clusterDnsName() == null) {
            throw new IllegalArgumentException("Parameter this.client.clusterDnsName() is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        if (content == null) {
            throw new IllegalArgumentException("Parameter content is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{clusterDnsName}", this.client.clusterDnsName());
        RequestBody contentConverted = RequestBody.create(MediaType.parse("text/plain"), content);
        return service.submitMapReduceStreamingJob(this.client.username(), contentConverted, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobSubmissionJsonResponse>>>() {
                @Override
                public Observable<ServiceResponse<JobSubmissionJsonResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobSubmissionJsonResponse> clientResponse = submitMapReduceStreamingJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobSubmissionJsonResponse> submitMapReduceStreamingJobDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobSubmissionJsonResponse, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobSubmissionJsonResponse>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

    /**
     * Submits a Pig job to an HDInsight cluster.
     *
     * @param content The content of the Pig job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    public JobSubmissionJsonResponse submitPigJob(byte[] content) {
        return submitPigJobWithServiceResponseAsync(content).toBlocking().single().body();
    }

    /**
     * Submits a Pig job to an HDInsight cluster.
     *
     * @param content The content of the Pig job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobSubmissionJsonResponse> submitPigJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback) {
        return ServiceFuture.fromResponse(submitPigJobWithServiceResponseAsync(content), serviceCallback);
    }

    /**
     * Submits a Pig job to an HDInsight cluster.
     *
     * @param content The content of the Pig job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<JobSubmissionJsonResponse> submitPigJobAsync(byte[] content) {
        return submitPigJobWithServiceResponseAsync(content).map(new Func1<ServiceResponse<JobSubmissionJsonResponse>, JobSubmissionJsonResponse>() {
            @Override
            public JobSubmissionJsonResponse call(ServiceResponse<JobSubmissionJsonResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Submits a Pig job to an HDInsight cluster.
     *
     * @param content The content of the Pig job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<ServiceResponse<JobSubmissionJsonResponse>> submitPigJobWithServiceResponseAsync(byte[] content) {
        if (this.client.clusterDnsName() == null) {
            throw new IllegalArgumentException("Parameter this.client.clusterDnsName() is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        if (content == null) {
            throw new IllegalArgumentException("Parameter content is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{clusterDnsName}", this.client.clusterDnsName());
        RequestBody contentConverted = RequestBody.create(MediaType.parse("text/plain"), content);
        return service.submitPigJob(this.client.username(), contentConverted, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobSubmissionJsonResponse>>>() {
                @Override
                public Observable<ServiceResponse<JobSubmissionJsonResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobSubmissionJsonResponse> clientResponse = submitPigJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobSubmissionJsonResponse> submitPigJobDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobSubmissionJsonResponse, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobSubmissionJsonResponse>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

    /**
     * Submits a Sqoop job to an HDInsight cluster.
     *
     * @param content The content of the Sqoop job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobSubmissionJsonResponse object if successful.
     */
    public JobSubmissionJsonResponse submitSqoopJob(byte[] content) {
        return submitSqoopJobWithServiceResponseAsync(content).toBlocking().single().body();
    }

    /**
     * Submits a Sqoop job to an HDInsight cluster.
     *
     * @param content The content of the Sqoop job request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobSubmissionJsonResponse> submitSqoopJobAsync(byte[] content, final ServiceCallback<JobSubmissionJsonResponse> serviceCallback) {
        return ServiceFuture.fromResponse(submitSqoopJobWithServiceResponseAsync(content), serviceCallback);
    }

    /**
     * Submits a Sqoop job to an HDInsight cluster.
     *
     * @param content The content of the Sqoop job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<JobSubmissionJsonResponse> submitSqoopJobAsync(byte[] content) {
        return submitSqoopJobWithServiceResponseAsync(content).map(new Func1<ServiceResponse<JobSubmissionJsonResponse>, JobSubmissionJsonResponse>() {
            @Override
            public JobSubmissionJsonResponse call(ServiceResponse<JobSubmissionJsonResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Submits a Sqoop job to an HDInsight cluster.
     *
     * @param content The content of the Sqoop job request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobSubmissionJsonResponse object
     */
    public Observable<ServiceResponse<JobSubmissionJsonResponse>> submitSqoopJobWithServiceResponseAsync(byte[] content) {
        if (this.client.clusterDnsName() == null) {
            throw new IllegalArgumentException("Parameter this.client.clusterDnsName() is required and cannot be null.");
        }
        if (this.client.username() == null) {
            throw new IllegalArgumentException("Parameter this.client.username() is required and cannot be null.");
        }
        if (content == null) {
            throw new IllegalArgumentException("Parameter content is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{clusterDnsName}", this.client.clusterDnsName());
        RequestBody contentConverted = RequestBody.create(MediaType.parse("text/plain"), content);
        return service.submitSqoopJob(this.client.username(), contentConverted, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobSubmissionJsonResponse>>>() {
                @Override
                public Observable<ServiceResponse<JobSubmissionJsonResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobSubmissionJsonResponse> clientResponse = submitSqoopJobDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobSubmissionJsonResponse> submitSqoopJobDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobSubmissionJsonResponse, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobSubmissionJsonResponse>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets application state from the specified HDInsight cluster.
     *
     * @param appId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws JobOperationsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AppState object if successful.
     */
    public AppState getAppState(String appId) {
        return getAppStateWithServiceResponseAsync(appId).toBlocking().single().body();
    }

    /**
     * Gets application state from the specified HDInsight cluster.
     *
     * @param appId The id of the job.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AppState> getAppStateAsync(String appId, final ServiceCallback<AppState> serviceCallback) {
        return ServiceFuture.fromResponse(getAppStateWithServiceResponseAsync(appId), serviceCallback);
    }

    /**
     * Gets application state from the specified HDInsight cluster.
     *
     * @param appId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AppState object
     */
    public Observable<AppState> getAppStateAsync(String appId) {
        return getAppStateWithServiceResponseAsync(appId).map(new Func1<ServiceResponse<AppState>, AppState>() {
            @Override
            public AppState call(ServiceResponse<AppState> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets application state from the specified HDInsight cluster.
     *
     * @param appId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AppState object
     */
    public Observable<ServiceResponse<AppState>> getAppStateWithServiceResponseAsync(String appId) {
        if (this.client.clusterDnsName() == null) {
            throw new IllegalArgumentException("Parameter this.client.clusterDnsName() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{clusterDnsName}", this.client.clusterDnsName());
        return service.getAppState(appId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AppState>>>() {
                @Override
                public Observable<ServiceResponse<AppState>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AppState> clientResponse = getAppStateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AppState> getAppStateDelegate(Response<ResponseBody> response) throws JobOperationsErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AppState, JobOperationsErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AppState>() { }.getType())
                .registerError(JobOperationsErrorResponseException.class)
                .build(response);
    }

}
