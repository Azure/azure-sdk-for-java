/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The cluster health chunk query description, which can specify the health
 * policies to evaluate cluster health and very expressive filters to select
 * which cluster entities to include in response.
 */
public class ClusterHealthChunkQueryDescription {
    /**
     * Defines a list of filters that specify which nodes to be included in the
     * returned cluster health chunk.
     * If no filters are specified, no nodes are returned. All the nodes are
     * used to evaluate the cluster's aggregated health state, regardless of
     * the input filters.
     * The cluster health chunk query may specify multiple node filters.
     * For example, it can specify a filter to return all nodes with health
     * state Error and another filter to always include a node identified by
     * its NodeName.
     */
    @JsonProperty(value = "NodeFilters")
    private List<NodeHealthStateFilter> nodeFilters;

    /**
     * Defines a list of filters that specify which applications to be included
     * in the returned cluster health chunk.
     * If no filters are specified, no applications are returned. All the
     * applications are used to evaluate the cluster's aggregated health state,
     * regardless of the input filters.
     * The cluster health chunk query may specify multiple application filters.
     * For example, it can specify a filter to return all applications with
     * health state Error and another filter to always include applications of
     * a specified application type.
     */
    @JsonProperty(value = "ApplicationFilters")
    private List<ApplicationHealthStateFilter> applicationFilters;

    /**
     * Defines a health policy used to evaluate the health of the cluster or of
     * a cluster node.
     */
    @JsonProperty(value = "ClusterHealthPolicy")
    private ClusterHealthPolicy clusterHealthPolicy;

    /**
     * Defines the application health policy map used to evaluate the health of
     * an application or one of its children entities.
     */
    @JsonProperty(value = "ApplicationHealthPolicies")
    private ApplicationHealthPolicies applicationHealthPolicies;

    /**
     * Get defines a list of filters that specify which nodes to be included in the returned cluster health chunk.
     If no filters are specified, no nodes are returned. All the nodes are used to evaluate the cluster's aggregated health state, regardless of the input filters.
     The cluster health chunk query may specify multiple node filters.
     For example, it can specify a filter to return all nodes with health state Error and another filter to always include a node identified by its NodeName.
     *
     * @return the nodeFilters value
     */
    public List<NodeHealthStateFilter> nodeFilters() {
        return this.nodeFilters;
    }

    /**
     * Set defines a list of filters that specify which nodes to be included in the returned cluster health chunk.
     If no filters are specified, no nodes are returned. All the nodes are used to evaluate the cluster's aggregated health state, regardless of the input filters.
     The cluster health chunk query may specify multiple node filters.
     For example, it can specify a filter to return all nodes with health state Error and another filter to always include a node identified by its NodeName.
     *
     * @param nodeFilters the nodeFilters value to set
     * @return the ClusterHealthChunkQueryDescription object itself.
     */
    public ClusterHealthChunkQueryDescription withNodeFilters(List<NodeHealthStateFilter> nodeFilters) {
        this.nodeFilters = nodeFilters;
        return this;
    }

    /**
     * Get defines a list of filters that specify which applications to be included in the returned cluster health chunk.
     If no filters are specified, no applications are returned. All the applications are used to evaluate the cluster's aggregated health state, regardless of the input filters.
     The cluster health chunk query may specify multiple application filters.
     For example, it can specify a filter to return all applications with health state Error and another filter to always include applications of a specified application type.
     *
     * @return the applicationFilters value
     */
    public List<ApplicationHealthStateFilter> applicationFilters() {
        return this.applicationFilters;
    }

    /**
     * Set defines a list of filters that specify which applications to be included in the returned cluster health chunk.
     If no filters are specified, no applications are returned. All the applications are used to evaluate the cluster's aggregated health state, regardless of the input filters.
     The cluster health chunk query may specify multiple application filters.
     For example, it can specify a filter to return all applications with health state Error and another filter to always include applications of a specified application type.
     *
     * @param applicationFilters the applicationFilters value to set
     * @return the ClusterHealthChunkQueryDescription object itself.
     */
    public ClusterHealthChunkQueryDescription withApplicationFilters(List<ApplicationHealthStateFilter> applicationFilters) {
        this.applicationFilters = applicationFilters;
        return this;
    }

    /**
     * Get defines a health policy used to evaluate the health of the cluster or of a cluster node.
     *
     * @return the clusterHealthPolicy value
     */
    public ClusterHealthPolicy clusterHealthPolicy() {
        return this.clusterHealthPolicy;
    }

    /**
     * Set defines a health policy used to evaluate the health of the cluster or of a cluster node.
     *
     * @param clusterHealthPolicy the clusterHealthPolicy value to set
     * @return the ClusterHealthChunkQueryDescription object itself.
     */
    public ClusterHealthChunkQueryDescription withClusterHealthPolicy(ClusterHealthPolicy clusterHealthPolicy) {
        this.clusterHealthPolicy = clusterHealthPolicy;
        return this;
    }

    /**
     * Get defines the application health policy map used to evaluate the health of an application or one of its children entities.
     *
     * @return the applicationHealthPolicies value
     */
    public ApplicationHealthPolicies applicationHealthPolicies() {
        return this.applicationHealthPolicies;
    }

    /**
     * Set defines the application health policy map used to evaluate the health of an application or one of its children entities.
     *
     * @param applicationHealthPolicies the applicationHealthPolicies value to set
     * @return the ClusterHealthChunkQueryDescription object itself.
     */
    public ClusterHealthChunkQueryDescription withApplicationHealthPolicies(ApplicationHealthPolicies applicationHealthPolicies) {
        this.applicationHealthPolicies = applicationHealthPolicies;
        return this;
    }

}
