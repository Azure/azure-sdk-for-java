/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Describes the parameters for updating a rolling upgrade of application or
 * cluster.
 */
public class RollingUpgradeUpdateDescription {
    /**
     * The mode used to monitor health during a rolling upgrade. The values are
     * UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values
     * include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'.
     */
    @JsonProperty(value = "RollingUpgradeMode", required = true)
    private UpgradeMode rollingUpgradeMode;

    /**
     * If true, then processes are forcefully restarted during upgrade even
     * when the code version has not changed (the upgrade only changes
     * configuration or data).
     */
    @JsonProperty(value = "ForceRestart")
    private Boolean forceRestart;

    /**
     * The maximum amount of time to block processing of an upgrade domain and
     * prevent loss of availability when there are unexpected issues. When this
     * timeout expires, processing of the upgrade domain will proceed
     * regardless of availability loss issues. The timeout is reset at the
     * start of each upgrade domain. Valid values are between 0 and 42949672925
     * inclusive. (unsigned 32-bit integer).
     */
    @JsonProperty(value = "ReplicaSetCheckTimeoutInMilliseconds")
    private Long replicaSetCheckTimeoutInMilliseconds;

    /**
     * The compensating action to perform when a Monitored upgrade encounters
     * monitoring policy or health policy violations.
     * Invalid indicates the failure action is invalid. Rollback specifies that
     * the upgrade will start rolling back automatically.
     * Manual indicates that the upgrade will switch to UnmonitoredManual
     * upgrade mode. Possible values include: 'Invalid', 'Rollback', 'Manual'.
     */
    @JsonProperty(value = "FailureAction")
    private FailureAction failureAction;

    /**
     * The amount of time to wait after completing an upgrade domain before
     * applying health policies. It is first interpreted as a string
     * representing an ISO 8601 duration. If that fails, then it is interpreted
     * as a number representing the total number of milliseconds.
     */
    @JsonProperty(value = "HealthCheckWaitDurationInMilliseconds")
    private String healthCheckWaitDurationInMilliseconds;

    /**
     * The amount of time that the application or cluster must remain healthy
     * before the upgrade proceeds to the next upgrade domain. It is first
     * interpreted as a string representing an ISO 8601 duration. If that
     * fails, then it is interpreted as a number representing the total number
     * of milliseconds.
     */
    @JsonProperty(value = "HealthCheckStableDurationInMilliseconds")
    private String healthCheckStableDurationInMilliseconds;

    /**
     * The amount of time to retry health evaluation when the application or
     * cluster is unhealthy before FailureAction is executed. It is first
     * interpreted as a string representing an ISO 8601 duration. If that
     * fails, then it is interpreted as a number representing the total number
     * of milliseconds.
     */
    @JsonProperty(value = "HealthCheckRetryTimeoutInMilliseconds")
    private String healthCheckRetryTimeoutInMilliseconds;

    /**
     * The amount of time the overall upgrade has to complete before
     * FailureAction is executed. It is first interpreted as a string
     * representing an ISO 8601 duration. If that fails, then it is interpreted
     * as a number representing the total number of milliseconds.
     */
    @JsonProperty(value = "UpgradeTimeoutInMilliseconds")
    private String upgradeTimeoutInMilliseconds;

    /**
     * The amount of time each upgrade domain has to complete before
     * FailureAction is executed. It is first interpreted as a string
     * representing an ISO 8601 duration. If that fails, then it is interpreted
     * as a number representing the total number of milliseconds.
     */
    @JsonProperty(value = "UpgradeDomainTimeoutInMilliseconds")
    private String upgradeDomainTimeoutInMilliseconds;

    /**
     * Get the mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'.
     *
     * @return the rollingUpgradeMode value
     */
    public UpgradeMode rollingUpgradeMode() {
        return this.rollingUpgradeMode;
    }

    /**
     * Set the mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'.
     *
     * @param rollingUpgradeMode the rollingUpgradeMode value to set
     * @return the RollingUpgradeUpdateDescription object itself.
     */
    public RollingUpgradeUpdateDescription withRollingUpgradeMode(UpgradeMode rollingUpgradeMode) {
        this.rollingUpgradeMode = rollingUpgradeMode;
        return this;
    }

    /**
     * Get if true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
     *
     * @return the forceRestart value
     */
    public Boolean forceRestart() {
        return this.forceRestart;
    }

    /**
     * Set if true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
     *
     * @param forceRestart the forceRestart value to set
     * @return the RollingUpgradeUpdateDescription object itself.
     */
    public RollingUpgradeUpdateDescription withForceRestart(Boolean forceRestart) {
        this.forceRestart = forceRestart;
        return this;
    }

    /**
     * Get the maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
     *
     * @return the replicaSetCheckTimeoutInMilliseconds value
     */
    public Long replicaSetCheckTimeoutInMilliseconds() {
        return this.replicaSetCheckTimeoutInMilliseconds;
    }

    /**
     * Set the maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
     *
     * @param replicaSetCheckTimeoutInMilliseconds the replicaSetCheckTimeoutInMilliseconds value to set
     * @return the RollingUpgradeUpdateDescription object itself.
     */
    public RollingUpgradeUpdateDescription withReplicaSetCheckTimeoutInMilliseconds(Long replicaSetCheckTimeoutInMilliseconds) {
        this.replicaSetCheckTimeoutInMilliseconds = replicaSetCheckTimeoutInMilliseconds;
        return this;
    }

    /**
     * Get the compensating action to perform when a Monitored upgrade encounters monitoring policy or health policy violations.
     Invalid indicates the failure action is invalid. Rollback specifies that the upgrade will start rolling back automatically.
     Manual indicates that the upgrade will switch to UnmonitoredManual upgrade mode. Possible values include: 'Invalid', 'Rollback', 'Manual'.
     *
     * @return the failureAction value
     */
    public FailureAction failureAction() {
        return this.failureAction;
    }

    /**
     * Set the compensating action to perform when a Monitored upgrade encounters monitoring policy or health policy violations.
     Invalid indicates the failure action is invalid. Rollback specifies that the upgrade will start rolling back automatically.
     Manual indicates that the upgrade will switch to UnmonitoredManual upgrade mode. Possible values include: 'Invalid', 'Rollback', 'Manual'.
     *
     * @param failureAction the failureAction value to set
     * @return the RollingUpgradeUpdateDescription object itself.
     */
    public RollingUpgradeUpdateDescription withFailureAction(FailureAction failureAction) {
        this.failureAction = failureAction;
        return this;
    }

    /**
     * Get the amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     *
     * @return the healthCheckWaitDurationInMilliseconds value
     */
    public String healthCheckWaitDurationInMilliseconds() {
        return this.healthCheckWaitDurationInMilliseconds;
    }

    /**
     * Set the amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     *
     * @param healthCheckWaitDurationInMilliseconds the healthCheckWaitDurationInMilliseconds value to set
     * @return the RollingUpgradeUpdateDescription object itself.
     */
    public RollingUpgradeUpdateDescription withHealthCheckWaitDurationInMilliseconds(String healthCheckWaitDurationInMilliseconds) {
        this.healthCheckWaitDurationInMilliseconds = healthCheckWaitDurationInMilliseconds;
        return this;
    }

    /**
     * Get the amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     *
     * @return the healthCheckStableDurationInMilliseconds value
     */
    public String healthCheckStableDurationInMilliseconds() {
        return this.healthCheckStableDurationInMilliseconds;
    }

    /**
     * Set the amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     *
     * @param healthCheckStableDurationInMilliseconds the healthCheckStableDurationInMilliseconds value to set
     * @return the RollingUpgradeUpdateDescription object itself.
     */
    public RollingUpgradeUpdateDescription withHealthCheckStableDurationInMilliseconds(String healthCheckStableDurationInMilliseconds) {
        this.healthCheckStableDurationInMilliseconds = healthCheckStableDurationInMilliseconds;
        return this;
    }

    /**
     * Get the amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     *
     * @return the healthCheckRetryTimeoutInMilliseconds value
     */
    public String healthCheckRetryTimeoutInMilliseconds() {
        return this.healthCheckRetryTimeoutInMilliseconds;
    }

    /**
     * Set the amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     *
     * @param healthCheckRetryTimeoutInMilliseconds the healthCheckRetryTimeoutInMilliseconds value to set
     * @return the RollingUpgradeUpdateDescription object itself.
     */
    public RollingUpgradeUpdateDescription withHealthCheckRetryTimeoutInMilliseconds(String healthCheckRetryTimeoutInMilliseconds) {
        this.healthCheckRetryTimeoutInMilliseconds = healthCheckRetryTimeoutInMilliseconds;
        return this;
    }

    /**
     * Get the amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     *
     * @return the upgradeTimeoutInMilliseconds value
     */
    public String upgradeTimeoutInMilliseconds() {
        return this.upgradeTimeoutInMilliseconds;
    }

    /**
     * Set the amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     *
     * @param upgradeTimeoutInMilliseconds the upgradeTimeoutInMilliseconds value to set
     * @return the RollingUpgradeUpdateDescription object itself.
     */
    public RollingUpgradeUpdateDescription withUpgradeTimeoutInMilliseconds(String upgradeTimeoutInMilliseconds) {
        this.upgradeTimeoutInMilliseconds = upgradeTimeoutInMilliseconds;
        return this;
    }

    /**
     * Get the amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     *
     * @return the upgradeDomainTimeoutInMilliseconds value
     */
    public String upgradeDomainTimeoutInMilliseconds() {
        return this.upgradeDomainTimeoutInMilliseconds;
    }

    /**
     * Set the amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     *
     * @param upgradeDomainTimeoutInMilliseconds the upgradeDomainTimeoutInMilliseconds value to set
     * @return the RollingUpgradeUpdateDescription object itself.
     */
    public RollingUpgradeUpdateDescription withUpgradeDomainTimeoutInMilliseconds(String upgradeDomainTimeoutInMilliseconds) {
        this.upgradeDomainTimeoutInMilliseconds = upgradeDomainTimeoutInMilliseconds;
        return this;
    }

}
