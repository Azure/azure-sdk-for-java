/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Describes the parameters for a compose deployment upgrade.
 */
public class ComposeDeploymentUpgradeDescription {
    /**
     * The name of the deployment.
     */
    @JsonProperty(value = "DeploymentName", required = true)
    private String deploymentName;

    /**
     * The content of the compose file that describes the deployment to create.
     */
    @JsonProperty(value = "ComposeFileContent", required = true)
    private String composeFileContent;

    /**
     * Credential information to connect to container registry.
     */
    @JsonProperty(value = "RegistryCredential")
    private RegistryCredential registryCredential;

    /**
     * The kind of upgrade out of the following possible values. Possible
     * values include: 'Invalid', 'Rolling'.
     */
    @JsonProperty(value = "UpgradeKind", required = true)
    private UpgradeKind upgradeKind;

    /**
     * The mode used to monitor health during a rolling upgrade. The values are
     * UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values
     * include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'.
     */
    @JsonProperty(value = "RollingUpgradeMode")
    private UpgradeMode rollingUpgradeMode;

    /**
     * The maximum amount of time to block processing of an upgrade domain and
     * prevent loss of availability when there are unexpected issues. When this
     * timeout expires, processing of the upgrade domain will proceed
     * regardless of availability loss issues. The timeout is reset at the
     * start of each upgrade domain. Valid values are between 0 and 42949672925
     * inclusive. (unsigned 32-bit integer).
     */
    @JsonProperty(value = "UpgradeReplicaSetCheckTimeoutInSeconds")
    private Long upgradeReplicaSetCheckTimeoutInSeconds;

    /**
     * If true, then processes are forcefully restarted during upgrade even
     * when the code version has not changed (the upgrade only changes
     * configuration or data).
     */
    @JsonProperty(value = "ForceRestart")
    private Boolean forceRestart;

    /**
     * Describes the parameters for monitoring an upgrade in Monitored mode.
     */
    @JsonProperty(value = "MonitoringPolicy")
    private MonitoringPolicyDescription monitoringPolicy;

    /**
     * Defines a health policy used to evaluate the health of an application or
     * one of its children entities.
     */
    @JsonProperty(value = "ApplicationHealthPolicy")
    private ApplicationHealthPolicy applicationHealthPolicy;

    /**
     * Get the name of the deployment.
     *
     * @return the deploymentName value
     */
    public String deploymentName() {
        return this.deploymentName;
    }

    /**
     * Set the name of the deployment.
     *
     * @param deploymentName the deploymentName value to set
     * @return the ComposeDeploymentUpgradeDescription object itself.
     */
    public ComposeDeploymentUpgradeDescription withDeploymentName(String deploymentName) {
        this.deploymentName = deploymentName;
        return this;
    }

    /**
     * Get the content of the compose file that describes the deployment to create.
     *
     * @return the composeFileContent value
     */
    public String composeFileContent() {
        return this.composeFileContent;
    }

    /**
     * Set the content of the compose file that describes the deployment to create.
     *
     * @param composeFileContent the composeFileContent value to set
     * @return the ComposeDeploymentUpgradeDescription object itself.
     */
    public ComposeDeploymentUpgradeDescription withComposeFileContent(String composeFileContent) {
        this.composeFileContent = composeFileContent;
        return this;
    }

    /**
     * Get credential information to connect to container registry.
     *
     * @return the registryCredential value
     */
    public RegistryCredential registryCredential() {
        return this.registryCredential;
    }

    /**
     * Set credential information to connect to container registry.
     *
     * @param registryCredential the registryCredential value to set
     * @return the ComposeDeploymentUpgradeDescription object itself.
     */
    public ComposeDeploymentUpgradeDescription withRegistryCredential(RegistryCredential registryCredential) {
        this.registryCredential = registryCredential;
        return this;
    }

    /**
     * Get the kind of upgrade out of the following possible values. Possible values include: 'Invalid', 'Rolling'.
     *
     * @return the upgradeKind value
     */
    public UpgradeKind upgradeKind() {
        return this.upgradeKind;
    }

    /**
     * Set the kind of upgrade out of the following possible values. Possible values include: 'Invalid', 'Rolling'.
     *
     * @param upgradeKind the upgradeKind value to set
     * @return the ComposeDeploymentUpgradeDescription object itself.
     */
    public ComposeDeploymentUpgradeDescription withUpgradeKind(UpgradeKind upgradeKind) {
        this.upgradeKind = upgradeKind;
        return this;
    }

    /**
     * Get the mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'.
     *
     * @return the rollingUpgradeMode value
     */
    public UpgradeMode rollingUpgradeMode() {
        return this.rollingUpgradeMode;
    }

    /**
     * Set the mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'.
     *
     * @param rollingUpgradeMode the rollingUpgradeMode value to set
     * @return the ComposeDeploymentUpgradeDescription object itself.
     */
    public ComposeDeploymentUpgradeDescription withRollingUpgradeMode(UpgradeMode rollingUpgradeMode) {
        this.rollingUpgradeMode = rollingUpgradeMode;
        return this;
    }

    /**
     * Get the maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
     *
     * @return the upgradeReplicaSetCheckTimeoutInSeconds value
     */
    public Long upgradeReplicaSetCheckTimeoutInSeconds() {
        return this.upgradeReplicaSetCheckTimeoutInSeconds;
    }

    /**
     * Set the maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
     *
     * @param upgradeReplicaSetCheckTimeoutInSeconds the upgradeReplicaSetCheckTimeoutInSeconds value to set
     * @return the ComposeDeploymentUpgradeDescription object itself.
     */
    public ComposeDeploymentUpgradeDescription withUpgradeReplicaSetCheckTimeoutInSeconds(Long upgradeReplicaSetCheckTimeoutInSeconds) {
        this.upgradeReplicaSetCheckTimeoutInSeconds = upgradeReplicaSetCheckTimeoutInSeconds;
        return this;
    }

    /**
     * Get if true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
     *
     * @return the forceRestart value
     */
    public Boolean forceRestart() {
        return this.forceRestart;
    }

    /**
     * Set if true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
     *
     * @param forceRestart the forceRestart value to set
     * @return the ComposeDeploymentUpgradeDescription object itself.
     */
    public ComposeDeploymentUpgradeDescription withForceRestart(Boolean forceRestart) {
        this.forceRestart = forceRestart;
        return this;
    }

    /**
     * Get describes the parameters for monitoring an upgrade in Monitored mode.
     *
     * @return the monitoringPolicy value
     */
    public MonitoringPolicyDescription monitoringPolicy() {
        return this.monitoringPolicy;
    }

    /**
     * Set describes the parameters for monitoring an upgrade in Monitored mode.
     *
     * @param monitoringPolicy the monitoringPolicy value to set
     * @return the ComposeDeploymentUpgradeDescription object itself.
     */
    public ComposeDeploymentUpgradeDescription withMonitoringPolicy(MonitoringPolicyDescription monitoringPolicy) {
        this.monitoringPolicy = monitoringPolicy;
        return this;
    }

    /**
     * Get defines a health policy used to evaluate the health of an application or one of its children entities.
     *
     * @return the applicationHealthPolicy value
     */
    public ApplicationHealthPolicy applicationHealthPolicy() {
        return this.applicationHealthPolicy;
    }

    /**
     * Set defines a health policy used to evaluate the health of an application or one of its children entities.
     *
     * @param applicationHealthPolicy the applicationHealthPolicy value to set
     * @return the ComposeDeploymentUpgradeDescription object itself.
     */
    public ComposeDeploymentUpgradeDescription withApplicationHealthPolicy(ApplicationHealthPolicy applicationHealthPolicy) {
        this.applicationHealthPolicy = applicationHealthPolicy;
        return this;
    }

}
