/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents health information reported on a health entity, such as cluster,
 * application or node, with additional metadata added by the Health Manager.
 */
public class HealthEvent extends HealthInformation {
    /**
     * Returns true if the health event is expired, otherwise false.
     */
    @JsonProperty(value = "IsExpired")
    private Boolean isExpired;

    /**
     * The date and time when the health report was sent by the source.
     */
    @JsonProperty(value = "SourceUtcTimestamp")
    private DateTime sourceUtcTimestamp;

    /**
     * The date and time when the health report was last modified by the health
     * store.
     */
    @JsonProperty(value = "LastModifiedUtcTimestamp")
    private DateTime lastModifiedUtcTimestamp;

    /**
     * If the current health state is 'Ok', this property returns the time at
     * which the health report was first reported with 'Ok'.
     * For periodic reporting, many reports with the same state may have been
     * generated.
     * This property returns the date and time when the first 'Ok' health
     * report was received.
     *
     * If the current health state is 'Error' or 'Warning', returns the date
     * and time at which the health state was last in 'Ok', before
     * transitioning to a different state.
     *
     * If the health state was never 'Ok', the value will be zero date-time.
     */
    @JsonProperty(value = "LastOkTransitionAt")
    private DateTime lastOkTransitionAt;

    /**
     * If the current health state is 'Warning', this property returns the time
     * at which the health report was first reported with 'Warning'. For
     * periodic reporting, many reports with the same state may have been
     * generated however, this property returns only the date and time at the
     * first 'Warning' health report was received.
     *
     * If the current health state is 'Ok' or 'Error', returns the date and
     * time at which the health state was last in 'Warning', before
     * transitioning to a different state.
     *
     * If the health state was never 'Warning', the value will be zero
     * date-time.
     */
    @JsonProperty(value = "LastWarningTransitionAt")
    private DateTime lastWarningTransitionAt;

    /**
     * If the current health state is 'Error', this property returns the time
     * at which the health report was first reported with 'Error'. For periodic
     * reporting, many reports with the same state may have been generated
     * however, this property returns only the date and time at the first
     * 'Error' health report was received.
     *
     * If the current health state is 'Ok' or 'Warning', returns the date and
     * time at which the health state was last in 'Error', before transitioning
     * to a different state.
     *
     * If the health state was never 'Error', the value will be zero date-time.
     */
    @JsonProperty(value = "LastErrorTransitionAt")
    private DateTime lastErrorTransitionAt;

    /**
     * Get returns true if the health event is expired, otherwise false.
     *
     * @return the isExpired value
     */
    public Boolean isExpired() {
        return this.isExpired;
    }

    /**
     * Set returns true if the health event is expired, otherwise false.
     *
     * @param isExpired the isExpired value to set
     * @return the HealthEvent object itself.
     */
    public HealthEvent withIsExpired(Boolean isExpired) {
        this.isExpired = isExpired;
        return this;
    }

    /**
     * Get the date and time when the health report was sent by the source.
     *
     * @return the sourceUtcTimestamp value
     */
    public DateTime sourceUtcTimestamp() {
        return this.sourceUtcTimestamp;
    }

    /**
     * Set the date and time when the health report was sent by the source.
     *
     * @param sourceUtcTimestamp the sourceUtcTimestamp value to set
     * @return the HealthEvent object itself.
     */
    public HealthEvent withSourceUtcTimestamp(DateTime sourceUtcTimestamp) {
        this.sourceUtcTimestamp = sourceUtcTimestamp;
        return this;
    }

    /**
     * Get the date and time when the health report was last modified by the health store.
     *
     * @return the lastModifiedUtcTimestamp value
     */
    public DateTime lastModifiedUtcTimestamp() {
        return this.lastModifiedUtcTimestamp;
    }

    /**
     * Set the date and time when the health report was last modified by the health store.
     *
     * @param lastModifiedUtcTimestamp the lastModifiedUtcTimestamp value to set
     * @return the HealthEvent object itself.
     */
    public HealthEvent withLastModifiedUtcTimestamp(DateTime lastModifiedUtcTimestamp) {
        this.lastModifiedUtcTimestamp = lastModifiedUtcTimestamp;
        return this;
    }

    /**
     * Get if the current health state is 'Ok', this property returns the time at which the health report was first reported with 'Ok'.
     For periodic reporting, many reports with the same state may have been generated.
     This property returns the date and time when the first 'Ok' health report was received.
     If the current health state is 'Error' or 'Warning', returns the date and time at which the health state was last in 'Ok', before transitioning to a different state.
     If the health state was never 'Ok', the value will be zero date-time.
     *
     * @return the lastOkTransitionAt value
     */
    public DateTime lastOkTransitionAt() {
        return this.lastOkTransitionAt;
    }

    /**
     * Set if the current health state is 'Ok', this property returns the time at which the health report was first reported with 'Ok'.
     For periodic reporting, many reports with the same state may have been generated.
     This property returns the date and time when the first 'Ok' health report was received.
     If the current health state is 'Error' or 'Warning', returns the date and time at which the health state was last in 'Ok', before transitioning to a different state.
     If the health state was never 'Ok', the value will be zero date-time.
     *
     * @param lastOkTransitionAt the lastOkTransitionAt value to set
     * @return the HealthEvent object itself.
     */
    public HealthEvent withLastOkTransitionAt(DateTime lastOkTransitionAt) {
        this.lastOkTransitionAt = lastOkTransitionAt;
        return this;
    }

    /**
     * Get if the current health state is 'Warning', this property returns the time at which the health report was first reported with 'Warning'. For periodic reporting, many reports with the same state may have been generated however, this property returns only the date and time at the first 'Warning' health report was received.
     If the current health state is 'Ok' or 'Error', returns the date and time at which the health state was last in 'Warning', before transitioning to a different state.
     If the health state was never 'Warning', the value will be zero date-time.
     *
     * @return the lastWarningTransitionAt value
     */
    public DateTime lastWarningTransitionAt() {
        return this.lastWarningTransitionAt;
    }

    /**
     * Set if the current health state is 'Warning', this property returns the time at which the health report was first reported with 'Warning'. For periodic reporting, many reports with the same state may have been generated however, this property returns only the date and time at the first 'Warning' health report was received.
     If the current health state is 'Ok' or 'Error', returns the date and time at which the health state was last in 'Warning', before transitioning to a different state.
     If the health state was never 'Warning', the value will be zero date-time.
     *
     * @param lastWarningTransitionAt the lastWarningTransitionAt value to set
     * @return the HealthEvent object itself.
     */
    public HealthEvent withLastWarningTransitionAt(DateTime lastWarningTransitionAt) {
        this.lastWarningTransitionAt = lastWarningTransitionAt;
        return this;
    }

    /**
     * Get if the current health state is 'Error', this property returns the time at which the health report was first reported with 'Error'. For periodic reporting, many reports with the same state may have been generated however, this property returns only the date and time at the first 'Error' health report was received.
     If the current health state is 'Ok' or 'Warning', returns the date and time at which the health state was last in 'Error', before transitioning to a different state.
     If the health state was never 'Error', the value will be zero date-time.
     *
     * @return the lastErrorTransitionAt value
     */
    public DateTime lastErrorTransitionAt() {
        return this.lastErrorTransitionAt;
    }

    /**
     * Set if the current health state is 'Error', this property returns the time at which the health report was first reported with 'Error'. For periodic reporting, many reports with the same state may have been generated however, this property returns only the date and time at the first 'Error' health report was received.
     If the current health state is 'Ok' or 'Warning', returns the date and time at which the health state was last in 'Error', before transitioning to a different state.
     If the health state was never 'Error', the value will be zero date-time.
     *
     * @param lastErrorTransitionAt the lastErrorTransitionAt value to set
     * @return the HealthEvent object itself.
     */
    public HealthEvent withLastErrorTransitionAt(DateTime lastErrorTransitionAt) {
        this.lastErrorTransitionAt = lastErrorTransitionAt;
        return this;
    }

}
