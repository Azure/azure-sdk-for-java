/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric.implementation;

import java.util.List;
import com.microsoft.azure.servicefabric.UpgradeDomainInfo;
import com.microsoft.azure.servicefabric.UpgradeState;
import com.microsoft.azure.servicefabric.UpgradeMode;
import com.microsoft.azure.servicefabric.ApplicationUpgradeDescription;
import com.microsoft.azure.servicefabric.HealthEvaluationWrapper;
import com.microsoft.azure.servicefabric.CurrentUpgradeDomainProgressInfo;
import com.microsoft.azure.servicefabric.FailureReason;
import com.microsoft.azure.servicefabric.FailureUpgradeDomainProgressInfo;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Describes the parameters for an application upgrade.
 */
public class ApplicationUpgradeProgressInfoInner {
    /**
     * The name of the target application, including the 'fabric:' URI scheme.
     */
    @JsonProperty(value = "Name")
    private String name;

    /**
     * The application type name as defined in the application manifest.
     */
    @JsonProperty(value = "TypeName")
    private String typeName;

    /**
     * The target application type version (found in the application manifest)
     * for the application upgrade.
     */
    @JsonProperty(value = "TargetApplicationTypeVersion")
    private String targetApplicationTypeVersion;

    /**
     * List of upgrade domains and their statuses.
     */
    @JsonProperty(value = "UpgradeDomains")
    private List<UpgradeDomainInfo> upgradeDomains;

    /**
     * The state of the upgrade domain. Possible values include: 'Invalid',
     * 'RollingBackInProgress', 'RollingBackCompleted',
     * 'RollingForwardPending', 'RollingForwardInProgress',
     * 'RollingForwardCompleted', 'Failed'.
     */
    @JsonProperty(value = "UpgradeState")
    private UpgradeState upgradeState;

    /**
     * The name of the next upgrade domain to be processed.
     */
    @JsonProperty(value = "NextUpgradeDomain")
    private String nextUpgradeDomain;

    /**
     * The mode used to monitor health during a rolling upgrade. The values are
     * UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values
     * include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'.
     */
    @JsonProperty(value = "RollingUpgradeMode")
    private UpgradeMode rollingUpgradeMode;

    /**
     * Describes the parameters for an application upgrade. Note that upgrade
     * description replaces the existing application description. This means
     * that if the parameters are not specified, the existing parameters on the
     * applications will be overwritten with the empty parameters list. This
     * would result in the application using the default value of the
     * parameters from the application manifest. If you do not want to change
     * any existing parameter values, please get the application parameters
     * first using the GetApplicationInfo query and then supply those values as
     * Parameters in this ApplicationUpgradeDescription.
     */
    @JsonProperty(value = "UpgradeDescription")
    private ApplicationUpgradeDescription upgradeDescription;

    /**
     * The estimated total amount of time spent processing the overall upgrade.
     */
    @JsonProperty(value = "UpgradeDurationInMilliseconds")
    private String upgradeDurationInMilliseconds;

    /**
     * The estimated total amount of time spent processing the current upgrade
     * domain.
     */
    @JsonProperty(value = "UpgradeDomainDurationInMilliseconds")
    private String upgradeDomainDurationInMilliseconds;

    /**
     * List of health evaluations that resulted in the current aggregated
     * health state.
     */
    @JsonProperty(value = "UnhealthyEvaluations")
    private List<HealthEvaluationWrapper> unhealthyEvaluations;

    /**
     * Information about the current in-progress upgrade domain.
     */
    @JsonProperty(value = "CurrentUpgradeDomainProgress")
    private CurrentUpgradeDomainProgressInfo currentUpgradeDomainProgress;

    /**
     * The estimated UTC datetime when the upgrade started.
     */
    @JsonProperty(value = "StartTimestampUtc")
    private String startTimestampUtc;

    /**
     * The estimated UTC datetime when the upgrade failed and FailureAction was
     * executed.
     */
    @JsonProperty(value = "FailureTimestampUtc")
    private String failureTimestampUtc;

    /**
     * The cause of an upgrade failure that resulted in FailureAction being
     * executed. Possible values include: 'None', 'Interrupted', 'HealthCheck',
     * 'UpgradeDomainTimeout', 'OverallUpgradeTimeout'.
     */
    @JsonProperty(value = "FailureReason")
    private FailureReason failureReason;

    /**
     * Information about the upgrade domain progress at the time of upgrade
     * failure.
     */
    @JsonProperty(value = "UpgradeDomainProgressAtFailure")
    private FailureUpgradeDomainProgressInfo upgradeDomainProgressAtFailure;

    /**
     * Additional detailed information about the status of the pending upgrade.
     */
    @JsonProperty(value = "UpgradeStatusDetails")
    private String upgradeStatusDetails;

    /**
     * Get the name of the target application, including the 'fabric:' URI scheme.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name of the target application, including the 'fabric:' URI scheme.
     *
     * @param name the name value to set
     * @return the ApplicationUpgradeProgressInfoInner object itself.
     */
    public ApplicationUpgradeProgressInfoInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the application type name as defined in the application manifest.
     *
     * @return the typeName value
     */
    public String typeName() {
        return this.typeName;
    }

    /**
     * Set the application type name as defined in the application manifest.
     *
     * @param typeName the typeName value to set
     * @return the ApplicationUpgradeProgressInfoInner object itself.
     */
    public ApplicationUpgradeProgressInfoInner withTypeName(String typeName) {
        this.typeName = typeName;
        return this;
    }

    /**
     * Get the target application type version (found in the application manifest) for the application upgrade.
     *
     * @return the targetApplicationTypeVersion value
     */
    public String targetApplicationTypeVersion() {
        return this.targetApplicationTypeVersion;
    }

    /**
     * Set the target application type version (found in the application manifest) for the application upgrade.
     *
     * @param targetApplicationTypeVersion the targetApplicationTypeVersion value to set
     * @return the ApplicationUpgradeProgressInfoInner object itself.
     */
    public ApplicationUpgradeProgressInfoInner withTargetApplicationTypeVersion(String targetApplicationTypeVersion) {
        this.targetApplicationTypeVersion = targetApplicationTypeVersion;
        return this;
    }

    /**
     * Get list of upgrade domains and their statuses.
     *
     * @return the upgradeDomains value
     */
    public List<UpgradeDomainInfo> upgradeDomains() {
        return this.upgradeDomains;
    }

    /**
     * Set list of upgrade domains and their statuses.
     *
     * @param upgradeDomains the upgradeDomains value to set
     * @return the ApplicationUpgradeProgressInfoInner object itself.
     */
    public ApplicationUpgradeProgressInfoInner withUpgradeDomains(List<UpgradeDomainInfo> upgradeDomains) {
        this.upgradeDomains = upgradeDomains;
        return this;
    }

    /**
     * Get the state of the upgrade domain. Possible values include: 'Invalid', 'RollingBackInProgress', 'RollingBackCompleted', 'RollingForwardPending', 'RollingForwardInProgress', 'RollingForwardCompleted', 'Failed'.
     *
     * @return the upgradeState value
     */
    public UpgradeState upgradeState() {
        return this.upgradeState;
    }

    /**
     * Set the state of the upgrade domain. Possible values include: 'Invalid', 'RollingBackInProgress', 'RollingBackCompleted', 'RollingForwardPending', 'RollingForwardInProgress', 'RollingForwardCompleted', 'Failed'.
     *
     * @param upgradeState the upgradeState value to set
     * @return the ApplicationUpgradeProgressInfoInner object itself.
     */
    public ApplicationUpgradeProgressInfoInner withUpgradeState(UpgradeState upgradeState) {
        this.upgradeState = upgradeState;
        return this;
    }

    /**
     * Get the name of the next upgrade domain to be processed.
     *
     * @return the nextUpgradeDomain value
     */
    public String nextUpgradeDomain() {
        return this.nextUpgradeDomain;
    }

    /**
     * Set the name of the next upgrade domain to be processed.
     *
     * @param nextUpgradeDomain the nextUpgradeDomain value to set
     * @return the ApplicationUpgradeProgressInfoInner object itself.
     */
    public ApplicationUpgradeProgressInfoInner withNextUpgradeDomain(String nextUpgradeDomain) {
        this.nextUpgradeDomain = nextUpgradeDomain;
        return this;
    }

    /**
     * Get the mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'.
     *
     * @return the rollingUpgradeMode value
     */
    public UpgradeMode rollingUpgradeMode() {
        return this.rollingUpgradeMode;
    }

    /**
     * Set the mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'.
     *
     * @param rollingUpgradeMode the rollingUpgradeMode value to set
     * @return the ApplicationUpgradeProgressInfoInner object itself.
     */
    public ApplicationUpgradeProgressInfoInner withRollingUpgradeMode(UpgradeMode rollingUpgradeMode) {
        this.rollingUpgradeMode = rollingUpgradeMode;
        return this;
    }

    /**
     * Get describes the parameters for an application upgrade. Note that upgrade description replaces the existing application description. This means that if the parameters are not specified, the existing parameters on the applications will be overwritten with the empty parameters list. This would result in the application using the default value of the parameters from the application manifest. If you do not want to change any existing parameter values, please get the application parameters first using the GetApplicationInfo query and then supply those values as Parameters in this ApplicationUpgradeDescription.
     *
     * @return the upgradeDescription value
     */
    public ApplicationUpgradeDescription upgradeDescription() {
        return this.upgradeDescription;
    }

    /**
     * Set describes the parameters for an application upgrade. Note that upgrade description replaces the existing application description. This means that if the parameters are not specified, the existing parameters on the applications will be overwritten with the empty parameters list. This would result in the application using the default value of the parameters from the application manifest. If you do not want to change any existing parameter values, please get the application parameters first using the GetApplicationInfo query and then supply those values as Parameters in this ApplicationUpgradeDescription.
     *
     * @param upgradeDescription the upgradeDescription value to set
     * @return the ApplicationUpgradeProgressInfoInner object itself.
     */
    public ApplicationUpgradeProgressInfoInner withUpgradeDescription(ApplicationUpgradeDescription upgradeDescription) {
        this.upgradeDescription = upgradeDescription;
        return this;
    }

    /**
     * Get the estimated total amount of time spent processing the overall upgrade.
     *
     * @return the upgradeDurationInMilliseconds value
     */
    public String upgradeDurationInMilliseconds() {
        return this.upgradeDurationInMilliseconds;
    }

    /**
     * Set the estimated total amount of time spent processing the overall upgrade.
     *
     * @param upgradeDurationInMilliseconds the upgradeDurationInMilliseconds value to set
     * @return the ApplicationUpgradeProgressInfoInner object itself.
     */
    public ApplicationUpgradeProgressInfoInner withUpgradeDurationInMilliseconds(String upgradeDurationInMilliseconds) {
        this.upgradeDurationInMilliseconds = upgradeDurationInMilliseconds;
        return this;
    }

    /**
     * Get the estimated total amount of time spent processing the current upgrade domain.
     *
     * @return the upgradeDomainDurationInMilliseconds value
     */
    public String upgradeDomainDurationInMilliseconds() {
        return this.upgradeDomainDurationInMilliseconds;
    }

    /**
     * Set the estimated total amount of time spent processing the current upgrade domain.
     *
     * @param upgradeDomainDurationInMilliseconds the upgradeDomainDurationInMilliseconds value to set
     * @return the ApplicationUpgradeProgressInfoInner object itself.
     */
    public ApplicationUpgradeProgressInfoInner withUpgradeDomainDurationInMilliseconds(String upgradeDomainDurationInMilliseconds) {
        this.upgradeDomainDurationInMilliseconds = upgradeDomainDurationInMilliseconds;
        return this;
    }

    /**
     * Get list of health evaluations that resulted in the current aggregated health state.
     *
     * @return the unhealthyEvaluations value
     */
    public List<HealthEvaluationWrapper> unhealthyEvaluations() {
        return this.unhealthyEvaluations;
    }

    /**
     * Set list of health evaluations that resulted in the current aggregated health state.
     *
     * @param unhealthyEvaluations the unhealthyEvaluations value to set
     * @return the ApplicationUpgradeProgressInfoInner object itself.
     */
    public ApplicationUpgradeProgressInfoInner withUnhealthyEvaluations(List<HealthEvaluationWrapper> unhealthyEvaluations) {
        this.unhealthyEvaluations = unhealthyEvaluations;
        return this;
    }

    /**
     * Get information about the current in-progress upgrade domain.
     *
     * @return the currentUpgradeDomainProgress value
     */
    public CurrentUpgradeDomainProgressInfo currentUpgradeDomainProgress() {
        return this.currentUpgradeDomainProgress;
    }

    /**
     * Set information about the current in-progress upgrade domain.
     *
     * @param currentUpgradeDomainProgress the currentUpgradeDomainProgress value to set
     * @return the ApplicationUpgradeProgressInfoInner object itself.
     */
    public ApplicationUpgradeProgressInfoInner withCurrentUpgradeDomainProgress(CurrentUpgradeDomainProgressInfo currentUpgradeDomainProgress) {
        this.currentUpgradeDomainProgress = currentUpgradeDomainProgress;
        return this;
    }

    /**
     * Get the estimated UTC datetime when the upgrade started.
     *
     * @return the startTimestampUtc value
     */
    public String startTimestampUtc() {
        return this.startTimestampUtc;
    }

    /**
     * Set the estimated UTC datetime when the upgrade started.
     *
     * @param startTimestampUtc the startTimestampUtc value to set
     * @return the ApplicationUpgradeProgressInfoInner object itself.
     */
    public ApplicationUpgradeProgressInfoInner withStartTimestampUtc(String startTimestampUtc) {
        this.startTimestampUtc = startTimestampUtc;
        return this;
    }

    /**
     * Get the estimated UTC datetime when the upgrade failed and FailureAction was executed.
     *
     * @return the failureTimestampUtc value
     */
    public String failureTimestampUtc() {
        return this.failureTimestampUtc;
    }

    /**
     * Set the estimated UTC datetime when the upgrade failed and FailureAction was executed.
     *
     * @param failureTimestampUtc the failureTimestampUtc value to set
     * @return the ApplicationUpgradeProgressInfoInner object itself.
     */
    public ApplicationUpgradeProgressInfoInner withFailureTimestampUtc(String failureTimestampUtc) {
        this.failureTimestampUtc = failureTimestampUtc;
        return this;
    }

    /**
     * Get the cause of an upgrade failure that resulted in FailureAction being executed. Possible values include: 'None', 'Interrupted', 'HealthCheck', 'UpgradeDomainTimeout', 'OverallUpgradeTimeout'.
     *
     * @return the failureReason value
     */
    public FailureReason failureReason() {
        return this.failureReason;
    }

    /**
     * Set the cause of an upgrade failure that resulted in FailureAction being executed. Possible values include: 'None', 'Interrupted', 'HealthCheck', 'UpgradeDomainTimeout', 'OverallUpgradeTimeout'.
     *
     * @param failureReason the failureReason value to set
     * @return the ApplicationUpgradeProgressInfoInner object itself.
     */
    public ApplicationUpgradeProgressInfoInner withFailureReason(FailureReason failureReason) {
        this.failureReason = failureReason;
        return this;
    }

    /**
     * Get information about the upgrade domain progress at the time of upgrade failure.
     *
     * @return the upgradeDomainProgressAtFailure value
     */
    public FailureUpgradeDomainProgressInfo upgradeDomainProgressAtFailure() {
        return this.upgradeDomainProgressAtFailure;
    }

    /**
     * Set information about the upgrade domain progress at the time of upgrade failure.
     *
     * @param upgradeDomainProgressAtFailure the upgradeDomainProgressAtFailure value to set
     * @return the ApplicationUpgradeProgressInfoInner object itself.
     */
    public ApplicationUpgradeProgressInfoInner withUpgradeDomainProgressAtFailure(FailureUpgradeDomainProgressInfo upgradeDomainProgressAtFailure) {
        this.upgradeDomainProgressAtFailure = upgradeDomainProgressAtFailure;
        return this;
    }

    /**
     * Get additional detailed information about the status of the pending upgrade.
     *
     * @return the upgradeStatusDetails value
     */
    public String upgradeStatusDetails() {
        return this.upgradeStatusDetails;
    }

    /**
     * Set additional detailed information about the status of the pending upgrade.
     *
     * @param upgradeStatusDetails the upgradeStatusDetails value to set
     * @return the ApplicationUpgradeProgressInfoInner object itself.
     */
    public ApplicationUpgradeProgressInfoInner withUpgradeStatusDetails(String upgradeStatusDetails) {
        this.upgradeStatusDetails = upgradeStatusDetails;
        return this;
    }

}
