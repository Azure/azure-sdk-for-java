/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric.implementation;

import java.util.UUID;
import com.microsoft.azure.servicefabric.ReplicaStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonSubTypes;

/**
 * Information about a Service Fabric service replica deployed on a node.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "ServiceKind")
@JsonTypeName("DeployedServiceReplicaInfo")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "Stateful", value = DeployedStatefulServiceReplicaInfo.class),
    @JsonSubTypes.Type(name = "Stateless", value = DeployedStatelessServiceInstanceInfo.class)
})
public class DeployedServiceReplicaInfoInner {
    /**
     * The full name of the service with 'fabric:' URI scheme.
     */
    @JsonProperty(value = "ServiceName")
    private String serviceName;

    /**
     * Name of the service type as specified in the service manifest.
     */
    @JsonProperty(value = "ServiceTypeName")
    private String serviceTypeName;

    /**
     * The name of the service manifest in which this service type is defined.
     */
    @JsonProperty(value = "ServiceManifestName")
    private String serviceManifestName;

    /**
     * The name of the code package that hosts this replica.
     */
    @JsonProperty(value = "CodePackageName")
    private String codePackageName;

    /**
     * An internal ID used by Service Fabric to uniquely identify a partition.
     * This is a randomly generated GUID when the service was created. The
     * partition ID is unique and does not change for the lifetime of the
     * service. If the same service was deleted and recreated the IDs of its
     * partitions would be different.
     */
    @JsonProperty(value = "PartitionId")
    private UUID partitionId;

    /**
     * The status of a replica of a service. Possible values include:
     * 'Invalid', 'InBuild', 'Standby', 'Ready', 'Down', 'Dropped'.
     */
    @JsonProperty(value = "ReplicaStatus")
    private ReplicaStatus replicaStatus;

    /**
     * The last address returned by the replica in Open or ChangeRole.
     */
    @JsonProperty(value = "Address")
    private String address;

    /**
     * The ActivationId of a deployed service package. If
     * ServicePackageActivationMode specified at the time of creating the
     * service
     * is 'SharedProcess' (or if it is not specified, in which case it defaults
     * to 'SharedProcess'), then value of ServicePackageActivationId
     * is always an empty string.
     */
    @JsonProperty(value = "ServicePackageActivationId")
    private String servicePackageActivationId;

    /**
     * Host process ID of the process that is hosting the replica. This will be
     * zero if the replica is down. In hyper-v containers this host process ID
     * will be from different kernel.
     */
    @JsonProperty(value = "HostProcessId")
    private String hostProcessId;

    /**
     * Get the full name of the service with 'fabric:' URI scheme.
     *
     * @return the serviceName value
     */
    public String serviceName() {
        return this.serviceName;
    }

    /**
     * Set the full name of the service with 'fabric:' URI scheme.
     *
     * @param serviceName the serviceName value to set
     * @return the DeployedServiceReplicaInfoInner object itself.
     */
    public DeployedServiceReplicaInfoInner withServiceName(String serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    /**
     * Get name of the service type as specified in the service manifest.
     *
     * @return the serviceTypeName value
     */
    public String serviceTypeName() {
        return this.serviceTypeName;
    }

    /**
     * Set name of the service type as specified in the service manifest.
     *
     * @param serviceTypeName the serviceTypeName value to set
     * @return the DeployedServiceReplicaInfoInner object itself.
     */
    public DeployedServiceReplicaInfoInner withServiceTypeName(String serviceTypeName) {
        this.serviceTypeName = serviceTypeName;
        return this;
    }

    /**
     * Get the name of the service manifest in which this service type is defined.
     *
     * @return the serviceManifestName value
     */
    public String serviceManifestName() {
        return this.serviceManifestName;
    }

    /**
     * Set the name of the service manifest in which this service type is defined.
     *
     * @param serviceManifestName the serviceManifestName value to set
     * @return the DeployedServiceReplicaInfoInner object itself.
     */
    public DeployedServiceReplicaInfoInner withServiceManifestName(String serviceManifestName) {
        this.serviceManifestName = serviceManifestName;
        return this;
    }

    /**
     * Get the name of the code package that hosts this replica.
     *
     * @return the codePackageName value
     */
    public String codePackageName() {
        return this.codePackageName;
    }

    /**
     * Set the name of the code package that hosts this replica.
     *
     * @param codePackageName the codePackageName value to set
     * @return the DeployedServiceReplicaInfoInner object itself.
     */
    public DeployedServiceReplicaInfoInner withCodePackageName(String codePackageName) {
        this.codePackageName = codePackageName;
        return this;
    }

    /**
     * Get an internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.
     *
     * @return the partitionId value
     */
    public UUID partitionId() {
        return this.partitionId;
    }

    /**
     * Set an internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.
     *
     * @param partitionId the partitionId value to set
     * @return the DeployedServiceReplicaInfoInner object itself.
     */
    public DeployedServiceReplicaInfoInner withPartitionId(UUID partitionId) {
        this.partitionId = partitionId;
        return this;
    }

    /**
     * Get the status of a replica of a service. Possible values include: 'Invalid', 'InBuild', 'Standby', 'Ready', 'Down', 'Dropped'.
     *
     * @return the replicaStatus value
     */
    public ReplicaStatus replicaStatus() {
        return this.replicaStatus;
    }

    /**
     * Set the status of a replica of a service. Possible values include: 'Invalid', 'InBuild', 'Standby', 'Ready', 'Down', 'Dropped'.
     *
     * @param replicaStatus the replicaStatus value to set
     * @return the DeployedServiceReplicaInfoInner object itself.
     */
    public DeployedServiceReplicaInfoInner withReplicaStatus(ReplicaStatus replicaStatus) {
        this.replicaStatus = replicaStatus;
        return this;
    }

    /**
     * Get the last address returned by the replica in Open or ChangeRole.
     *
     * @return the address value
     */
    public String address() {
        return this.address;
    }

    /**
     * Set the last address returned by the replica in Open or ChangeRole.
     *
     * @param address the address value to set
     * @return the DeployedServiceReplicaInfoInner object itself.
     */
    public DeployedServiceReplicaInfoInner withAddress(String address) {
        this.address = address;
        return this;
    }

    /**
     * Get the ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service
     is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId
     is always an empty string.
     *
     * @return the servicePackageActivationId value
     */
    public String servicePackageActivationId() {
        return this.servicePackageActivationId;
    }

    /**
     * Set the ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service
     is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId
     is always an empty string.
     *
     * @param servicePackageActivationId the servicePackageActivationId value to set
     * @return the DeployedServiceReplicaInfoInner object itself.
     */
    public DeployedServiceReplicaInfoInner withServicePackageActivationId(String servicePackageActivationId) {
        this.servicePackageActivationId = servicePackageActivationId;
        return this;
    }

    /**
     * Get host process ID of the process that is hosting the replica. This will be zero if the replica is down. In hyper-v containers this host process ID will be from different kernel.
     *
     * @return the hostProcessId value
     */
    public String hostProcessId() {
        return this.hostProcessId;
    }

    /**
     * Set host process ID of the process that is hosting the replica. This will be zero if the replica is down. In hyper-v containers this host process ID will be from different kernel.
     *
     * @param hostProcessId the hostProcessId value to set
     * @return the DeployedServiceReplicaInfoInner object itself.
     */
    public DeployedServiceReplicaInfoInner withHostProcessId(String hostProcessId) {
        this.hostProcessId = hostProcessId;
        return this;
    }

}
