/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents data structure that contains load information for a certain
 * metric in a cluster.
 */
public class LoadMetricInformation {
    /**
     * Name of the metric for which this load information is provided.
     */
    @JsonProperty(value = "Name")
    private String name;

    /**
     * Value that indicates whether the metrics is balanced or not before
     * resource balancer run.
     */
    @JsonProperty(value = "IsBalancedBefore")
    private Boolean isBalancedBefore;

    /**
     * Value that indicates whether the metrics is balanced or not after
     * resource balancer run.
     */
    @JsonProperty(value = "IsBalancedAfter")
    private Boolean isBalancedAfter;

    /**
     * The standard average deviation of the metrics before resource balancer
     * run.
     */
    @JsonProperty(value = "DeviationBefore")
    private String deviationBefore;

    /**
     * The standard average deviation of the metrics after resource balancer
     * run.
     */
    @JsonProperty(value = "DeviationAfter")
    private String deviationAfter;

    /**
     * The balancing threshold for a certain metric.
     */
    @JsonProperty(value = "BalancingThreshold")
    private String balancingThreshold;

    /**
     * The current action being taken with regard to this metric.
     */
    @JsonProperty(value = "Action")
    private String action;

    /**
     * The Activity Threshold specified for this metric in the system Cluster
     * Manifest.
     */
    @JsonProperty(value = "ActivityThreshold")
    private String activityThreshold;

    /**
     * The total cluster capacity for a given metric.
     */
    @JsonProperty(value = "ClusterCapacity")
    private String clusterCapacity;

    /**
     * The total cluster load. In future releases of Service Fabric this
     * parameter will be deprecated in favor of CurrentClusterLoad.
     */
    @JsonProperty(value = "ClusterLoad")
    private String clusterLoad;

    /**
     * The total cluster load.
     */
    @JsonProperty(value = "CurrentClusterLoad")
    private String currentClusterLoad;

    /**
     * The remaining capacity for the metric in the cluster. In future releases
     * of Service Fabric this parameter will be deprecated in favor of
     * ClusterCapacityRemaining.
     */
    @JsonProperty(value = "ClusterRemainingCapacity")
    private String clusterRemainingCapacity;

    /**
     * The remaining capacity for the metric in the cluster.
     */
    @JsonProperty(value = "ClusterCapacityRemaining")
    private String clusterCapacityRemaining;

    /**
     * Indicates that the metric is currently over capacity in the cluster.
     */
    @JsonProperty(value = "IsClusterCapacityViolation")
    private Boolean isClusterCapacityViolation;

    /**
     * The reserved percentage of total node capacity for this metric.
     */
    @JsonProperty(value = "NodeBufferPercentage")
    private String nodeBufferPercentage;

    /**
     * Remaining capacity in the cluster excluding the reserved space. In
     * future releases of Service Fabric this parameter will be deprecated in
     * favor of BufferedClusterCapacityRemaining.
     */
    @JsonProperty(value = "ClusterBufferedCapacity")
    private String clusterBufferedCapacity;

    /**
     * Remaining capacity in the cluster excluding the reserved space.
     */
    @JsonProperty(value = "BufferedClusterCapacityRemaining")
    private String bufferedClusterCapacityRemaining;

    /**
     * The remaining percentage of cluster total capacity for this metric.
     */
    @JsonProperty(value = "ClusterRemainingBufferedCapacity")
    private String clusterRemainingBufferedCapacity;

    /**
     * The minimum load on any node for this metric. In future releases of
     * Service Fabric this parameter will be deprecated in favor of
     * MinimumNodeLoad.
     */
    @JsonProperty(value = "MinNodeLoadValue")
    private String minNodeLoadValue;

    /**
     * The minimum load on any node for this metric.
     */
    @JsonProperty(value = "MinimumNodeLoad")
    private String minimumNodeLoad;

    /**
     * The node id of the node with the minimum load for this metric.
     */
    @JsonProperty(value = "MinNodeLoadNodeId")
    private NodeId minNodeLoadNodeId;

    /**
     * The maximum load on any node for this metric. In future releases of
     * Service Fabric this parameter will be deprecated in favor of
     * MaximumNodeLoad.
     */
    @JsonProperty(value = "MaxNodeLoadValue")
    private String maxNodeLoadValue;

    /**
     * The maximum load on any node for this metric.
     */
    @JsonProperty(value = "MaximumNodeLoad")
    private String maximumNodeLoad;

    /**
     * The node id of the node with the maximum load for this metric.
     */
    @JsonProperty(value = "MaxNodeLoadNodeId")
    private NodeId maxNodeLoadNodeId;

    /**
     * This value represents the load of the replicas that are planned to be
     * removed in the future within the cluster.
     * This kind of load is reported for replicas that are currently being
     * moving to other nodes and for replicas that are currently being dropped
     * but still use the load on the source node.
     */
    @JsonProperty(value = "PlannedLoadRemoval")
    private String plannedLoadRemoval;

    /**
     * Get name of the metric for which this load information is provided.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set name of the metric for which this load information is provided.
     *
     * @param name the name value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get value that indicates whether the metrics is balanced or not before resource balancer run.
     *
     * @return the isBalancedBefore value
     */
    public Boolean isBalancedBefore() {
        return this.isBalancedBefore;
    }

    /**
     * Set value that indicates whether the metrics is balanced or not before resource balancer run.
     *
     * @param isBalancedBefore the isBalancedBefore value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withIsBalancedBefore(Boolean isBalancedBefore) {
        this.isBalancedBefore = isBalancedBefore;
        return this;
    }

    /**
     * Get value that indicates whether the metrics is balanced or not after resource balancer run.
     *
     * @return the isBalancedAfter value
     */
    public Boolean isBalancedAfter() {
        return this.isBalancedAfter;
    }

    /**
     * Set value that indicates whether the metrics is balanced or not after resource balancer run.
     *
     * @param isBalancedAfter the isBalancedAfter value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withIsBalancedAfter(Boolean isBalancedAfter) {
        this.isBalancedAfter = isBalancedAfter;
        return this;
    }

    /**
     * Get the standard average deviation of the metrics before resource balancer run.
     *
     * @return the deviationBefore value
     */
    public String deviationBefore() {
        return this.deviationBefore;
    }

    /**
     * Set the standard average deviation of the metrics before resource balancer run.
     *
     * @param deviationBefore the deviationBefore value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withDeviationBefore(String deviationBefore) {
        this.deviationBefore = deviationBefore;
        return this;
    }

    /**
     * Get the standard average deviation of the metrics after resource balancer run.
     *
     * @return the deviationAfter value
     */
    public String deviationAfter() {
        return this.deviationAfter;
    }

    /**
     * Set the standard average deviation of the metrics after resource balancer run.
     *
     * @param deviationAfter the deviationAfter value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withDeviationAfter(String deviationAfter) {
        this.deviationAfter = deviationAfter;
        return this;
    }

    /**
     * Get the balancing threshold for a certain metric.
     *
     * @return the balancingThreshold value
     */
    public String balancingThreshold() {
        return this.balancingThreshold;
    }

    /**
     * Set the balancing threshold for a certain metric.
     *
     * @param balancingThreshold the balancingThreshold value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withBalancingThreshold(String balancingThreshold) {
        this.balancingThreshold = balancingThreshold;
        return this;
    }

    /**
     * Get the current action being taken with regard to this metric.
     *
     * @return the action value
     */
    public String action() {
        return this.action;
    }

    /**
     * Set the current action being taken with regard to this metric.
     *
     * @param action the action value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withAction(String action) {
        this.action = action;
        return this;
    }

    /**
     * Get the Activity Threshold specified for this metric in the system Cluster Manifest.
     *
     * @return the activityThreshold value
     */
    public String activityThreshold() {
        return this.activityThreshold;
    }

    /**
     * Set the Activity Threshold specified for this metric in the system Cluster Manifest.
     *
     * @param activityThreshold the activityThreshold value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withActivityThreshold(String activityThreshold) {
        this.activityThreshold = activityThreshold;
        return this;
    }

    /**
     * Get the total cluster capacity for a given metric.
     *
     * @return the clusterCapacity value
     */
    public String clusterCapacity() {
        return this.clusterCapacity;
    }

    /**
     * Set the total cluster capacity for a given metric.
     *
     * @param clusterCapacity the clusterCapacity value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withClusterCapacity(String clusterCapacity) {
        this.clusterCapacity = clusterCapacity;
        return this;
    }

    /**
     * Get the total cluster load. In future releases of Service Fabric this parameter will be deprecated in favor of CurrentClusterLoad.
     *
     * @return the clusterLoad value
     */
    public String clusterLoad() {
        return this.clusterLoad;
    }

    /**
     * Set the total cluster load. In future releases of Service Fabric this parameter will be deprecated in favor of CurrentClusterLoad.
     *
     * @param clusterLoad the clusterLoad value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withClusterLoad(String clusterLoad) {
        this.clusterLoad = clusterLoad;
        return this;
    }

    /**
     * Get the total cluster load.
     *
     * @return the currentClusterLoad value
     */
    public String currentClusterLoad() {
        return this.currentClusterLoad;
    }

    /**
     * Set the total cluster load.
     *
     * @param currentClusterLoad the currentClusterLoad value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withCurrentClusterLoad(String currentClusterLoad) {
        this.currentClusterLoad = currentClusterLoad;
        return this;
    }

    /**
     * Get the remaining capacity for the metric in the cluster. In future releases of Service Fabric this parameter will be deprecated in favor of ClusterCapacityRemaining.
     *
     * @return the clusterRemainingCapacity value
     */
    public String clusterRemainingCapacity() {
        return this.clusterRemainingCapacity;
    }

    /**
     * Set the remaining capacity for the metric in the cluster. In future releases of Service Fabric this parameter will be deprecated in favor of ClusterCapacityRemaining.
     *
     * @param clusterRemainingCapacity the clusterRemainingCapacity value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withClusterRemainingCapacity(String clusterRemainingCapacity) {
        this.clusterRemainingCapacity = clusterRemainingCapacity;
        return this;
    }

    /**
     * Get the remaining capacity for the metric in the cluster.
     *
     * @return the clusterCapacityRemaining value
     */
    public String clusterCapacityRemaining() {
        return this.clusterCapacityRemaining;
    }

    /**
     * Set the remaining capacity for the metric in the cluster.
     *
     * @param clusterCapacityRemaining the clusterCapacityRemaining value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withClusterCapacityRemaining(String clusterCapacityRemaining) {
        this.clusterCapacityRemaining = clusterCapacityRemaining;
        return this;
    }

    /**
     * Get indicates that the metric is currently over capacity in the cluster.
     *
     * @return the isClusterCapacityViolation value
     */
    public Boolean isClusterCapacityViolation() {
        return this.isClusterCapacityViolation;
    }

    /**
     * Set indicates that the metric is currently over capacity in the cluster.
     *
     * @param isClusterCapacityViolation the isClusterCapacityViolation value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withIsClusterCapacityViolation(Boolean isClusterCapacityViolation) {
        this.isClusterCapacityViolation = isClusterCapacityViolation;
        return this;
    }

    /**
     * Get the reserved percentage of total node capacity for this metric.
     *
     * @return the nodeBufferPercentage value
     */
    public String nodeBufferPercentage() {
        return this.nodeBufferPercentage;
    }

    /**
     * Set the reserved percentage of total node capacity for this metric.
     *
     * @param nodeBufferPercentage the nodeBufferPercentage value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withNodeBufferPercentage(String nodeBufferPercentage) {
        this.nodeBufferPercentage = nodeBufferPercentage;
        return this;
    }

    /**
     * Get remaining capacity in the cluster excluding the reserved space. In future releases of Service Fabric this parameter will be deprecated in favor of BufferedClusterCapacityRemaining.
     *
     * @return the clusterBufferedCapacity value
     */
    public String clusterBufferedCapacity() {
        return this.clusterBufferedCapacity;
    }

    /**
     * Set remaining capacity in the cluster excluding the reserved space. In future releases of Service Fabric this parameter will be deprecated in favor of BufferedClusterCapacityRemaining.
     *
     * @param clusterBufferedCapacity the clusterBufferedCapacity value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withClusterBufferedCapacity(String clusterBufferedCapacity) {
        this.clusterBufferedCapacity = clusterBufferedCapacity;
        return this;
    }

    /**
     * Get remaining capacity in the cluster excluding the reserved space.
     *
     * @return the bufferedClusterCapacityRemaining value
     */
    public String bufferedClusterCapacityRemaining() {
        return this.bufferedClusterCapacityRemaining;
    }

    /**
     * Set remaining capacity in the cluster excluding the reserved space.
     *
     * @param bufferedClusterCapacityRemaining the bufferedClusterCapacityRemaining value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withBufferedClusterCapacityRemaining(String bufferedClusterCapacityRemaining) {
        this.bufferedClusterCapacityRemaining = bufferedClusterCapacityRemaining;
        return this;
    }

    /**
     * Get the remaining percentage of cluster total capacity for this metric.
     *
     * @return the clusterRemainingBufferedCapacity value
     */
    public String clusterRemainingBufferedCapacity() {
        return this.clusterRemainingBufferedCapacity;
    }

    /**
     * Set the remaining percentage of cluster total capacity for this metric.
     *
     * @param clusterRemainingBufferedCapacity the clusterRemainingBufferedCapacity value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withClusterRemainingBufferedCapacity(String clusterRemainingBufferedCapacity) {
        this.clusterRemainingBufferedCapacity = clusterRemainingBufferedCapacity;
        return this;
    }

    /**
     * Get the minimum load on any node for this metric. In future releases of Service Fabric this parameter will be deprecated in favor of MinimumNodeLoad.
     *
     * @return the minNodeLoadValue value
     */
    public String minNodeLoadValue() {
        return this.minNodeLoadValue;
    }

    /**
     * Set the minimum load on any node for this metric. In future releases of Service Fabric this parameter will be deprecated in favor of MinimumNodeLoad.
     *
     * @param minNodeLoadValue the minNodeLoadValue value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withMinNodeLoadValue(String minNodeLoadValue) {
        this.minNodeLoadValue = minNodeLoadValue;
        return this;
    }

    /**
     * Get the minimum load on any node for this metric.
     *
     * @return the minimumNodeLoad value
     */
    public String minimumNodeLoad() {
        return this.minimumNodeLoad;
    }

    /**
     * Set the minimum load on any node for this metric.
     *
     * @param minimumNodeLoad the minimumNodeLoad value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withMinimumNodeLoad(String minimumNodeLoad) {
        this.minimumNodeLoad = minimumNodeLoad;
        return this;
    }

    /**
     * Get the node id of the node with the minimum load for this metric.
     *
     * @return the minNodeLoadNodeId value
     */
    public NodeId minNodeLoadNodeId() {
        return this.minNodeLoadNodeId;
    }

    /**
     * Set the node id of the node with the minimum load for this metric.
     *
     * @param minNodeLoadNodeId the minNodeLoadNodeId value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withMinNodeLoadNodeId(NodeId minNodeLoadNodeId) {
        this.minNodeLoadNodeId = minNodeLoadNodeId;
        return this;
    }

    /**
     * Get the maximum load on any node for this metric. In future releases of Service Fabric this parameter will be deprecated in favor of MaximumNodeLoad.
     *
     * @return the maxNodeLoadValue value
     */
    public String maxNodeLoadValue() {
        return this.maxNodeLoadValue;
    }

    /**
     * Set the maximum load on any node for this metric. In future releases of Service Fabric this parameter will be deprecated in favor of MaximumNodeLoad.
     *
     * @param maxNodeLoadValue the maxNodeLoadValue value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withMaxNodeLoadValue(String maxNodeLoadValue) {
        this.maxNodeLoadValue = maxNodeLoadValue;
        return this;
    }

    /**
     * Get the maximum load on any node for this metric.
     *
     * @return the maximumNodeLoad value
     */
    public String maximumNodeLoad() {
        return this.maximumNodeLoad;
    }

    /**
     * Set the maximum load on any node for this metric.
     *
     * @param maximumNodeLoad the maximumNodeLoad value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withMaximumNodeLoad(String maximumNodeLoad) {
        this.maximumNodeLoad = maximumNodeLoad;
        return this;
    }

    /**
     * Get the node id of the node with the maximum load for this metric.
     *
     * @return the maxNodeLoadNodeId value
     */
    public NodeId maxNodeLoadNodeId() {
        return this.maxNodeLoadNodeId;
    }

    /**
     * Set the node id of the node with the maximum load for this metric.
     *
     * @param maxNodeLoadNodeId the maxNodeLoadNodeId value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withMaxNodeLoadNodeId(NodeId maxNodeLoadNodeId) {
        this.maxNodeLoadNodeId = maxNodeLoadNodeId;
        return this;
    }

    /**
     * Get this value represents the load of the replicas that are planned to be removed in the future within the cluster.
     This kind of load is reported for replicas that are currently being moving to other nodes and for replicas that are currently being dropped but still use the load on the source node.
     *
     * @return the plannedLoadRemoval value
     */
    public String plannedLoadRemoval() {
        return this.plannedLoadRemoval;
    }

    /**
     * Set this value represents the load of the replicas that are planned to be removed in the future within the cluster.
     This kind of load is reported for replicas that are currently being moving to other nodes and for replicas that are currently being dropped but still use the load on the source node.
     *
     * @param plannedLoadRemoval the plannedLoadRemoval value to set
     * @return the LoadMetricInformation object itself.
     */
    public LoadMetricInformation withPlannedLoadRemoval(String plannedLoadRemoval) {
        this.plannedLoadRemoval = plannedLoadRemoval;
        return this;
    }

}
