/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.microsoft.azure.servicefabric.implementation.NodeEventInner;

/**
 * Node Deactivate Completed event.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "Kind")
@JsonTypeName("NodeDeactivateCompleted")
public class NodeDeactivateCompletedEvent extends NodeEventInner {
    /**
     * Id of Node instance.
     */
    @JsonProperty(value = "NodeInstance", required = true)
    private long nodeInstance;

    /**
     * Describes deactivate intent.
     */
    @JsonProperty(value = "EffectiveDeactivateIntent", required = true)
    private String effectiveDeactivateIntent;

    /**
     * Batch Ids.
     */
    @JsonProperty(value = "BatchIdsWithDeactivateIntent", required = true)
    private String batchIdsWithDeactivateIntent;

    /**
     * Start time.
     */
    @JsonProperty(value = "StartTime", required = true)
    private DateTime startTime;

    /**
     * Get id of Node instance.
     *
     * @return the nodeInstance value
     */
    public long nodeInstance() {
        return this.nodeInstance;
    }

    /**
     * Set id of Node instance.
     *
     * @param nodeInstance the nodeInstance value to set
     * @return the NodeDeactivateCompletedEvent object itself.
     */
    public NodeDeactivateCompletedEvent withNodeInstance(long nodeInstance) {
        this.nodeInstance = nodeInstance;
        return this;
    }

    /**
     * Get describes deactivate intent.
     *
     * @return the effectiveDeactivateIntent value
     */
    public String effectiveDeactivateIntent() {
        return this.effectiveDeactivateIntent;
    }

    /**
     * Set describes deactivate intent.
     *
     * @param effectiveDeactivateIntent the effectiveDeactivateIntent value to set
     * @return the NodeDeactivateCompletedEvent object itself.
     */
    public NodeDeactivateCompletedEvent withEffectiveDeactivateIntent(String effectiveDeactivateIntent) {
        this.effectiveDeactivateIntent = effectiveDeactivateIntent;
        return this;
    }

    /**
     * Get batch Ids.
     *
     * @return the batchIdsWithDeactivateIntent value
     */
    public String batchIdsWithDeactivateIntent() {
        return this.batchIdsWithDeactivateIntent;
    }

    /**
     * Set batch Ids.
     *
     * @param batchIdsWithDeactivateIntent the batchIdsWithDeactivateIntent value to set
     * @return the NodeDeactivateCompletedEvent object itself.
     */
    public NodeDeactivateCompletedEvent withBatchIdsWithDeactivateIntent(String batchIdsWithDeactivateIntent) {
        this.batchIdsWithDeactivateIntent = batchIdsWithDeactivateIntent;
        return this;
    }

    /**
     * Get start time.
     *
     * @return the startTime value
     */
    public DateTime startTime() {
        return this.startTime;
    }

    /**
     * Set start time.
     *
     * @param startTime the startTime value to set
     * @return the NodeDeactivateCompletedEvent object itself.
     */
    public NodeDeactivateCompletedEvent withStartTime(DateTime startTime) {
        this.startTime = startTime;
        return this;
    }

}
