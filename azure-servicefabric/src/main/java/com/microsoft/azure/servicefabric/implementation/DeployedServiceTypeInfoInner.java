/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric.implementation;

import com.microsoft.azure.servicefabric.ServiceTypeRegistrationStatus;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Information about service type deployed on a node, information such as the
 * status of the service type registration on a node.
 */
public class DeployedServiceTypeInfoInner {
    /**
     * Name of the service type as specified in the service manifest.
     */
    @JsonProperty(value = "ServiceTypeName")
    private String serviceTypeName;

    /**
     * The name of the service manifest in which this service type is defined.
     */
    @JsonProperty(value = "ServiceManifestName")
    private String serviceManifestName;

    /**
     * The name of the code package that registered the service type.
     */
    @JsonProperty(value = "CodePackageName")
    private String codePackageName;

    /**
     * The status of the service type registration on the node. Possible values
     * include: 'Invalid', 'Disabled', 'Enabled', 'Registered'.
     */
    @JsonProperty(value = "Status")
    private ServiceTypeRegistrationStatus status;

    /**
     * The ActivationId of a deployed service package. If
     * ServicePackageActivationMode specified at the time of creating the
     * service
     * is 'SharedProcess' (or if it is not specified, in which case it defaults
     * to 'SharedProcess'), then value of ServicePackageActivationId
     * is always an empty string.
     */
    @JsonProperty(value = "ServicePackageActivationId")
    private String servicePackageActivationId;

    /**
     * Get name of the service type as specified in the service manifest.
     *
     * @return the serviceTypeName value
     */
    public String serviceTypeName() {
        return this.serviceTypeName;
    }

    /**
     * Set name of the service type as specified in the service manifest.
     *
     * @param serviceTypeName the serviceTypeName value to set
     * @return the DeployedServiceTypeInfoInner object itself.
     */
    public DeployedServiceTypeInfoInner withServiceTypeName(String serviceTypeName) {
        this.serviceTypeName = serviceTypeName;
        return this;
    }

    /**
     * Get the name of the service manifest in which this service type is defined.
     *
     * @return the serviceManifestName value
     */
    public String serviceManifestName() {
        return this.serviceManifestName;
    }

    /**
     * Set the name of the service manifest in which this service type is defined.
     *
     * @param serviceManifestName the serviceManifestName value to set
     * @return the DeployedServiceTypeInfoInner object itself.
     */
    public DeployedServiceTypeInfoInner withServiceManifestName(String serviceManifestName) {
        this.serviceManifestName = serviceManifestName;
        return this;
    }

    /**
     * Get the name of the code package that registered the service type.
     *
     * @return the codePackageName value
     */
    public String codePackageName() {
        return this.codePackageName;
    }

    /**
     * Set the name of the code package that registered the service type.
     *
     * @param codePackageName the codePackageName value to set
     * @return the DeployedServiceTypeInfoInner object itself.
     */
    public DeployedServiceTypeInfoInner withCodePackageName(String codePackageName) {
        this.codePackageName = codePackageName;
        return this;
    }

    /**
     * Get the status of the service type registration on the node. Possible values include: 'Invalid', 'Disabled', 'Enabled', 'Registered'.
     *
     * @return the status value
     */
    public ServiceTypeRegistrationStatus status() {
        return this.status;
    }

    /**
     * Set the status of the service type registration on the node. Possible values include: 'Invalid', 'Disabled', 'Enabled', 'Registered'.
     *
     * @param status the status value to set
     * @return the DeployedServiceTypeInfoInner object itself.
     */
    public DeployedServiceTypeInfoInner withStatus(ServiceTypeRegistrationStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service
     is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId
     is always an empty string.
     *
     * @return the servicePackageActivationId value
     */
    public String servicePackageActivationId() {
        return this.servicePackageActivationId;
    }

    /**
     * Set the ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service
     is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId
     is always an empty string.
     *
     * @param servicePackageActivationId the servicePackageActivationId value to set
     * @return the DeployedServiceTypeInfoInner object itself.
     */
    public DeployedServiceTypeInfoInner withServicePackageActivationId(String servicePackageActivationId) {
        this.servicePackageActivationId = servicePackageActivationId;
        return this;
    }

}
