/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Represents a scaling trigger related to an average load of a metric/resource
 * of a partition.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "Kind")
@JsonTypeName("AveragePartitionLoad")
public class AveragePartitionLoadScalingTrigger extends ScalingTriggerDescription {
    /**
     * The name of the metric for which usage should be tracked.
     */
    @JsonProperty(value = "MetricName", required = true)
    private String metricName;

    /**
     * The lower limit of the load below which a scale in operation should be
     * performed.
     */
    @JsonProperty(value = "LowerLoadThreshold", required = true)
    private String lowerLoadThreshold;

    /**
     * The upper limit of the load beyond which a scale out operation should be
     * performed.
     */
    @JsonProperty(value = "UpperLoadThreshold", required = true)
    private String upperLoadThreshold;

    /**
     * The period in seconds on which a decision is made whether to scale or
     * not.
     */
    @JsonProperty(value = "ScaleIntervalInSeconds", required = true)
    private long scaleIntervalInSeconds;

    /**
     * Get the name of the metric for which usage should be tracked.
     *
     * @return the metricName value
     */
    public String metricName() {
        return this.metricName;
    }

    /**
     * Set the name of the metric for which usage should be tracked.
     *
     * @param metricName the metricName value to set
     * @return the AveragePartitionLoadScalingTrigger object itself.
     */
    public AveragePartitionLoadScalingTrigger withMetricName(String metricName) {
        this.metricName = metricName;
        return this;
    }

    /**
     * Get the lower limit of the load below which a scale in operation should be performed.
     *
     * @return the lowerLoadThreshold value
     */
    public String lowerLoadThreshold() {
        return this.lowerLoadThreshold;
    }

    /**
     * Set the lower limit of the load below which a scale in operation should be performed.
     *
     * @param lowerLoadThreshold the lowerLoadThreshold value to set
     * @return the AveragePartitionLoadScalingTrigger object itself.
     */
    public AveragePartitionLoadScalingTrigger withLowerLoadThreshold(String lowerLoadThreshold) {
        this.lowerLoadThreshold = lowerLoadThreshold;
        return this;
    }

    /**
     * Get the upper limit of the load beyond which a scale out operation should be performed.
     *
     * @return the upperLoadThreshold value
     */
    public String upperLoadThreshold() {
        return this.upperLoadThreshold;
    }

    /**
     * Set the upper limit of the load beyond which a scale out operation should be performed.
     *
     * @param upperLoadThreshold the upperLoadThreshold value to set
     * @return the AveragePartitionLoadScalingTrigger object itself.
     */
    public AveragePartitionLoadScalingTrigger withUpperLoadThreshold(String upperLoadThreshold) {
        this.upperLoadThreshold = upperLoadThreshold;
        return this;
    }

    /**
     * Get the period in seconds on which a decision is made whether to scale or not.
     *
     * @return the scaleIntervalInSeconds value
     */
    public long scaleIntervalInSeconds() {
        return this.scaleIntervalInSeconds;
    }

    /**
     * Set the period in seconds on which a decision is made whether to scale or not.
     *
     * @param scaleIntervalInSeconds the scaleIntervalInSeconds value to set
     * @return the AveragePartitionLoadScalingTrigger object itself.
     */
    public AveragePartitionLoadScalingTrigger withScaleIntervalInSeconds(long scaleIntervalInSeconds) {
        this.scaleIntervalInSeconds = scaleIntervalInSeconds;
        return this;
    }

}
