/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.microsoft.azure.servicefabric.implementation.DeployedServiceReplicaDetailInfoInner;

/**
 * Information about a stateful replica running in a code package. Note
 * DeployedServiceReplicaQueryResult will contain duplicate data like
 * ServiceKind, ServiceName, PartitionId and replicaId.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "ServiceKind")
@JsonTypeName("Stateful")
public class DeployedStatefulServiceReplicaDetailInfo extends DeployedServiceReplicaDetailInfoInner {
    /**
     * Id of a stateful service replica. ReplicaId is used by Service Fabric to
     * uniquely identify a replica of a partition. It is unique within a
     * partition and does not change for the lifetime of the replica. If a
     * replica gets dropped and another replica gets created on the same node
     * for the same partition, it will get a different value for the id.
     * Sometimes the id of a stateless service instance is also referred as a
     * replica id.
     */
    @JsonProperty(value = "ReplicaId")
    private String replicaId;

    /**
     * Specifies the operation currently being executed by the Replicator.
     * Possible values include: 'Invalid', 'None', 'Open', 'ChangeRole',
     * 'UpdateEpoch', 'Close', 'Abort', 'OnDataLoss', 'WaitForCatchup',
     * 'Build'.
     */
    @JsonProperty(value = "CurrentReplicatorOperation")
    private ReplicatorOperationName currentReplicatorOperation;

    /**
     * Specifies the access status of the partition. Possible values include:
     * 'Invalid', 'Granted', 'ReconfigurationPending', 'NotPrimary',
     * 'NoWriteQuorum'.
     */
    @JsonProperty(value = "ReadStatus")
    private PartitionAccessStatus readStatus;

    /**
     * Specifies the access status of the partition. Possible values include:
     * 'Invalid', 'Granted', 'ReconfigurationPending', 'NotPrimary',
     * 'NoWriteQuorum'.
     */
    @JsonProperty(value = "WriteStatus")
    private PartitionAccessStatus writeStatus;

    /**
     * Represents a base class for primary or secondary replicator status.
     * Contains information about the service fabric replicator like the
     * replication/copy queue utilization, last acknowledgement received
     * timestamp, etc.
     */
    @JsonProperty(value = "ReplicatorStatus")
    private ReplicatorStatus replicatorStatus;

    /**
     * Key value store related information for the replica.
     */
    @JsonProperty(value = "ReplicaStatus")
    private KeyValueStoreReplicaStatus replicaStatus;

    /**
     * Information about a stateful service replica deployed on a node.
     */
    @JsonProperty(value = "DeployedServiceReplicaQueryResult")
    private DeployedStatefulServiceReplicaInfo deployedServiceReplicaQueryResult;

    /**
     * Get id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id.
     *
     * @return the replicaId value
     */
    public String replicaId() {
        return this.replicaId;
    }

    /**
     * Set id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id.
     *
     * @param replicaId the replicaId value to set
     * @return the DeployedStatefulServiceReplicaDetailInfo object itself.
     */
    public DeployedStatefulServiceReplicaDetailInfo withReplicaId(String replicaId) {
        this.replicaId = replicaId;
        return this;
    }

    /**
     * Get specifies the operation currently being executed by the Replicator. Possible values include: 'Invalid', 'None', 'Open', 'ChangeRole', 'UpdateEpoch', 'Close', 'Abort', 'OnDataLoss', 'WaitForCatchup', 'Build'.
     *
     * @return the currentReplicatorOperation value
     */
    public ReplicatorOperationName currentReplicatorOperation() {
        return this.currentReplicatorOperation;
    }

    /**
     * Set specifies the operation currently being executed by the Replicator. Possible values include: 'Invalid', 'None', 'Open', 'ChangeRole', 'UpdateEpoch', 'Close', 'Abort', 'OnDataLoss', 'WaitForCatchup', 'Build'.
     *
     * @param currentReplicatorOperation the currentReplicatorOperation value to set
     * @return the DeployedStatefulServiceReplicaDetailInfo object itself.
     */
    public DeployedStatefulServiceReplicaDetailInfo withCurrentReplicatorOperation(ReplicatorOperationName currentReplicatorOperation) {
        this.currentReplicatorOperation = currentReplicatorOperation;
        return this;
    }

    /**
     * Get specifies the access status of the partition. Possible values include: 'Invalid', 'Granted', 'ReconfigurationPending', 'NotPrimary', 'NoWriteQuorum'.
     *
     * @return the readStatus value
     */
    public PartitionAccessStatus readStatus() {
        return this.readStatus;
    }

    /**
     * Set specifies the access status of the partition. Possible values include: 'Invalid', 'Granted', 'ReconfigurationPending', 'NotPrimary', 'NoWriteQuorum'.
     *
     * @param readStatus the readStatus value to set
     * @return the DeployedStatefulServiceReplicaDetailInfo object itself.
     */
    public DeployedStatefulServiceReplicaDetailInfo withReadStatus(PartitionAccessStatus readStatus) {
        this.readStatus = readStatus;
        return this;
    }

    /**
     * Get specifies the access status of the partition. Possible values include: 'Invalid', 'Granted', 'ReconfigurationPending', 'NotPrimary', 'NoWriteQuorum'.
     *
     * @return the writeStatus value
     */
    public PartitionAccessStatus writeStatus() {
        return this.writeStatus;
    }

    /**
     * Set specifies the access status of the partition. Possible values include: 'Invalid', 'Granted', 'ReconfigurationPending', 'NotPrimary', 'NoWriteQuorum'.
     *
     * @param writeStatus the writeStatus value to set
     * @return the DeployedStatefulServiceReplicaDetailInfo object itself.
     */
    public DeployedStatefulServiceReplicaDetailInfo withWriteStatus(PartitionAccessStatus writeStatus) {
        this.writeStatus = writeStatus;
        return this;
    }

    /**
     * Get represents a base class for primary or secondary replicator status.
     Contains information about the service fabric replicator like the replication/copy queue utilization, last acknowledgement received timestamp, etc.
     *
     * @return the replicatorStatus value
     */
    public ReplicatorStatus replicatorStatus() {
        return this.replicatorStatus;
    }

    /**
     * Set represents a base class for primary or secondary replicator status.
     Contains information about the service fabric replicator like the replication/copy queue utilization, last acknowledgement received timestamp, etc.
     *
     * @param replicatorStatus the replicatorStatus value to set
     * @return the DeployedStatefulServiceReplicaDetailInfo object itself.
     */
    public DeployedStatefulServiceReplicaDetailInfo withReplicatorStatus(ReplicatorStatus replicatorStatus) {
        this.replicatorStatus = replicatorStatus;
        return this;
    }

    /**
     * Get key value store related information for the replica.
     *
     * @return the replicaStatus value
     */
    public KeyValueStoreReplicaStatus replicaStatus() {
        return this.replicaStatus;
    }

    /**
     * Set key value store related information for the replica.
     *
     * @param replicaStatus the replicaStatus value to set
     * @return the DeployedStatefulServiceReplicaDetailInfo object itself.
     */
    public DeployedStatefulServiceReplicaDetailInfo withReplicaStatus(KeyValueStoreReplicaStatus replicaStatus) {
        this.replicaStatus = replicaStatus;
        return this;
    }

    /**
     * Get information about a stateful service replica deployed on a node.
     *
     * @return the deployedServiceReplicaQueryResult value
     */
    public DeployedStatefulServiceReplicaInfo deployedServiceReplicaQueryResult() {
        return this.deployedServiceReplicaQueryResult;
    }

    /**
     * Set information about a stateful service replica deployed on a node.
     *
     * @param deployedServiceReplicaQueryResult the deployedServiceReplicaQueryResult value to set
     * @return the DeployedStatefulServiceReplicaDetailInfo object itself.
     */
    public DeployedStatefulServiceReplicaDetailInfo withDeployedServiceReplicaQueryResult(DeployedStatefulServiceReplicaInfo deployedServiceReplicaQueryResult) {
        this.deployedServiceReplicaQueryResult = deployedServiceReplicaQueryResult;
        return this;
    }

}
