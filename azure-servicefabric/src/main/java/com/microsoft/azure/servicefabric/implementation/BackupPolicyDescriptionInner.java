/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric.implementation;

import com.microsoft.azure.servicefabric.BackupScheduleDescription;
import com.microsoft.azure.servicefabric.BackupStorageDescription;
import com.microsoft.azure.servicefabric.RetentionPolicyDescription;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Describes a backup policy for configuring periodic backup.
 */
public class BackupPolicyDescriptionInner {
    /**
     * The unique name identifying this backup policy.
     */
    @JsonProperty(value = "Name", required = true)
    private String name;

    /**
     * Specifies whether to trigger restore automatically using the latest
     * available backup in case the partition experiences a data loss event.
     */
    @JsonProperty(value = "AutoRestoreOnDataLoss", required = true)
    private boolean autoRestoreOnDataLoss;

    /**
     * Defines the maximum number of incremental backups to be taken between
     * two full backups. This is just the upper limit. A full backup may be
     * taken before specified number of incremental backups are completed in
     * one of the following conditions
     * - The replica has never taken a full backup since it has become primary,
     * - Some of the log records since the last backup has been truncated, or
     * - Replica passed the MaxAccumulatedBackupLogSizeInMB limit.
     */
    @JsonProperty(value = "MaxIncrementalBackups", required = true)
    private int maxIncrementalBackups;

    /**
     * Describes the backup schedule parameters.
     */
    @JsonProperty(value = "Schedule", required = true)
    private BackupScheduleDescription schedule;

    /**
     * Describes the details of backup storage where to store the periodic
     * backups.
     */
    @JsonProperty(value = "Storage", required = true)
    private BackupStorageDescription storage;

    /**
     * Describes the policy to retain backups in storage.
     */
    @JsonProperty(value = "RetentionPolicy")
    private RetentionPolicyDescription retentionPolicy;

    /**
     * Get the unique name identifying this backup policy.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the unique name identifying this backup policy.
     *
     * @param name the name value to set
     * @return the BackupPolicyDescriptionInner object itself.
     */
    public BackupPolicyDescriptionInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get specifies whether to trigger restore automatically using the latest available backup in case the partition experiences a data loss event.
     *
     * @return the autoRestoreOnDataLoss value
     */
    public boolean autoRestoreOnDataLoss() {
        return this.autoRestoreOnDataLoss;
    }

    /**
     * Set specifies whether to trigger restore automatically using the latest available backup in case the partition experiences a data loss event.
     *
     * @param autoRestoreOnDataLoss the autoRestoreOnDataLoss value to set
     * @return the BackupPolicyDescriptionInner object itself.
     */
    public BackupPolicyDescriptionInner withAutoRestoreOnDataLoss(boolean autoRestoreOnDataLoss) {
        this.autoRestoreOnDataLoss = autoRestoreOnDataLoss;
        return this;
    }

    /**
     * Get defines the maximum number of incremental backups to be taken between two full backups. This is just the upper limit. A full backup may be taken before specified number of incremental backups are completed in one of the following conditions
     - The replica has never taken a full backup since it has become primary,
     - Some of the log records since the last backup has been truncated, or
     - Replica passed the MaxAccumulatedBackupLogSizeInMB limit.
     *
     * @return the maxIncrementalBackups value
     */
    public int maxIncrementalBackups() {
        return this.maxIncrementalBackups;
    }

    /**
     * Set defines the maximum number of incremental backups to be taken between two full backups. This is just the upper limit. A full backup may be taken before specified number of incremental backups are completed in one of the following conditions
     - The replica has never taken a full backup since it has become primary,
     - Some of the log records since the last backup has been truncated, or
     - Replica passed the MaxAccumulatedBackupLogSizeInMB limit.
     *
     * @param maxIncrementalBackups the maxIncrementalBackups value to set
     * @return the BackupPolicyDescriptionInner object itself.
     */
    public BackupPolicyDescriptionInner withMaxIncrementalBackups(int maxIncrementalBackups) {
        this.maxIncrementalBackups = maxIncrementalBackups;
        return this;
    }

    /**
     * Get describes the backup schedule parameters.
     *
     * @return the schedule value
     */
    public BackupScheduleDescription schedule() {
        return this.schedule;
    }

    /**
     * Set describes the backup schedule parameters.
     *
     * @param schedule the schedule value to set
     * @return the BackupPolicyDescriptionInner object itself.
     */
    public BackupPolicyDescriptionInner withSchedule(BackupScheduleDescription schedule) {
        this.schedule = schedule;
        return this;
    }

    /**
     * Get describes the details of backup storage where to store the periodic backups.
     *
     * @return the storage value
     */
    public BackupStorageDescription storage() {
        return this.storage;
    }

    /**
     * Set describes the details of backup storage where to store the periodic backups.
     *
     * @param storage the storage value to set
     * @return the BackupPolicyDescriptionInner object itself.
     */
    public BackupPolicyDescriptionInner withStorage(BackupStorageDescription storage) {
        this.storage = storage;
        return this;
    }

    /**
     * Get describes the policy to retain backups in storage.
     *
     * @return the retentionPolicy value
     */
    public RetentionPolicyDescription retentionPolicy() {
        return this.retentionPolicy;
    }

    /**
     * Set describes the policy to retain backups in storage.
     *
     * @param retentionPolicy the retentionPolicy value to set
     * @return the BackupPolicyDescriptionInner object itself.
     */
    public BackupPolicyDescriptionInner withRetentionPolicy(RetentionPolicyDescription retentionPolicy) {
        this.retentionPolicy = retentionPolicy;
        return this;
    }

}
