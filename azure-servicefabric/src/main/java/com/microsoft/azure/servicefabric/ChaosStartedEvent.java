/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.microsoft.azure.servicefabric.implementation.ClusterEventInner;

/**
 * Chaos Started event.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "Kind")
@JsonTypeName("ChaosStarted")
public class ChaosStartedEvent extends ClusterEventInner {
    /**
     * Maximum number of concurrent faults.
     */
    @JsonProperty(value = "MaxConcurrentFaults", required = true)
    private long maxConcurrentFaults;

    /**
     * Time to run in seconds.
     */
    @JsonProperty(value = "TimeToRunInSeconds", required = true)
    private double timeToRunInSeconds;

    /**
     * Maximum timeout for cluster stabilization in seconds.
     */
    @JsonProperty(value = "MaxClusterStabilizationTimeoutInSeconds", required = true)
    private double maxClusterStabilizationTimeoutInSeconds;

    /**
     * Wait time between iterations in seconds.
     */
    @JsonProperty(value = "WaitTimeBetweenIterationsInSeconds", required = true)
    private double waitTimeBetweenIterationsInSeconds;

    /**
     * Wait time between faults in seconds.
     */
    @JsonProperty(value = "WaitTimeBetweenFautlsInSeconds", required = true)
    private double waitTimeBetweenFautlsInSeconds;

    /**
     * Indicates MoveReplica fault is enabled.
     */
    @JsonProperty(value = "MoveReplicaFaultEnabled", required = true)
    private boolean moveReplicaFaultEnabled;

    /**
     * List of included Node types.
     */
    @JsonProperty(value = "IncludedNodeTypeList", required = true)
    private String includedNodeTypeList;

    /**
     * List of included Applications.
     */
    @JsonProperty(value = "IncludedApplicationList", required = true)
    private String includedApplicationList;

    /**
     * Health policy.
     */
    @JsonProperty(value = "ClusterHealthPolicy", required = true)
    private String clusterHealthPolicy;

    /**
     * Chaos Context.
     */
    @JsonProperty(value = "ChaosContext", required = true)
    private String chaosContext;

    /**
     * Get maximum number of concurrent faults.
     *
     * @return the maxConcurrentFaults value
     */
    public long maxConcurrentFaults() {
        return this.maxConcurrentFaults;
    }

    /**
     * Set maximum number of concurrent faults.
     *
     * @param maxConcurrentFaults the maxConcurrentFaults value to set
     * @return the ChaosStartedEvent object itself.
     */
    public ChaosStartedEvent withMaxConcurrentFaults(long maxConcurrentFaults) {
        this.maxConcurrentFaults = maxConcurrentFaults;
        return this;
    }

    /**
     * Get time to run in seconds.
     *
     * @return the timeToRunInSeconds value
     */
    public double timeToRunInSeconds() {
        return this.timeToRunInSeconds;
    }

    /**
     * Set time to run in seconds.
     *
     * @param timeToRunInSeconds the timeToRunInSeconds value to set
     * @return the ChaosStartedEvent object itself.
     */
    public ChaosStartedEvent withTimeToRunInSeconds(double timeToRunInSeconds) {
        this.timeToRunInSeconds = timeToRunInSeconds;
        return this;
    }

    /**
     * Get maximum timeout for cluster stabilization in seconds.
     *
     * @return the maxClusterStabilizationTimeoutInSeconds value
     */
    public double maxClusterStabilizationTimeoutInSeconds() {
        return this.maxClusterStabilizationTimeoutInSeconds;
    }

    /**
     * Set maximum timeout for cluster stabilization in seconds.
     *
     * @param maxClusterStabilizationTimeoutInSeconds the maxClusterStabilizationTimeoutInSeconds value to set
     * @return the ChaosStartedEvent object itself.
     */
    public ChaosStartedEvent withMaxClusterStabilizationTimeoutInSeconds(double maxClusterStabilizationTimeoutInSeconds) {
        this.maxClusterStabilizationTimeoutInSeconds = maxClusterStabilizationTimeoutInSeconds;
        return this;
    }

    /**
     * Get wait time between iterations in seconds.
     *
     * @return the waitTimeBetweenIterationsInSeconds value
     */
    public double waitTimeBetweenIterationsInSeconds() {
        return this.waitTimeBetweenIterationsInSeconds;
    }

    /**
     * Set wait time between iterations in seconds.
     *
     * @param waitTimeBetweenIterationsInSeconds the waitTimeBetweenIterationsInSeconds value to set
     * @return the ChaosStartedEvent object itself.
     */
    public ChaosStartedEvent withWaitTimeBetweenIterationsInSeconds(double waitTimeBetweenIterationsInSeconds) {
        this.waitTimeBetweenIterationsInSeconds = waitTimeBetweenIterationsInSeconds;
        return this;
    }

    /**
     * Get wait time between faults in seconds.
     *
     * @return the waitTimeBetweenFautlsInSeconds value
     */
    public double waitTimeBetweenFautlsInSeconds() {
        return this.waitTimeBetweenFautlsInSeconds;
    }

    /**
     * Set wait time between faults in seconds.
     *
     * @param waitTimeBetweenFautlsInSeconds the waitTimeBetweenFautlsInSeconds value to set
     * @return the ChaosStartedEvent object itself.
     */
    public ChaosStartedEvent withWaitTimeBetweenFautlsInSeconds(double waitTimeBetweenFautlsInSeconds) {
        this.waitTimeBetweenFautlsInSeconds = waitTimeBetweenFautlsInSeconds;
        return this;
    }

    /**
     * Get indicates MoveReplica fault is enabled.
     *
     * @return the moveReplicaFaultEnabled value
     */
    public boolean moveReplicaFaultEnabled() {
        return this.moveReplicaFaultEnabled;
    }

    /**
     * Set indicates MoveReplica fault is enabled.
     *
     * @param moveReplicaFaultEnabled the moveReplicaFaultEnabled value to set
     * @return the ChaosStartedEvent object itself.
     */
    public ChaosStartedEvent withMoveReplicaFaultEnabled(boolean moveReplicaFaultEnabled) {
        this.moveReplicaFaultEnabled = moveReplicaFaultEnabled;
        return this;
    }

    /**
     * Get list of included Node types.
     *
     * @return the includedNodeTypeList value
     */
    public String includedNodeTypeList() {
        return this.includedNodeTypeList;
    }

    /**
     * Set list of included Node types.
     *
     * @param includedNodeTypeList the includedNodeTypeList value to set
     * @return the ChaosStartedEvent object itself.
     */
    public ChaosStartedEvent withIncludedNodeTypeList(String includedNodeTypeList) {
        this.includedNodeTypeList = includedNodeTypeList;
        return this;
    }

    /**
     * Get list of included Applications.
     *
     * @return the includedApplicationList value
     */
    public String includedApplicationList() {
        return this.includedApplicationList;
    }

    /**
     * Set list of included Applications.
     *
     * @param includedApplicationList the includedApplicationList value to set
     * @return the ChaosStartedEvent object itself.
     */
    public ChaosStartedEvent withIncludedApplicationList(String includedApplicationList) {
        this.includedApplicationList = includedApplicationList;
        return this;
    }

    /**
     * Get health policy.
     *
     * @return the clusterHealthPolicy value
     */
    public String clusterHealthPolicy() {
        return this.clusterHealthPolicy;
    }

    /**
     * Set health policy.
     *
     * @param clusterHealthPolicy the clusterHealthPolicy value to set
     * @return the ChaosStartedEvent object itself.
     */
    public ChaosStartedEvent withClusterHealthPolicy(String clusterHealthPolicy) {
        this.clusterHealthPolicy = clusterHealthPolicy;
        return this;
    }

    /**
     * Get chaos Context.
     *
     * @return the chaosContext value
     */
    public String chaosContext() {
        return this.chaosContext;
    }

    /**
     * Set chaos Context.
     *
     * @param chaosContext the chaosContext value to set
     * @return the ChaosStartedEvent object itself.
     */
    public ChaosStartedEvent withChaosContext(String chaosContext) {
        this.chaosContext = chaosContext;
        return this;
    }

}
