/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Specifying this parameter adds support for reliable collections.
 */
public class ReliableCollectionsRef {
    /**
     * Name of ReliableCollection resource. Right now it's not used and you can
     * use any string.
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /**
     * False (the default) if ReliableCollections state is persisted to disk as
     * usual. True if you do not want to persist state, in which case
     * replication is still enabled and you can use ReliableCollections as
     * distributed cache.
     */
    @JsonProperty(value = "doNotPersistState")
    private Boolean doNotPersistState;

    /**
     * Get name of ReliableCollection resource. Right now it's not used and you can use any string.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set name of ReliableCollection resource. Right now it's not used and you can use any string.
     *
     * @param name the name value to set
     * @return the ReliableCollectionsRef object itself.
     */
    public ReliableCollectionsRef withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get false (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to persist state, in which case replication is still enabled and you can use ReliableCollections as distributed cache.
     *
     * @return the doNotPersistState value
     */
    public Boolean doNotPersistState() {
        return this.doNotPersistState;
    }

    /**
     * Set false (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to persist state, in which case replication is still enabled and you can use ReliableCollections as distributed cache.
     *
     * @param doNotPersistState the doNotPersistState value to set
     * @return the ReliableCollectionsRef object itself.
     */
    public ReliableCollectionsRef withDoNotPersistState(Boolean doNotPersistState) {
        this.doNotPersistState = doNotPersistState;
        return this;
    }

}
