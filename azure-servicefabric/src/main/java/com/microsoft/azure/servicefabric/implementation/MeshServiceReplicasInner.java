/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.servicefabric.FabricErrorException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in MeshServiceReplicas.
 */
public class MeshServiceReplicasInner {
    /** The Retrofit service to perform REST calls. */
    private MeshServiceReplicasService service;
    /** The service client containing this operation class. */
    private ServiceFabricClientAPIsImpl client;

    /**
     * Initializes an instance of MeshServiceReplicasInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public MeshServiceReplicasInner(Retrofit retrofit, ServiceFabricClientAPIsImpl client) {
        this.service = retrofit.create(MeshServiceReplicasService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for MeshServiceReplicas to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MeshServiceReplicasService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.servicefabric.MeshServiceReplicas get" })
        @GET("Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas/{replicaName}")
        Observable<Response<ResponseBody>> get(@Path(value = "applicationResourceName", encoded = true) String applicationResourceName, @Path(value = "serviceResourceName", encoded = true) String serviceResourceName, @Path(value = "replicaName", encoded = true) String replicaName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.servicefabric.MeshServiceReplicas list" })
        @GET("Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas")
        Observable<Response<ResponseBody>> list(@Path(value = "applicationResourceName", encoded = true) String applicationResourceName, @Path(value = "serviceResourceName", encoded = true) String serviceResourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the given replica of the service of an application.
     * Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
     *
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param replicaName Service Fabric replica name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws FabricErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServiceReplicaDescriptionInner object if successful.
     */
    public ServiceReplicaDescriptionInner get(String applicationResourceName, String serviceResourceName, String replicaName) {
        return getWithServiceResponseAsync(applicationResourceName, serviceResourceName, replicaName).toBlocking().single().body();
    }

    /**
     * Gets the given replica of the service of an application.
     * Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
     *
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param replicaName Service Fabric replica name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServiceReplicaDescriptionInner> getAsync(String applicationResourceName, String serviceResourceName, String replicaName, final ServiceCallback<ServiceReplicaDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(applicationResourceName, serviceResourceName, replicaName), serviceCallback);
    }

    /**
     * Gets the given replica of the service of an application.
     * Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
     *
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param replicaName Service Fabric replica name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceReplicaDescriptionInner object
     */
    public Observable<ServiceReplicaDescriptionInner> getAsync(String applicationResourceName, String serviceResourceName, String replicaName) {
        return getWithServiceResponseAsync(applicationResourceName, serviceResourceName, replicaName).map(new Func1<ServiceResponse<ServiceReplicaDescriptionInner>, ServiceReplicaDescriptionInner>() {
            @Override
            public ServiceReplicaDescriptionInner call(ServiceResponse<ServiceReplicaDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the given replica of the service of an application.
     * Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
     *
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param replicaName Service Fabric replica name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceReplicaDescriptionInner object
     */
    public Observable<ServiceResponse<ServiceReplicaDescriptionInner>> getWithServiceResponseAsync(String applicationResourceName, String serviceResourceName, String replicaName) {
        if (applicationResourceName == null) {
            throw new IllegalArgumentException("Parameter applicationResourceName is required and cannot be null.");
        }
        if (serviceResourceName == null) {
            throw new IllegalArgumentException("Parameter serviceResourceName is required and cannot be null.");
        }
        if (replicaName == null) {
            throw new IllegalArgumentException("Parameter replicaName is required and cannot be null.");
        }
        final String apiVersion = "6.4-preview";
        return service.get(applicationResourceName, serviceResourceName, replicaName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServiceReplicaDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<ServiceReplicaDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServiceReplicaDescriptionInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServiceReplicaDescriptionInner> getDelegate(Response<ResponseBody> response) throws FabricErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ServiceReplicaDescriptionInner, FabricErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ServiceReplicaDescriptionInner>() { }.getType())
                .registerError(FabricErrorException.class)
                .build(response);
    }

    /**
     * Lists all the replicas of a service.
     * Gets the information about all replicas of a service. The information include the description and other properties of the service replica.
     *
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws FabricErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedServiceReplicaDescriptionListInner object if successful.
     */
    public PagedServiceReplicaDescriptionListInner list(String applicationResourceName, String serviceResourceName) {
        return listWithServiceResponseAsync(applicationResourceName, serviceResourceName).toBlocking().single().body();
    }

    /**
     * Lists all the replicas of a service.
     * Gets the information about all replicas of a service. The information include the description and other properties of the service replica.
     *
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PagedServiceReplicaDescriptionListInner> listAsync(String applicationResourceName, String serviceResourceName, final ServiceCallback<PagedServiceReplicaDescriptionListInner> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(applicationResourceName, serviceResourceName), serviceCallback);
    }

    /**
     * Lists all the replicas of a service.
     * Gets the information about all replicas of a service. The information include the description and other properties of the service replica.
     *
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedServiceReplicaDescriptionListInner object
     */
    public Observable<PagedServiceReplicaDescriptionListInner> listAsync(String applicationResourceName, String serviceResourceName) {
        return listWithServiceResponseAsync(applicationResourceName, serviceResourceName).map(new Func1<ServiceResponse<PagedServiceReplicaDescriptionListInner>, PagedServiceReplicaDescriptionListInner>() {
            @Override
            public PagedServiceReplicaDescriptionListInner call(ServiceResponse<PagedServiceReplicaDescriptionListInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all the replicas of a service.
     * Gets the information about all replicas of a service. The information include the description and other properties of the service replica.
     *
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedServiceReplicaDescriptionListInner object
     */
    public Observable<ServiceResponse<PagedServiceReplicaDescriptionListInner>> listWithServiceResponseAsync(String applicationResourceName, String serviceResourceName) {
        if (applicationResourceName == null) {
            throw new IllegalArgumentException("Parameter applicationResourceName is required and cannot be null.");
        }
        if (serviceResourceName == null) {
            throw new IllegalArgumentException("Parameter serviceResourceName is required and cannot be null.");
        }
        final String apiVersion = "6.4-preview";
        return service.list(applicationResourceName, serviceResourceName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PagedServiceReplicaDescriptionListInner>>>() {
                @Override
                public Observable<ServiceResponse<PagedServiceReplicaDescriptionListInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PagedServiceReplicaDescriptionListInner> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PagedServiceReplicaDescriptionListInner> listDelegate(Response<ResponseBody> response) throws FabricErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PagedServiceReplicaDescriptionListInner, FabricErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PagedServiceReplicaDescriptionListInner>() { }.getType())
                .registerError(FabricErrorException.class)
                .build(response);
    }

}
