/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric.implementation;

import com.microsoft.azure.servicefabric.ComposeDeploymentUpgradeState;
import com.microsoft.azure.servicefabric.UpgradeKind;
import com.microsoft.azure.servicefabric.UpgradeMode;
import com.microsoft.azure.servicefabric.MonitoringPolicyDescription;
import com.microsoft.azure.servicefabric.ApplicationHealthPolicy;
import java.util.List;
import com.microsoft.azure.servicefabric.HealthEvaluationWrapper;
import com.microsoft.azure.servicefabric.CurrentUpgradeDomainProgressInfo;
import com.microsoft.azure.servicefabric.FailureReason;
import com.microsoft.azure.servicefabric.FailureUpgradeDomainProgressInfo;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Describes the parameters for a compose deployment upgrade.
 */
public class ComposeDeploymentUpgradeProgressInfoInner {
    /**
     * The name of the target deployment.
     */
    @JsonProperty(value = "DeploymentName")
    private String deploymentName;

    /**
     * The name of the target application, including the 'fabric:' URI scheme.
     */
    @JsonProperty(value = "ApplicationName")
    private String applicationName;

    /**
     * The state of the compose deployment upgrade. Possible values include:
     * 'Invalid', 'ProvisioningTarget', 'RollingForwardInProgress',
     * 'RollingForwardPending', 'UnprovisioningCurrent',
     * 'RollingForwardCompleted', 'RollingBackInProgress',
     * 'UnprovisioningTarget', 'RollingBackCompleted', 'Failed'.
     */
    @JsonProperty(value = "UpgradeState")
    private ComposeDeploymentUpgradeState upgradeState;

    /**
     * Additional detailed information about the status of the pending upgrade.
     */
    @JsonProperty(value = "UpgradeStatusDetails")
    private String upgradeStatusDetails;

    /**
     * The kind of upgrade out of the following possible values. Possible
     * values include: 'Invalid', 'Rolling'.
     */
    @JsonProperty(value = "UpgradeKind")
    private UpgradeKind upgradeKind;

    /**
     * The mode used to monitor health during a rolling upgrade. The values are
     * UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values
     * include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'.
     */
    @JsonProperty(value = "RollingUpgradeMode")
    private UpgradeMode rollingUpgradeMode;

    /**
     * If true, then processes are forcefully restarted during upgrade even
     * when the code version has not changed (the upgrade only changes
     * configuration or data).
     */
    @JsonProperty(value = "ForceRestart")
    private Boolean forceRestart;

    /**
     * The maximum amount of time to block processing of an upgrade domain and
     * prevent loss of availability when there are unexpected issues. When this
     * timeout expires, processing of the upgrade domain will proceed
     * regardless of availability loss issues. The timeout is reset at the
     * start of each upgrade domain. Valid values are between 0 and 42949672925
     * inclusive. (unsigned 32-bit integer).
     */
    @JsonProperty(value = "UpgradeReplicaSetCheckTimeoutInSeconds")
    private Long upgradeReplicaSetCheckTimeoutInSeconds;

    /**
     * Describes the parameters for monitoring an upgrade in Monitored mode.
     */
    @JsonProperty(value = "MonitoringPolicy")
    private MonitoringPolicyDescription monitoringPolicy;

    /**
     * Defines a health policy used to evaluate the health of an application or
     * one of its children entities.
     */
    @JsonProperty(value = "ApplicationHealthPolicy")
    private ApplicationHealthPolicy applicationHealthPolicy;

    /**
     * The target application type version (found in the application manifest)
     * for the application upgrade.
     */
    @JsonProperty(value = "TargetApplicationTypeVersion")
    private String targetApplicationTypeVersion;

    /**
     * The estimated amount of time that the overall upgrade elapsed. It is
     * first interpreted as a string representing an ISO 8601 duration. If that
     * fails, then it is interpreted as a number representing the total number
     * of milliseconds.
     */
    @JsonProperty(value = "UpgradeDuration")
    private String upgradeDuration;

    /**
     * The estimated amount of time spent processing current Upgrade Domain. It
     * is first interpreted as a string representing an ISO 8601 duration. If
     * that fails, then it is interpreted as a number representing the total
     * number of milliseconds.
     */
    @JsonProperty(value = "CurrentUpgradeDomainDuration")
    private String currentUpgradeDomainDuration;

    /**
     * List of health evaluations that resulted in the current aggregated
     * health state.
     */
    @JsonProperty(value = "ApplicationUnhealthyEvaluations")
    private List<HealthEvaluationWrapper> applicationUnhealthyEvaluations;

    /**
     * Information about the current in-progress upgrade domain.
     */
    @JsonProperty(value = "CurrentUpgradeDomainProgress")
    private CurrentUpgradeDomainProgressInfo currentUpgradeDomainProgress;

    /**
     * The estimated UTC datetime when the upgrade started.
     */
    @JsonProperty(value = "StartTimestampUtc")
    private String startTimestampUtc;

    /**
     * The estimated UTC datetime when the upgrade failed and FailureAction was
     * executed.
     */
    @JsonProperty(value = "FailureTimestampUtc")
    private String failureTimestampUtc;

    /**
     * The cause of an upgrade failure that resulted in FailureAction being
     * executed. Possible values include: 'None', 'Interrupted', 'HealthCheck',
     * 'UpgradeDomainTimeout', 'OverallUpgradeTimeout'.
     */
    @JsonProperty(value = "FailureReason")
    private FailureReason failureReason;

    /**
     * Information about the upgrade domain progress at the time of upgrade
     * failure.
     */
    @JsonProperty(value = "UpgradeDomainProgressAtFailure")
    private FailureUpgradeDomainProgressInfo upgradeDomainProgressAtFailure;

    /**
     * Additional details of application upgrade including failure message.
     */
    @JsonProperty(value = "ApplicationUpgradeStatusDetails")
    private String applicationUpgradeStatusDetails;

    /**
     * Get the name of the target deployment.
     *
     * @return the deploymentName value
     */
    public String deploymentName() {
        return this.deploymentName;
    }

    /**
     * Set the name of the target deployment.
     *
     * @param deploymentName the deploymentName value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withDeploymentName(String deploymentName) {
        this.deploymentName = deploymentName;
        return this;
    }

    /**
     * Get the name of the target application, including the 'fabric:' URI scheme.
     *
     * @return the applicationName value
     */
    public String applicationName() {
        return this.applicationName;
    }

    /**
     * Set the name of the target application, including the 'fabric:' URI scheme.
     *
     * @param applicationName the applicationName value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withApplicationName(String applicationName) {
        this.applicationName = applicationName;
        return this;
    }

    /**
     * Get the state of the compose deployment upgrade. Possible values include: 'Invalid', 'ProvisioningTarget', 'RollingForwardInProgress', 'RollingForwardPending', 'UnprovisioningCurrent', 'RollingForwardCompleted', 'RollingBackInProgress', 'UnprovisioningTarget', 'RollingBackCompleted', 'Failed'.
     *
     * @return the upgradeState value
     */
    public ComposeDeploymentUpgradeState upgradeState() {
        return this.upgradeState;
    }

    /**
     * Set the state of the compose deployment upgrade. Possible values include: 'Invalid', 'ProvisioningTarget', 'RollingForwardInProgress', 'RollingForwardPending', 'UnprovisioningCurrent', 'RollingForwardCompleted', 'RollingBackInProgress', 'UnprovisioningTarget', 'RollingBackCompleted', 'Failed'.
     *
     * @param upgradeState the upgradeState value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withUpgradeState(ComposeDeploymentUpgradeState upgradeState) {
        this.upgradeState = upgradeState;
        return this;
    }

    /**
     * Get additional detailed information about the status of the pending upgrade.
     *
     * @return the upgradeStatusDetails value
     */
    public String upgradeStatusDetails() {
        return this.upgradeStatusDetails;
    }

    /**
     * Set additional detailed information about the status of the pending upgrade.
     *
     * @param upgradeStatusDetails the upgradeStatusDetails value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withUpgradeStatusDetails(String upgradeStatusDetails) {
        this.upgradeStatusDetails = upgradeStatusDetails;
        return this;
    }

    /**
     * Get the kind of upgrade out of the following possible values. Possible values include: 'Invalid', 'Rolling'.
     *
     * @return the upgradeKind value
     */
    public UpgradeKind upgradeKind() {
        return this.upgradeKind;
    }

    /**
     * Set the kind of upgrade out of the following possible values. Possible values include: 'Invalid', 'Rolling'.
     *
     * @param upgradeKind the upgradeKind value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withUpgradeKind(UpgradeKind upgradeKind) {
        this.upgradeKind = upgradeKind;
        return this;
    }

    /**
     * Get the mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'.
     *
     * @return the rollingUpgradeMode value
     */
    public UpgradeMode rollingUpgradeMode() {
        return this.rollingUpgradeMode;
    }

    /**
     * Set the mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'.
     *
     * @param rollingUpgradeMode the rollingUpgradeMode value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withRollingUpgradeMode(UpgradeMode rollingUpgradeMode) {
        this.rollingUpgradeMode = rollingUpgradeMode;
        return this;
    }

    /**
     * Get if true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
     *
     * @return the forceRestart value
     */
    public Boolean forceRestart() {
        return this.forceRestart;
    }

    /**
     * Set if true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
     *
     * @param forceRestart the forceRestart value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withForceRestart(Boolean forceRestart) {
        this.forceRestart = forceRestart;
        return this;
    }

    /**
     * Get the maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
     *
     * @return the upgradeReplicaSetCheckTimeoutInSeconds value
     */
    public Long upgradeReplicaSetCheckTimeoutInSeconds() {
        return this.upgradeReplicaSetCheckTimeoutInSeconds;
    }

    /**
     * Set the maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
     *
     * @param upgradeReplicaSetCheckTimeoutInSeconds the upgradeReplicaSetCheckTimeoutInSeconds value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withUpgradeReplicaSetCheckTimeoutInSeconds(Long upgradeReplicaSetCheckTimeoutInSeconds) {
        this.upgradeReplicaSetCheckTimeoutInSeconds = upgradeReplicaSetCheckTimeoutInSeconds;
        return this;
    }

    /**
     * Get describes the parameters for monitoring an upgrade in Monitored mode.
     *
     * @return the monitoringPolicy value
     */
    public MonitoringPolicyDescription monitoringPolicy() {
        return this.monitoringPolicy;
    }

    /**
     * Set describes the parameters for monitoring an upgrade in Monitored mode.
     *
     * @param monitoringPolicy the monitoringPolicy value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withMonitoringPolicy(MonitoringPolicyDescription monitoringPolicy) {
        this.monitoringPolicy = monitoringPolicy;
        return this;
    }

    /**
     * Get defines a health policy used to evaluate the health of an application or one of its children entities.
     *
     * @return the applicationHealthPolicy value
     */
    public ApplicationHealthPolicy applicationHealthPolicy() {
        return this.applicationHealthPolicy;
    }

    /**
     * Set defines a health policy used to evaluate the health of an application or one of its children entities.
     *
     * @param applicationHealthPolicy the applicationHealthPolicy value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withApplicationHealthPolicy(ApplicationHealthPolicy applicationHealthPolicy) {
        this.applicationHealthPolicy = applicationHealthPolicy;
        return this;
    }

    /**
     * Get the target application type version (found in the application manifest) for the application upgrade.
     *
     * @return the targetApplicationTypeVersion value
     */
    public String targetApplicationTypeVersion() {
        return this.targetApplicationTypeVersion;
    }

    /**
     * Set the target application type version (found in the application manifest) for the application upgrade.
     *
     * @param targetApplicationTypeVersion the targetApplicationTypeVersion value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withTargetApplicationTypeVersion(String targetApplicationTypeVersion) {
        this.targetApplicationTypeVersion = targetApplicationTypeVersion;
        return this;
    }

    /**
     * Get the estimated amount of time that the overall upgrade elapsed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     *
     * @return the upgradeDuration value
     */
    public String upgradeDuration() {
        return this.upgradeDuration;
    }

    /**
     * Set the estimated amount of time that the overall upgrade elapsed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     *
     * @param upgradeDuration the upgradeDuration value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withUpgradeDuration(String upgradeDuration) {
        this.upgradeDuration = upgradeDuration;
        return this;
    }

    /**
     * Get the estimated amount of time spent processing current Upgrade Domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     *
     * @return the currentUpgradeDomainDuration value
     */
    public String currentUpgradeDomainDuration() {
        return this.currentUpgradeDomainDuration;
    }

    /**
     * Set the estimated amount of time spent processing current Upgrade Domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     *
     * @param currentUpgradeDomainDuration the currentUpgradeDomainDuration value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withCurrentUpgradeDomainDuration(String currentUpgradeDomainDuration) {
        this.currentUpgradeDomainDuration = currentUpgradeDomainDuration;
        return this;
    }

    /**
     * Get list of health evaluations that resulted in the current aggregated health state.
     *
     * @return the applicationUnhealthyEvaluations value
     */
    public List<HealthEvaluationWrapper> applicationUnhealthyEvaluations() {
        return this.applicationUnhealthyEvaluations;
    }

    /**
     * Set list of health evaluations that resulted in the current aggregated health state.
     *
     * @param applicationUnhealthyEvaluations the applicationUnhealthyEvaluations value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withApplicationUnhealthyEvaluations(List<HealthEvaluationWrapper> applicationUnhealthyEvaluations) {
        this.applicationUnhealthyEvaluations = applicationUnhealthyEvaluations;
        return this;
    }

    /**
     * Get information about the current in-progress upgrade domain.
     *
     * @return the currentUpgradeDomainProgress value
     */
    public CurrentUpgradeDomainProgressInfo currentUpgradeDomainProgress() {
        return this.currentUpgradeDomainProgress;
    }

    /**
     * Set information about the current in-progress upgrade domain.
     *
     * @param currentUpgradeDomainProgress the currentUpgradeDomainProgress value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withCurrentUpgradeDomainProgress(CurrentUpgradeDomainProgressInfo currentUpgradeDomainProgress) {
        this.currentUpgradeDomainProgress = currentUpgradeDomainProgress;
        return this;
    }

    /**
     * Get the estimated UTC datetime when the upgrade started.
     *
     * @return the startTimestampUtc value
     */
    public String startTimestampUtc() {
        return this.startTimestampUtc;
    }

    /**
     * Set the estimated UTC datetime when the upgrade started.
     *
     * @param startTimestampUtc the startTimestampUtc value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withStartTimestampUtc(String startTimestampUtc) {
        this.startTimestampUtc = startTimestampUtc;
        return this;
    }

    /**
     * Get the estimated UTC datetime when the upgrade failed and FailureAction was executed.
     *
     * @return the failureTimestampUtc value
     */
    public String failureTimestampUtc() {
        return this.failureTimestampUtc;
    }

    /**
     * Set the estimated UTC datetime when the upgrade failed and FailureAction was executed.
     *
     * @param failureTimestampUtc the failureTimestampUtc value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withFailureTimestampUtc(String failureTimestampUtc) {
        this.failureTimestampUtc = failureTimestampUtc;
        return this;
    }

    /**
     * Get the cause of an upgrade failure that resulted in FailureAction being executed. Possible values include: 'None', 'Interrupted', 'HealthCheck', 'UpgradeDomainTimeout', 'OverallUpgradeTimeout'.
     *
     * @return the failureReason value
     */
    public FailureReason failureReason() {
        return this.failureReason;
    }

    /**
     * Set the cause of an upgrade failure that resulted in FailureAction being executed. Possible values include: 'None', 'Interrupted', 'HealthCheck', 'UpgradeDomainTimeout', 'OverallUpgradeTimeout'.
     *
     * @param failureReason the failureReason value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withFailureReason(FailureReason failureReason) {
        this.failureReason = failureReason;
        return this;
    }

    /**
     * Get information about the upgrade domain progress at the time of upgrade failure.
     *
     * @return the upgradeDomainProgressAtFailure value
     */
    public FailureUpgradeDomainProgressInfo upgradeDomainProgressAtFailure() {
        return this.upgradeDomainProgressAtFailure;
    }

    /**
     * Set information about the upgrade domain progress at the time of upgrade failure.
     *
     * @param upgradeDomainProgressAtFailure the upgradeDomainProgressAtFailure value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withUpgradeDomainProgressAtFailure(FailureUpgradeDomainProgressInfo upgradeDomainProgressAtFailure) {
        this.upgradeDomainProgressAtFailure = upgradeDomainProgressAtFailure;
        return this;
    }

    /**
     * Get additional details of application upgrade including failure message.
     *
     * @return the applicationUpgradeStatusDetails value
     */
    public String applicationUpgradeStatusDetails() {
        return this.applicationUpgradeStatusDetails;
    }

    /**
     * Set additional details of application upgrade including failure message.
     *
     * @param applicationUpgradeStatusDetails the applicationUpgradeStatusDetails value to set
     * @return the ComposeDeploymentUpgradeProgressInfoInner object itself.
     */
    public ComposeDeploymentUpgradeProgressInfoInner withApplicationUpgradeStatusDetails(String applicationUpgradeStatusDetails) {
        this.applicationUpgradeStatusDetails = applicationUpgradeStatusDetails;
        return this;
    }

}
