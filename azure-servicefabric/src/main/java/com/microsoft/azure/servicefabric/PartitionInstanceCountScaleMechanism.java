/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Represents a scaling mechanism for adding or removing instances of stateless
 * service partition.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "Kind")
@JsonTypeName("PartitionInstanceCount")
public class PartitionInstanceCountScaleMechanism extends ScalingMechanismDescription {
    /**
     * Minimum number of instances of the partition.
     */
    @JsonProperty(value = "MinInstanceCount", required = true)
    private int minInstanceCount;

    /**
     * Maximum number of instances of the partition.
     */
    @JsonProperty(value = "MaxInstanceCount", required = true)
    private int maxInstanceCount;

    /**
     * The number of instances to add or remove during a scaling operation.
     */
    @JsonProperty(value = "ScaleIncrement", required = true)
    private int scaleIncrement;

    /**
     * Get minimum number of instances of the partition.
     *
     * @return the minInstanceCount value
     */
    public int minInstanceCount() {
        return this.minInstanceCount;
    }

    /**
     * Set minimum number of instances of the partition.
     *
     * @param minInstanceCount the minInstanceCount value to set
     * @return the PartitionInstanceCountScaleMechanism object itself.
     */
    public PartitionInstanceCountScaleMechanism withMinInstanceCount(int minInstanceCount) {
        this.minInstanceCount = minInstanceCount;
        return this;
    }

    /**
     * Get maximum number of instances of the partition.
     *
     * @return the maxInstanceCount value
     */
    public int maxInstanceCount() {
        return this.maxInstanceCount;
    }

    /**
     * Set maximum number of instances of the partition.
     *
     * @param maxInstanceCount the maxInstanceCount value to set
     * @return the PartitionInstanceCountScaleMechanism object itself.
     */
    public PartitionInstanceCountScaleMechanism withMaxInstanceCount(int maxInstanceCount) {
        this.maxInstanceCount = maxInstanceCount;
        return this;
    }

    /**
     * Get the number of instances to add or remove during a scaling operation.
     *
     * @return the scaleIncrement value
     */
    public int scaleIncrement() {
        return this.scaleIncrement;
    }

    /**
     * Set the number of instances to add or remove during a scaling operation.
     *
     * @param scaleIncrement the scaleIncrement value to set
     * @return the PartitionInstanceCountScaleMechanism object itself.
     */
    public PartitionInstanceCountScaleMechanism withScaleIncrement(int scaleIncrement) {
        this.scaleIncrement = scaleIncrement;
        return this;
    }

}
