/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import org.joda.time.Period;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents common health report information. It is included in all health
 * reports sent to health store and in all health events returned by health
 * queries.
 */
public class HealthInformation {
    /**
     * The source name that identifies the client/watchdog/system component
     * that generated the health information.
     */
    @JsonProperty(value = "SourceId", required = true)
    private String sourceId;

    /**
     * The property of the health information. An entity can have health
     * reports for different properties.
     * The property is a string and not a fixed enumeration to allow the
     * reporter flexibility to categorize the state condition that triggers the
     * report.
     * For example, a reporter with SourceId "LocalWatchdog" can monitor the
     * state of the available disk on a node,
     * so it can report "AvailableDisk" property on that node.
     * The same reporter can monitor the node connectivity, so it can report a
     * property "Connectivity" on the same node.
     * In the health store, these reports are treated as separate health events
     * for the specified node.
     *
     * Together with the SourceId, the property uniquely identifies the health
     * information.
     */
    @JsonProperty(value = "Property", required = true)
    private String property;

    /**
     * The health state of a Service Fabric entity such as Cluster, Node,
     * Application, Service, Partition, Replica etc. Possible values include:
     * 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'.
     */
    @JsonProperty(value = "HealthState", required = true)
    private HealthState healthState;

    /**
     * The duration for which this health report is valid. This field uses
     * ISO8601 format for specifying the duration.
     * When clients report periodically, they should send reports with higher
     * frequency than time to live.
     * If clients report on transition, they can set the time to live to
     * infinite.
     * When time to live expires, the health event that contains the health
     * information
     * is either removed from health store, if RemoveWhenExpired is true, or
     * evaluated at error, if RemoveWhenExpired false.
     *
     * If not specified, time to live defaults to infinite value.
     */
    @JsonProperty(value = "TimeToLiveInMilliSeconds")
    private Period timeToLiveInMilliSeconds;

    /**
     * The description of the health information. It represents free text used
     * to add human readable information about the report.
     * The maximum string length for the description is 4096 characters.
     * If the provided string is longer, it will be automatically truncated.
     * When truncated, the last characters of the description contain a marker
     * "[Truncated]", and total string size is 4096 characters.
     * The presence of the marker indicates to users that truncation occurred.
     * Note that when truncated, the description has less than 4096 characters
     * from the original string.
     */
    @JsonProperty(value = "Description")
    private String description;

    /**
     * The sequence number for this health report as a numeric string.
     * The report sequence number is used by the health store to detect stale
     * reports.
     * If not specified, a sequence number is auto-generated by the health
     * client when a report is added.
     */
    @JsonProperty(value = "SequenceNumber")
    private String sequenceNumber;

    /**
     * Value that indicates whether the report is removed from health store
     * when it expires.
     * If set to true, the report is removed from the health store after it
     * expires.
     * If set to false, the report is treated as an error when expired. The
     * value of this property is false by default.
     * When clients report periodically, they should set RemoveWhenExpired
     * false (default).
     * This way, if the reporter has issues (e.g. deadlock) and can't report,
     * the entity is evaluated at error when the health report expires.
     * This flags the entity as being in Error health state.
     */
    @JsonProperty(value = "RemoveWhenExpired")
    private Boolean removeWhenExpired;

    /**
     * Get the source name that identifies the client/watchdog/system component that generated the health information.
     *
     * @return the sourceId value
     */
    public String sourceId() {
        return this.sourceId;
    }

    /**
     * Set the source name that identifies the client/watchdog/system component that generated the health information.
     *
     * @param sourceId the sourceId value to set
     * @return the HealthInformation object itself.
     */
    public HealthInformation withSourceId(String sourceId) {
        this.sourceId = sourceId;
        return this;
    }

    /**
     * Get the property of the health information. An entity can have health reports for different properties.
     The property is a string and not a fixed enumeration to allow the reporter flexibility to categorize the state condition that triggers the report.
     For example, a reporter with SourceId "LocalWatchdog" can monitor the state of the available disk on a node,
     so it can report "AvailableDisk" property on that node.
     The same reporter can monitor the node connectivity, so it can report a property "Connectivity" on the same node.
     In the health store, these reports are treated as separate health events for the specified node.
     Together with the SourceId, the property uniquely identifies the health information.
     *
     * @return the property value
     */
    public String property() {
        return this.property;
    }

    /**
     * Set the property of the health information. An entity can have health reports for different properties.
     The property is a string and not a fixed enumeration to allow the reporter flexibility to categorize the state condition that triggers the report.
     For example, a reporter with SourceId "LocalWatchdog" can monitor the state of the available disk on a node,
     so it can report "AvailableDisk" property on that node.
     The same reporter can monitor the node connectivity, so it can report a property "Connectivity" on the same node.
     In the health store, these reports are treated as separate health events for the specified node.
     Together with the SourceId, the property uniquely identifies the health information.
     *
     * @param property the property value to set
     * @return the HealthInformation object itself.
     */
    public HealthInformation withProperty(String property) {
        this.property = property;
        return this;
    }

    /**
     * Get the health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'.
     *
     * @return the healthState value
     */
    public HealthState healthState() {
        return this.healthState;
    }

    /**
     * Set the health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'.
     *
     * @param healthState the healthState value to set
     * @return the HealthInformation object itself.
     */
    public HealthInformation withHealthState(HealthState healthState) {
        this.healthState = healthState;
        return this;
    }

    /**
     * Get the duration for which this health report is valid. This field uses ISO8601 format for specifying the duration.
     When clients report periodically, they should send reports with higher frequency than time to live.
     If clients report on transition, they can set the time to live to infinite.
     When time to live expires, the health event that contains the health information
     is either removed from health store, if RemoveWhenExpired is true, or evaluated at error, if RemoveWhenExpired false.
     If not specified, time to live defaults to infinite value.
     *
     * @return the timeToLiveInMilliSeconds value
     */
    public Period timeToLiveInMilliSeconds() {
        return this.timeToLiveInMilliSeconds;
    }

    /**
     * Set the duration for which this health report is valid. This field uses ISO8601 format for specifying the duration.
     When clients report periodically, they should send reports with higher frequency than time to live.
     If clients report on transition, they can set the time to live to infinite.
     When time to live expires, the health event that contains the health information
     is either removed from health store, if RemoveWhenExpired is true, or evaluated at error, if RemoveWhenExpired false.
     If not specified, time to live defaults to infinite value.
     *
     * @param timeToLiveInMilliSeconds the timeToLiveInMilliSeconds value to set
     * @return the HealthInformation object itself.
     */
    public HealthInformation withTimeToLiveInMilliSeconds(Period timeToLiveInMilliSeconds) {
        this.timeToLiveInMilliSeconds = timeToLiveInMilliSeconds;
        return this;
    }

    /**
     * Get the description of the health information. It represents free text used to add human readable information about the report.
     The maximum string length for the description is 4096 characters.
     If the provided string is longer, it will be automatically truncated.
     When truncated, the last characters of the description contain a marker "[Truncated]", and total string size is 4096 characters.
     The presence of the marker indicates to users that truncation occurred.
     Note that when truncated, the description has less than 4096 characters from the original string.
     *
     * @return the description value
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description of the health information. It represents free text used to add human readable information about the report.
     The maximum string length for the description is 4096 characters.
     If the provided string is longer, it will be automatically truncated.
     When truncated, the last characters of the description contain a marker "[Truncated]", and total string size is 4096 characters.
     The presence of the marker indicates to users that truncation occurred.
     Note that when truncated, the description has less than 4096 characters from the original string.
     *
     * @param description the description value to set
     * @return the HealthInformation object itself.
     */
    public HealthInformation withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the sequence number for this health report as a numeric string.
     The report sequence number is used by the health store to detect stale reports.
     If not specified, a sequence number is auto-generated by the health client when a report is added.
     *
     * @return the sequenceNumber value
     */
    public String sequenceNumber() {
        return this.sequenceNumber;
    }

    /**
     * Set the sequence number for this health report as a numeric string.
     The report sequence number is used by the health store to detect stale reports.
     If not specified, a sequence number is auto-generated by the health client when a report is added.
     *
     * @param sequenceNumber the sequenceNumber value to set
     * @return the HealthInformation object itself.
     */
    public HealthInformation withSequenceNumber(String sequenceNumber) {
        this.sequenceNumber = sequenceNumber;
        return this;
    }

    /**
     * Get value that indicates whether the report is removed from health store when it expires.
     If set to true, the report is removed from the health store after it expires.
     If set to false, the report is treated as an error when expired. The value of this property is false by default.
     When clients report periodically, they should set RemoveWhenExpired false (default).
     This way, if the reporter has issues (e.g. deadlock) and can't report, the entity is evaluated at error when the health report expires.
     This flags the entity as being in Error health state.
     *
     * @return the removeWhenExpired value
     */
    public Boolean removeWhenExpired() {
        return this.removeWhenExpired;
    }

    /**
     * Set value that indicates whether the report is removed from health store when it expires.
     If set to true, the report is removed from the health store after it expires.
     If set to false, the report is treated as an error when expired. The value of this property is false by default.
     When clients report periodically, they should set RemoveWhenExpired false (default).
     This way, if the reporter has issues (e.g. deadlock) and can't report, the entity is evaluated at error when the health report expires.
     This flags the entity as being in Error health state.
     *
     * @param removeWhenExpired the removeWhenExpired value to set
     * @return the HealthInformation object itself.
     */
    public HealthInformation withRemoveWhenExpired(Boolean removeWhenExpired) {
        this.removeWhenExpired = removeWhenExpired;
        return this;
    }

}
