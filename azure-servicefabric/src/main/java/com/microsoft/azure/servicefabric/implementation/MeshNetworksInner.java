/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.servicefabric.FabricErrorException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in MeshNetworks.
 */
public class MeshNetworksInner {
    /** The Retrofit service to perform REST calls. */
    private MeshNetworksService service;
    /** The service client containing this operation class. */
    private ServiceFabricClientAPIsImpl client;

    /**
     * Initializes an instance of MeshNetworksInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public MeshNetworksInner(Retrofit retrofit, ServiceFabricClientAPIsImpl client) {
        this.service = retrofit.create(MeshNetworksService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for MeshNetworks to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MeshNetworksService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.servicefabric.MeshNetworks createOrUpdate" })
        @PUT("Resources/Networks/{networkResourceName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path(value = "networkResourceName", encoded = true) String networkResourceName, @Query("api-version") String apiVersion, @Body NetworkResourceDescriptionInner networkResourceDescription, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.servicefabric.MeshNetworks get" })
        @GET("Resources/Networks/{networkResourceName}")
        Observable<Response<ResponseBody>> get(@Path(value = "networkResourceName", encoded = true) String networkResourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.servicefabric.MeshNetworks delete" })
        @HTTP(path = "Resources/Networks/{networkResourceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path(value = "networkResourceName", encoded = true) String networkResourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.servicefabric.MeshNetworks list" })
        @GET("Resources/Networks")
        Observable<Response<ResponseBody>> list(@Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates or updates a Network resource.
     * Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
     *
     * @param networkResourceName The identity of the network.
     * @param networkResourceDescription Description for creating a Network resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws FabricErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NetworkResourceDescriptionInner object if successful.
     */
    public NetworkResourceDescriptionInner createOrUpdate(String networkResourceName, NetworkResourceDescriptionInner networkResourceDescription) {
        return createOrUpdateWithServiceResponseAsync(networkResourceName, networkResourceDescription).toBlocking().single().body();
    }

    /**
     * Creates or updates a Network resource.
     * Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
     *
     * @param networkResourceName The identity of the network.
     * @param networkResourceDescription Description for creating a Network resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NetworkResourceDescriptionInner> createOrUpdateAsync(String networkResourceName, NetworkResourceDescriptionInner networkResourceDescription, final ServiceCallback<NetworkResourceDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(networkResourceName, networkResourceDescription), serviceCallback);
    }

    /**
     * Creates or updates a Network resource.
     * Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
     *
     * @param networkResourceName The identity of the network.
     * @param networkResourceDescription Description for creating a Network resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkResourceDescriptionInner object
     */
    public Observable<NetworkResourceDescriptionInner> createOrUpdateAsync(String networkResourceName, NetworkResourceDescriptionInner networkResourceDescription) {
        return createOrUpdateWithServiceResponseAsync(networkResourceName, networkResourceDescription).map(new Func1<ServiceResponse<NetworkResourceDescriptionInner>, NetworkResourceDescriptionInner>() {
            @Override
            public NetworkResourceDescriptionInner call(ServiceResponse<NetworkResourceDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a Network resource.
     * Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
     *
     * @param networkResourceName The identity of the network.
     * @param networkResourceDescription Description for creating a Network resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkResourceDescriptionInner object
     */
    public Observable<ServiceResponse<NetworkResourceDescriptionInner>> createOrUpdateWithServiceResponseAsync(String networkResourceName, NetworkResourceDescriptionInner networkResourceDescription) {
        if (networkResourceName == null) {
            throw new IllegalArgumentException("Parameter networkResourceName is required and cannot be null.");
        }
        if (networkResourceDescription == null) {
            throw new IllegalArgumentException("Parameter networkResourceDescription is required and cannot be null.");
        }
        Validator.validate(networkResourceDescription);
        final String apiVersion = "6.4-preview";
        return service.createOrUpdate(networkResourceName, apiVersion, networkResourceDescription, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<NetworkResourceDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<NetworkResourceDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<NetworkResourceDescriptionInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<NetworkResourceDescriptionInner> createOrUpdateDelegate(Response<ResponseBody> response) throws FabricErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<NetworkResourceDescriptionInner, FabricErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<NetworkResourceDescriptionInner>() { }.getType())
                .register(201, new TypeToken<NetworkResourceDescriptionInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(FabricErrorException.class)
                .build(response);
    }

    /**
     * Gets the Network resource with the given name.
     * Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
     *
     * @param networkResourceName The identity of the network.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws FabricErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NetworkResourceDescriptionInner object if successful.
     */
    public NetworkResourceDescriptionInner get(String networkResourceName) {
        return getWithServiceResponseAsync(networkResourceName).toBlocking().single().body();
    }

    /**
     * Gets the Network resource with the given name.
     * Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
     *
     * @param networkResourceName The identity of the network.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NetworkResourceDescriptionInner> getAsync(String networkResourceName, final ServiceCallback<NetworkResourceDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(networkResourceName), serviceCallback);
    }

    /**
     * Gets the Network resource with the given name.
     * Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
     *
     * @param networkResourceName The identity of the network.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkResourceDescriptionInner object
     */
    public Observable<NetworkResourceDescriptionInner> getAsync(String networkResourceName) {
        return getWithServiceResponseAsync(networkResourceName).map(new Func1<ServiceResponse<NetworkResourceDescriptionInner>, NetworkResourceDescriptionInner>() {
            @Override
            public NetworkResourceDescriptionInner call(ServiceResponse<NetworkResourceDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the Network resource with the given name.
     * Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
     *
     * @param networkResourceName The identity of the network.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkResourceDescriptionInner object
     */
    public Observable<ServiceResponse<NetworkResourceDescriptionInner>> getWithServiceResponseAsync(String networkResourceName) {
        if (networkResourceName == null) {
            throw new IllegalArgumentException("Parameter networkResourceName is required and cannot be null.");
        }
        final String apiVersion = "6.4-preview";
        return service.get(networkResourceName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<NetworkResourceDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<NetworkResourceDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<NetworkResourceDescriptionInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<NetworkResourceDescriptionInner> getDelegate(Response<ResponseBody> response) throws FabricErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<NetworkResourceDescriptionInner, FabricErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<NetworkResourceDescriptionInner>() { }.getType())
                .registerError(FabricErrorException.class)
                .build(response);
    }

    /**
     * Deletes the Network resource.
     * Deletes the Network resource identified by the name.
     *
     * @param networkResourceName The identity of the network.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws FabricErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String networkResourceName) {
        deleteWithServiceResponseAsync(networkResourceName).toBlocking().single().body();
    }

    /**
     * Deletes the Network resource.
     * Deletes the Network resource identified by the name.
     *
     * @param networkResourceName The identity of the network.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String networkResourceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(networkResourceName), serviceCallback);
    }

    /**
     * Deletes the Network resource.
     * Deletes the Network resource identified by the name.
     *
     * @param networkResourceName The identity of the network.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String networkResourceName) {
        return deleteWithServiceResponseAsync(networkResourceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the Network resource.
     * Deletes the Network resource identified by the name.
     *
     * @param networkResourceName The identity of the network.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String networkResourceName) {
        if (networkResourceName == null) {
            throw new IllegalArgumentException("Parameter networkResourceName is required and cannot be null.");
        }
        final String apiVersion = "6.4-preview";
        return service.delete(networkResourceName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws FabricErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, FabricErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(FabricErrorException.class)
                .build(response);
    }

    /**
     * Lists all the network resources.
     * Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws FabricErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedNetworkResourceDescriptionListInner object if successful.
     */
    public PagedNetworkResourceDescriptionListInner list() {
        return listWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Lists all the network resources.
     * Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PagedNetworkResourceDescriptionListInner> listAsync(final ServiceCallback<PagedNetworkResourceDescriptionListInner> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Lists all the network resources.
     * Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedNetworkResourceDescriptionListInner object
     */
    public Observable<PagedNetworkResourceDescriptionListInner> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<PagedNetworkResourceDescriptionListInner>, PagedNetworkResourceDescriptionListInner>() {
            @Override
            public PagedNetworkResourceDescriptionListInner call(ServiceResponse<PagedNetworkResourceDescriptionListInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all the network resources.
     * Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedNetworkResourceDescriptionListInner object
     */
    public Observable<ServiceResponse<PagedNetworkResourceDescriptionListInner>> listWithServiceResponseAsync() {
        final String apiVersion = "6.4-preview";
        return service.list(apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PagedNetworkResourceDescriptionListInner>>>() {
                @Override
                public Observable<ServiceResponse<PagedNetworkResourceDescriptionListInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PagedNetworkResourceDescriptionListInner> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PagedNetworkResourceDescriptionListInner> listDelegate(Response<ResponseBody> response) throws FabricErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<PagedNetworkResourceDescriptionListInner, FabricErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PagedNetworkResourceDescriptionListInner>() { }.getType())
                .registerError(FabricErrorException.class)
                .build(response);
    }

}
