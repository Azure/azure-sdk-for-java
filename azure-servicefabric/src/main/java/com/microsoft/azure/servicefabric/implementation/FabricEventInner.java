/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric.implementation;

import java.util.UUID;
import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonSubTypes;

/**
 * Represents the base for all Fabric Events.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "Kind")
@JsonTypeName("FabricEvent")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "ApplicationEvent", value = ApplicationEventInner.class),
    @JsonSubTypes.Type(name = "ClusterEvent", value = ClusterEventInner.class),
    @JsonSubTypes.Type(name = "ContainerInstanceEvent", value = ContainerInstanceEventInner.class),
    @JsonSubTypes.Type(name = "NodeEvent", value = NodeEventInner.class),
    @JsonSubTypes.Type(name = "PartitionEvent", value = PartitionEventInner.class),
    @JsonSubTypes.Type(name = "ReplicaEvent", value = ReplicaEventInner.class),
    @JsonSubTypes.Type(name = "ServiceEvent", value = ServiceEventInner.class)
})
public class FabricEventInner {
    /**
     * The identifier for the FabricEvent instance.
     */
    @JsonProperty(value = "EventInstanceId", required = true)
    private UUID eventInstanceId;

    /**
     * The category of event.
     */
    @JsonProperty(value = "Category")
    private String category;

    /**
     * The time event was logged.
     */
    @JsonProperty(value = "TimeStamp", required = true)
    private DateTime timeStamp;

    /**
     * Shows there is existing related events available.
     */
    @JsonProperty(value = "HasCorrelatedEvents")
    private Boolean hasCorrelatedEvents;

    /**
     * Get the identifier for the FabricEvent instance.
     *
     * @return the eventInstanceId value
     */
    public UUID eventInstanceId() {
        return this.eventInstanceId;
    }

    /**
     * Set the identifier for the FabricEvent instance.
     *
     * @param eventInstanceId the eventInstanceId value to set
     * @return the FabricEventInner object itself.
     */
    public FabricEventInner withEventInstanceId(UUID eventInstanceId) {
        this.eventInstanceId = eventInstanceId;
        return this;
    }

    /**
     * Get the category of event.
     *
     * @return the category value
     */
    public String category() {
        return this.category;
    }

    /**
     * Set the category of event.
     *
     * @param category the category value to set
     * @return the FabricEventInner object itself.
     */
    public FabricEventInner withCategory(String category) {
        this.category = category;
        return this;
    }

    /**
     * Get the time event was logged.
     *
     * @return the timeStamp value
     */
    public DateTime timeStamp() {
        return this.timeStamp;
    }

    /**
     * Set the time event was logged.
     *
     * @param timeStamp the timeStamp value to set
     * @return the FabricEventInner object itself.
     */
    public FabricEventInner withTimeStamp(DateTime timeStamp) {
        this.timeStamp = timeStamp;
        return this;
    }

    /**
     * Get shows there is existing related events available.
     *
     * @return the hasCorrelatedEvents value
     */
    public Boolean hasCorrelatedEvents() {
        return this.hasCorrelatedEvents;
    }

    /**
     * Set shows there is existing related events available.
     *
     * @param hasCorrelatedEvents the hasCorrelatedEvents value to set
     * @return the FabricEventInner object itself.
     */
    public FabricEventInner withHasCorrelatedEvents(Boolean hasCorrelatedEvents) {
        this.hasCorrelatedEvents = hasCorrelatedEvents;
        return this;
    }

}
