/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Provides various statistics of the queue used in the service fabric
 * replicator.
 * Contains information about the service fabric replicator like the
 * replication/copy queue utilization, last acknowledgement received timestamp,
 * etc.
 * Depending on the role of the replicator, the properties in this type imply
 * different meanings.
 */
public class ReplicatorQueueStatus {
    /**
     * Represents the utilization of the queue. A value of 0 indicates that the
     * queue is empty and a value of 100 indicates the queue is full.
     */
    @JsonProperty(value = "QueueUtilizationPercentage")
    private Integer queueUtilizationPercentage;

    /**
     * Represents the virtual memory consumed by the queue in bytes.
     */
    @JsonProperty(value = "QueueMemorySize")
    private String queueMemorySize;

    /**
     * On a primary replicator, this is semantically the sequence number of the
     * operation for which all the secondary replicas have sent an
     * acknowledgement.
     * On a secondary replicator, this is the smallest sequence number of the
     * operation that is present in the queue.
     */
    @JsonProperty(value = "FirstSequenceNumber")
    private String firstSequenceNumber;

    /**
     * On a primary replicator, this is semantically the highest sequence
     * number of the operation for which all the secondary replicas have sent
     * an acknowledgement.
     * On a secondary replicator, this is semantically the highest sequence
     * number that has been applied to the persistent state.
     */
    @JsonProperty(value = "CompletedSequenceNumber")
    private String completedSequenceNumber;

    /**
     * On a primary replicator, this is semantically the highest sequence
     * number of the operation for which a write quorum of the secondary
     * replicas have sent an acknowledgement.
     * On a secondary replicator, this is semantically the highest sequence
     * number of the in-order operation received from the primary.
     */
    @JsonProperty(value = "CommittedSequenceNumber")
    private String committedSequenceNumber;

    /**
     * Represents the latest sequence number of the operation that is available
     * in the queue.
     */
    @JsonProperty(value = "LastSequenceNumber")
    private String lastSequenceNumber;

    /**
     * Get represents the utilization of the queue. A value of 0 indicates that the queue is empty and a value of 100 indicates the queue is full.
     *
     * @return the queueUtilizationPercentage value
     */
    public Integer queueUtilizationPercentage() {
        return this.queueUtilizationPercentage;
    }

    /**
     * Set represents the utilization of the queue. A value of 0 indicates that the queue is empty and a value of 100 indicates the queue is full.
     *
     * @param queueUtilizationPercentage the queueUtilizationPercentage value to set
     * @return the ReplicatorQueueStatus object itself.
     */
    public ReplicatorQueueStatus withQueueUtilizationPercentage(Integer queueUtilizationPercentage) {
        this.queueUtilizationPercentage = queueUtilizationPercentage;
        return this;
    }

    /**
     * Get represents the virtual memory consumed by the queue in bytes.
     *
     * @return the queueMemorySize value
     */
    public String queueMemorySize() {
        return this.queueMemorySize;
    }

    /**
     * Set represents the virtual memory consumed by the queue in bytes.
     *
     * @param queueMemorySize the queueMemorySize value to set
     * @return the ReplicatorQueueStatus object itself.
     */
    public ReplicatorQueueStatus withQueueMemorySize(String queueMemorySize) {
        this.queueMemorySize = queueMemorySize;
        return this;
    }

    /**
     * Get on a primary replicator, this is semantically the sequence number of the operation for which all the secondary replicas have sent an acknowledgement.
     On a secondary replicator, this is the smallest sequence number of the operation that is present in the queue.
     *
     * @return the firstSequenceNumber value
     */
    public String firstSequenceNumber() {
        return this.firstSequenceNumber;
    }

    /**
     * Set on a primary replicator, this is semantically the sequence number of the operation for which all the secondary replicas have sent an acknowledgement.
     On a secondary replicator, this is the smallest sequence number of the operation that is present in the queue.
     *
     * @param firstSequenceNumber the firstSequenceNumber value to set
     * @return the ReplicatorQueueStatus object itself.
     */
    public ReplicatorQueueStatus withFirstSequenceNumber(String firstSequenceNumber) {
        this.firstSequenceNumber = firstSequenceNumber;
        return this;
    }

    /**
     * Get on a primary replicator, this is semantically the highest sequence number of the operation for which all the secondary replicas have sent an acknowledgement.
     On a secondary replicator, this is semantically the highest sequence number that has been applied to the persistent state.
     *
     * @return the completedSequenceNumber value
     */
    public String completedSequenceNumber() {
        return this.completedSequenceNumber;
    }

    /**
     * Set on a primary replicator, this is semantically the highest sequence number of the operation for which all the secondary replicas have sent an acknowledgement.
     On a secondary replicator, this is semantically the highest sequence number that has been applied to the persistent state.
     *
     * @param completedSequenceNumber the completedSequenceNumber value to set
     * @return the ReplicatorQueueStatus object itself.
     */
    public ReplicatorQueueStatus withCompletedSequenceNumber(String completedSequenceNumber) {
        this.completedSequenceNumber = completedSequenceNumber;
        return this;
    }

    /**
     * Get on a primary replicator, this is semantically the highest sequence number of the operation for which a write quorum of the secondary replicas have sent an acknowledgement.
     On a secondary replicator, this is semantically the highest sequence number of the in-order operation received from the primary.
     *
     * @return the committedSequenceNumber value
     */
    public String committedSequenceNumber() {
        return this.committedSequenceNumber;
    }

    /**
     * Set on a primary replicator, this is semantically the highest sequence number of the operation for which a write quorum of the secondary replicas have sent an acknowledgement.
     On a secondary replicator, this is semantically the highest sequence number of the in-order operation received from the primary.
     *
     * @param committedSequenceNumber the committedSequenceNumber value to set
     * @return the ReplicatorQueueStatus object itself.
     */
    public ReplicatorQueueStatus withCommittedSequenceNumber(String committedSequenceNumber) {
        this.committedSequenceNumber = committedSequenceNumber;
        return this;
    }

    /**
     * Get represents the latest sequence number of the operation that is available in the queue.
     *
     * @return the lastSequenceNumber value
     */
    public String lastSequenceNumber() {
        return this.lastSequenceNumber;
    }

    /**
     * Set represents the latest sequence number of the operation that is available in the queue.
     *
     * @param lastSequenceNumber the lastSequenceNumber value to set
     * @return the ReplicatorQueueStatus object itself.
     */
    public ReplicatorQueueStatus withLastSequenceNumber(String lastSequenceNumber) {
        this.lastSequenceNumber = lastSequenceNumber;
        return this;
    }

}
