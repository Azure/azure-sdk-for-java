/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric.implementation;

import com.microsoft.azure.servicefabric.HealthState;
import com.microsoft.azure.servicefabric.ServiceStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonSubTypes;

/**
 * Information about a Service Fabric service.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "ServiceKind")
@JsonTypeName("ServiceInfo")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "Stateful", value = StatefulServiceInfo.class),
    @JsonSubTypes.Type(name = "Stateless", value = StatelessServiceInfo.class)
})
public class ServiceInfoInner {
    /**
     * The identity of the service. This ID is an encoded representation of the
     * service name. This is used in the REST APIs to identify the service
     * resource.
     * Starting in version 6.0, hierarchical names are delimited with the "\~"
     * character. For example, if the service name is
     * "fabric:/myapp/app1/svc1",
     * the service identity would be "myapp~app1\~svc1" in 6.0+ and
     * "myapp/app1/svc1" in previous versions.
     */
    @JsonProperty(value = "Id")
    private String id;

    /**
     * The full name of the service with 'fabric:' URI scheme.
     */
    @JsonProperty(value = "Name")
    private String name;

    /**
     * Name of the service type as specified in the service manifest.
     */
    @JsonProperty(value = "TypeName")
    private String typeName;

    /**
     * The version of the service manifest.
     */
    @JsonProperty(value = "ManifestVersion")
    private String manifestVersion;

    /**
     * The health state of a Service Fabric entity such as Cluster, Node,
     * Application, Service, Partition, Replica etc. Possible values include:
     * 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'.
     */
    @JsonProperty(value = "HealthState")
    private HealthState healthState;

    /**
     * The status of the application. Possible values include: 'Unknown',
     * 'Active', 'Upgrading', 'Deleting', 'Creating', 'Failed'.
     */
    @JsonProperty(value = "ServiceStatus")
    private ServiceStatus serviceStatus;

    /**
     * Whether the service is in a service group.
     */
    @JsonProperty(value = "IsServiceGroup")
    private Boolean isServiceGroup;

    /**
     * Get the identity of the service. This ID is an encoded representation of the service name. This is used in the REST APIs to identify the service resource.
     Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the service name is "fabric:/myapp/app1/svc1",
     the service identity would be "myapp~app1\~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
     *
     * @return the id value
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the identity of the service. This ID is an encoded representation of the service name. This is used in the REST APIs to identify the service resource.
     Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the service name is "fabric:/myapp/app1/svc1",
     the service identity would be "myapp~app1\~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
     *
     * @param id the id value to set
     * @return the ServiceInfoInner object itself.
     */
    public ServiceInfoInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the full name of the service with 'fabric:' URI scheme.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the full name of the service with 'fabric:' URI scheme.
     *
     * @param name the name value to set
     * @return the ServiceInfoInner object itself.
     */
    public ServiceInfoInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name of the service type as specified in the service manifest.
     *
     * @return the typeName value
     */
    public String typeName() {
        return this.typeName;
    }

    /**
     * Set name of the service type as specified in the service manifest.
     *
     * @param typeName the typeName value to set
     * @return the ServiceInfoInner object itself.
     */
    public ServiceInfoInner withTypeName(String typeName) {
        this.typeName = typeName;
        return this;
    }

    /**
     * Get the version of the service manifest.
     *
     * @return the manifestVersion value
     */
    public String manifestVersion() {
        return this.manifestVersion;
    }

    /**
     * Set the version of the service manifest.
     *
     * @param manifestVersion the manifestVersion value to set
     * @return the ServiceInfoInner object itself.
     */
    public ServiceInfoInner withManifestVersion(String manifestVersion) {
        this.manifestVersion = manifestVersion;
        return this;
    }

    /**
     * Get the health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'.
     *
     * @return the healthState value
     */
    public HealthState healthState() {
        return this.healthState;
    }

    /**
     * Set the health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'.
     *
     * @param healthState the healthState value to set
     * @return the ServiceInfoInner object itself.
     */
    public ServiceInfoInner withHealthState(HealthState healthState) {
        this.healthState = healthState;
        return this;
    }

    /**
     * Get the status of the application. Possible values include: 'Unknown', 'Active', 'Upgrading', 'Deleting', 'Creating', 'Failed'.
     *
     * @return the serviceStatus value
     */
    public ServiceStatus serviceStatus() {
        return this.serviceStatus;
    }

    /**
     * Set the status of the application. Possible values include: 'Unknown', 'Active', 'Upgrading', 'Deleting', 'Creating', 'Failed'.
     *
     * @param serviceStatus the serviceStatus value to set
     * @return the ServiceInfoInner object itself.
     */
    public ServiceInfoInner withServiceStatus(ServiceStatus serviceStatus) {
        this.serviceStatus = serviceStatus;
        return this;
    }

    /**
     * Get whether the service is in a service group.
     *
     * @return the isServiceGroup value
     */
    public Boolean isServiceGroup() {
        return this.isServiceGroup;
    }

    /**
     * Set whether the service is in a service group.
     *
     * @param isServiceGroup the isServiceGroup value to set
     * @return the ServiceInfoInner object itself.
     */
    public ServiceInfoInner withIsServiceGroup(Boolean isServiceGroup) {
        this.isServiceGroup = isServiceGroup;
        return this;
    }

}
