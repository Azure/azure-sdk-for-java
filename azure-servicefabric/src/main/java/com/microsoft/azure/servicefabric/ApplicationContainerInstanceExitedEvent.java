/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.microsoft.azure.servicefabric.implementation.ApplicationEventInner;

/**
 * Container Exited event.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "Kind")
@JsonTypeName("ApplicationContainerInstanceExited")
public class ApplicationContainerInstanceExitedEvent extends ApplicationEventInner {
    /**
     * Name of Service.
     */
    @JsonProperty(value = "ServiceName", required = true)
    private String serviceName;

    /**
     * Name of Service package.
     */
    @JsonProperty(value = "ServicePackageName", required = true)
    private String servicePackageName;

    /**
     * Activation Id of Service package.
     */
    @JsonProperty(value = "ServicePackageActivationId", required = true)
    private String servicePackageActivationId;

    /**
     * Indicates IsExclusive flag.
     */
    @JsonProperty(value = "IsExclusive", required = true)
    private boolean isExclusive;

    /**
     * Name of Code package.
     */
    @JsonProperty(value = "CodePackageName", required = true)
    private String codePackageName;

    /**
     * Type of EntryPoint.
     */
    @JsonProperty(value = "EntryPointType", required = true)
    private String entryPointType;

    /**
     * Name of Container image.
     */
    @JsonProperty(value = "ImageName", required = true)
    private String imageName;

    /**
     * Name of Container.
     */
    @JsonProperty(value = "ContainerName", required = true)
    private String containerName;

    /**
     * Host Id.
     */
    @JsonProperty(value = "HostId", required = true)
    private String hostId;

    /**
     * Exit code of process.
     */
    @JsonProperty(value = "ExitCode", required = true)
    private long exitCode;

    /**
     * Indicates if termination is unexpected.
     */
    @JsonProperty(value = "UnexpectedTermination", required = true)
    private boolean unexpectedTermination;

    /**
     * Start time of process.
     */
    @JsonProperty(value = "StartTime", required = true)
    private DateTime startTime;

    /**
     * Get name of Service.
     *
     * @return the serviceName value
     */
    public String serviceName() {
        return this.serviceName;
    }

    /**
     * Set name of Service.
     *
     * @param serviceName the serviceName value to set
     * @return the ApplicationContainerInstanceExitedEvent object itself.
     */
    public ApplicationContainerInstanceExitedEvent withServiceName(String serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    /**
     * Get name of Service package.
     *
     * @return the servicePackageName value
     */
    public String servicePackageName() {
        return this.servicePackageName;
    }

    /**
     * Set name of Service package.
     *
     * @param servicePackageName the servicePackageName value to set
     * @return the ApplicationContainerInstanceExitedEvent object itself.
     */
    public ApplicationContainerInstanceExitedEvent withServicePackageName(String servicePackageName) {
        this.servicePackageName = servicePackageName;
        return this;
    }

    /**
     * Get activation Id of Service package.
     *
     * @return the servicePackageActivationId value
     */
    public String servicePackageActivationId() {
        return this.servicePackageActivationId;
    }

    /**
     * Set activation Id of Service package.
     *
     * @param servicePackageActivationId the servicePackageActivationId value to set
     * @return the ApplicationContainerInstanceExitedEvent object itself.
     */
    public ApplicationContainerInstanceExitedEvent withServicePackageActivationId(String servicePackageActivationId) {
        this.servicePackageActivationId = servicePackageActivationId;
        return this;
    }

    /**
     * Get indicates IsExclusive flag.
     *
     * @return the isExclusive value
     */
    public boolean isExclusive() {
        return this.isExclusive;
    }

    /**
     * Set indicates IsExclusive flag.
     *
     * @param isExclusive the isExclusive value to set
     * @return the ApplicationContainerInstanceExitedEvent object itself.
     */
    public ApplicationContainerInstanceExitedEvent withIsExclusive(boolean isExclusive) {
        this.isExclusive = isExclusive;
        return this;
    }

    /**
     * Get name of Code package.
     *
     * @return the codePackageName value
     */
    public String codePackageName() {
        return this.codePackageName;
    }

    /**
     * Set name of Code package.
     *
     * @param codePackageName the codePackageName value to set
     * @return the ApplicationContainerInstanceExitedEvent object itself.
     */
    public ApplicationContainerInstanceExitedEvent withCodePackageName(String codePackageName) {
        this.codePackageName = codePackageName;
        return this;
    }

    /**
     * Get type of EntryPoint.
     *
     * @return the entryPointType value
     */
    public String entryPointType() {
        return this.entryPointType;
    }

    /**
     * Set type of EntryPoint.
     *
     * @param entryPointType the entryPointType value to set
     * @return the ApplicationContainerInstanceExitedEvent object itself.
     */
    public ApplicationContainerInstanceExitedEvent withEntryPointType(String entryPointType) {
        this.entryPointType = entryPointType;
        return this;
    }

    /**
     * Get name of Container image.
     *
     * @return the imageName value
     */
    public String imageName() {
        return this.imageName;
    }

    /**
     * Set name of Container image.
     *
     * @param imageName the imageName value to set
     * @return the ApplicationContainerInstanceExitedEvent object itself.
     */
    public ApplicationContainerInstanceExitedEvent withImageName(String imageName) {
        this.imageName = imageName;
        return this;
    }

    /**
     * Get name of Container.
     *
     * @return the containerName value
     */
    public String containerName() {
        return this.containerName;
    }

    /**
     * Set name of Container.
     *
     * @param containerName the containerName value to set
     * @return the ApplicationContainerInstanceExitedEvent object itself.
     */
    public ApplicationContainerInstanceExitedEvent withContainerName(String containerName) {
        this.containerName = containerName;
        return this;
    }

    /**
     * Get host Id.
     *
     * @return the hostId value
     */
    public String hostId() {
        return this.hostId;
    }

    /**
     * Set host Id.
     *
     * @param hostId the hostId value to set
     * @return the ApplicationContainerInstanceExitedEvent object itself.
     */
    public ApplicationContainerInstanceExitedEvent withHostId(String hostId) {
        this.hostId = hostId;
        return this;
    }

    /**
     * Get exit code of process.
     *
     * @return the exitCode value
     */
    public long exitCode() {
        return this.exitCode;
    }

    /**
     * Set exit code of process.
     *
     * @param exitCode the exitCode value to set
     * @return the ApplicationContainerInstanceExitedEvent object itself.
     */
    public ApplicationContainerInstanceExitedEvent withExitCode(long exitCode) {
        this.exitCode = exitCode;
        return this;
    }

    /**
     * Get indicates if termination is unexpected.
     *
     * @return the unexpectedTermination value
     */
    public boolean unexpectedTermination() {
        return this.unexpectedTermination;
    }

    /**
     * Set indicates if termination is unexpected.
     *
     * @param unexpectedTermination the unexpectedTermination value to set
     * @return the ApplicationContainerInstanceExitedEvent object itself.
     */
    public ApplicationContainerInstanceExitedEvent withUnexpectedTermination(boolean unexpectedTermination) {
        this.unexpectedTermination = unexpectedTermination;
        return this;
    }

    /**
     * Get start time of process.
     *
     * @return the startTime value
     */
    public DateTime startTime() {
        return this.startTime;
    }

    /**
     * Set start time of process.
     *
     * @param startTime the startTime value to set
     * @return the ApplicationContainerInstanceExitedEvent object itself.
     */
    public ApplicationContainerInstanceExitedEvent withStartTime(DateTime startTime) {
        this.startTime = startTime;
        return this;
    }

}
