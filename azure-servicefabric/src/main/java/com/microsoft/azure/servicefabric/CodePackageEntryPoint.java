/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Information about setup or main entry point of a code package deployed on a
 * Service Fabric node.
 */
public class CodePackageEntryPoint {
    /**
     * The location of entry point executable on the node.
     */
    @JsonProperty(value = "EntryPointLocation")
    private String entryPointLocation;

    /**
     * The process ID of the entry point.
     */
    @JsonProperty(value = "ProcessId")
    private String processId;

    /**
     * The user name under which entry point executable is run on the node.
     */
    @JsonProperty(value = "RunAsUserName")
    private String runAsUserName;

    /**
     * Statistics about setup or main entry point  of a code package deployed
     * on a Service Fabric node.
     */
    @JsonProperty(value = "CodePackageEntryPointStatistics")
    private CodePackageEntryPointStatistics codePackageEntryPointStatistics;

    /**
     * Specifies the status of the code package entry point deployed on a
     * Service Fabric node. Possible values include: 'Invalid', 'Pending',
     * 'Starting', 'Started', 'Stopping', 'Stopped'.
     */
    @JsonProperty(value = "Status")
    private EntryPointStatus status;

    /**
     * The time (in UTC) when the entry point executable will be run next.
     */
    @JsonProperty(value = "NextActivationTime")
    private DateTime nextActivationTime;

    /**
     * The instance ID for current running entry point. For a code package
     * setup entry point (if specified) runs first and after it finishes main
     * entry point is started. Each time entry point executable is run, its
     * instance id will change.
     */
    @JsonProperty(value = "InstanceId")
    private String instanceId;

    /**
     * Get the location of entry point executable on the node.
     *
     * @return the entryPointLocation value
     */
    public String entryPointLocation() {
        return this.entryPointLocation;
    }

    /**
     * Set the location of entry point executable on the node.
     *
     * @param entryPointLocation the entryPointLocation value to set
     * @return the CodePackageEntryPoint object itself.
     */
    public CodePackageEntryPoint withEntryPointLocation(String entryPointLocation) {
        this.entryPointLocation = entryPointLocation;
        return this;
    }

    /**
     * Get the process ID of the entry point.
     *
     * @return the processId value
     */
    public String processId() {
        return this.processId;
    }

    /**
     * Set the process ID of the entry point.
     *
     * @param processId the processId value to set
     * @return the CodePackageEntryPoint object itself.
     */
    public CodePackageEntryPoint withProcessId(String processId) {
        this.processId = processId;
        return this;
    }

    /**
     * Get the user name under which entry point executable is run on the node.
     *
     * @return the runAsUserName value
     */
    public String runAsUserName() {
        return this.runAsUserName;
    }

    /**
     * Set the user name under which entry point executable is run on the node.
     *
     * @param runAsUserName the runAsUserName value to set
     * @return the CodePackageEntryPoint object itself.
     */
    public CodePackageEntryPoint withRunAsUserName(String runAsUserName) {
        this.runAsUserName = runAsUserName;
        return this;
    }

    /**
     * Get statistics about setup or main entry point  of a code package deployed on a Service Fabric node.
     *
     * @return the codePackageEntryPointStatistics value
     */
    public CodePackageEntryPointStatistics codePackageEntryPointStatistics() {
        return this.codePackageEntryPointStatistics;
    }

    /**
     * Set statistics about setup or main entry point  of a code package deployed on a Service Fabric node.
     *
     * @param codePackageEntryPointStatistics the codePackageEntryPointStatistics value to set
     * @return the CodePackageEntryPoint object itself.
     */
    public CodePackageEntryPoint withCodePackageEntryPointStatistics(CodePackageEntryPointStatistics codePackageEntryPointStatistics) {
        this.codePackageEntryPointStatistics = codePackageEntryPointStatistics;
        return this;
    }

    /**
     * Get specifies the status of the code package entry point deployed on a Service Fabric node. Possible values include: 'Invalid', 'Pending', 'Starting', 'Started', 'Stopping', 'Stopped'.
     *
     * @return the status value
     */
    public EntryPointStatus status() {
        return this.status;
    }

    /**
     * Set specifies the status of the code package entry point deployed on a Service Fabric node. Possible values include: 'Invalid', 'Pending', 'Starting', 'Started', 'Stopping', 'Stopped'.
     *
     * @param status the status value to set
     * @return the CodePackageEntryPoint object itself.
     */
    public CodePackageEntryPoint withStatus(EntryPointStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the time (in UTC) when the entry point executable will be run next.
     *
     * @return the nextActivationTime value
     */
    public DateTime nextActivationTime() {
        return this.nextActivationTime;
    }

    /**
     * Set the time (in UTC) when the entry point executable will be run next.
     *
     * @param nextActivationTime the nextActivationTime value to set
     * @return the CodePackageEntryPoint object itself.
     */
    public CodePackageEntryPoint withNextActivationTime(DateTime nextActivationTime) {
        this.nextActivationTime = nextActivationTime;
        return this;
    }

    /**
     * Get the instance ID for current running entry point. For a code package setup entry point (if specified) runs first and after it finishes main entry point is started. Each time entry point executable is run, its instance id will change.
     *
     * @return the instanceId value
     */
    public String instanceId() {
        return this.instanceId;
    }

    /**
     * Set the instance ID for current running entry point. For a code package setup entry point (if specified) runs first and after it finishes main entry point is started. Each time entry point executable is run, its instance id will change.
     *
     * @param instanceId the instanceId value to set
     * @return the CodePackageEntryPoint object itself.
     */
    public CodePackageEntryPoint withInstanceId(String instanceId) {
        this.instanceId = instanceId;
        return this;
    }

}
