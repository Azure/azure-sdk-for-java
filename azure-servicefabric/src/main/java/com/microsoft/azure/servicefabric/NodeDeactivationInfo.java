/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Information about the node deactivation. This information is valid for a
 * node that is undergoing deactivation or has already been deactivated.
 */
public class NodeDeactivationInfo {
    /**
     * The intent or the reason for deactivating the node. Following are the
     * possible values for it. Possible values include: 'Invalid', 'Pause',
     * 'Restart', 'RemoveData', 'RemoveNode'.
     */
    @JsonProperty(value = "NodeDeactivationIntent")
    private NodeDeactivationIntent nodeDeactivationIntent;

    /**
     * The status of node deactivation operation. Following are the possible
     * values. Possible values include: 'None', 'SafetyCheckInProgress',
     * 'SafetyCheckComplete', 'Completed'.
     */
    @JsonProperty(value = "NodeDeactivationStatus")
    private NodeDeactivationStatus nodeDeactivationStatus;

    /**
     * List of tasks representing the deactivation operation on the node.
     */
    @JsonProperty(value = "NodeDeactivationTask")
    private List<NodeDeactivationTask> nodeDeactivationTask;

    /**
     * List of pending safety checks.
     */
    @JsonProperty(value = "PendingSafetyChecks")
    private List<SafetyCheckWrapper> pendingSafetyChecks;

    /**
     * Get the intent or the reason for deactivating the node. Following are the possible values for it. Possible values include: 'Invalid', 'Pause', 'Restart', 'RemoveData', 'RemoveNode'.
     *
     * @return the nodeDeactivationIntent value
     */
    public NodeDeactivationIntent nodeDeactivationIntent() {
        return this.nodeDeactivationIntent;
    }

    /**
     * Set the intent or the reason for deactivating the node. Following are the possible values for it. Possible values include: 'Invalid', 'Pause', 'Restart', 'RemoveData', 'RemoveNode'.
     *
     * @param nodeDeactivationIntent the nodeDeactivationIntent value to set
     * @return the NodeDeactivationInfo object itself.
     */
    public NodeDeactivationInfo withNodeDeactivationIntent(NodeDeactivationIntent nodeDeactivationIntent) {
        this.nodeDeactivationIntent = nodeDeactivationIntent;
        return this;
    }

    /**
     * Get the status of node deactivation operation. Following are the possible values. Possible values include: 'None', 'SafetyCheckInProgress', 'SafetyCheckComplete', 'Completed'.
     *
     * @return the nodeDeactivationStatus value
     */
    public NodeDeactivationStatus nodeDeactivationStatus() {
        return this.nodeDeactivationStatus;
    }

    /**
     * Set the status of node deactivation operation. Following are the possible values. Possible values include: 'None', 'SafetyCheckInProgress', 'SafetyCheckComplete', 'Completed'.
     *
     * @param nodeDeactivationStatus the nodeDeactivationStatus value to set
     * @return the NodeDeactivationInfo object itself.
     */
    public NodeDeactivationInfo withNodeDeactivationStatus(NodeDeactivationStatus nodeDeactivationStatus) {
        this.nodeDeactivationStatus = nodeDeactivationStatus;
        return this;
    }

    /**
     * Get list of tasks representing the deactivation operation on the node.
     *
     * @return the nodeDeactivationTask value
     */
    public List<NodeDeactivationTask> nodeDeactivationTask() {
        return this.nodeDeactivationTask;
    }

    /**
     * Set list of tasks representing the deactivation operation on the node.
     *
     * @param nodeDeactivationTask the nodeDeactivationTask value to set
     * @return the NodeDeactivationInfo object itself.
     */
    public NodeDeactivationInfo withNodeDeactivationTask(List<NodeDeactivationTask> nodeDeactivationTask) {
        this.nodeDeactivationTask = nodeDeactivationTask;
        return this;
    }

    /**
     * Get list of pending safety checks.
     *
     * @return the pendingSafetyChecks value
     */
    public List<SafetyCheckWrapper> pendingSafetyChecks() {
        return this.pendingSafetyChecks;
    }

    /**
     * Set list of pending safety checks.
     *
     * @param pendingSafetyChecks the pendingSafetyChecks value to set
     * @return the NodeDeactivationInfo object itself.
     */
    public NodeDeactivationInfo withPendingSafetyChecks(List<SafetyCheckWrapper> pendingSafetyChecks) {
        this.pendingSafetyChecks = pendingSafetyChecks;
        return this;
    }

}
