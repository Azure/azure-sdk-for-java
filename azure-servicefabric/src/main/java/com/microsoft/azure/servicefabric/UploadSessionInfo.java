/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import java.util.UUID;
import org.joda.time.DateTime;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Information about an image store upload session. A session is associated
 * with a relative path in the image store.
 */
public class UploadSessionInfo {
    /**
     * The remote location within image store. This path is relative to the
     * image store root.
     */
    @JsonProperty(value = "StoreRelativePath")
    private String storeRelativePath;

    /**
     * A unique ID of the upload session. A session ID can be reused only if
     * the session was committed or removed.
     */
    @JsonProperty(value = "SessionId")
    private UUID sessionId;

    /**
     * The date and time when the upload session was last modified.
     */
    @JsonProperty(value = "ModifiedDate")
    private DateTime modifiedDate;

    /**
     * The size in bytes of the uploading file.
     */
    @JsonProperty(value = "FileSize")
    private String fileSize;

    /**
     * List of chunk ranges that image store has not received yet.
     */
    @JsonProperty(value = "ExpectedRanges")
    private List<UploadChunkRange> expectedRanges;

    /**
     * Get the remote location within image store. This path is relative to the image store root.
     *
     * @return the storeRelativePath value
     */
    public String storeRelativePath() {
        return this.storeRelativePath;
    }

    /**
     * Set the remote location within image store. This path is relative to the image store root.
     *
     * @param storeRelativePath the storeRelativePath value to set
     * @return the UploadSessionInfo object itself.
     */
    public UploadSessionInfo withStoreRelativePath(String storeRelativePath) {
        this.storeRelativePath = storeRelativePath;
        return this;
    }

    /**
     * Get a unique ID of the upload session. A session ID can be reused only if the session was committed or removed.
     *
     * @return the sessionId value
     */
    public UUID sessionId() {
        return this.sessionId;
    }

    /**
     * Set a unique ID of the upload session. A session ID can be reused only if the session was committed or removed.
     *
     * @param sessionId the sessionId value to set
     * @return the UploadSessionInfo object itself.
     */
    public UploadSessionInfo withSessionId(UUID sessionId) {
        this.sessionId = sessionId;
        return this;
    }

    /**
     * Get the date and time when the upload session was last modified.
     *
     * @return the modifiedDate value
     */
    public DateTime modifiedDate() {
        return this.modifiedDate;
    }

    /**
     * Set the date and time when the upload session was last modified.
     *
     * @param modifiedDate the modifiedDate value to set
     * @return the UploadSessionInfo object itself.
     */
    public UploadSessionInfo withModifiedDate(DateTime modifiedDate) {
        this.modifiedDate = modifiedDate;
        return this;
    }

    /**
     * Get the size in bytes of the uploading file.
     *
     * @return the fileSize value
     */
    public String fileSize() {
        return this.fileSize;
    }

    /**
     * Set the size in bytes of the uploading file.
     *
     * @param fileSize the fileSize value to set
     * @return the UploadSessionInfo object itself.
     */
    public UploadSessionInfo withFileSize(String fileSize) {
        this.fileSize = fileSize;
        return this;
    }

    /**
     * Get list of chunk ranges that image store has not received yet.
     *
     * @return the expectedRanges value
     */
    public List<UploadChunkRange> expectedRanges() {
        return this.expectedRanges;
    }

    /**
     * Set list of chunk ranges that image store has not received yet.
     *
     * @param expectedRanges the expectedRanges value to set
     * @return the UploadSessionInfo object itself.
     */
    public UploadSessionInfo withExpectedRanges(List<UploadChunkRange> expectedRanges) {
        this.expectedRanges = expectedRanges;
        return this;
    }

}
