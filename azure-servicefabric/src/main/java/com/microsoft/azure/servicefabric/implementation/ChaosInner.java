/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric.implementation;

import com.microsoft.azure.servicefabric.ChaosParameters;
import com.microsoft.azure.servicefabric.ChaosStatus;
import com.microsoft.azure.servicefabric.ChaosScheduleStatus;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Contains a description of Chaos.
 */
public class ChaosInner {
    /**
     * If Chaos is running, these are the parameters Chaos is running with.
     */
    @JsonProperty(value = "ChaosParameters")
    private ChaosParameters chaosParameters;

    /**
     * Current status of the Chaos run. Possible values include: 'Invalid',
     * 'Running', 'Stopped'.
     */
    @JsonProperty(value = "Status")
    private ChaosStatus status;

    /**
     * Current status of the schedule. Possible values include: 'Invalid',
     * 'Stopped', 'Active', 'Expired', 'Pending'.
     */
    @JsonProperty(value = "ScheduleStatus")
    private ChaosScheduleStatus scheduleStatus;

    /**
     * Get if Chaos is running, these are the parameters Chaos is running with.
     *
     * @return the chaosParameters value
     */
    public ChaosParameters chaosParameters() {
        return this.chaosParameters;
    }

    /**
     * Set if Chaos is running, these are the parameters Chaos is running with.
     *
     * @param chaosParameters the chaosParameters value to set
     * @return the ChaosInner object itself.
     */
    public ChaosInner withChaosParameters(ChaosParameters chaosParameters) {
        this.chaosParameters = chaosParameters;
        return this;
    }

    /**
     * Get current status of the Chaos run. Possible values include: 'Invalid', 'Running', 'Stopped'.
     *
     * @return the status value
     */
    public ChaosStatus status() {
        return this.status;
    }

    /**
     * Set current status of the Chaos run. Possible values include: 'Invalid', 'Running', 'Stopped'.
     *
     * @param status the status value to set
     * @return the ChaosInner object itself.
     */
    public ChaosInner withStatus(ChaosStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get current status of the schedule. Possible values include: 'Invalid', 'Stopped', 'Active', 'Expired', 'Pending'.
     *
     * @return the scheduleStatus value
     */
    public ChaosScheduleStatus scheduleStatus() {
        return this.scheduleStatus;
    }

    /**
     * Set current status of the schedule. Possible values include: 'Invalid', 'Stopped', 'Active', 'Expired', 'Pending'.
     *
     * @param scheduleStatus the scheduleStatus value to set
     * @return the ChaosInner object itself.
     */
    public ChaosInner withScheduleStatus(ChaosScheduleStatus scheduleStatus) {
        this.scheduleStatus = scheduleStatus;
        return this;
    }

}
