/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric.implementation;

import com.microsoft.azure.servicefabric.HealthState;
import com.microsoft.azure.servicefabric.NodeHealthStateChunkList;
import com.microsoft.azure.servicefabric.ApplicationHealthStateChunkList;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents the health chunk of the cluster.
 * Contains the cluster aggregated health state, and the cluster entities that
 * respect the input filter.
 */
public class ClusterHealthChunkInner {
    /**
     * The HealthState representing the aggregated health state of the cluster
     * computed by Health Manager.
     * The health evaluation of the entity reflects all events reported on the
     * entity and its children (if any).
     * The aggregation is done by applying the desired cluster health policy
     * and the application health policies. Possible values include: 'Invalid',
     * 'Ok', 'Warning', 'Error', 'Unknown'.
     */
    @JsonProperty(value = "HealthState")
    private HealthState healthState;

    /**
     * The list of node health state chunks in the cluster that respect the
     * filters in the cluster health chunk query description.
     */
    @JsonProperty(value = "NodeHealthStateChunks")
    private NodeHealthStateChunkList nodeHealthStateChunks;

    /**
     * The list of application health state chunks in the cluster that respect
     * the filters in the cluster health chunk query description.
     */
    @JsonProperty(value = "ApplicationHealthStateChunks")
    private ApplicationHealthStateChunkList applicationHealthStateChunks;

    /**
     * Get the HealthState representing the aggregated health state of the cluster computed by Health Manager.
     The health evaluation of the entity reflects all events reported on the entity and its children (if any).
     The aggregation is done by applying the desired cluster health policy and the application health policies. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'.
     *
     * @return the healthState value
     */
    public HealthState healthState() {
        return this.healthState;
    }

    /**
     * Set the HealthState representing the aggregated health state of the cluster computed by Health Manager.
     The health evaluation of the entity reflects all events reported on the entity and its children (if any).
     The aggregation is done by applying the desired cluster health policy and the application health policies. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'.
     *
     * @param healthState the healthState value to set
     * @return the ClusterHealthChunkInner object itself.
     */
    public ClusterHealthChunkInner withHealthState(HealthState healthState) {
        this.healthState = healthState;
        return this;
    }

    /**
     * Get the list of node health state chunks in the cluster that respect the filters in the cluster health chunk query description.
     *
     * @return the nodeHealthStateChunks value
     */
    public NodeHealthStateChunkList nodeHealthStateChunks() {
        return this.nodeHealthStateChunks;
    }

    /**
     * Set the list of node health state chunks in the cluster that respect the filters in the cluster health chunk query description.
     *
     * @param nodeHealthStateChunks the nodeHealthStateChunks value to set
     * @return the ClusterHealthChunkInner object itself.
     */
    public ClusterHealthChunkInner withNodeHealthStateChunks(NodeHealthStateChunkList nodeHealthStateChunks) {
        this.nodeHealthStateChunks = nodeHealthStateChunks;
        return this;
    }

    /**
     * Get the list of application health state chunks in the cluster that respect the filters in the cluster health chunk query description.
     *
     * @return the applicationHealthStateChunks value
     */
    public ApplicationHealthStateChunkList applicationHealthStateChunks() {
        return this.applicationHealthStateChunks;
    }

    /**
     * Set the list of application health state chunks in the cluster that respect the filters in the cluster health chunk query description.
     *
     * @param applicationHealthStateChunks the applicationHealthStateChunks value to set
     * @return the ClusterHealthChunkInner object itself.
     */
    public ClusterHealthChunkInner withApplicationHealthStateChunks(ApplicationHealthStateChunkList applicationHealthStateChunks) {
        this.applicationHealthStateChunks = applicationHealthStateChunks;
        return this;
    }

}
