/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric.implementation;

import com.microsoft.azure.servicefabric.State;
import com.microsoft.azure.servicefabric.RepairTargetDescriptionBase;
import com.microsoft.azure.servicefabric.RepairImpactDescriptionBase;
import com.microsoft.azure.servicefabric.ResultStatus;
import com.microsoft.azure.servicefabric.RepairTaskHistory;
import com.microsoft.azure.servicefabric.RepairTaskHealthCheckState;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents a repair task, which includes information about what kind of
 * repair was requested, what its progress is, and what its final result was.
 *
 * This type supports the Service Fabric platform; it is not meant to be used
 * directly from your code.
 */
public class RepairTaskInner {
    /**
     * The ID of the repair task.
     */
    @JsonProperty(value = "TaskId", required = true)
    private String taskId;

    /**
     * The version of the repair task.
     * When creating a new repair task, the version must be set to zero.  When
     * updating a repair task,
     * the version is used for optimistic concurrency checks.  If the version
     * is
     * set to zero, the update will not check for write conflicts.  If the
     * version is set to a non-zero value, then the
     * update will only succeed if the actual current version of the repair
     * task matches this value.
     */
    @JsonProperty(value = "Version")
    private String version;

    /**
     * A description of the purpose of the repair task, or other informational
     * details.
     * May be set when the repair task is created, and is immutable once set.
     */
    @JsonProperty(value = "Description")
    private String description;

    /**
     * The workflow state of the repair task. Valid initial states are Created,
     * Claimed, and Preparing. Possible values include: 'Invalid', 'Created',
     * 'Claimed', 'Preparing', 'Approved', 'Executing', 'Restoring',
     * 'Completed'.
     */
    @JsonProperty(value = "State", required = true)
    private State state;

    /**
     * A bitwise-OR of the following values, which gives additional details
     * about the status of the repair task.
     * - 1 - Cancellation of the repair has been requested
     * - 2 - Abort of the repair has been requested
     * - 4 - Approval of the repair was forced via client request.
     */
    @JsonProperty(value = "Flags")
    private Integer flags;

    /**
     * The requested repair action. Must be specified when the repair task is
     * created, and is immutable once set.
     */
    @JsonProperty(value = "Action", required = true)
    private String action;

    /**
     * The target object determines what actions the system will take to
     * prepare for the impact of the repair, prior to approving execution of
     * the repair.
     * May be set when the repair task is created, and is immutable once set.
     */
    @JsonProperty(value = "Target")
    private RepairTargetDescriptionBase target;

    /**
     * The name of the repair executor. Must be specified in Claimed and later
     * states, and is immutable once set.
     */
    @JsonProperty(value = "Executor")
    private String executor;

    /**
     * A data string that the repair executor can use to store its internal
     * state.
     */
    @JsonProperty(value = "ExecutorData")
    private String executorData;

    /**
     * The impact object determines what actions the system will take to
     * prepare for the impact of the repair, prior to approving execution of
     * the repair.
     * Impact must be specified by the repair executor when transitioning to
     * the Preparing state, and is immutable once set.
     */
    @JsonProperty(value = "Impact")
    private RepairImpactDescriptionBase impact;

    /**
     * A value describing the overall result of the repair task execution. Must
     * be specified in the Restoring and later states, and is immutable once
     * set. Possible values include: 'Invalid', 'Succeeded', 'Cancelled',
     * 'Interrupted', 'Failed', 'Pending'.
     */
    @JsonProperty(value = "ResultStatus")
    private ResultStatus resultStatus;

    /**
     * A numeric value providing additional details about the result of the
     * repair task execution.
     * May be specified in the Restoring and later states, and is immutable
     * once set.
     */
    @JsonProperty(value = "ResultCode")
    private Integer resultCode;

    /**
     * A string providing additional details about the result of the repair
     * task execution.
     * May be specified in the Restoring and later states, and is immutable
     * once set.
     */
    @JsonProperty(value = "ResultDetails")
    private String resultDetails;

    /**
     * An object that contains timestamps of the repair task's state
     * transitions.
     * These timestamps are updated by the system, and cannot be directly
     * modified.
     */
    @JsonProperty(value = "History")
    private RepairTaskHistory history;

    /**
     * The workflow state of the health check when the repair task is in the
     * Preparing state. Possible values include: 'NotStarted', 'InProgress',
     * 'Succeeded', 'Skipped', 'TimedOut'.
     */
    @JsonProperty(value = "PreparingHealthCheckState")
    private RepairTaskHealthCheckState preparingHealthCheckState;

    /**
     * The workflow state of the health check when the repair task is in the
     * Restoring state. Possible values include: 'NotStarted', 'InProgress',
     * 'Succeeded', 'Skipped', 'TimedOut'.
     */
    @JsonProperty(value = "RestoringHealthCheckState")
    private RepairTaskHealthCheckState restoringHealthCheckState;

    /**
     * A value to determine if health checks will be performed when the repair
     * task enters the Preparing state.
     */
    @JsonProperty(value = "PerformPreparingHealthCheck")
    private Boolean performPreparingHealthCheck;

    /**
     * A value to determine if health checks will be performed when the repair
     * task enters the Restoring state.
     */
    @JsonProperty(value = "PerformRestoringHealthCheck")
    private Boolean performRestoringHealthCheck;

    /**
     * Get the ID of the repair task.
     *
     * @return the taskId value
     */
    public String taskId() {
        return this.taskId;
    }

    /**
     * Set the ID of the repair task.
     *
     * @param taskId the taskId value to set
     * @return the RepairTaskInner object itself.
     */
    public RepairTaskInner withTaskId(String taskId) {
        this.taskId = taskId;
        return this;
    }

    /**
     * Get the version of the repair task.
     When creating a new repair task, the version must be set to zero.  When updating a repair task,
     the version is used for optimistic concurrency checks.  If the version is
     set to zero, the update will not check for write conflicts.  If the version is set to a non-zero value, then the
     update will only succeed if the actual current version of the repair task matches this value.
     *
     * @return the version value
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version of the repair task.
     When creating a new repair task, the version must be set to zero.  When updating a repair task,
     the version is used for optimistic concurrency checks.  If the version is
     set to zero, the update will not check for write conflicts.  If the version is set to a non-zero value, then the
     update will only succeed if the actual current version of the repair task matches this value.
     *
     * @param version the version value to set
     * @return the RepairTaskInner object itself.
     */
    public RepairTaskInner withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get a description of the purpose of the repair task, or other informational details.
     May be set when the repair task is created, and is immutable once set.
     *
     * @return the description value
     */
    public String description() {
        return this.description;
    }

    /**
     * Set a description of the purpose of the repair task, or other informational details.
     May be set when the repair task is created, and is immutable once set.
     *
     * @param description the description value to set
     * @return the RepairTaskInner object itself.
     */
    public RepairTaskInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the workflow state of the repair task. Valid initial states are Created, Claimed, and Preparing. Possible values include: 'Invalid', 'Created', 'Claimed', 'Preparing', 'Approved', 'Executing', 'Restoring', 'Completed'.
     *
     * @return the state value
     */
    public State state() {
        return this.state;
    }

    /**
     * Set the workflow state of the repair task. Valid initial states are Created, Claimed, and Preparing. Possible values include: 'Invalid', 'Created', 'Claimed', 'Preparing', 'Approved', 'Executing', 'Restoring', 'Completed'.
     *
     * @param state the state value to set
     * @return the RepairTaskInner object itself.
     */
    public RepairTaskInner withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get a bitwise-OR of the following values, which gives additional details about the status of the repair task.
     - 1 - Cancellation of the repair has been requested
     - 2 - Abort of the repair has been requested
     - 4 - Approval of the repair was forced via client request.
     *
     * @return the flags value
     */
    public Integer flags() {
        return this.flags;
    }

    /**
     * Set a bitwise-OR of the following values, which gives additional details about the status of the repair task.
     - 1 - Cancellation of the repair has been requested
     - 2 - Abort of the repair has been requested
     - 4 - Approval of the repair was forced via client request.
     *
     * @param flags the flags value to set
     * @return the RepairTaskInner object itself.
     */
    public RepairTaskInner withFlags(Integer flags) {
        this.flags = flags;
        return this;
    }

    /**
     * Get the requested repair action. Must be specified when the repair task is created, and is immutable once set.
     *
     * @return the action value
     */
    public String action() {
        return this.action;
    }

    /**
     * Set the requested repair action. Must be specified when the repair task is created, and is immutable once set.
     *
     * @param action the action value to set
     * @return the RepairTaskInner object itself.
     */
    public RepairTaskInner withAction(String action) {
        this.action = action;
        return this;
    }

    /**
     * Get the target object determines what actions the system will take to prepare for the impact of the repair, prior to approving execution of the repair.
     May be set when the repair task is created, and is immutable once set.
     *
     * @return the target value
     */
    public RepairTargetDescriptionBase target() {
        return this.target;
    }

    /**
     * Set the target object determines what actions the system will take to prepare for the impact of the repair, prior to approving execution of the repair.
     May be set when the repair task is created, and is immutable once set.
     *
     * @param target the target value to set
     * @return the RepairTaskInner object itself.
     */
    public RepairTaskInner withTarget(RepairTargetDescriptionBase target) {
        this.target = target;
        return this;
    }

    /**
     * Get the name of the repair executor. Must be specified in Claimed and later states, and is immutable once set.
     *
     * @return the executor value
     */
    public String executor() {
        return this.executor;
    }

    /**
     * Set the name of the repair executor. Must be specified in Claimed and later states, and is immutable once set.
     *
     * @param executor the executor value to set
     * @return the RepairTaskInner object itself.
     */
    public RepairTaskInner withExecutor(String executor) {
        this.executor = executor;
        return this;
    }

    /**
     * Get a data string that the repair executor can use to store its internal state.
     *
     * @return the executorData value
     */
    public String executorData() {
        return this.executorData;
    }

    /**
     * Set a data string that the repair executor can use to store its internal state.
     *
     * @param executorData the executorData value to set
     * @return the RepairTaskInner object itself.
     */
    public RepairTaskInner withExecutorData(String executorData) {
        this.executorData = executorData;
        return this;
    }

    /**
     * Get the impact object determines what actions the system will take to prepare for the impact of the repair, prior to approving execution of the repair.
     Impact must be specified by the repair executor when transitioning to the Preparing state, and is immutable once set.
     *
     * @return the impact value
     */
    public RepairImpactDescriptionBase impact() {
        return this.impact;
    }

    /**
     * Set the impact object determines what actions the system will take to prepare for the impact of the repair, prior to approving execution of the repair.
     Impact must be specified by the repair executor when transitioning to the Preparing state, and is immutable once set.
     *
     * @param impact the impact value to set
     * @return the RepairTaskInner object itself.
     */
    public RepairTaskInner withImpact(RepairImpactDescriptionBase impact) {
        this.impact = impact;
        return this;
    }

    /**
     * Get a value describing the overall result of the repair task execution. Must be specified in the Restoring and later states, and is immutable once set. Possible values include: 'Invalid', 'Succeeded', 'Cancelled', 'Interrupted', 'Failed', 'Pending'.
     *
     * @return the resultStatus value
     */
    public ResultStatus resultStatus() {
        return this.resultStatus;
    }

    /**
     * Set a value describing the overall result of the repair task execution. Must be specified in the Restoring and later states, and is immutable once set. Possible values include: 'Invalid', 'Succeeded', 'Cancelled', 'Interrupted', 'Failed', 'Pending'.
     *
     * @param resultStatus the resultStatus value to set
     * @return the RepairTaskInner object itself.
     */
    public RepairTaskInner withResultStatus(ResultStatus resultStatus) {
        this.resultStatus = resultStatus;
        return this;
    }

    /**
     * Get a numeric value providing additional details about the result of the repair task execution.
     May be specified in the Restoring and later states, and is immutable once set.
     *
     * @return the resultCode value
     */
    public Integer resultCode() {
        return this.resultCode;
    }

    /**
     * Set a numeric value providing additional details about the result of the repair task execution.
     May be specified in the Restoring and later states, and is immutable once set.
     *
     * @param resultCode the resultCode value to set
     * @return the RepairTaskInner object itself.
     */
    public RepairTaskInner withResultCode(Integer resultCode) {
        this.resultCode = resultCode;
        return this;
    }

    /**
     * Get a string providing additional details about the result of the repair task execution.
     May be specified in the Restoring and later states, and is immutable once set.
     *
     * @return the resultDetails value
     */
    public String resultDetails() {
        return this.resultDetails;
    }

    /**
     * Set a string providing additional details about the result of the repair task execution.
     May be specified in the Restoring and later states, and is immutable once set.
     *
     * @param resultDetails the resultDetails value to set
     * @return the RepairTaskInner object itself.
     */
    public RepairTaskInner withResultDetails(String resultDetails) {
        this.resultDetails = resultDetails;
        return this;
    }

    /**
     * Get an object that contains timestamps of the repair task's state transitions.
     These timestamps are updated by the system, and cannot be directly modified.
     *
     * @return the history value
     */
    public RepairTaskHistory history() {
        return this.history;
    }

    /**
     * Set an object that contains timestamps of the repair task's state transitions.
     These timestamps are updated by the system, and cannot be directly modified.
     *
     * @param history the history value to set
     * @return the RepairTaskInner object itself.
     */
    public RepairTaskInner withHistory(RepairTaskHistory history) {
        this.history = history;
        return this;
    }

    /**
     * Get the workflow state of the health check when the repair task is in the Preparing state. Possible values include: 'NotStarted', 'InProgress', 'Succeeded', 'Skipped', 'TimedOut'.
     *
     * @return the preparingHealthCheckState value
     */
    public RepairTaskHealthCheckState preparingHealthCheckState() {
        return this.preparingHealthCheckState;
    }

    /**
     * Set the workflow state of the health check when the repair task is in the Preparing state. Possible values include: 'NotStarted', 'InProgress', 'Succeeded', 'Skipped', 'TimedOut'.
     *
     * @param preparingHealthCheckState the preparingHealthCheckState value to set
     * @return the RepairTaskInner object itself.
     */
    public RepairTaskInner withPreparingHealthCheckState(RepairTaskHealthCheckState preparingHealthCheckState) {
        this.preparingHealthCheckState = preparingHealthCheckState;
        return this;
    }

    /**
     * Get the workflow state of the health check when the repair task is in the Restoring state. Possible values include: 'NotStarted', 'InProgress', 'Succeeded', 'Skipped', 'TimedOut'.
     *
     * @return the restoringHealthCheckState value
     */
    public RepairTaskHealthCheckState restoringHealthCheckState() {
        return this.restoringHealthCheckState;
    }

    /**
     * Set the workflow state of the health check when the repair task is in the Restoring state. Possible values include: 'NotStarted', 'InProgress', 'Succeeded', 'Skipped', 'TimedOut'.
     *
     * @param restoringHealthCheckState the restoringHealthCheckState value to set
     * @return the RepairTaskInner object itself.
     */
    public RepairTaskInner withRestoringHealthCheckState(RepairTaskHealthCheckState restoringHealthCheckState) {
        this.restoringHealthCheckState = restoringHealthCheckState;
        return this;
    }

    /**
     * Get a value to determine if health checks will be performed when the repair task enters the Preparing state.
     *
     * @return the performPreparingHealthCheck value
     */
    public Boolean performPreparingHealthCheck() {
        return this.performPreparingHealthCheck;
    }

    /**
     * Set a value to determine if health checks will be performed when the repair task enters the Preparing state.
     *
     * @param performPreparingHealthCheck the performPreparingHealthCheck value to set
     * @return the RepairTaskInner object itself.
     */
    public RepairTaskInner withPerformPreparingHealthCheck(Boolean performPreparingHealthCheck) {
        this.performPreparingHealthCheck = performPreparingHealthCheck;
        return this;
    }

    /**
     * Get a value to determine if health checks will be performed when the repair task enters the Restoring state.
     *
     * @return the performRestoringHealthCheck value
     */
    public Boolean performRestoringHealthCheck() {
        return this.performRestoringHealthCheck;
    }

    /**
     * Set a value to determine if health checks will be performed when the repair task enters the Restoring state.
     *
     * @param performRestoringHealthCheck the performRestoringHealthCheck value to set
     * @return the RepairTaskInner object itself.
     */
    public RepairTaskInner withPerformRestoringHealthCheck(Boolean performRestoringHealthCheck) {
        this.performRestoringHealthCheck = performRestoringHealthCheck;
        return this;
    }

}
