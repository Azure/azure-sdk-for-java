/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.servicefabric.FabricErrorException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in MeshVolumes.
 */
public class MeshVolumesInner {
    /** The Retrofit service to perform REST calls. */
    private MeshVolumesService service;
    /** The service client containing this operation class. */
    private ServiceFabricClientAPIsImpl client;

    /**
     * Initializes an instance of MeshVolumesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public MeshVolumesInner(Retrofit retrofit, ServiceFabricClientAPIsImpl client) {
        this.service = retrofit.create(MeshVolumesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for MeshVolumes to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MeshVolumesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.servicefabric.MeshVolumes createOrUpdate" })
        @PUT("Resources/Volumes/{volumeResourceName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path(value = "volumeResourceName", encoded = true) String volumeResourceName, @Query("api-version") String apiVersion, @Body VolumeResourceDescriptionInner volumeResourceDescription, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.servicefabric.MeshVolumes get" })
        @GET("Resources/Volumes/{volumeResourceName}")
        Observable<Response<ResponseBody>> get(@Path(value = "volumeResourceName", encoded = true) String volumeResourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.servicefabric.MeshVolumes delete" })
        @HTTP(path = "Resources/Volumes/{volumeResourceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path(value = "volumeResourceName", encoded = true) String volumeResourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.servicefabric.MeshVolumes list" })
        @GET("Resources/Volumes")
        Observable<Response<ResponseBody>> list(@Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates or updates a Volume resource.
     * Creates a Volume resource with the specified name, description and properties. If Volume resource with the same name exists, then it is updated with the specified description and properties.
     *
     * @param volumeResourceName The identity of the volume.
     * @param volumeResourceDescription Description for creating a Volume resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws FabricErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VolumeResourceDescriptionInner object if successful.
     */
    public VolumeResourceDescriptionInner createOrUpdate(String volumeResourceName, VolumeResourceDescriptionInner volumeResourceDescription) {
        return createOrUpdateWithServiceResponseAsync(volumeResourceName, volumeResourceDescription).toBlocking().single().body();
    }

    /**
     * Creates or updates a Volume resource.
     * Creates a Volume resource with the specified name, description and properties. If Volume resource with the same name exists, then it is updated with the specified description and properties.
     *
     * @param volumeResourceName The identity of the volume.
     * @param volumeResourceDescription Description for creating a Volume resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VolumeResourceDescriptionInner> createOrUpdateAsync(String volumeResourceName, VolumeResourceDescriptionInner volumeResourceDescription, final ServiceCallback<VolumeResourceDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(volumeResourceName, volumeResourceDescription), serviceCallback);
    }

    /**
     * Creates or updates a Volume resource.
     * Creates a Volume resource with the specified name, description and properties. If Volume resource with the same name exists, then it is updated with the specified description and properties.
     *
     * @param volumeResourceName The identity of the volume.
     * @param volumeResourceDescription Description for creating a Volume resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VolumeResourceDescriptionInner object
     */
    public Observable<VolumeResourceDescriptionInner> createOrUpdateAsync(String volumeResourceName, VolumeResourceDescriptionInner volumeResourceDescription) {
        return createOrUpdateWithServiceResponseAsync(volumeResourceName, volumeResourceDescription).map(new Func1<ServiceResponse<VolumeResourceDescriptionInner>, VolumeResourceDescriptionInner>() {
            @Override
            public VolumeResourceDescriptionInner call(ServiceResponse<VolumeResourceDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a Volume resource.
     * Creates a Volume resource with the specified name, description and properties. If Volume resource with the same name exists, then it is updated with the specified description and properties.
     *
     * @param volumeResourceName The identity of the volume.
     * @param volumeResourceDescription Description for creating a Volume resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VolumeResourceDescriptionInner object
     */
    public Observable<ServiceResponse<VolumeResourceDescriptionInner>> createOrUpdateWithServiceResponseAsync(String volumeResourceName, VolumeResourceDescriptionInner volumeResourceDescription) {
        if (volumeResourceName == null) {
            throw new IllegalArgumentException("Parameter volumeResourceName is required and cannot be null.");
        }
        if (volumeResourceDescription == null) {
            throw new IllegalArgumentException("Parameter volumeResourceDescription is required and cannot be null.");
        }
        Validator.validate(volumeResourceDescription);
        final String apiVersion = "6.4-preview";
        return service.createOrUpdate(volumeResourceName, apiVersion, volumeResourceDescription, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<VolumeResourceDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<VolumeResourceDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<VolumeResourceDescriptionInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<VolumeResourceDescriptionInner> createOrUpdateDelegate(Response<ResponseBody> response) throws FabricErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<VolumeResourceDescriptionInner, FabricErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<VolumeResourceDescriptionInner>() { }.getType())
                .register(201, new TypeToken<VolumeResourceDescriptionInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(FabricErrorException.class)
                .build(response);
    }

    /**
     * Gets the Volume resource with the given name.
     * Gets the information about the Volume resource with the given name. The information include the description and other properties of the Volume.
     *
     * @param volumeResourceName The identity of the volume.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws FabricErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VolumeResourceDescriptionInner object if successful.
     */
    public VolumeResourceDescriptionInner get(String volumeResourceName) {
        return getWithServiceResponseAsync(volumeResourceName).toBlocking().single().body();
    }

    /**
     * Gets the Volume resource with the given name.
     * Gets the information about the Volume resource with the given name. The information include the description and other properties of the Volume.
     *
     * @param volumeResourceName The identity of the volume.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VolumeResourceDescriptionInner> getAsync(String volumeResourceName, final ServiceCallback<VolumeResourceDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(volumeResourceName), serviceCallback);
    }

    /**
     * Gets the Volume resource with the given name.
     * Gets the information about the Volume resource with the given name. The information include the description and other properties of the Volume.
     *
     * @param volumeResourceName The identity of the volume.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VolumeResourceDescriptionInner object
     */
    public Observable<VolumeResourceDescriptionInner> getAsync(String volumeResourceName) {
        return getWithServiceResponseAsync(volumeResourceName).map(new Func1<ServiceResponse<VolumeResourceDescriptionInner>, VolumeResourceDescriptionInner>() {
            @Override
            public VolumeResourceDescriptionInner call(ServiceResponse<VolumeResourceDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the Volume resource with the given name.
     * Gets the information about the Volume resource with the given name. The information include the description and other properties of the Volume.
     *
     * @param volumeResourceName The identity of the volume.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VolumeResourceDescriptionInner object
     */
    public Observable<ServiceResponse<VolumeResourceDescriptionInner>> getWithServiceResponseAsync(String volumeResourceName) {
        if (volumeResourceName == null) {
            throw new IllegalArgumentException("Parameter volumeResourceName is required and cannot be null.");
        }
        final String apiVersion = "6.4-preview";
        return service.get(volumeResourceName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<VolumeResourceDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<VolumeResourceDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<VolumeResourceDescriptionInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<VolumeResourceDescriptionInner> getDelegate(Response<ResponseBody> response) throws FabricErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<VolumeResourceDescriptionInner, FabricErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<VolumeResourceDescriptionInner>() { }.getType())
                .registerError(FabricErrorException.class)
                .build(response);
    }

    /**
     * Deletes the Volume resource.
     * Deletes the Volume resource identified by the name.
     *
     * @param volumeResourceName The identity of the volume.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws FabricErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String volumeResourceName) {
        deleteWithServiceResponseAsync(volumeResourceName).toBlocking().single().body();
    }

    /**
     * Deletes the Volume resource.
     * Deletes the Volume resource identified by the name.
     *
     * @param volumeResourceName The identity of the volume.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String volumeResourceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(volumeResourceName), serviceCallback);
    }

    /**
     * Deletes the Volume resource.
     * Deletes the Volume resource identified by the name.
     *
     * @param volumeResourceName The identity of the volume.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String volumeResourceName) {
        return deleteWithServiceResponseAsync(volumeResourceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the Volume resource.
     * Deletes the Volume resource identified by the name.
     *
     * @param volumeResourceName The identity of the volume.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String volumeResourceName) {
        if (volumeResourceName == null) {
            throw new IllegalArgumentException("Parameter volumeResourceName is required and cannot be null.");
        }
        final String apiVersion = "6.4-preview";
        return service.delete(volumeResourceName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws FabricErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, FabricErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(FabricErrorException.class)
                .build(response);
    }

    /**
     * Lists all the volume resources.
     * Gets the information about all volume resources in a given resource group. The information include the description and other properties of the Volume.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws FabricErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedVolumeResourceDescriptionListInner object if successful.
     */
    public PagedVolumeResourceDescriptionListInner list() {
        return listWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Lists all the volume resources.
     * Gets the information about all volume resources in a given resource group. The information include the description and other properties of the Volume.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PagedVolumeResourceDescriptionListInner> listAsync(final ServiceCallback<PagedVolumeResourceDescriptionListInner> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Lists all the volume resources.
     * Gets the information about all volume resources in a given resource group. The information include the description and other properties of the Volume.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedVolumeResourceDescriptionListInner object
     */
    public Observable<PagedVolumeResourceDescriptionListInner> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<PagedVolumeResourceDescriptionListInner>, PagedVolumeResourceDescriptionListInner>() {
            @Override
            public PagedVolumeResourceDescriptionListInner call(ServiceResponse<PagedVolumeResourceDescriptionListInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all the volume resources.
     * Gets the information about all volume resources in a given resource group. The information include the description and other properties of the Volume.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedVolumeResourceDescriptionListInner object
     */
    public Observable<ServiceResponse<PagedVolumeResourceDescriptionListInner>> listWithServiceResponseAsync() {
        final String apiVersion = "6.4-preview";
        return service.list(apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PagedVolumeResourceDescriptionListInner>>>() {
                @Override
                public Observable<ServiceResponse<PagedVolumeResourceDescriptionListInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PagedVolumeResourceDescriptionListInner> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PagedVolumeResourceDescriptionListInner> listDelegate(Response<ResponseBody> response) throws FabricErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<PagedVolumeResourceDescriptionListInner, FabricErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PagedVolumeResourceDescriptionListInner>() { }.getType())
                .registerError(FabricErrorException.class)
                .build(response);
    }

}
