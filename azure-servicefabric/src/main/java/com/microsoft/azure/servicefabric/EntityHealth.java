/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Health information common to all entities in the cluster. It contains the
 * aggregated health state, health events and unhealthy evaluation.
 */
public class EntityHealth {
    /**
     * The HealthState representing the aggregated health state of the entity
     * computed by Health Manager.
     * The health evaluation of the entity reflects all events reported on the
     * entity and its children (if any).
     * The aggregation is done by applying the desired health policy. Possible
     * values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'.
     */
    @JsonProperty(value = "AggregatedHealthState")
    private HealthState aggregatedHealthState;

    /**
     * The list of health events reported on the entity.
     */
    @JsonProperty(value = "HealthEvents")
    private List<HealthEvent> healthEvents;

    /**
     * The unhealthy evaluations that show why the current aggregated health
     * state was returned by Health Manager.
     */
    @JsonProperty(value = "UnhealthyEvaluations")
    private List<HealthEvaluationWrapper> unhealthyEvaluations;

    /**
     * Shows the health statistics for all children types of the queried
     * entity.
     */
    @JsonProperty(value = "HealthStatistics")
    private HealthStatistics healthStatistics;

    /**
     * Get the HealthState representing the aggregated health state of the entity computed by Health Manager.
     The health evaluation of the entity reflects all events reported on the entity and its children (if any).
     The aggregation is done by applying the desired health policy. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'.
     *
     * @return the aggregatedHealthState value
     */
    public HealthState aggregatedHealthState() {
        return this.aggregatedHealthState;
    }

    /**
     * Set the HealthState representing the aggregated health state of the entity computed by Health Manager.
     The health evaluation of the entity reflects all events reported on the entity and its children (if any).
     The aggregation is done by applying the desired health policy. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'.
     *
     * @param aggregatedHealthState the aggregatedHealthState value to set
     * @return the EntityHealth object itself.
     */
    public EntityHealth withAggregatedHealthState(HealthState aggregatedHealthState) {
        this.aggregatedHealthState = aggregatedHealthState;
        return this;
    }

    /**
     * Get the list of health events reported on the entity.
     *
     * @return the healthEvents value
     */
    public List<HealthEvent> healthEvents() {
        return this.healthEvents;
    }

    /**
     * Set the list of health events reported on the entity.
     *
     * @param healthEvents the healthEvents value to set
     * @return the EntityHealth object itself.
     */
    public EntityHealth withHealthEvents(List<HealthEvent> healthEvents) {
        this.healthEvents = healthEvents;
        return this;
    }

    /**
     * Get the unhealthy evaluations that show why the current aggregated health state was returned by Health Manager.
     *
     * @return the unhealthyEvaluations value
     */
    public List<HealthEvaluationWrapper> unhealthyEvaluations() {
        return this.unhealthyEvaluations;
    }

    /**
     * Set the unhealthy evaluations that show why the current aggregated health state was returned by Health Manager.
     *
     * @param unhealthyEvaluations the unhealthyEvaluations value to set
     * @return the EntityHealth object itself.
     */
    public EntityHealth withUnhealthyEvaluations(List<HealthEvaluationWrapper> unhealthyEvaluations) {
        this.unhealthyEvaluations = unhealthyEvaluations;
        return this;
    }

    /**
     * Get shows the health statistics for all children types of the queried entity.
     *
     * @return the healthStatistics value
     */
    public HealthStatistics healthStatistics() {
        return this.healthStatistics;
    }

    /**
     * Set shows the health statistics for all children types of the queried entity.
     *
     * @param healthStatistics the healthStatistics value to set
     * @return the EntityHealth object itself.
     */
    public EntityHealth withHealthStatistics(HealthStatistics healthStatistics) {
        this.healthStatistics = healthStatistics;
        return this;
    }

}
