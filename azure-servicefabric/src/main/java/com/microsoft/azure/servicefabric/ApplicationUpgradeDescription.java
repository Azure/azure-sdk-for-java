/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Describes the parameters for an application upgrade. Note that upgrade
 * description replaces the existing application description. This means that
 * if the parameters are not specified, the existing parameters on the
 * applications will be overwritten with the empty parameters list. This would
 * result in the application using the default value of the parameters from the
 * application manifest. If you do not want to change any existing parameter
 * values, please get the application parameters first using the
 * GetApplicationInfo query and then supply those values as Parameters in this
 * ApplicationUpgradeDescription.
 */
public class ApplicationUpgradeDescription {
    /**
     * The name of the target application, including the 'fabric:' URI scheme.
     */
    @JsonProperty(value = "Name", required = true)
    private String name;

    /**
     * The target application type version (found in the application manifest)
     * for the application upgrade.
     */
    @JsonProperty(value = "TargetApplicationTypeVersion", required = true)
    private String targetApplicationTypeVersion;

    /**
     * List of application parameters with overridden values from their default
     * values specified in the application manifest.
     */
    @JsonProperty(value = "Parameters", required = true)
    private List<ApplicationParameter> parameters;

    /**
     * The kind of upgrade out of the following possible values. Possible
     * values include: 'Invalid', 'Rolling'.
     */
    @JsonProperty(value = "UpgradeKind", required = true)
    private UpgradeKind upgradeKind;

    /**
     * The mode used to monitor health during a rolling upgrade. The values are
     * UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values
     * include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'.
     */
    @JsonProperty(value = "RollingUpgradeMode")
    private UpgradeMode rollingUpgradeMode;

    /**
     * The maximum amount of time to block processing of an upgrade domain and
     * prevent loss of availability when there are unexpected issues. When this
     * timeout expires, processing of the upgrade domain will proceed
     * regardless of availability loss issues. The timeout is reset at the
     * start of each upgrade domain. Valid values are between 0 and 42949672925
     * inclusive. (unsigned 32-bit integer).
     */
    @JsonProperty(value = "UpgradeReplicaSetCheckTimeoutInSeconds")
    private Long upgradeReplicaSetCheckTimeoutInSeconds;

    /**
     * If true, then processes are forcefully restarted during upgrade even
     * when the code version has not changed (the upgrade only changes
     * configuration or data).
     */
    @JsonProperty(value = "ForceRestart")
    private Boolean forceRestart;

    /**
     * Describes the parameters for monitoring an upgrade in Monitored mode.
     */
    @JsonProperty(value = "MonitoringPolicy")
    private MonitoringPolicyDescription monitoringPolicy;

    /**
     * Defines a health policy used to evaluate the health of an application or
     * one of its children entities.
     */
    @JsonProperty(value = "ApplicationHealthPolicy")
    private ApplicationHealthPolicy applicationHealthPolicy;

    /**
     * Get the name of the target application, including the 'fabric:' URI scheme.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name of the target application, including the 'fabric:' URI scheme.
     *
     * @param name the name value to set
     * @return the ApplicationUpgradeDescription object itself.
     */
    public ApplicationUpgradeDescription withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the target application type version (found in the application manifest) for the application upgrade.
     *
     * @return the targetApplicationTypeVersion value
     */
    public String targetApplicationTypeVersion() {
        return this.targetApplicationTypeVersion;
    }

    /**
     * Set the target application type version (found in the application manifest) for the application upgrade.
     *
     * @param targetApplicationTypeVersion the targetApplicationTypeVersion value to set
     * @return the ApplicationUpgradeDescription object itself.
     */
    public ApplicationUpgradeDescription withTargetApplicationTypeVersion(String targetApplicationTypeVersion) {
        this.targetApplicationTypeVersion = targetApplicationTypeVersion;
        return this;
    }

    /**
     * Get list of application parameters with overridden values from their default values specified in the application manifest.
     *
     * @return the parameters value
     */
    public List<ApplicationParameter> parameters() {
        return this.parameters;
    }

    /**
     * Set list of application parameters with overridden values from their default values specified in the application manifest.
     *
     * @param parameters the parameters value to set
     * @return the ApplicationUpgradeDescription object itself.
     */
    public ApplicationUpgradeDescription withParameters(List<ApplicationParameter> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the kind of upgrade out of the following possible values. Possible values include: 'Invalid', 'Rolling'.
     *
     * @return the upgradeKind value
     */
    public UpgradeKind upgradeKind() {
        return this.upgradeKind;
    }

    /**
     * Set the kind of upgrade out of the following possible values. Possible values include: 'Invalid', 'Rolling'.
     *
     * @param upgradeKind the upgradeKind value to set
     * @return the ApplicationUpgradeDescription object itself.
     */
    public ApplicationUpgradeDescription withUpgradeKind(UpgradeKind upgradeKind) {
        this.upgradeKind = upgradeKind;
        return this;
    }

    /**
     * Get the mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'.
     *
     * @return the rollingUpgradeMode value
     */
    public UpgradeMode rollingUpgradeMode() {
        return this.rollingUpgradeMode;
    }

    /**
     * Set the mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'.
     *
     * @param rollingUpgradeMode the rollingUpgradeMode value to set
     * @return the ApplicationUpgradeDescription object itself.
     */
    public ApplicationUpgradeDescription withRollingUpgradeMode(UpgradeMode rollingUpgradeMode) {
        this.rollingUpgradeMode = rollingUpgradeMode;
        return this;
    }

    /**
     * Get the maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
     *
     * @return the upgradeReplicaSetCheckTimeoutInSeconds value
     */
    public Long upgradeReplicaSetCheckTimeoutInSeconds() {
        return this.upgradeReplicaSetCheckTimeoutInSeconds;
    }

    /**
     * Set the maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
     *
     * @param upgradeReplicaSetCheckTimeoutInSeconds the upgradeReplicaSetCheckTimeoutInSeconds value to set
     * @return the ApplicationUpgradeDescription object itself.
     */
    public ApplicationUpgradeDescription withUpgradeReplicaSetCheckTimeoutInSeconds(Long upgradeReplicaSetCheckTimeoutInSeconds) {
        this.upgradeReplicaSetCheckTimeoutInSeconds = upgradeReplicaSetCheckTimeoutInSeconds;
        return this;
    }

    /**
     * Get if true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
     *
     * @return the forceRestart value
     */
    public Boolean forceRestart() {
        return this.forceRestart;
    }

    /**
     * Set if true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
     *
     * @param forceRestart the forceRestart value to set
     * @return the ApplicationUpgradeDescription object itself.
     */
    public ApplicationUpgradeDescription withForceRestart(Boolean forceRestart) {
        this.forceRestart = forceRestart;
        return this;
    }

    /**
     * Get describes the parameters for monitoring an upgrade in Monitored mode.
     *
     * @return the monitoringPolicy value
     */
    public MonitoringPolicyDescription monitoringPolicy() {
        return this.monitoringPolicy;
    }

    /**
     * Set describes the parameters for monitoring an upgrade in Monitored mode.
     *
     * @param monitoringPolicy the monitoringPolicy value to set
     * @return the ApplicationUpgradeDescription object itself.
     */
    public ApplicationUpgradeDescription withMonitoringPolicy(MonitoringPolicyDescription monitoringPolicy) {
        this.monitoringPolicy = monitoringPolicy;
        return this;
    }

    /**
     * Get defines a health policy used to evaluate the health of an application or one of its children entities.
     *
     * @return the applicationHealthPolicy value
     */
    public ApplicationHealthPolicy applicationHealthPolicy() {
        return this.applicationHealthPolicy;
    }

    /**
     * Set defines a health policy used to evaluate the health of an application or one of its children entities.
     *
     * @param applicationHealthPolicy the applicationHealthPolicy value to set
     * @return the ApplicationUpgradeDescription object itself.
     */
    public ApplicationUpgradeDescription withApplicationHealthPolicy(ApplicationHealthPolicy applicationHealthPolicy) {
        this.applicationHealthPolicy = applicationHealthPolicy;
        return this;
    }

}
