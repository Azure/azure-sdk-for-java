/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.servicefabric.FabricErrorException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in MeshGateways.
 */
public class MeshGatewaysInner {
    /** The Retrofit service to perform REST calls. */
    private MeshGatewaysService service;
    /** The service client containing this operation class. */
    private ServiceFabricClientAPIsImpl client;

    /**
     * Initializes an instance of MeshGatewaysInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public MeshGatewaysInner(Retrofit retrofit, ServiceFabricClientAPIsImpl client) {
        this.service = retrofit.create(MeshGatewaysService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for MeshGateways to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MeshGatewaysService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.servicefabric.MeshGateways createOrUpdate" })
        @PUT("Resources/Gateways/{gatewayResourceName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path(value = "gatewayResourceName", encoded = true) String gatewayResourceName, @Query("api-version") String apiVersion, @Body GatewayResourceDescriptionInner gatewayResourceDescription, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.servicefabric.MeshGateways get" })
        @GET("Resources/Gateways/{gatewayResourceName}")
        Observable<Response<ResponseBody>> get(@Path(value = "gatewayResourceName", encoded = true) String gatewayResourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.servicefabric.MeshGateways delete" })
        @HTTP(path = "Resources/Gateways/{gatewayResourceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path(value = "gatewayResourceName", encoded = true) String gatewayResourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.servicefabric.MeshGateways list" })
        @GET("Resources/Gateways")
        Observable<Response<ResponseBody>> list(@Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates or updates a Gateway resource.
     * Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same name exists, then it is updated with the specified description and properties. Use Gateway resource to provide public connectivity to application services.
     *
     * @param gatewayResourceName The identity of the gateway.
     * @param gatewayResourceDescription Description for creating a Gateway resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws FabricErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GatewayResourceDescriptionInner object if successful.
     */
    public GatewayResourceDescriptionInner createOrUpdate(String gatewayResourceName, GatewayResourceDescriptionInner gatewayResourceDescription) {
        return createOrUpdateWithServiceResponseAsync(gatewayResourceName, gatewayResourceDescription).toBlocking().single().body();
    }

    /**
     * Creates or updates a Gateway resource.
     * Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same name exists, then it is updated with the specified description and properties. Use Gateway resource to provide public connectivity to application services.
     *
     * @param gatewayResourceName The identity of the gateway.
     * @param gatewayResourceDescription Description for creating a Gateway resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GatewayResourceDescriptionInner> createOrUpdateAsync(String gatewayResourceName, GatewayResourceDescriptionInner gatewayResourceDescription, final ServiceCallback<GatewayResourceDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(gatewayResourceName, gatewayResourceDescription), serviceCallback);
    }

    /**
     * Creates or updates a Gateway resource.
     * Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same name exists, then it is updated with the specified description and properties. Use Gateway resource to provide public connectivity to application services.
     *
     * @param gatewayResourceName The identity of the gateway.
     * @param gatewayResourceDescription Description for creating a Gateway resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayResourceDescriptionInner object
     */
    public Observable<GatewayResourceDescriptionInner> createOrUpdateAsync(String gatewayResourceName, GatewayResourceDescriptionInner gatewayResourceDescription) {
        return createOrUpdateWithServiceResponseAsync(gatewayResourceName, gatewayResourceDescription).map(new Func1<ServiceResponse<GatewayResourceDescriptionInner>, GatewayResourceDescriptionInner>() {
            @Override
            public GatewayResourceDescriptionInner call(ServiceResponse<GatewayResourceDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a Gateway resource.
     * Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same name exists, then it is updated with the specified description and properties. Use Gateway resource to provide public connectivity to application services.
     *
     * @param gatewayResourceName The identity of the gateway.
     * @param gatewayResourceDescription Description for creating a Gateway resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayResourceDescriptionInner object
     */
    public Observable<ServiceResponse<GatewayResourceDescriptionInner>> createOrUpdateWithServiceResponseAsync(String gatewayResourceName, GatewayResourceDescriptionInner gatewayResourceDescription) {
        if (gatewayResourceName == null) {
            throw new IllegalArgumentException("Parameter gatewayResourceName is required and cannot be null.");
        }
        if (gatewayResourceDescription == null) {
            throw new IllegalArgumentException("Parameter gatewayResourceDescription is required and cannot be null.");
        }
        Validator.validate(gatewayResourceDescription);
        final String apiVersion = "6.4-preview";
        return service.createOrUpdate(gatewayResourceName, apiVersion, gatewayResourceDescription, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GatewayResourceDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<GatewayResourceDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GatewayResourceDescriptionInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<GatewayResourceDescriptionInner> createOrUpdateDelegate(Response<ResponseBody> response) throws FabricErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<GatewayResourceDescriptionInner, FabricErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<GatewayResourceDescriptionInner>() { }.getType())
                .register(201, new TypeToken<GatewayResourceDescriptionInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(FabricErrorException.class)
                .build(response);
    }

    /**
     * Gets the Gateway resource with the given name.
     * Gets the information about the Gateway resource with the given name. The information include the description and other properties of the Gateway.
     *
     * @param gatewayResourceName The identity of the gateway.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws FabricErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GatewayResourceDescriptionInner object if successful.
     */
    public GatewayResourceDescriptionInner get(String gatewayResourceName) {
        return getWithServiceResponseAsync(gatewayResourceName).toBlocking().single().body();
    }

    /**
     * Gets the Gateway resource with the given name.
     * Gets the information about the Gateway resource with the given name. The information include the description and other properties of the Gateway.
     *
     * @param gatewayResourceName The identity of the gateway.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GatewayResourceDescriptionInner> getAsync(String gatewayResourceName, final ServiceCallback<GatewayResourceDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(gatewayResourceName), serviceCallback);
    }

    /**
     * Gets the Gateway resource with the given name.
     * Gets the information about the Gateway resource with the given name. The information include the description and other properties of the Gateway.
     *
     * @param gatewayResourceName The identity of the gateway.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayResourceDescriptionInner object
     */
    public Observable<GatewayResourceDescriptionInner> getAsync(String gatewayResourceName) {
        return getWithServiceResponseAsync(gatewayResourceName).map(new Func1<ServiceResponse<GatewayResourceDescriptionInner>, GatewayResourceDescriptionInner>() {
            @Override
            public GatewayResourceDescriptionInner call(ServiceResponse<GatewayResourceDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the Gateway resource with the given name.
     * Gets the information about the Gateway resource with the given name. The information include the description and other properties of the Gateway.
     *
     * @param gatewayResourceName The identity of the gateway.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayResourceDescriptionInner object
     */
    public Observable<ServiceResponse<GatewayResourceDescriptionInner>> getWithServiceResponseAsync(String gatewayResourceName) {
        if (gatewayResourceName == null) {
            throw new IllegalArgumentException("Parameter gatewayResourceName is required and cannot be null.");
        }
        final String apiVersion = "6.4-preview";
        return service.get(gatewayResourceName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GatewayResourceDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<GatewayResourceDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GatewayResourceDescriptionInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<GatewayResourceDescriptionInner> getDelegate(Response<ResponseBody> response) throws FabricErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<GatewayResourceDescriptionInner, FabricErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<GatewayResourceDescriptionInner>() { }.getType())
                .registerError(FabricErrorException.class)
                .build(response);
    }

    /**
     * Deletes the Gateway resource.
     * Deletes the Gateway resource identified by the name.
     *
     * @param gatewayResourceName The identity of the gateway.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws FabricErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String gatewayResourceName) {
        deleteWithServiceResponseAsync(gatewayResourceName).toBlocking().single().body();
    }

    /**
     * Deletes the Gateway resource.
     * Deletes the Gateway resource identified by the name.
     *
     * @param gatewayResourceName The identity of the gateway.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String gatewayResourceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(gatewayResourceName), serviceCallback);
    }

    /**
     * Deletes the Gateway resource.
     * Deletes the Gateway resource identified by the name.
     *
     * @param gatewayResourceName The identity of the gateway.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String gatewayResourceName) {
        return deleteWithServiceResponseAsync(gatewayResourceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the Gateway resource.
     * Deletes the Gateway resource identified by the name.
     *
     * @param gatewayResourceName The identity of the gateway.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String gatewayResourceName) {
        if (gatewayResourceName == null) {
            throw new IllegalArgumentException("Parameter gatewayResourceName is required and cannot be null.");
        }
        final String apiVersion = "6.4-preview";
        return service.delete(gatewayResourceName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws FabricErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, FabricErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(FabricErrorException.class)
                .build(response);
    }

    /**
     * Lists all the gateway resources.
     * Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws FabricErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedGatewayResourceDescriptionListInner object if successful.
     */
    public PagedGatewayResourceDescriptionListInner list() {
        return listWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Lists all the gateway resources.
     * Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PagedGatewayResourceDescriptionListInner> listAsync(final ServiceCallback<PagedGatewayResourceDescriptionListInner> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Lists all the gateway resources.
     * Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedGatewayResourceDescriptionListInner object
     */
    public Observable<PagedGatewayResourceDescriptionListInner> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<PagedGatewayResourceDescriptionListInner>, PagedGatewayResourceDescriptionListInner>() {
            @Override
            public PagedGatewayResourceDescriptionListInner call(ServiceResponse<PagedGatewayResourceDescriptionListInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all the gateway resources.
     * Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedGatewayResourceDescriptionListInner object
     */
    public Observable<ServiceResponse<PagedGatewayResourceDescriptionListInner>> listWithServiceResponseAsync() {
        final String apiVersion = "6.4-preview";
        return service.list(apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PagedGatewayResourceDescriptionListInner>>>() {
                @Override
                public Observable<ServiceResponse<PagedGatewayResourceDescriptionListInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PagedGatewayResourceDescriptionListInner> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PagedGatewayResourceDescriptionListInner> listDelegate(Response<ResponseBody> response) throws FabricErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<PagedGatewayResourceDescriptionListInner, FabricErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PagedGatewayResourceDescriptionListInner>() { }.getType())
                .registerError(FabricErrorException.class)
                .build(response);
    }

}
