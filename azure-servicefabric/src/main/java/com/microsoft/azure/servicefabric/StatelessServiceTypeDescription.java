/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.servicefabric;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Describes a stateless service type defined in the service manifest of a
 * provisioned application type.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "Kind")
@JsonTypeName("Stateless")
public class StatelessServiceTypeDescription extends ServiceTypeDescription {
    /**
     * A flag indicating if this type is not implemented and hosted by a user
     * service process, but is implicitly hosted by a system created process.
     * This value is true for services using the guest executable services,
     * false otherwise.
     */
    @JsonProperty(value = "UseImplicitHost")
    private Boolean useImplicitHost;

    /**
     * Get a flag indicating if this type is not implemented and hosted by a user service process, but is implicitly hosted by a system created process. This value is true for services using the guest executable services, false otherwise.
     *
     * @return the useImplicitHost value
     */
    public Boolean useImplicitHost() {
        return this.useImplicitHost;
    }

    /**
     * Set a flag indicating if this type is not implemented and hosted by a user service process, but is implicitly hosted by a system created process. This value is true for services using the guest executable services, false otherwise.
     *
     * @param useImplicitHost the useImplicitHost value to set
     * @return the StatelessServiceTypeDescription object itself.
     */
    public StatelessServiceTypeDescription withUseImplicitHost(Boolean useImplicitHost) {
        this.useImplicitHost = useImplicitHost;
        return this;
    }

}
