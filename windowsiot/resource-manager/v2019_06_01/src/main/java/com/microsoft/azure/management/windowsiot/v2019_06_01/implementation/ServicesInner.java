/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.windowsiot.v2019_06_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.windowsiot.v2019_06_01.DeviceServiceCheckNameAvailabilityParameters;
import com.microsoft.azure.management.windowsiot.v2019_06_01.DeviceServiceProperties;
import com.microsoft.azure.management.windowsiot.v2019_06_01.ErrorDetailsException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Services.
 */
public class ServicesInner implements InnerSupportsGet<DeviceServiceInner>, InnerSupportsDelete<DeviceServiceInner>, InnerSupportsListing<DeviceServiceInner> {
    /** The Retrofit service to perform REST calls. */
    private ServicesService service;
    /** The service client containing this operation class. */
    private DeviceServicesImpl client;

    /**
     * Initializes an instance of ServicesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ServicesInner(Retrofit retrofit, DeviceServicesImpl client) {
        this.service = retrofit.create(ServicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Services to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ServicesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.windowsiot.v2019_06_01.Services getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT/deviceServices/{deviceName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("deviceName") String deviceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.windowsiot.v2019_06_01.Services createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT/deviceServices/{deviceName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("deviceName") String deviceName, @Query("api-version") String apiVersion, @Body DeviceServiceProperties deviceService, @Header("If-Match") String ifMatch, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.windowsiot.v2019_06_01.Services update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT/deviceServices/{deviceName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("deviceName") String deviceName, @Query("api-version") String apiVersion, @Body DeviceServiceProperties deviceService, @Header("If-Match") String ifMatch, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.windowsiot.v2019_06_01.Services delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT/deviceServices/{deviceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("deviceName") String deviceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.windowsiot.v2019_06_01.Services listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT/deviceServices")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.windowsiot.v2019_06_01.Services list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.WindowsIoT/deviceServices")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.windowsiot.v2019_06_01.Services checkDeviceServiceNameAvailability" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.WindowsIoT/checkDeviceServiceNameAvailability")
        Observable<Response<ResponseBody>> checkDeviceServiceNameAvailability(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body DeviceServiceCheckNameAvailabilityParameters deviceServiceCheckNameAvailabilityParameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.windowsiot.v2019_06_01.Services listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.windowsiot.v2019_06_01.Services listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get the non-security related metadata of a Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DeviceServiceInner object if successful.
     */
    public DeviceServiceInner getByResourceGroup(String resourceGroupName, String deviceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, deviceName).toBlocking().single().body();
    }

    /**
     * Get the non-security related metadata of a Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DeviceServiceInner> getByResourceGroupAsync(String resourceGroupName, String deviceName, final ServiceCallback<DeviceServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, deviceName), serviceCallback);
    }

    /**
     * Get the non-security related metadata of a Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeviceServiceInner object
     */
    public Observable<DeviceServiceInner> getByResourceGroupAsync(String resourceGroupName, String deviceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, deviceName).map(new Func1<ServiceResponse<DeviceServiceInner>, DeviceServiceInner>() {
            @Override
            public DeviceServiceInner call(ServiceResponse<DeviceServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the non-security related metadata of a Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeviceServiceInner object
     */
    public Observable<ServiceResponse<DeviceServiceInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String deviceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, deviceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DeviceServiceInner>>>() {
                @Override
                public Observable<ServiceResponse<DeviceServiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DeviceServiceInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DeviceServiceInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorDetailsException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DeviceServiceInner, ErrorDetailsException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DeviceServiceInner>() { }.getType())
                .registerError(ErrorDetailsException.class)
                .build(response);
    }

    /**
     * Create or update the metadata of a Windows IoT Device Service.
     * Create or update the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DeviceServiceInner object if successful.
     */
    public DeviceServiceInner createOrUpdate(String resourceGroupName, String deviceName, DeviceServiceProperties deviceService) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, deviceName, deviceService).toBlocking().single().body();
    }

    /**
     * Create or update the metadata of a Windows IoT Device Service.
     * Create or update the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DeviceServiceInner> createOrUpdateAsync(String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, final ServiceCallback<DeviceServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, deviceName, deviceService), serviceCallback);
    }

    /**
     * Create or update the metadata of a Windows IoT Device Service.
     * Create or update the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeviceServiceInner object
     */
    public Observable<DeviceServiceInner> createOrUpdateAsync(String resourceGroupName, String deviceName, DeviceServiceProperties deviceService) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, deviceName, deviceService).map(new Func1<ServiceResponse<DeviceServiceInner>, DeviceServiceInner>() {
            @Override
            public DeviceServiceInner call(ServiceResponse<DeviceServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update the metadata of a Windows IoT Device Service.
     * Create or update the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeviceServiceInner object
     */
    public Observable<ServiceResponse<DeviceServiceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String deviceName, DeviceServiceProperties deviceService) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (deviceService == null) {
            throw new IllegalArgumentException("Parameter deviceService is required and cannot be null.");
        }
        Validator.validate(deviceService);
        final String ifMatch = null;
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, deviceName, this.client.apiVersion(), deviceService, ifMatch, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DeviceServiceInner>>>() {
                @Override
                public Observable<ServiceResponse<DeviceServiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DeviceServiceInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create or update the metadata of a Windows IoT Device Service.
     * Create or update the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a new Windows IoT Device Service. Required to update an existing Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DeviceServiceInner object if successful.
     */
    public DeviceServiceInner createOrUpdate(String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, deviceName, deviceService, ifMatch).toBlocking().single().body();
    }

    /**
     * Create or update the metadata of a Windows IoT Device Service.
     * Create or update the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a new Windows IoT Device Service. Required to update an existing Windows IoT Device Service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DeviceServiceInner> createOrUpdateAsync(String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, String ifMatch, final ServiceCallback<DeviceServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, deviceName, deviceService, ifMatch), serviceCallback);
    }

    /**
     * Create or update the metadata of a Windows IoT Device Service.
     * Create or update the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a new Windows IoT Device Service. Required to update an existing Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeviceServiceInner object
     */
    public Observable<DeviceServiceInner> createOrUpdateAsync(String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, deviceName, deviceService, ifMatch).map(new Func1<ServiceResponse<DeviceServiceInner>, DeviceServiceInner>() {
            @Override
            public DeviceServiceInner call(ServiceResponse<DeviceServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update the metadata of a Windows IoT Device Service.
     * Create or update the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a new Windows IoT Device Service. Required to update an existing Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeviceServiceInner object
     */
    public Observable<ServiceResponse<DeviceServiceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, String ifMatch) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (deviceService == null) {
            throw new IllegalArgumentException("Parameter deviceService is required and cannot be null.");
        }
        Validator.validate(deviceService);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, deviceName, this.client.apiVersion(), deviceService, ifMatch, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DeviceServiceInner>>>() {
                @Override
                public Observable<ServiceResponse<DeviceServiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DeviceServiceInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DeviceServiceInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorDetailsException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DeviceServiceInner, ErrorDetailsException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DeviceServiceInner>() { }.getType())
                .registerError(ErrorDetailsException.class)
                .build(response);
    }

    /**
     * Updates the metadata of a Windows IoT Device Service.
     * Updates the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DeviceServiceInner object if successful.
     */
    public DeviceServiceInner update(String resourceGroupName, String deviceName, DeviceServiceProperties deviceService) {
        return updateWithServiceResponseAsync(resourceGroupName, deviceName, deviceService).toBlocking().single().body();
    }

    /**
     * Updates the metadata of a Windows IoT Device Service.
     * Updates the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DeviceServiceInner> updateAsync(String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, final ServiceCallback<DeviceServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, deviceName, deviceService), serviceCallback);
    }

    /**
     * Updates the metadata of a Windows IoT Device Service.
     * Updates the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeviceServiceInner object
     */
    public Observable<DeviceServiceInner> updateAsync(String resourceGroupName, String deviceName, DeviceServiceProperties deviceService) {
        return updateWithServiceResponseAsync(resourceGroupName, deviceName, deviceService).map(new Func1<ServiceResponse<DeviceServiceInner>, DeviceServiceInner>() {
            @Override
            public DeviceServiceInner call(ServiceResponse<DeviceServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the metadata of a Windows IoT Device Service.
     * Updates the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeviceServiceInner object
     */
    public Observable<ServiceResponse<DeviceServiceInner>> updateWithServiceResponseAsync(String resourceGroupName, String deviceName, DeviceServiceProperties deviceService) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (deviceService == null) {
            throw new IllegalArgumentException("Parameter deviceService is required and cannot be null.");
        }
        Validator.validate(deviceService);
        final String ifMatch = null;
        return service.update(this.client.subscriptionId(), resourceGroupName, deviceName, this.client.apiVersion(), deviceService, ifMatch, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DeviceServiceInner>>>() {
                @Override
                public Observable<ServiceResponse<DeviceServiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DeviceServiceInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates the metadata of a Windows IoT Device Service.
     * Updates the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a brand new Windows IoT Device Service. Required to update an existing Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DeviceServiceInner object if successful.
     */
    public DeviceServiceInner update(String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, String ifMatch) {
        return updateWithServiceResponseAsync(resourceGroupName, deviceName, deviceService, ifMatch).toBlocking().single().body();
    }

    /**
     * Updates the metadata of a Windows IoT Device Service.
     * Updates the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a brand new Windows IoT Device Service. Required to update an existing Windows IoT Device Service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DeviceServiceInner> updateAsync(String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, String ifMatch, final ServiceCallback<DeviceServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, deviceName, deviceService, ifMatch), serviceCallback);
    }

    /**
     * Updates the metadata of a Windows IoT Device Service.
     * Updates the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a brand new Windows IoT Device Service. Required to update an existing Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeviceServiceInner object
     */
    public Observable<DeviceServiceInner> updateAsync(String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, String ifMatch) {
        return updateWithServiceResponseAsync(resourceGroupName, deviceName, deviceService, ifMatch).map(new Func1<ServiceResponse<DeviceServiceInner>, DeviceServiceInner>() {
            @Override
            public DeviceServiceInner call(ServiceResponse<DeviceServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the metadata of a Windows IoT Device Service.
     * Updates the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a brand new Windows IoT Device Service. Required to update an existing Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeviceServiceInner object
     */
    public Observable<ServiceResponse<DeviceServiceInner>> updateWithServiceResponseAsync(String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, String ifMatch) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (deviceService == null) {
            throw new IllegalArgumentException("Parameter deviceService is required and cannot be null.");
        }
        Validator.validate(deviceService);
        return service.update(this.client.subscriptionId(), resourceGroupName, deviceName, this.client.apiVersion(), deviceService, ifMatch, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DeviceServiceInner>>>() {
                @Override
                public Observable<ServiceResponse<DeviceServiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DeviceServiceInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DeviceServiceInner> updateDelegate(Response<ResponseBody> response) throws ErrorDetailsException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DeviceServiceInner, ErrorDetailsException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DeviceServiceInner>() { }.getType())
                .registerError(ErrorDetailsException.class)
                .build(response);
    }

    /**
     * Delete a Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DeviceServiceInner object if successful.
     */
    public DeviceServiceInner delete(String resourceGroupName, String deviceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, deviceName).toBlocking().single().body();
    }

    /**
     * Delete a Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DeviceServiceInner> deleteAsync(String resourceGroupName, String deviceName, final ServiceCallback<DeviceServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, deviceName), serviceCallback);
    }

    /**
     * Delete a Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeviceServiceInner object
     */
    public Observable<DeviceServiceInner> deleteAsync(String resourceGroupName, String deviceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, deviceName).map(new Func1<ServiceResponse<DeviceServiceInner>, DeviceServiceInner>() {
            @Override
            public DeviceServiceInner call(ServiceResponse<DeviceServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeviceServiceInner object
     */
    public Observable<ServiceResponse<DeviceServiceInner>> deleteWithServiceResponseAsync(String resourceGroupName, String deviceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, deviceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DeviceServiceInner>>>() {
                @Override
                public Observable<ServiceResponse<DeviceServiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DeviceServiceInner> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DeviceServiceInner> deleteDelegate(Response<ResponseBody> response) throws ErrorDetailsException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DeviceServiceInner, ErrorDetailsException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DeviceServiceInner>() { }.getType())
                .registerError(ErrorDetailsException.class)
                .build(response);
    }

    /**
     * Get all the IoT hubs in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DeviceServiceInner&gt; object if successful.
     */
    public PagedList<DeviceServiceInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<DeviceServiceInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<DeviceServiceInner>(response.body()) {
            @Override
            public Page<DeviceServiceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the IoT hubs in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DeviceServiceInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<DeviceServiceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<DeviceServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DeviceServiceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the IoT hubs in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DeviceServiceInner&gt; object
     */
    public Observable<Page<DeviceServiceInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<DeviceServiceInner>>, Page<DeviceServiceInner>>() {
                @Override
                public Page<DeviceServiceInner> call(ServiceResponse<Page<DeviceServiceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the IoT hubs in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DeviceServiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<DeviceServiceInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<DeviceServiceInner>>, Observable<ServiceResponse<Page<DeviceServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DeviceServiceInner>>> call(ServiceResponse<Page<DeviceServiceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the IoT hubs in a resource group.
     *
    ServiceResponse<PageImpl<DeviceServiceInner>> * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DeviceServiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DeviceServiceInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DeviceServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DeviceServiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DeviceServiceInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DeviceServiceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DeviceServiceInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorDetailsException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DeviceServiceInner>, ErrorDetailsException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DeviceServiceInner>>() { }.getType())
                .registerError(ErrorDetailsException.class)
                .build(response);
    }

    /**
     * Get all the IoT hubs in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DeviceServiceInner&gt; object if successful.
     */
    public PagedList<DeviceServiceInner> list() {
        ServiceResponse<Page<DeviceServiceInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<DeviceServiceInner>(response.body()) {
            @Override
            public Page<DeviceServiceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the IoT hubs in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DeviceServiceInner>> listAsync(final ListOperationCallback<DeviceServiceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<DeviceServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DeviceServiceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the IoT hubs in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DeviceServiceInner&gt; object
     */
    public Observable<Page<DeviceServiceInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<DeviceServiceInner>>, Page<DeviceServiceInner>>() {
                @Override
                public Page<DeviceServiceInner> call(ServiceResponse<Page<DeviceServiceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the IoT hubs in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DeviceServiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<DeviceServiceInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<DeviceServiceInner>>, Observable<ServiceResponse<Page<DeviceServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DeviceServiceInner>>> call(ServiceResponse<Page<DeviceServiceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the IoT hubs in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DeviceServiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DeviceServiceInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DeviceServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DeviceServiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DeviceServiceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DeviceServiceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DeviceServiceInner>> listDelegate(Response<ResponseBody> response) throws ErrorDetailsException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DeviceServiceInner>, ErrorDetailsException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DeviceServiceInner>>() { }.getType())
                .registerError(ErrorDetailsException.class)
                .build(response);
    }

    /**
     * Check if a Windows IoT Device Service name is available.
     *
     * @param name The name of the Windows IoT Device Service to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DeviceServiceNameAvailabilityInfoInner object if successful.
     */
    public DeviceServiceNameAvailabilityInfoInner checkDeviceServiceNameAvailability(String name) {
        return checkDeviceServiceNameAvailabilityWithServiceResponseAsync(name).toBlocking().single().body();
    }

    /**
     * Check if a Windows IoT Device Service name is available.
     *
     * @param name The name of the Windows IoT Device Service to check.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DeviceServiceNameAvailabilityInfoInner> checkDeviceServiceNameAvailabilityAsync(String name, final ServiceCallback<DeviceServiceNameAvailabilityInfoInner> serviceCallback) {
        return ServiceFuture.fromResponse(checkDeviceServiceNameAvailabilityWithServiceResponseAsync(name), serviceCallback);
    }

    /**
     * Check if a Windows IoT Device Service name is available.
     *
     * @param name The name of the Windows IoT Device Service to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeviceServiceNameAvailabilityInfoInner object
     */
    public Observable<DeviceServiceNameAvailabilityInfoInner> checkDeviceServiceNameAvailabilityAsync(String name) {
        return checkDeviceServiceNameAvailabilityWithServiceResponseAsync(name).map(new Func1<ServiceResponse<DeviceServiceNameAvailabilityInfoInner>, DeviceServiceNameAvailabilityInfoInner>() {
            @Override
            public DeviceServiceNameAvailabilityInfoInner call(ServiceResponse<DeviceServiceNameAvailabilityInfoInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Check if a Windows IoT Device Service name is available.
     *
     * @param name The name of the Windows IoT Device Service to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeviceServiceNameAvailabilityInfoInner object
     */
    public Observable<ServiceResponse<DeviceServiceNameAvailabilityInfoInner>> checkDeviceServiceNameAvailabilityWithServiceResponseAsync(String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        DeviceServiceCheckNameAvailabilityParameters deviceServiceCheckNameAvailabilityParameters = new DeviceServiceCheckNameAvailabilityParameters();
        deviceServiceCheckNameAvailabilityParameters.withName(name);
        return service.checkDeviceServiceNameAvailability(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), deviceServiceCheckNameAvailabilityParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DeviceServiceNameAvailabilityInfoInner>>>() {
                @Override
                public Observable<ServiceResponse<DeviceServiceNameAvailabilityInfoInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DeviceServiceNameAvailabilityInfoInner> clientResponse = checkDeviceServiceNameAvailabilityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DeviceServiceNameAvailabilityInfoInner> checkDeviceServiceNameAvailabilityDelegate(Response<ResponseBody> response) throws ErrorDetailsException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DeviceServiceNameAvailabilityInfoInner, ErrorDetailsException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DeviceServiceNameAvailabilityInfoInner>() { }.getType())
                .registerError(ErrorDetailsException.class)
                .build(response);
    }

    /**
     * Get all the IoT hubs in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DeviceServiceInner&gt; object if successful.
     */
    public PagedList<DeviceServiceInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<DeviceServiceInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<DeviceServiceInner>(response.body()) {
            @Override
            public Page<DeviceServiceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the IoT hubs in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DeviceServiceInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<DeviceServiceInner>> serviceFuture, final ListOperationCallback<DeviceServiceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<DeviceServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DeviceServiceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the IoT hubs in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DeviceServiceInner&gt; object
     */
    public Observable<Page<DeviceServiceInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<DeviceServiceInner>>, Page<DeviceServiceInner>>() {
                @Override
                public Page<DeviceServiceInner> call(ServiceResponse<Page<DeviceServiceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the IoT hubs in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DeviceServiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<DeviceServiceInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<DeviceServiceInner>>, Observable<ServiceResponse<Page<DeviceServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DeviceServiceInner>>> call(ServiceResponse<Page<DeviceServiceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the IoT hubs in a resource group.
     *
    ServiceResponse<PageImpl<DeviceServiceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DeviceServiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DeviceServiceInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DeviceServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DeviceServiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DeviceServiceInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DeviceServiceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DeviceServiceInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorDetailsException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DeviceServiceInner>, ErrorDetailsException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DeviceServiceInner>>() { }.getType())
                .registerError(ErrorDetailsException.class)
                .build(response);
    }

    /**
     * Get all the IoT hubs in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DeviceServiceInner&gt; object if successful.
     */
    public PagedList<DeviceServiceInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<DeviceServiceInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<DeviceServiceInner>(response.body()) {
            @Override
            public Page<DeviceServiceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the IoT hubs in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DeviceServiceInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<DeviceServiceInner>> serviceFuture, final ListOperationCallback<DeviceServiceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<DeviceServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DeviceServiceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the IoT hubs in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DeviceServiceInner&gt; object
     */
    public Observable<Page<DeviceServiceInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<DeviceServiceInner>>, Page<DeviceServiceInner>>() {
                @Override
                public Page<DeviceServiceInner> call(ServiceResponse<Page<DeviceServiceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the IoT hubs in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DeviceServiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<DeviceServiceInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<DeviceServiceInner>>, Observable<ServiceResponse<Page<DeviceServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DeviceServiceInner>>> call(ServiceResponse<Page<DeviceServiceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the IoT hubs in a subscription.
     *
    ServiceResponse<PageImpl<DeviceServiceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DeviceServiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DeviceServiceInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DeviceServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DeviceServiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DeviceServiceInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DeviceServiceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DeviceServiceInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorDetailsException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DeviceServiceInner>, ErrorDetailsException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DeviceServiceInner>>() { }.getType())
                .registerError(ErrorDetailsException.class)
                .build(response);
    }

}
