/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2018_06_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.apimanagement.v2018_06_01_preview.implementation.ApiContractInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.apimanagement.v2018_06_01_preview.implementation.ApiManagementManager;
import java.util.List;

/**
 * Type representing ApiContract.
 */
public interface ApiContract extends HasInner<ApiContractInner>, Indexable, Updatable<ApiContract.Update>, HasManager<ApiManagementManager> {
    /**
     * @return the apiRevision value.
     */
    String apiRevision();

    /**
     * @return the apiRevisionDescription value.
     */
    String apiRevisionDescription();

    /**
     * @return the apiType value.
     */
    ApiType apiType();

    /**
     * @return the apiVersion value.
     */
    String apiVersion();

    /**
     * @return the apiVersionDescription value.
     */
    String apiVersionDescription();

    /**
     * @return the apiVersionSet value.
     */
    ApiVersionSetContractDetails apiVersionSet();

    /**
     * @return the apiVersionSetId value.
     */
    String apiVersionSetId();

    /**
     * @return the authenticationSettings value.
     */
    AuthenticationSettingsContract authenticationSettings();

    /**
     * @return the description value.
     */
    String description();

    /**
     * @return the displayName value.
     */
    String displayName();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the isCurrent value.
     */
    Boolean isCurrent();

    /**
     * @return the isOnline value.
     */
    Boolean isOnline();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the path value.
     */
    String path();

    /**
     * @return the protocols value.
     */
    List<Protocol> protocols();

    /**
     * @return the serviceUrl value.
     */
    String serviceUrl();

    /**
     * @return the subscriptionKeyParameterNames value.
     */
    SubscriptionKeyParameterNamesContract subscriptionKeyParameterNames();

    /**
     * @return the subscriptionRequired value.
     */
    Boolean subscriptionRequired();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the ApiContract definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithResourceGroupName, DefinitionStages.WithServiceName, DefinitionStages.WithIfMatch, DefinitionStages.WithPath, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ApiContract definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ApiContract definition.
         */
        interface Blank extends WithResourceGroupName {
        }

        /**
         * The stage of the apicontract definition allowing to specify ResourceGroupName.
         */
        interface WithResourceGroupName {
           /**
            * Specifies resourceGroupName.
            * @param resourceGroupName The name of the resource group
            * @return the next definition stage
            */
            WithServiceName withResourceGroupName(String resourceGroupName);
        }

        /**
         * The stage of the apicontract definition allowing to specify ServiceName.
         */
        interface WithServiceName {
           /**
            * Specifies serviceName.
            * @param serviceName The name of the API Management service
            * @return the next definition stage
            */
            WithIfMatch withServiceName(String serviceName);
        }

        /**
         * The stage of the apicontract definition allowing to specify IfMatch.
         */
        interface WithIfMatch {
           /**
            * Specifies ifMatch.
            * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity
            * @return the next definition stage
            */
            WithPath withIfMatch(String ifMatch);
        }

        /**
         * The stage of the apicontract definition allowing to specify Path.
         */
        interface WithPath {
           /**
            * Specifies path.
            * @param path Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API
            * @return the next definition stage
            */
            WithCreate withPath(String path);
        }

        /**
         * The stage of the apicontract definition allowing to specify ApiRevision.
         */
        interface WithApiRevision {
            /**
             * Specifies apiRevision.
             * @param apiRevision Describes the Revision of the Api. If no value is provided, default revision 1 is created
             * @return the next definition stage
             */
            WithCreate withApiRevision(String apiRevision);
        }

        /**
         * The stage of the apicontract definition allowing to specify ApiRevisionDescription.
         */
        interface WithApiRevisionDescription {
            /**
             * Specifies apiRevisionDescription.
             * @param apiRevisionDescription Description of the Api Revision
             * @return the next definition stage
             */
            WithCreate withApiRevisionDescription(String apiRevisionDescription);
        }

        /**
         * The stage of the apicontract definition allowing to specify ApiType.
         */
        interface WithApiType {
            /**
             * Specifies apiType.
             * @param apiType Type of API. Possible values include: 'http', 'soap'
             * @return the next definition stage
             */
            WithCreate withApiType(ApiType apiType);
        }

        /**
         * The stage of the apicontract definition allowing to specify ApiVersion.
         */
        interface WithApiVersion {
            /**
             * Specifies apiVersion.
             * @param apiVersion Indicates the Version identifier of the API if the API is versioned
             * @return the next definition stage
             */
            WithCreate withApiVersion(String apiVersion);
        }

        /**
         * The stage of the apicontract definition allowing to specify ApiVersionDescription.
         */
        interface WithApiVersionDescription {
            /**
             * Specifies apiVersionDescription.
             * @param apiVersionDescription Description of the Api Version
             * @return the next definition stage
             */
            WithCreate withApiVersionDescription(String apiVersionDescription);
        }

        /**
         * The stage of the apicontract definition allowing to specify ApiVersionSet.
         */
        interface WithApiVersionSet {
            /**
             * Specifies apiVersionSet.
             * @param apiVersionSet the apiVersionSet parameter value
             * @return the next definition stage
             */
            WithCreate withApiVersionSet(ApiVersionSetContractDetails apiVersionSet);
        }

        /**
         * The stage of the apicontract definition allowing to specify ApiVersionSetId.
         */
        interface WithApiVersionSetId {
            /**
             * Specifies apiVersionSetId.
             * @param apiVersionSetId A resource identifier for the related ApiVersionSet
             * @return the next definition stage
             */
            WithCreate withApiVersionSetId(String apiVersionSetId);
        }

        /**
         * The stage of the apicontract definition allowing to specify AuthenticationSettings.
         */
        interface WithAuthenticationSettings {
            /**
             * Specifies authenticationSettings.
             * @param authenticationSettings Collection of authentication settings included into this API
             * @return the next definition stage
             */
            WithCreate withAuthenticationSettings(AuthenticationSettingsContract authenticationSettings);
        }

        /**
         * The stage of the apicontract definition allowing to specify ContentFormat.
         */
        interface WithContentFormat {
            /**
             * Specifies contentFormat.
             * @param contentFormat Format of the Content in which the API is getting imported. Possible values include: 'wadl-xml', 'wadl-link-json', 'swagger-json', 'swagger-link-json', 'wsdl', 'wsdl-link', 'openapi', 'openapi+json', 'openapi-link'
             * @return the next definition stage
             */
            WithCreate withContentFormat(ContentFormat contentFormat);
        }

        /**
         * The stage of the apicontract definition allowing to specify ContentValue.
         */
        interface WithContentValue {
            /**
             * Specifies contentValue.
             * @param contentValue Content value when Importing an API
             * @return the next definition stage
             */
            WithCreate withContentValue(String contentValue);
        }

        /**
         * The stage of the apicontract definition allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             * @param description Description of the API. May include HTML formatting tags
             * @return the next definition stage
             */
            WithCreate withDescription(String description);
        }

        /**
         * The stage of the apicontract definition allowing to specify DisplayName.
         */
        interface WithDisplayName {
            /**
             * Specifies displayName.
             * @param displayName API name
             * @return the next definition stage
             */
            WithCreate withDisplayName(String displayName);
        }

        /**
         * The stage of the apicontract definition allowing to specify Protocols.
         */
        interface WithProtocols {
            /**
             * Specifies protocols.
             * @param protocols Describes on which protocols the operations in this API can be invoked
             * @return the next definition stage
             */
            WithCreate withProtocols(List<Protocol> protocols);
        }

        /**
         * The stage of the apicontract definition allowing to specify ServiceUrl.
         */
        interface WithServiceUrl {
            /**
             * Specifies serviceUrl.
             * @param serviceUrl Absolute URL of the backend service implementing this API
             * @return the next definition stage
             */
            WithCreate withServiceUrl(String serviceUrl);
        }

        /**
         * The stage of the apicontract definition allowing to specify SoapApiType.
         */
        interface WithSoapApiType {
            /**
             * Specifies soapApiType.
             * @param soapApiType Type of Api to create.
  * `http` creates a SOAP to REST API
  * `soap` creates a SOAP pass-through API. Possible values include: 'SoapToRest', 'SoapPassThrough'
             * @return the next definition stage
             */
            WithCreate withSoapApiType(SoapApiType soapApiType);
        }

        /**
         * The stage of the apicontract definition allowing to specify SubscriptionKeyParameterNames.
         */
        interface WithSubscriptionKeyParameterNames {
            /**
             * Specifies subscriptionKeyParameterNames.
             * @param subscriptionKeyParameterNames Protocols over which API is made available
             * @return the next definition stage
             */
            WithCreate withSubscriptionKeyParameterNames(SubscriptionKeyParameterNamesContract subscriptionKeyParameterNames);
        }

        /**
         * The stage of the apicontract definition allowing to specify SubscriptionRequired.
         */
        interface WithSubscriptionRequired {
            /**
             * Specifies subscriptionRequired.
             * @param subscriptionRequired Specifies whether an API or Product subscription is required for accessing the API
             * @return the next definition stage
             */
            WithCreate withSubscriptionRequired(Boolean subscriptionRequired);
        }

        /**
         * The stage of the apicontract definition allowing to specify WsdlSelector.
         */
        interface WithWsdlSelector {
            /**
             * Specifies wsdlSelector.
             * @param wsdlSelector Criteria to limit import of WSDL to a subset of the document
             * @return the next definition stage
             */
            WithCreate withWsdlSelector(ApiCreateOrUpdatePropertiesWsdlSelector wsdlSelector);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ApiContract>, DefinitionStages.WithApiRevision, DefinitionStages.WithApiRevisionDescription, DefinitionStages.WithApiType, DefinitionStages.WithApiVersion, DefinitionStages.WithApiVersionDescription, DefinitionStages.WithApiVersionSet, DefinitionStages.WithApiVersionSetId, DefinitionStages.WithAuthenticationSettings, DefinitionStages.WithContentFormat, DefinitionStages.WithContentValue, DefinitionStages.WithDescription, DefinitionStages.WithDisplayName, DefinitionStages.WithProtocols, DefinitionStages.WithServiceUrl, DefinitionStages.WithSoapApiType, DefinitionStages.WithSubscriptionKeyParameterNames, DefinitionStages.WithSubscriptionRequired, DefinitionStages.WithWsdlSelector {
        }
    }
    /**
     * The template for a ApiContract update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ApiContract>, UpdateStages.WithIfMatch, UpdateStages.WithApiRevision, UpdateStages.WithApiRevisionDescription, UpdateStages.WithApiType, UpdateStages.WithApiVersion, UpdateStages.WithApiVersionDescription, UpdateStages.WithApiVersionSet, UpdateStages.WithApiVersionSetId, UpdateStages.WithAuthenticationSettings, UpdateStages.WithContentFormat, UpdateStages.WithContentValue, UpdateStages.WithDescription, UpdateStages.WithDisplayName, UpdateStages.WithProtocols, UpdateStages.WithServiceUrl, UpdateStages.WithSoapApiType, UpdateStages.WithSubscriptionKeyParameterNames, UpdateStages.WithSubscriptionRequired, UpdateStages.WithWsdlSelector {
    }

    /**
     * Grouping of ApiContract update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the apicontract update allowing to specify IfMatch.
         */
        interface WithIfMatch {
            /**
             * Specifies ifMatch.
             * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity
             * @return the next update stage
             */
            Update withIfMatch(String ifMatch);
        }

        /**
         * The stage of the apicontract update allowing to specify ApiRevision.
         */
        interface WithApiRevision {
            /**
             * Specifies apiRevision.
             * @param apiRevision Describes the Revision of the Api. If no value is provided, default revision 1 is created
             * @return the next update stage
             */
            Update withApiRevision(String apiRevision);
        }

        /**
         * The stage of the apicontract update allowing to specify ApiRevisionDescription.
         */
        interface WithApiRevisionDescription {
            /**
             * Specifies apiRevisionDescription.
             * @param apiRevisionDescription Description of the Api Revision
             * @return the next update stage
             */
            Update withApiRevisionDescription(String apiRevisionDescription);
        }

        /**
         * The stage of the apicontract update allowing to specify ApiType.
         */
        interface WithApiType {
            /**
             * Specifies apiType.
             * @param apiType Type of API. Possible values include: 'http', 'soap'
             * @return the next update stage
             */
            Update withApiType(ApiType apiType);
        }

        /**
         * The stage of the apicontract update allowing to specify ApiVersion.
         */
        interface WithApiVersion {
            /**
             * Specifies apiVersion.
             * @param apiVersion Indicates the Version identifier of the API if the API is versioned
             * @return the next update stage
             */
            Update withApiVersion(String apiVersion);
        }

        /**
         * The stage of the apicontract update allowing to specify ApiVersionDescription.
         */
        interface WithApiVersionDescription {
            /**
             * Specifies apiVersionDescription.
             * @param apiVersionDescription Description of the Api Version
             * @return the next update stage
             */
            Update withApiVersionDescription(String apiVersionDescription);
        }

        /**
         * The stage of the apicontract update allowing to specify ApiVersionSet.
         */
        interface WithApiVersionSet {
            /**
             * Specifies apiVersionSet.
             * @param apiVersionSet the apiVersionSet parameter value
             * @return the next update stage
             */
            Update withApiVersionSet(ApiVersionSetContractDetails apiVersionSet);
        }

        /**
         * The stage of the apicontract update allowing to specify ApiVersionSetId.
         */
        interface WithApiVersionSetId {
            /**
             * Specifies apiVersionSetId.
             * @param apiVersionSetId A resource identifier for the related ApiVersionSet
             * @return the next update stage
             */
            Update withApiVersionSetId(String apiVersionSetId);
        }

        /**
         * The stage of the apicontract update allowing to specify AuthenticationSettings.
         */
        interface WithAuthenticationSettings {
            /**
             * Specifies authenticationSettings.
             * @param authenticationSettings Collection of authentication settings included into this API
             * @return the next update stage
             */
            Update withAuthenticationSettings(AuthenticationSettingsContract authenticationSettings);
        }

        /**
         * The stage of the apicontract update allowing to specify ContentFormat.
         */
        interface WithContentFormat {
            /**
             * Specifies contentFormat.
             * @param contentFormat Format of the Content in which the API is getting imported. Possible values include: 'wadl-xml', 'wadl-link-json', 'swagger-json', 'swagger-link-json', 'wsdl', 'wsdl-link', 'openapi', 'openapi+json', 'openapi-link'
             * @return the next update stage
             */
            Update withContentFormat(ContentFormat contentFormat);
        }

        /**
         * The stage of the apicontract update allowing to specify ContentValue.
         */
        interface WithContentValue {
            /**
             * Specifies contentValue.
             * @param contentValue Content value when Importing an API
             * @return the next update stage
             */
            Update withContentValue(String contentValue);
        }

        /**
         * The stage of the apicontract update allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             * @param description Description of the API. May include HTML formatting tags
             * @return the next update stage
             */
            Update withDescription(String description);
        }

        /**
         * The stage of the apicontract update allowing to specify DisplayName.
         */
        interface WithDisplayName {
            /**
             * Specifies displayName.
             * @param displayName API name
             * @return the next update stage
             */
            Update withDisplayName(String displayName);
        }

        /**
         * The stage of the apicontract update allowing to specify Protocols.
         */
        interface WithProtocols {
            /**
             * Specifies protocols.
             * @param protocols Describes on which protocols the operations in this API can be invoked
             * @return the next update stage
             */
            Update withProtocols(List<Protocol> protocols);
        }

        /**
         * The stage of the apicontract update allowing to specify ServiceUrl.
         */
        interface WithServiceUrl {
            /**
             * Specifies serviceUrl.
             * @param serviceUrl Absolute URL of the backend service implementing this API
             * @return the next update stage
             */
            Update withServiceUrl(String serviceUrl);
        }

        /**
         * The stage of the apicontract update allowing to specify SoapApiType.
         */
        interface WithSoapApiType {
            /**
             * Specifies soapApiType.
             * @param soapApiType Type of Api to create.
  * `http` creates a SOAP to REST API
  * `soap` creates a SOAP pass-through API. Possible values include: 'SoapToRest', 'SoapPassThrough'
             * @return the next update stage
             */
            Update withSoapApiType(SoapApiType soapApiType);
        }

        /**
         * The stage of the apicontract update allowing to specify SubscriptionKeyParameterNames.
         */
        interface WithSubscriptionKeyParameterNames {
            /**
             * Specifies subscriptionKeyParameterNames.
             * @param subscriptionKeyParameterNames Protocols over which API is made available
             * @return the next update stage
             */
            Update withSubscriptionKeyParameterNames(SubscriptionKeyParameterNamesContract subscriptionKeyParameterNames);
        }

        /**
         * The stage of the apicontract update allowing to specify SubscriptionRequired.
         */
        interface WithSubscriptionRequired {
            /**
             * Specifies subscriptionRequired.
             * @param subscriptionRequired Specifies whether an API or Product subscription is required for accessing the API
             * @return the next update stage
             */
            Update withSubscriptionRequired(Boolean subscriptionRequired);
        }

        /**
         * The stage of the apicontract update allowing to specify WsdlSelector.
         */
        interface WithWsdlSelector {
            /**
             * Specifies wsdlSelector.
             * @param wsdlSelector Criteria to limit import of WSDL to a subset of the document
             * @return the next update stage
             */
            Update withWsdlSelector(ApiCreateOrUpdatePropertiesWsdlSelector wsdlSelector);
        }

    }
}
