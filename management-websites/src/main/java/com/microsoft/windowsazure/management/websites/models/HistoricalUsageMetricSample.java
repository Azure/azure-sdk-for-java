/**
 * 
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management.websites.models;

import java.util.Calendar;

/**
* Historical metric snapshot data sample.
*/
public class HistoricalUsageMetricSample {
    private int count;
    
    /**
    * Optional. The metric sample count. This value is usually 1.
    * @return The Count value.
    */
    public int getCount() {
        return this.count;
    }
    
    /**
    * Optional. The metric sample count. This value is usually 1.
    * @param countValue The Count value.
    */
    public void setCount(final int countValue) {
        this.count = countValue;
    }
    
    private String instanceName;
    
    /**
    * Optional. Name of the instance for which the metric applies. If empty the
    * metric is aggregated on all instances.
    * @return The InstanceName value.
    */
    public String getInstanceName() {
        return this.instanceName;
    }
    
    /**
    * Optional. Name of the instance for which the metric applies. If empty the
    * metric is aggregated on all instances.
    * @param instanceNameValue The InstanceName value.
    */
    public void setInstanceName(final String instanceNameValue) {
        this.instanceName = instanceNameValue;
    }
    
    private String maximum;
    
    /**
    * Optional. Maximum value recorded.
    * @return The Maximum value.
    */
    public String getMaximum() {
        return this.maximum;
    }
    
    /**
    * Optional. Maximum value recorded.
    * @param maximumValue The Maximum value.
    */
    public void setMaximum(final String maximumValue) {
        this.maximum = maximumValue;
    }
    
    private String minimum;
    
    /**
    * Optional. Minimum value recorded.
    * @return The Minimum value.
    */
    public String getMinimum() {
        return this.minimum;
    }
    
    /**
    * Optional. Minimum value recorded.
    * @param minimumValue The Minimum value.
    */
    public void setMinimum(final String minimumValue) {
        this.minimum = minimumValue;
    }
    
    private Calendar timeCreated;
    
    /**
    * Optional. Time the metric was taken.
    * @return The TimeCreated value.
    */
    public Calendar getTimeCreated() {
        return this.timeCreated;
    }
    
    /**
    * Optional. Time the metric was taken.
    * @param timeCreatedValue The TimeCreated value.
    */
    public void setTimeCreated(final Calendar timeCreatedValue) {
        this.timeCreated = timeCreatedValue;
    }
    
    private String total;
    
    /**
    * Optional. Value of the metric sample for the time taken.
    * @return The Total value.
    */
    public String getTotal() {
        return this.total;
    }
    
    /**
    * Optional. Value of the metric sample for the time taken.
    * @param totalValue The Total value.
    */
    public void setTotal(final String totalValue) {
        this.total = totalValue;
    }
}
