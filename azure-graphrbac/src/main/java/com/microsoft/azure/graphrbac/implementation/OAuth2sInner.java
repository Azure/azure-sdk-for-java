/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.graphrbac.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in OAuth2s.
 */
public class OAuth2sInner {
    /** The Retrofit service to perform REST calls. */
    private OAuth2sService service;
    /** The service client containing this operation class. */
    private GraphRbacManagementClientImpl client;

    /**
     * Initializes an instance of OAuth2sInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public OAuth2sInner(Retrofit retrofit, GraphRbacManagementClientImpl client) {
        this.service = retrofit.create(OAuth2sService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for OAuth2s to be
     * used by Retrofit to perform actually REST calls.
     */
    interface OAuth2sService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.graphrbac.OAuth2s get" })
        @GET("{tenantID}/oauth2PermissionGrants")
        Observable<Response<ResponseBody>> get(@Path("tenantID") String tenantID, @Query("$filter") String filter, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.graphrbac.OAuth2s post" })
        @POST("{tenantID}/oauth2PermissionGrants")
        Observable<Response<ResponseBody>> post(@Path("tenantID") String tenantID, @Body OAuth2Inner body, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OAuth2Inner object if successful.
     */
    public OAuth2Inner get() {
        return getWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OAuth2Inner> getAsync(final ServiceCallback<OAuth2Inner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(), serviceCallback);
    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OAuth2Inner object
     */
    public Observable<OAuth2Inner> getAsync() {
        return getWithServiceResponseAsync().map(new Func1<ServiceResponse<OAuth2Inner>, OAuth2Inner>() {
            @Override
            public OAuth2Inner call(ServiceResponse<OAuth2Inner> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OAuth2Inner object
     */
    public Observable<ServiceResponse<OAuth2Inner>> getWithServiceResponseAsync() {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.get(this.client.tenantID(), filter, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OAuth2Inner>>>() {
                @Override
                public Observable<ServiceResponse<OAuth2Inner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OAuth2Inner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     *
     * @param filter the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OAuth2Inner object if successful.
     */
    public OAuth2Inner get(String filter) {
        return getWithServiceResponseAsync(filter).toBlocking().single().body();
    }

    /**
     *
     * @param filter the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OAuth2Inner> getAsync(String filter, final ServiceCallback<OAuth2Inner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(filter), serviceCallback);
    }

    /**
     *
     * @param filter the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OAuth2Inner object
     */
    public Observable<OAuth2Inner> getAsync(String filter) {
        return getWithServiceResponseAsync(filter).map(new Func1<ServiceResponse<OAuth2Inner>, OAuth2Inner>() {
            @Override
            public OAuth2Inner call(ServiceResponse<OAuth2Inner> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param filter the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OAuth2Inner object
     */
    public Observable<ServiceResponse<OAuth2Inner>> getWithServiceResponseAsync(String filter) {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.tenantID(), filter, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OAuth2Inner>>>() {
                @Override
                public Observable<ServiceResponse<OAuth2Inner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OAuth2Inner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OAuth2Inner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OAuth2Inner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OAuth2Inner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OAuth2Inner object if successful.
     */
    public OAuth2Inner post() {
        return postWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OAuth2Inner> postAsync(final ServiceCallback<OAuth2Inner> serviceCallback) {
        return ServiceFuture.fromResponse(postWithServiceResponseAsync(), serviceCallback);
    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OAuth2Inner object
     */
    public Observable<OAuth2Inner> postAsync() {
        return postWithServiceResponseAsync().map(new Func1<ServiceResponse<OAuth2Inner>, OAuth2Inner>() {
            @Override
            public OAuth2Inner call(ServiceResponse<OAuth2Inner> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OAuth2Inner object
     */
    public Observable<ServiceResponse<OAuth2Inner>> postWithServiceResponseAsync() {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final OAuth2Inner body = null;
        return service.post(this.client.tenantID(), body, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OAuth2Inner>>>() {
                @Override
                public Observable<ServiceResponse<OAuth2Inner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OAuth2Inner> clientResponse = postDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     *
     * @param body the OAuth2Inner value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OAuth2Inner object if successful.
     */
    public OAuth2Inner post(OAuth2Inner body) {
        return postWithServiceResponseAsync(body).toBlocking().single().body();
    }

    /**
     *
     * @param body the OAuth2Inner value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OAuth2Inner> postAsync(OAuth2Inner body, final ServiceCallback<OAuth2Inner> serviceCallback) {
        return ServiceFuture.fromResponse(postWithServiceResponseAsync(body), serviceCallback);
    }

    /**
     *
     * @param body the OAuth2Inner value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OAuth2Inner object
     */
    public Observable<OAuth2Inner> postAsync(OAuth2Inner body) {
        return postWithServiceResponseAsync(body).map(new Func1<ServiceResponse<OAuth2Inner>, OAuth2Inner>() {
            @Override
            public OAuth2Inner call(ServiceResponse<OAuth2Inner> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param body the OAuth2Inner value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OAuth2Inner object
     */
    public Observable<ServiceResponse<OAuth2Inner>> postWithServiceResponseAsync(OAuth2Inner body) {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(body);
        return service.post(this.client.tenantID(), body, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OAuth2Inner>>>() {
                @Override
                public Observable<ServiceResponse<OAuth2Inner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OAuth2Inner> clientResponse = postDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OAuth2Inner> postDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OAuth2Inner, CloudException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<OAuth2Inner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
