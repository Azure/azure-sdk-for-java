/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.graphrbac.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.graphrbac.GetObjectsParameters;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Objects.
 */
public class ObjectsInner {
    /** The Retrofit service to perform REST calls. */
    private ObjectsService service;
    /** The service client containing this operation class. */
    private GraphRbacManagementClientImpl client;

    /**
     * Initializes an instance of ObjectsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ObjectsInner(Retrofit retrofit, GraphRbacManagementClientImpl client) {
        this.service = retrofit.create(ObjectsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Objects to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ObjectsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.graphrbac.Objects getObjectsByObjectIds" })
        @POST("{tenantID}/getObjectsByObjectIds")
        Observable<Response<ResponseBody>> getObjectsByObjectIds(@Path("tenantID") String tenantID, @Body GetObjectsParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.graphrbac.Objects getObjectsByObjectIdsNext" })
        @GET
        Observable<Response<ResponseBody>> getObjectsByObjectIdsNext(@Url String nextUrl, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the directory objects specified in a list of object IDs. You can also specify which resource collections (users, groups, etc.) should be searched by specifying the optional types parameter.
     *
     * @param parameters Objects filtering parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DirectoryObjectInner&gt; object if successful.
     */
    public PagedList<DirectoryObjectInner> getObjectsByObjectIds(final GetObjectsParameters parameters) {
        ServiceResponse<Page<DirectoryObjectInner>> response = getObjectsByObjectIdsSinglePageAsync(parameters).toBlocking().single();
        return new PagedList<DirectoryObjectInner>(response.body()) {
            @Override
            public Page<DirectoryObjectInner> nextPage(String nextLink) {
                return getObjectsByObjectIdsNextSinglePageAsync(nextLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the directory objects specified in a list of object IDs. You can also specify which resource collections (users, groups, etc.) should be searched by specifying the optional types parameter.
     *
     * @param parameters Objects filtering parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DirectoryObjectInner>> getObjectsByObjectIdsAsync(final GetObjectsParameters parameters, final ListOperationCallback<DirectoryObjectInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            getObjectsByObjectIdsSinglePageAsync(parameters),
            new Func1<String, Observable<ServiceResponse<Page<DirectoryObjectInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DirectoryObjectInner>>> call(String nextLink) {
                    return getObjectsByObjectIdsNextSinglePageAsync(nextLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the directory objects specified in a list of object IDs. You can also specify which resource collections (users, groups, etc.) should be searched by specifying the optional types parameter.
     *
     * @param parameters Objects filtering parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DirectoryObjectInner&gt; object
     */
    public Observable<Page<DirectoryObjectInner>> getObjectsByObjectIdsAsync(final GetObjectsParameters parameters) {
        return getObjectsByObjectIdsWithServiceResponseAsync(parameters)
            .map(new Func1<ServiceResponse<Page<DirectoryObjectInner>>, Page<DirectoryObjectInner>>() {
                @Override
                public Page<DirectoryObjectInner> call(ServiceResponse<Page<DirectoryObjectInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the directory objects specified in a list of object IDs. You can also specify which resource collections (users, groups, etc.) should be searched by specifying the optional types parameter.
     *
     * @param parameters Objects filtering parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DirectoryObjectInner&gt; object
     */
    public Observable<ServiceResponse<Page<DirectoryObjectInner>>> getObjectsByObjectIdsWithServiceResponseAsync(final GetObjectsParameters parameters) {
        return getObjectsByObjectIdsSinglePageAsync(parameters)
            .concatMap(new Func1<ServiceResponse<Page<DirectoryObjectInner>>, Observable<ServiceResponse<Page<DirectoryObjectInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DirectoryObjectInner>>> call(ServiceResponse<Page<DirectoryObjectInner>> page) {
                    String nextLink = page.body().nextPageLink();
                    if (nextLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getObjectsByObjectIdsNextWithServiceResponseAsync(nextLink));
                }
            });
    }

    /**
     * Gets the directory objects specified in a list of object IDs. You can also specify which resource collections (users, groups, etc.) should be searched by specifying the optional types parameter.
     *
    ServiceResponse<PageImpl<DirectoryObjectInner>> * @param parameters Objects filtering parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DirectoryObjectInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DirectoryObjectInner>>> getObjectsByObjectIdsSinglePageAsync(final GetObjectsParameters parameters) {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.getObjectsByObjectIds(this.client.tenantID(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DirectoryObjectInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DirectoryObjectInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DirectoryObjectInner>> result = getObjectsByObjectIdsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DirectoryObjectInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DirectoryObjectInner>> getObjectsByObjectIdsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DirectoryObjectInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DirectoryObjectInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets AD group membership for the specified AD object IDs.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DirectoryObjectInner&gt; object if successful.
     */
    public PagedList<DirectoryObjectInner> getObjectsByObjectIdsNext(final String nextLink) {
        ServiceResponse<Page<DirectoryObjectInner>> response = getObjectsByObjectIdsNextSinglePageAsync(nextLink).toBlocking().single();
        return new PagedList<DirectoryObjectInner>(response.body()) {
            @Override
            public Page<DirectoryObjectInner> nextPage(String nextLink) {
                return getObjectsByObjectIdsNextSinglePageAsync(nextLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets AD group membership for the specified AD object IDs.
     *
     * @param nextLink Next link for the list operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DirectoryObjectInner>> getObjectsByObjectIdsNextAsync(final String nextLink, final ServiceFuture<List<DirectoryObjectInner>> serviceFuture, final ListOperationCallback<DirectoryObjectInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            getObjectsByObjectIdsNextSinglePageAsync(nextLink),
            new Func1<String, Observable<ServiceResponse<Page<DirectoryObjectInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DirectoryObjectInner>>> call(String nextLink) {
                    return getObjectsByObjectIdsNextSinglePageAsync(nextLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets AD group membership for the specified AD object IDs.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DirectoryObjectInner&gt; object
     */
    public Observable<Page<DirectoryObjectInner>> getObjectsByObjectIdsNextAsync(final String nextLink) {
        return getObjectsByObjectIdsNextWithServiceResponseAsync(nextLink)
            .map(new Func1<ServiceResponse<Page<DirectoryObjectInner>>, Page<DirectoryObjectInner>>() {
                @Override
                public Page<DirectoryObjectInner> call(ServiceResponse<Page<DirectoryObjectInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets AD group membership for the specified AD object IDs.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DirectoryObjectInner&gt; object
     */
    public Observable<ServiceResponse<Page<DirectoryObjectInner>>> getObjectsByObjectIdsNextWithServiceResponseAsync(final String nextLink) {
        return getObjectsByObjectIdsNextSinglePageAsync(nextLink)
            .concatMap(new Func1<ServiceResponse<Page<DirectoryObjectInner>>, Observable<ServiceResponse<Page<DirectoryObjectInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DirectoryObjectInner>>> call(ServiceResponse<Page<DirectoryObjectInner>> page) {
                    String nextLink = page.body().nextPageLink();
                    if (nextLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getObjectsByObjectIdsNextWithServiceResponseAsync(nextLink));
                }
            });
    }

    /**
     * Gets AD group membership for the specified AD object IDs.
     *
    ServiceResponse<PageImpl<DirectoryObjectInner>> * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DirectoryObjectInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DirectoryObjectInner>>> getObjectsByObjectIdsNextSinglePageAsync(final String nextLink) {
        if (nextLink == null) {
            throw new IllegalArgumentException("Parameter nextLink is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        String nextUrl = String.format("%s/%s", this.client.tenantID(), nextLink);
        return service.getObjectsByObjectIdsNext(nextUrl, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DirectoryObjectInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DirectoryObjectInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DirectoryObjectInner>> result = getObjectsByObjectIdsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DirectoryObjectInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DirectoryObjectInner>> getObjectsByObjectIdsNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DirectoryObjectInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DirectoryObjectInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
