/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service;

import com.azure.search.service.models.*;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Indexers.
 */
public interface Indexers {
    /**
     * Resets the change tracking state associated with an Azure Search indexer.
     *
     * @param indexerName The name of the indexer to reset.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    void reset(String indexerName);

    /**
     * Resets the change tracking state associated with an Azure Search indexer.
     *
     * @param indexerName     The name of the indexer to reset.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Void> resetAsync(String indexerName, final ServiceCallback<Void> serviceCallback);

    /**
     * Resets the change tracking state associated with an Azure Search indexer.
     *
     * @param indexerName The name of the indexer to reset.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Void> resetAsync(String indexerName);

    /**
     * Resets the change tracking state associated with an Azure Search indexer.
     *
     * @param indexerName The name of the indexer to reset.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Void>> resetWithServiceResponseAsync(String indexerName);

    /**
     * Resets the change tracking state associated with an Azure Search indexer.
     *
     * @param indexerName          The name of the indexer to reset.
     * @param searchRequestOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    void reset(String indexerName, SearchRequestOptions searchRequestOptions);

    /**
     * Resets the change tracking state associated with an Azure Search indexer.
     *
     * @param indexerName          The name of the indexer to reset.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Void> resetAsync(
        String indexerName, SearchRequestOptions searchRequestOptions, final ServiceCallback<Void> serviceCallback);

    /**
     * Resets the change tracking state associated with an Azure Search indexer.
     *
     * @param indexerName          The name of the indexer to reset.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Void> resetAsync(String indexerName, SearchRequestOptions searchRequestOptions);

    /**
     * Resets the change tracking state associated with an Azure Search indexer.
     *
     * @param indexerName          The name of the indexer to reset.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Void>> resetWithServiceResponseAsync(
        String indexerName, SearchRequestOptions searchRequestOptions);

    /**
     * Runs an Azure Search indexer on-demand.
     *
     * @param indexerName The name of the indexer to run.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    void run(String indexerName);

    /**
     * Runs an Azure Search indexer on-demand.
     *
     * @param indexerName     The name of the indexer to run.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Void> runAsync(String indexerName, final ServiceCallback<Void> serviceCallback);

    /**
     * Runs an Azure Search indexer on-demand.
     *
     * @param indexerName The name of the indexer to run.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Void> runAsync(String indexerName);

    /**
     * Runs an Azure Search indexer on-demand.
     *
     * @param indexerName The name of the indexer to run.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Void>> runWithServiceResponseAsync(String indexerName);

    /**
     * Runs an Azure Search indexer on-demand.
     *
     * @param indexerName          The name of the indexer to run.
     * @param searchRequestOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    void run(String indexerName, SearchRequestOptions searchRequestOptions);

    /**
     * Runs an Azure Search indexer on-demand.
     *
     * @param indexerName          The name of the indexer to run.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Void> runAsync(
        String indexerName, SearchRequestOptions searchRequestOptions, final ServiceCallback<Void> serviceCallback);

    /**
     * Runs an Azure Search indexer on-demand.
     *
     * @param indexerName          The name of the indexer to run.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Void> runAsync(String indexerName, SearchRequestOptions searchRequestOptions);

    /**
     * Runs an Azure Search indexer on-demand.
     *
     * @param indexerName          The name of the indexer to run.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Void>> runWithServiceResponseAsync(
        String indexerName, SearchRequestOptions searchRequestOptions);

    /**
     * Creates a new Azure Search indexer or updates an indexer if it already exists.
     *
     * @param indexerName The name of the indexer to create or update.
     * @param indexer     The definition of the indexer to create or update.
     * @return the Indexer object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    Indexer createOrUpdate(String indexerName, Indexer indexer);

    /**
     * Creates a new Azure Search indexer or updates an indexer if it already exists.
     *
     * @param indexerName     The name of the indexer to create or update.
     * @param indexer         The definition of the indexer to create or update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Indexer> createOrUpdateAsync(
        String indexerName, Indexer indexer, final ServiceCallback<Indexer> serviceCallback);

    /**
     * Creates a new Azure Search indexer or updates an indexer if it already exists.
     *
     * @param indexerName The name of the indexer to create or update.
     * @param indexer     The definition of the indexer to create or update.
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Indexer> createOrUpdateAsync(String indexerName, Indexer indexer);

    /**
     * Creates a new Azure Search indexer or updates an indexer if it already exists.
     *
     * @param indexerName The name of the indexer to create or update.
     * @param indexer     The definition of the indexer to create or update.
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Indexer>> createOrUpdateWithServiceResponseAsync(String indexerName, Indexer indexer);

    /**
     * Creates a new Azure Search indexer or updates an indexer if it already exists.
     *
     * @param indexerName          The name of the indexer to create or update.
     * @param indexer              The definition of the indexer to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the Indexer object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    Indexer createOrUpdate(
        String indexerName, Indexer indexer, SearchRequestOptions searchRequestOptions,
        AccessCondition accessCondition);

    /**
     * Creates a new Azure Search indexer or updates an indexer if it already exists.
     *
     * @param indexerName          The name of the indexer to create or update.
     * @param indexer              The definition of the indexer to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Indexer> createOrUpdateAsync(
        String indexerName, Indexer indexer, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition,
        final ServiceCallback<Indexer> serviceCallback);

    /**
     * Creates a new Azure Search indexer or updates an indexer if it already exists.
     *
     * @param indexerName          The name of the indexer to create or update.
     * @param indexer              The definition of the indexer to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Indexer> createOrUpdateAsync(
        String indexerName, Indexer indexer, SearchRequestOptions searchRequestOptions,
        AccessCondition accessCondition);

    /**
     * Creates a new Azure Search indexer or updates an indexer if it already exists.
     *
     * @param indexerName          The name of the indexer to create or update.
     * @param indexer              The definition of the indexer to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Indexer>> createOrUpdateWithServiceResponseAsync(
        String indexerName, Indexer indexer, SearchRequestOptions searchRequestOptions,
        AccessCondition accessCondition);

    /**
     * Deletes an Azure Search indexer.
     *
     * @param indexerName The name of the indexer to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String indexerName);

    /**
     * Deletes an Azure Search indexer.
     *
     * @param indexerName     The name of the indexer to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Void> deleteAsync(String indexerName, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes an Azure Search indexer.
     *
     * @param indexerName The name of the indexer to delete.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Void> deleteAsync(String indexerName);

    /**
     * Deletes an Azure Search indexer.
     *
     * @param indexerName The name of the indexer to delete.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String indexerName);

    /**
     * Deletes an Azure Search indexer.
     *
     * @param indexerName          The name of the indexer to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String indexerName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition);

    /**
     * Deletes an Azure Search indexer.
     *
     * @param indexerName          The name of the indexer to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Void> deleteAsync(
        String indexerName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition,
        final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes an Azure Search indexer.
     *
     * @param indexerName          The name of the indexer to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Void> deleteAsync(
        String indexerName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition);

    /**
     * Deletes an Azure Search indexer.
     *
     * @param indexerName          The name of the indexer to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(
        String indexerName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition);

    /**
     * Retrieves an indexer definition from Azure Search.
     *
     * @param indexerName The name of the indexer to retrieve.
     * @return the Indexer object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    Indexer get(String indexerName);

    /**
     * Retrieves an indexer definition from Azure Search.
     *
     * @param indexerName     The name of the indexer to retrieve.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Indexer> getAsync(String indexerName, final ServiceCallback<Indexer> serviceCallback);

    /**
     * Retrieves an indexer definition from Azure Search.
     *
     * @param indexerName The name of the indexer to retrieve.
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Indexer> getAsync(String indexerName);

    /**
     * Retrieves an indexer definition from Azure Search.
     *
     * @param indexerName The name of the indexer to retrieve.
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Indexer>> getWithServiceResponseAsync(String indexerName);

    /**
     * Retrieves an indexer definition from Azure Search.
     *
     * @param indexerName          The name of the indexer to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the Indexer object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    Indexer get(String indexerName, SearchRequestOptions searchRequestOptions);

    /**
     * Retrieves an indexer definition from Azure Search.
     *
     * @param indexerName          The name of the indexer to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Indexer> getAsync(
        String indexerName, SearchRequestOptions searchRequestOptions, final ServiceCallback<Indexer> serviceCallback);

    /**
     * Retrieves an indexer definition from Azure Search.
     *
     * @param indexerName          The name of the indexer to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Indexer> getAsync(String indexerName, SearchRequestOptions searchRequestOptions);

    /**
     * Retrieves an indexer definition from Azure Search.
     *
     * @param indexerName          The name of the indexer to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Indexer>> getWithServiceResponseAsync(
        String indexerName, SearchRequestOptions searchRequestOptions);

    /**
     * Lists all indexers available for an Azure Search service.
     *
     * @return the IndexerListResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    IndexerListResult list();

    /**
     * Lists all indexers available for an Azure Search service.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<IndexerListResult> listAsync(final ServiceCallback<IndexerListResult> serviceCallback);

    /**
     * Lists all indexers available for an Azure Search service.
     *
     * @return the observable to the IndexerListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<IndexerListResult> listAsync();

    /**
     * Lists all indexers available for an Azure Search service.
     *
     * @return the observable to the IndexerListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<IndexerListResult>> listWithServiceResponseAsync();

    /**
     * Lists all indexers available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the IndexerListResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    IndexerListResult list(SearchRequestOptions searchRequestOptions);

    /**
     * Lists all indexers available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<IndexerListResult> listAsync(
        SearchRequestOptions searchRequestOptions, final ServiceCallback<IndexerListResult> serviceCallback);

    /**
     * Lists all indexers available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the IndexerListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<IndexerListResult> listAsync(SearchRequestOptions searchRequestOptions);

    /**
     * Lists all indexers available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the IndexerListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<IndexerListResult>> listWithServiceResponseAsync(
        SearchRequestOptions searchRequestOptions);

    /**
     * Creates a new Azure Search indexer.
     *
     * @param indexer The definition of the indexer to create.
     * @return the Indexer object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    Indexer create(Indexer indexer);

    /**
     * Creates a new Azure Search indexer.
     *
     * @param indexer         The definition of the indexer to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Indexer> createAsync(Indexer indexer, final ServiceCallback<Indexer> serviceCallback);

    /**
     * Creates a new Azure Search indexer.
     *
     * @param indexer The definition of the indexer to create.
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Indexer> createAsync(Indexer indexer);

    /**
     * Creates a new Azure Search indexer.
     *
     * @param indexer The definition of the indexer to create.
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Indexer>> createWithServiceResponseAsync(Indexer indexer);

    /**
     * Creates a new Azure Search indexer.
     *
     * @param indexer              The definition of the indexer to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the Indexer object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    Indexer create(Indexer indexer, SearchRequestOptions searchRequestOptions);

    /**
     * Creates a new Azure Search indexer.
     *
     * @param indexer              The definition of the indexer to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Indexer> createAsync(
        Indexer indexer, SearchRequestOptions searchRequestOptions, final ServiceCallback<Indexer> serviceCallback);

    /**
     * Creates a new Azure Search indexer.
     *
     * @param indexer              The definition of the indexer to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Indexer> createAsync(Indexer indexer, SearchRequestOptions searchRequestOptions);

    /**
     * Creates a new Azure Search indexer.
     *
     * @param indexer              The definition of the indexer to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Indexer>> createWithServiceResponseAsync(
        Indexer indexer, SearchRequestOptions searchRequestOptions);

    /**
     * Returns the current status and execution history of an indexer.
     *
     * @param indexerName The name of the indexer for which to retrieve status.
     * @return the IndexerExecutionInfo object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    IndexerExecutionInfo getStatus(String indexerName);

    /**
     * Returns the current status and execution history of an indexer.
     *
     * @param indexerName     The name of the indexer for which to retrieve status.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<IndexerExecutionInfo> getStatusAsync(
        String indexerName, final ServiceCallback<IndexerExecutionInfo> serviceCallback);

    /**
     * Returns the current status and execution history of an indexer.
     *
     * @param indexerName The name of the indexer for which to retrieve status.
     * @return the observable to the IndexerExecutionInfo object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<IndexerExecutionInfo> getStatusAsync(String indexerName);

    /**
     * Returns the current status and execution history of an indexer.
     *
     * @param indexerName The name of the indexer for which to retrieve status.
     * @return the observable to the IndexerExecutionInfo object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<IndexerExecutionInfo>> getStatusWithServiceResponseAsync(String indexerName);

    /**
     * Returns the current status and execution history of an indexer.
     *
     * @param indexerName          The name of the indexer for which to retrieve status.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the IndexerExecutionInfo object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    IndexerExecutionInfo getStatus(String indexerName, SearchRequestOptions searchRequestOptions);

    /**
     * Returns the current status and execution history of an indexer.
     *
     * @param indexerName          The name of the indexer for which to retrieve status.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<IndexerExecutionInfo> getStatusAsync(
        String indexerName, SearchRequestOptions searchRequestOptions,
        final ServiceCallback<IndexerExecutionInfo> serviceCallback);

    /**
     * Returns the current status and execution history of an indexer.
     *
     * @param indexerName          The name of the indexer for which to retrieve status.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the IndexerExecutionInfo object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<IndexerExecutionInfo> getStatusAsync(String indexerName, SearchRequestOptions searchRequestOptions);

    /**
     * Returns the current status and execution history of an indexer.
     *
     * @param indexerName          The name of the indexer for which to retrieve status.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the IndexerExecutionInfo object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<IndexerExecutionInfo>> getStatusWithServiceResponseAsync(
        String indexerName, SearchRequestOptions searchRequestOptions);

}
