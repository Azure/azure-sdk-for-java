/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service.implementation;

import com.azure.search.service.DataSources;
import com.azure.search.service.models.AccessCondition;
import com.azure.search.service.models.DataSource;
import com.azure.search.service.models.DataSourceListResult;
import com.azure.search.service.models.SearchRequestOptions;
import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import okhttp3.ResponseBody;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.http.*;
import rx.Observable;
import rx.functions.Func1;

import java.io.IOException;
import java.util.UUID;

/**
 * An instance of this class provides access to all the operations defined
 * in DataSources.
 */
public class DataSourcesImpl implements DataSources {
    /**
     * The Retrofit service to perform REST calls.
     */
    private DataSourcesService service;
    /**
     * The service client containing this operation class.
     */
    private SearchServiceClientImpl client;

    /**
     * Initializes an instance of DataSourcesImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client   the instance of the service client containing this operation class.
     */
    public DataSourcesImpl(Retrofit retrofit, SearchServiceClientImpl client) {
        this.service = retrofit.create(DataSourcesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for DataSources to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DataSourcesService {
        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".DataSources createOrUpdate"})
        @PUT("datasources('{dataSourceName}')")
        Observable<Response<ResponseBody>> createOrUpdate(
            @Path("dataSourceName") String dataSourceName, @Body DataSource dataSource, @Header("Prefer") String prefer,
            @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage,
            @Header("client-request-id") UUID clientRequestId, @Header("If-Match") String ifMatch,
            @Header("If-None-Match") String ifNoneMatch, @Header("x-ms-parameterized-host") String parameterizedHost,
            @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".DataSources delete"})
        @HTTP(path = "datasources('{dataSourceName}')", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(
            @Path("dataSourceName") String dataSourceName, @Query("api-version") String apiVersion,
            @Header("accept-language") String acceptLanguage, @Header("client-request-id") UUID clientRequestId,
            @Header("If-Match") String ifMatch, @Header("If-None-Match") String ifNoneMatch,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".DataSources get"})
        @GET("datasources('{dataSourceName}')")
        Observable<Response<ResponseBody>> get(
            @Path("dataSourceName") String dataSourceName, @Query("api-version") String apiVersion,
            @Header("accept-language") String acceptLanguage, @Header("client-request-id") UUID clientRequestId,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".DataSources list"})
        @GET("datasources")
        Observable<Response<ResponseBody>> list(
            @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage,
            @Header("client-request-id") UUID clientRequestId,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".DataSources create"})
        @POST("datasources")
        Observable<Response<ResponseBody>> create(
            @Body DataSource dataSource, @Query("api-version") String apiVersion,
            @Header("accept-language") String acceptLanguage, @Header("client-request-id") UUID clientRequestId,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates a new Azure Search datasource or updates a datasource if it already exists.
     *
     * @param dataSourceName The name of the datasource to create or update.
     * @param dataSource     The definition of the datasource to create or update.
     * @return the DataSource object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public DataSource createOrUpdate(String dataSourceName, DataSource dataSource) {
        return createOrUpdateWithServiceResponseAsync(dataSourceName, dataSource).toBlocking().single().body();
    }

    /**
     * Creates a new Azure Search datasource or updates a datasource if it already exists.
     *
     * @param dataSourceName  The name of the datasource to create or update.
     * @param dataSource      The definition of the datasource to create or update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<DataSource> createOrUpdateAsync(
        String dataSourceName, DataSource dataSource, final ServiceCallback<DataSource> serviceCallback) {
        return ServiceFuture
            .fromResponse(createOrUpdateWithServiceResponseAsync(dataSourceName, dataSource), serviceCallback);
    }

    /**
     * Creates a new Azure Search datasource or updates a datasource if it already exists.
     *
     * @param dataSourceName The name of the datasource to create or update.
     * @param dataSource     The definition of the datasource to create or update.
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<DataSource> createOrUpdateAsync(String dataSourceName, DataSource dataSource) {
        return createOrUpdateWithServiceResponseAsync(dataSourceName, dataSource)
            .map(new Func1<ServiceResponse<DataSource>, DataSource>() {
                @Override
                public DataSource call(ServiceResponse<DataSource> response) {
                    return response.body();
                }
            });
    }

    /**
     * Creates a new Azure Search datasource or updates a datasource if it already exists.
     *
     * @param dataSourceName The name of the datasource to create or update.
     * @param dataSource     The definition of the datasource to create or update.
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<DataSource>> createOrUpdateWithServiceResponseAsync(
        String dataSourceName, DataSource dataSource) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (dataSource == null) {
            throw new IllegalArgumentException("Parameter dataSource is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(dataSource);
        final String prefer = "return=representation";
        final SearchRequestOptions searchRequestOptions = null;
        final AccessCondition accessCondition = null;
        UUID clientRequestId = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service
            .createOrUpdate(dataSourceName, dataSource, prefer, this.client.apiVersion(), this.client.acceptLanguage(),
                clientRequestId, ifMatch, ifNoneMatch, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataSource>>>() {
                @Override
                public Observable<ServiceResponse<DataSource>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataSource> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates a new Azure Search datasource or updates a datasource if it already exists.
     *
     * @param dataSourceName       The name of the datasource to create or update.
     * @param dataSource           The definition of the datasource to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the DataSource object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public DataSource createOrUpdate(
        String dataSourceName, DataSource dataSource, SearchRequestOptions searchRequestOptions,
        AccessCondition accessCondition) {
        return createOrUpdateWithServiceResponseAsync(dataSourceName, dataSource, searchRequestOptions, accessCondition)
            .toBlocking().single().body();
    }

    /**
     * Creates a new Azure Search datasource or updates a datasource if it already exists.
     *
     * @param dataSourceName       The name of the datasource to create or update.
     * @param dataSource           The definition of the datasource to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<DataSource> createOrUpdateAsync(
        String dataSourceName, DataSource dataSource, SearchRequestOptions searchRequestOptions,
        AccessCondition accessCondition, final ServiceCallback<DataSource> serviceCallback) {
        return ServiceFuture.fromResponse(
            createOrUpdateWithServiceResponseAsync(dataSourceName, dataSource, searchRequestOptions, accessCondition),
            serviceCallback);
    }

    /**
     * Creates a new Azure Search datasource or updates a datasource if it already exists.
     *
     * @param dataSourceName       The name of the datasource to create or update.
     * @param dataSource           The definition of the datasource to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<DataSource> createOrUpdateAsync(
        String dataSourceName, DataSource dataSource, SearchRequestOptions searchRequestOptions,
        AccessCondition accessCondition) {
        return createOrUpdateWithServiceResponseAsync(dataSourceName, dataSource, searchRequestOptions, accessCondition)
            .map(new Func1<ServiceResponse<DataSource>, DataSource>() {
                @Override
                public DataSource call(ServiceResponse<DataSource> response) {
                    return response.body();
                }
            });
    }

    /**
     * Creates a new Azure Search datasource or updates a datasource if it already exists.
     *
     * @param dataSourceName       The name of the datasource to create or update.
     * @param dataSource           The definition of the datasource to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<DataSource>> createOrUpdateWithServiceResponseAsync(
        String dataSourceName, DataSource dataSource, SearchRequestOptions searchRequestOptions,
        AccessCondition accessCondition) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (dataSource == null) {
            throw new IllegalArgumentException("Parameter dataSource is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(dataSource);
        Validator.validate(searchRequestOptions);
        Validator.validate(accessCondition);
        final String prefer = "return=representation";
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String ifMatch = null;
        if (accessCondition != null) {
            ifMatch = accessCondition.ifMatch();
        }
        String ifNoneMatch = null;
        if (accessCondition != null) {
            ifNoneMatch = accessCondition.ifNoneMatch();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service
            .createOrUpdate(dataSourceName, dataSource, prefer, this.client.apiVersion(), this.client.acceptLanguage(),
                clientRequestId, ifMatch, ifNoneMatch, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataSource>>>() {
                @Override
                public Observable<ServiceResponse<DataSource>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataSource> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataSource> createOrUpdateDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DataSource, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(200, new TypeToken<DataSource>() {
            }.getType())
            .register(201, new TypeToken<DataSource>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

    /**
     * Deletes an Azure Search datasource.
     *
     * @param dataSourceName The name of the datasource to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String dataSourceName) {
        deleteWithServiceResponseAsync(dataSourceName).toBlocking().single().body();
    }

    /**
     * Deletes an Azure Search datasource.
     *
     * @param dataSourceName  The name of the datasource to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Void> deleteAsync(String dataSourceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(dataSourceName), serviceCallback);
    }

    /**
     * Deletes an Azure Search datasource.
     *
     * @param dataSourceName The name of the datasource to delete.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Void> deleteAsync(String dataSourceName) {
        return deleteWithServiceResponseAsync(dataSourceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an Azure Search datasource.
     *
     * @param dataSourceName The name of the datasource to delete.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String dataSourceName) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final SearchRequestOptions searchRequestOptions = null;
        final AccessCondition accessCondition = null;
        UUID clientRequestId = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service
            .delete(dataSourceName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId, ifMatch,
                ifNoneMatch, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Deletes an Azure Search datasource.
     *
     * @param dataSourceName       The name of the datasource to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(
        String dataSourceName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition) {
        deleteWithServiceResponseAsync(dataSourceName, searchRequestOptions, accessCondition).toBlocking().single()
            .body();
    }

    /**
     * Deletes an Azure Search datasource.
     *
     * @param dataSourceName       The name of the datasource to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Void> deleteAsync(
        String dataSourceName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition,
        final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture
            .fromResponse(
                deleteWithServiceResponseAsync(dataSourceName, searchRequestOptions, accessCondition),
                serviceCallback);
    }

    /**
     * Deletes an Azure Search datasource.
     *
     * @param dataSourceName       The name of the datasource to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Void> deleteAsync(
        String dataSourceName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition) {
        return deleteWithServiceResponseAsync(dataSourceName, searchRequestOptions, accessCondition)
            .map(new Func1<ServiceResponse<Void>, Void>() {
                @Override
                public Void call(ServiceResponse<Void> response) {
                    return response.body();
                }
            });
    }

    /**
     * Deletes an Azure Search datasource.
     *
     * @param dataSourceName       The name of the datasource to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(
        String dataSourceName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(searchRequestOptions);
        Validator.validate(accessCondition);
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String ifMatch = null;
        if (accessCondition != null) {
            ifMatch = accessCondition.ifMatch();
        }
        String ifNoneMatch = null;
        if (accessCondition != null) {
            ifNoneMatch = accessCondition.ifNoneMatch();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service
            .delete(dataSourceName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId, ifMatch,
                ifNoneMatch, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(204, new TypeToken<Void>() {
            }.getType())
            .register(404, new TypeToken<Void>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

    /**
     * Retrieves a datasource definition from Azure Search.
     *
     * @param dataSourceName The name of the datasource to retrieve.
     * @return the DataSource object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public DataSource get(String dataSourceName) {
        return getWithServiceResponseAsync(dataSourceName).toBlocking().single().body();
    }

    /**
     * Retrieves a datasource definition from Azure Search.
     *
     * @param dataSourceName  The name of the datasource to retrieve.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<DataSource> getAsync(
        String dataSourceName, final ServiceCallback<DataSource> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(dataSourceName), serviceCallback);
    }

    /**
     * Retrieves a datasource definition from Azure Search.
     *
     * @param dataSourceName The name of the datasource to retrieve.
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<DataSource> getAsync(String dataSourceName) {
        return getWithServiceResponseAsync(dataSourceName).map(new Func1<ServiceResponse<DataSource>, DataSource>() {
            @Override
            public DataSource call(ServiceResponse<DataSource> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieves a datasource definition from Azure Search.
     *
     * @param dataSourceName The name of the datasource to retrieve.
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<DataSource>> getWithServiceResponseAsync(String dataSourceName) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final SearchRequestOptions searchRequestOptions = null;
        UUID clientRequestId = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.get(dataSourceName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataSource>>>() {
                @Override
                public Observable<ServiceResponse<DataSource>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataSource> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Retrieves a datasource definition from Azure Search.
     *
     * @param dataSourceName       The name of the datasource to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the DataSource object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public DataSource get(String dataSourceName, SearchRequestOptions searchRequestOptions) {
        return getWithServiceResponseAsync(dataSourceName, searchRequestOptions).toBlocking().single().body();
    }

    /**
     * Retrieves a datasource definition from Azure Search.
     *
     * @param dataSourceName       The name of the datasource to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<DataSource> getAsync(
        String dataSourceName, SearchRequestOptions searchRequestOptions,
        final ServiceCallback<DataSource> serviceCallback) {
        return ServiceFuture
            .fromResponse(getWithServiceResponseAsync(dataSourceName, searchRequestOptions), serviceCallback);
    }

    /**
     * Retrieves a datasource definition from Azure Search.
     *
     * @param dataSourceName       The name of the datasource to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<DataSource> getAsync(String dataSourceName, SearchRequestOptions searchRequestOptions) {
        return getWithServiceResponseAsync(dataSourceName, searchRequestOptions)
            .map(new Func1<ServiceResponse<DataSource>, DataSource>() {
                @Override
                public DataSource call(ServiceResponse<DataSource> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieves a datasource definition from Azure Search.
     *
     * @param dataSourceName       The name of the datasource to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<DataSource>> getWithServiceResponseAsync(
        String dataSourceName, SearchRequestOptions searchRequestOptions) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (dataSourceName == null) {
            throw new IllegalArgumentException("Parameter dataSourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(searchRequestOptions);
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.get(dataSourceName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataSource>>>() {
                @Override
                public Observable<ServiceResponse<DataSource>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataSource> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataSource> getDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DataSource, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(200, new TypeToken<DataSource>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

    /**
     * Lists all datasources available for an Azure Search service.
     *
     * @return the DataSourceListResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public DataSourceListResult list() {
        return listWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Lists all datasources available for an Azure Search service.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<DataSourceListResult> listAsync(final ServiceCallback<DataSourceListResult> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Lists all datasources available for an Azure Search service.
     *
     * @return the observable to the DataSourceListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<DataSourceListResult> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<DataSourceListResult>, DataSourceListResult>() {
                @Override
                public DataSourceListResult call(ServiceResponse<DataSourceListResult> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all datasources available for an Azure Search service.
     *
     * @return the observable to the DataSourceListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<DataSourceListResult>> listWithServiceResponseAsync() {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final SearchRequestOptions searchRequestOptions = null;
        UUID clientRequestId = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.list(this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId, parameterizedHost,
            this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataSourceListResult>>>() {
                @Override
                public Observable<ServiceResponse<DataSourceListResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataSourceListResult> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists all datasources available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the DataSourceListResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public DataSourceListResult list(SearchRequestOptions searchRequestOptions) {
        return listWithServiceResponseAsync(searchRequestOptions).toBlocking().single().body();
    }

    /**
     * Lists all datasources available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<DataSourceListResult> listAsync(
        SearchRequestOptions searchRequestOptions, final ServiceCallback<DataSourceListResult> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(searchRequestOptions), serviceCallback);
    }

    /**
     * Lists all datasources available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the DataSourceListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<DataSourceListResult> listAsync(SearchRequestOptions searchRequestOptions) {
        return listWithServiceResponseAsync(searchRequestOptions)
            .map(new Func1<ServiceResponse<DataSourceListResult>, DataSourceListResult>() {
                @Override
                public DataSourceListResult call(ServiceResponse<DataSourceListResult> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all datasources available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the DataSourceListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<DataSourceListResult>> listWithServiceResponseAsync(
        SearchRequestOptions searchRequestOptions) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(searchRequestOptions);
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.list(this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId, parameterizedHost,
            this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataSourceListResult>>>() {
                @Override
                public Observable<ServiceResponse<DataSourceListResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataSourceListResult> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataSourceListResult> listDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DataSourceListResult, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(200, new TypeToken<DataSourceListResult>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

    /**
     * Creates a new Azure Search datasource.
     *
     * @param dataSource The definition of the datasource to create.
     * @return the DataSource object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public DataSource create(DataSource dataSource) {
        return createWithServiceResponseAsync(dataSource).toBlocking().single().body();
    }

    /**
     * Creates a new Azure Search datasource.
     *
     * @param dataSource      The definition of the datasource to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<DataSource> createAsync(
        DataSource dataSource, final ServiceCallback<DataSource> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(dataSource), serviceCallback);
    }

    /**
     * Creates a new Azure Search datasource.
     *
     * @param dataSource The definition of the datasource to create.
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<DataSource> createAsync(DataSource dataSource) {
        return createWithServiceResponseAsync(dataSource).map(new Func1<ServiceResponse<DataSource>, DataSource>() {
            @Override
            public DataSource call(ServiceResponse<DataSource> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new Azure Search datasource.
     *
     * @param dataSource The definition of the datasource to create.
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<DataSource>> createWithServiceResponseAsync(DataSource dataSource) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (dataSource == null) {
            throw new IllegalArgumentException("Parameter dataSource is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(dataSource);
        final SearchRequestOptions searchRequestOptions = null;
        UUID clientRequestId = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.create(dataSource, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataSource>>>() {
                @Override
                public Observable<ServiceResponse<DataSource>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataSource> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates a new Azure Search datasource.
     *
     * @param dataSource           The definition of the datasource to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the DataSource object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public DataSource create(DataSource dataSource, SearchRequestOptions searchRequestOptions) {
        return createWithServiceResponseAsync(dataSource, searchRequestOptions).toBlocking().single().body();
    }

    /**
     * Creates a new Azure Search datasource.
     *
     * @param dataSource           The definition of the datasource to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<DataSource> createAsync(
        DataSource dataSource, SearchRequestOptions searchRequestOptions,
        final ServiceCallback<DataSource> serviceCallback) {
        return ServiceFuture
            .fromResponse(createWithServiceResponseAsync(dataSource, searchRequestOptions), serviceCallback);
    }

    /**
     * Creates a new Azure Search datasource.
     *
     * @param dataSource           The definition of the datasource to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<DataSource> createAsync(DataSource dataSource, SearchRequestOptions searchRequestOptions) {
        return createWithServiceResponseAsync(dataSource, searchRequestOptions)
            .map(new Func1<ServiceResponse<DataSource>, DataSource>() {
                @Override
                public DataSource call(ServiceResponse<DataSource> response) {
                    return response.body();
                }
            });
    }

    /**
     * Creates a new Azure Search datasource.
     *
     * @param dataSource           The definition of the datasource to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<DataSource>> createWithServiceResponseAsync(
        DataSource dataSource, SearchRequestOptions searchRequestOptions) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (dataSource == null) {
            throw new IllegalArgumentException("Parameter dataSource is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(dataSource);
        Validator.validate(searchRequestOptions);
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.create(dataSource, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataSource>>>() {
                @Override
                public Observable<ServiceResponse<DataSource>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataSource> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataSource> createDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DataSource, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(201, new TypeToken<DataSource>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

}
