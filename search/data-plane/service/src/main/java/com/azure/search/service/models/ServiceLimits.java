/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service.models;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents various service level limits.
 */
public class ServiceLimits {
    /**
     * The maximum allowed fields per index.
     */
    @JsonProperty(value = "maxFieldsPerIndex")
    private Integer maxFieldsPerIndex;

    /**
     * The maximum depth which you can nest sub-fields in an index, including
     * the top-level complex field. For example, a/b/c has a nesting depth of
     * 3.
     */
    @JsonProperty(value = "maxFieldNestingDepthPerIndex")
    private Integer maxFieldNestingDepthPerIndex;

    /**
     * The maximum number of fields of type Collection(Edm.ComplexType) allowed
     * in an index.
     */
    @JsonProperty(value = "maxComplexCollectionFieldsPerIndex")
    private Integer maxComplexCollectionFieldsPerIndex;

    /**
     * The maximum number of objects in complex collections allowed per
     * document.
     */
    @JsonProperty(value = "maxComplexObjectsInCollectionsPerDocument")
    private Integer maxComplexObjectsInCollectionsPerDocument;

    /**
     * Get the maximum allowed fields per index.
     *
     * @return the maxFieldsPerIndex value
     */
    public Integer maxFieldsPerIndex() {
        return this.maxFieldsPerIndex;
    }

    /**
     * Set the maximum allowed fields per index.
     *
     * @param maxFieldsPerIndex the maxFieldsPerIndex value to set
     * @return the ServiceLimits object itself.
     */
    public ServiceLimits withMaxFieldsPerIndex(Integer maxFieldsPerIndex) {
        this.maxFieldsPerIndex = maxFieldsPerIndex;
        return this;
    }

    /**
     * Get the maximum depth which you can nest sub-fields in an index, including the top-level complex field. For
     * example, a/b/c has a nesting depth of 3.
     *
     * @return the maxFieldNestingDepthPerIndex value
     */
    public Integer maxFieldNestingDepthPerIndex() {
        return this.maxFieldNestingDepthPerIndex;
    }

    /**
     * Set the maximum depth which you can nest sub-fields in an index, including the top-level complex field. For
     * example, a/b/c has a nesting depth of 3.
     *
     * @param maxFieldNestingDepthPerIndex the maxFieldNestingDepthPerIndex value to set
     * @return the ServiceLimits object itself.
     */
    public ServiceLimits withMaxFieldNestingDepthPerIndex(Integer maxFieldNestingDepthPerIndex) {
        this.maxFieldNestingDepthPerIndex = maxFieldNestingDepthPerIndex;
        return this;
    }

    /**
     * Get the maximum number of fields of type Collection(Edm.ComplexType) allowed in an index.
     *
     * @return the maxComplexCollectionFieldsPerIndex value
     */
    public Integer maxComplexCollectionFieldsPerIndex() {
        return this.maxComplexCollectionFieldsPerIndex;
    }

    /**
     * Set the maximum number of fields of type Collection(Edm.ComplexType) allowed in an index.
     *
     * @param maxComplexCollectionFieldsPerIndex the maxComplexCollectionFieldsPerIndex value to set
     * @return the ServiceLimits object itself.
     */
    public ServiceLimits withMaxComplexCollectionFieldsPerIndex(Integer maxComplexCollectionFieldsPerIndex) {
        this.maxComplexCollectionFieldsPerIndex = maxComplexCollectionFieldsPerIndex;
        return this;
    }

    /**
     * Get the maximum number of objects in complex collections allowed per document.
     *
     * @return the maxComplexObjectsInCollectionsPerDocument value
     */
    public Integer maxComplexObjectsInCollectionsPerDocument() {
        return this.maxComplexObjectsInCollectionsPerDocument;
    }

    /**
     * Set the maximum number of objects in complex collections allowed per document.
     *
     * @param maxComplexObjectsInCollectionsPerDocument the maxComplexObjectsInCollectionsPerDocument value to set
     * @return the ServiceLimits object itself.
     */
    public ServiceLimits withMaxComplexObjectsInCollectionsPerDocument(
        Integer maxComplexObjectsInCollectionsPerDocument) {
        this.maxComplexObjectsInCollectionsPerDocument = maxComplexObjectsInCollectionsPerDocument;
        return this;
    }

}
