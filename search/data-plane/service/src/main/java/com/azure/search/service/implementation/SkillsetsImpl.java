/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service.implementation;

import com.azure.search.service.Skillsets;
import com.azure.search.service.models.SearchRequestOptions;
import com.azure.search.service.models.Skillset;
import com.azure.search.service.models.SkillsetListResult;
import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import okhttp3.ResponseBody;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.http.*;
import rx.Observable;
import rx.functions.Func1;

import java.io.IOException;
import java.util.UUID;

/**
 * An instance of this class provides access to all the operations defined
 * in Skillsets.
 */
public class SkillsetsImpl implements Skillsets {
    /**
     * The Retrofit service to perform REST calls.
     */
    private SkillsetsService service;
    /**
     * The service client containing this operation class.
     */
    private SearchServiceClientImpl client;

    /**
     * Initializes an instance of SkillsetsImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client   the instance of the service client containing this operation class.
     */
    public SkillsetsImpl(Retrofit retrofit, SearchServiceClientImpl client) {
        this.service = retrofit.create(SkillsetsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Skillsets to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SkillsetsService {
        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".Skillsets createOrUpdate"})
        @PUT("skillsets('{skillsetName}')")
        Observable<Response<ResponseBody>> createOrUpdate(
            @Path("skillsetName") String skillsetName, @Body Skillset skillset, @Header("Prefer") String prefer,
            @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage,
            @Header("client-request-id") UUID clientRequestId,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".Skillsets delete"})
        @HTTP(path = "skillsets('{skillsetName}')", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(
            @Path("skillsetName") String skillsetName, @Query("api-version") String apiVersion,
            @Header("accept-language") String acceptLanguage, @Header("client-request-id") UUID clientRequestId,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".Skillsets get"})
        @GET("skillsets('{skillsetName}')")
        Observable<Response<ResponseBody>> get(
            @Path("skillsetName") String skillsetName, @Query("api-version") String apiVersion,
            @Header("accept-language") String acceptLanguage, @Header("client-request-id") UUID clientRequestId,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".Skillsets list"})
        @GET("skillsets")
        Observable<Response<ResponseBody>> list(
            @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage,
            @Header("client-request-id") UUID clientRequestId,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".Skillsets create"})
        @POST("skillsets")
        Observable<Response<ResponseBody>> create(
            @Body Skillset skillset, @Query("api-version") String apiVersion,
            @Header("accept-language") String acceptLanguage, @Header("client-request-id") UUID clientRequestId,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates a new cognitive skillset in an Azure Search service or updates the skillset if it already exists.
     *
     * @param skillsetName The name of the skillset to create or update.
     * @param skillset     The skillset containing one or more cognitive skills to create or update in an Azure
     *                     Search service.
     * @return the Skillset object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public Skillset createOrUpdate(String skillsetName, Skillset skillset) {
        return createOrUpdateWithServiceResponseAsync(skillsetName, skillset).toBlocking().single().body();
    }

    /**
     * Creates a new cognitive skillset in an Azure Search service or updates the skillset if it already exists.
     *
     * @param skillsetName    The name of the skillset to create or update.
     * @param skillset        The skillset containing one or more cognitive skills to create or update in an Azure
     *                        Search service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Skillset> createOrUpdateAsync(
        String skillsetName, Skillset skillset, final ServiceCallback<Skillset> serviceCallback) {
        return ServiceFuture.fromResponse(
            createOrUpdateWithServiceResponseAsync(skillsetName, skillset),
            serviceCallback);
    }

    /**
     * Creates a new cognitive skillset in an Azure Search service or updates the skillset if it already exists.
     *
     * @param skillsetName The name of the skillset to create or update.
     * @param skillset     The skillset containing one or more cognitive skills to create or update in an Azure
     *                     Search service.
     * @return the observable to the Skillset object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Skillset> createOrUpdateAsync(String skillsetName, Skillset skillset) {
        return createOrUpdateWithServiceResponseAsync(skillsetName, skillset)
            .map(new Func1<ServiceResponse<Skillset>, Skillset>() {
                @Override
                public Skillset call(ServiceResponse<Skillset> response) {
                    return response.body();
                }
            });
    }

    /**
     * Creates a new cognitive skillset in an Azure Search service or updates the skillset if it already exists.
     *
     * @param skillsetName The name of the skillset to create or update.
     * @param skillset     The skillset containing one or more cognitive skills to create or update in an Azure
     *                     Search service.
     * @return the observable to the Skillset object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Skillset>> createOrUpdateWithServiceResponseAsync(
        String skillsetName, Skillset skillset) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (skillsetName == null) {
            throw new IllegalArgumentException("Parameter skillsetName is required and cannot be null.");
        }
        if (skillset == null) {
            throw new IllegalArgumentException("Parameter skillset is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(skillset);
        final String prefer = "return=representation";
        final SearchRequestOptions searchRequestOptions = null;
        UUID clientRequestId = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service
            .createOrUpdate(skillsetName, skillset, prefer, this.client.apiVersion(), this.client.acceptLanguage(),
                clientRequestId, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Skillset>>>() {
                @Override
                public Observable<ServiceResponse<Skillset>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Skillset> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates a new cognitive skillset in an Azure Search service or updates the skillset if it already exists.
     *
     * @param skillsetName         The name of the skillset to create or update.
     * @param skillset             The skillset containing one or more cognitive skills to create or update in an
     *                             Azure Search service.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the Skillset object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public Skillset createOrUpdate(String skillsetName, Skillset skillset, SearchRequestOptions searchRequestOptions) {
        return createOrUpdateWithServiceResponseAsync(skillsetName, skillset, searchRequestOptions).toBlocking()
            .single().body();
    }

    /**
     * Creates a new cognitive skillset in an Azure Search service or updates the skillset if it already exists.
     *
     * @param skillsetName         The name of the skillset to create or update.
     * @param skillset             The skillset containing one or more cognitive skills to create or update in an
     *                             Azure Search service.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Skillset> createOrUpdateAsync(
        String skillsetName, Skillset skillset, SearchRequestOptions searchRequestOptions,
        final ServiceCallback<Skillset> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(skillsetName, skillset,
            searchRequestOptions), serviceCallback);
    }

    /**
     * Creates a new cognitive skillset in an Azure Search service or updates the skillset if it already exists.
     *
     * @param skillsetName         The name of the skillset to create or update.
     * @param skillset             The skillset containing one or more cognitive skills to create or update in an
     *                             Azure Search service.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the Skillset object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Skillset> createOrUpdateAsync(
        String skillsetName, Skillset skillset, SearchRequestOptions searchRequestOptions) {
        return createOrUpdateWithServiceResponseAsync(skillsetName, skillset, searchRequestOptions)
            .map(new Func1<ServiceResponse<Skillset>, Skillset>() {
                @Override
                public Skillset call(ServiceResponse<Skillset> response) {
                    return response.body();
                }
            });
    }

    /**
     * Creates a new cognitive skillset in an Azure Search service or updates the skillset if it already exists.
     *
     * @param skillsetName         The name of the skillset to create or update.
     * @param skillset             The skillset containing one or more cognitive skills to create or update in an
     *                             Azure Search service.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the Skillset object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Skillset>> createOrUpdateWithServiceResponseAsync(
        String skillsetName, Skillset skillset, SearchRequestOptions searchRequestOptions) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (skillsetName == null) {
            throw new IllegalArgumentException("Parameter skillsetName is required and cannot be null.");
        }
        if (skillset == null) {
            throw new IllegalArgumentException("Parameter skillset is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(skillset);
        Validator.validate(searchRequestOptions);
        final String prefer = "return=representation";
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service
            .createOrUpdate(skillsetName, skillset, prefer, this.client.apiVersion(), this.client.acceptLanguage(),
                clientRequestId, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Skillset>>>() {
                @Override
                public Observable<ServiceResponse<Skillset>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Skillset> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Skillset> createOrUpdateDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Skillset, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(200, new TypeToken<Skillset>() {
            }.getType())
            .register(201, new TypeToken<Skillset>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

    /**
     * Deletes a cognitive skillset in an Azure Search service.
     *
     * @param skillsetName The name of the skillset to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String skillsetName) {
        deleteWithServiceResponseAsync(skillsetName).toBlocking().single().body();
    }

    /**
     * Deletes a cognitive skillset in an Azure Search service.
     *
     * @param skillsetName    The name of the skillset to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Void> deleteAsync(String skillsetName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(skillsetName), serviceCallback);
    }

    /**
     * Deletes a cognitive skillset in an Azure Search service.
     *
     * @param skillsetName The name of the skillset to delete.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Void> deleteAsync(String skillsetName) {
        return deleteWithServiceResponseAsync(skillsetName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a cognitive skillset in an Azure Search service.
     *
     * @param skillsetName The name of the skillset to delete.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String skillsetName) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (skillsetName == null) {
            throw new IllegalArgumentException("Parameter skillsetName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final SearchRequestOptions searchRequestOptions = null;
        UUID clientRequestId = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.delete(skillsetName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Deletes a cognitive skillset in an Azure Search service.
     *
     * @param skillsetName         The name of the skillset to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String skillsetName, SearchRequestOptions searchRequestOptions) {
        deleteWithServiceResponseAsync(skillsetName, searchRequestOptions).toBlocking().single().body();
    }

    /**
     * Deletes a cognitive skillset in an Azure Search service.
     *
     * @param skillsetName         The name of the skillset to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Void> deleteAsync(
        String skillsetName, SearchRequestOptions searchRequestOptions,
        final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(
            deleteWithServiceResponseAsync(skillsetName, searchRequestOptions),
            serviceCallback);
    }

    /**
     * Deletes a cognitive skillset in an Azure Search service.
     *
     * @param skillsetName         The name of the skillset to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Void> deleteAsync(String skillsetName, SearchRequestOptions searchRequestOptions) {
        return deleteWithServiceResponseAsync(skillsetName, searchRequestOptions).map(new Func1<ServiceResponse<Void>
            , Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a cognitive skillset in an Azure Search service.
     *
     * @param skillsetName         The name of the skillset to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(
        String skillsetName, SearchRequestOptions searchRequestOptions) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (skillsetName == null) {
            throw new IllegalArgumentException("Parameter skillsetName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(searchRequestOptions);
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.delete(skillsetName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(204, new TypeToken<Void>() {
            }.getType())
            .register(404, new TypeToken<Void>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

    /**
     * Retrieves a cognitive skillset in an Azure Search service.
     *
     * @param skillsetName The name of the skillset to retrieve.
     * @return the Skillset object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public Skillset get(String skillsetName) {
        return getWithServiceResponseAsync(skillsetName).toBlocking().single().body();
    }

    /**
     * Retrieves a cognitive skillset in an Azure Search service.
     *
     * @param skillsetName    The name of the skillset to retrieve.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Skillset> getAsync(String skillsetName, final ServiceCallback<Skillset> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(skillsetName), serviceCallback);
    }

    /**
     * Retrieves a cognitive skillset in an Azure Search service.
     *
     * @param skillsetName The name of the skillset to retrieve.
     * @return the observable to the Skillset object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Skillset> getAsync(String skillsetName) {
        return getWithServiceResponseAsync(skillsetName).map(new Func1<ServiceResponse<Skillset>, Skillset>() {
            @Override
            public Skillset call(ServiceResponse<Skillset> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieves a cognitive skillset in an Azure Search service.
     *
     * @param skillsetName The name of the skillset to retrieve.
     * @return the observable to the Skillset object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Skillset>> getWithServiceResponseAsync(String skillsetName) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (skillsetName == null) {
            throw new IllegalArgumentException("Parameter skillsetName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final SearchRequestOptions searchRequestOptions = null;
        UUID clientRequestId = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.get(skillsetName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Skillset>>>() {
                @Override
                public Observable<ServiceResponse<Skillset>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Skillset> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Retrieves a cognitive skillset in an Azure Search service.
     *
     * @param skillsetName         The name of the skillset to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the Skillset object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public Skillset get(String skillsetName, SearchRequestOptions searchRequestOptions) {
        return getWithServiceResponseAsync(skillsetName, searchRequestOptions).toBlocking().single().body();
    }

    /**
     * Retrieves a cognitive skillset in an Azure Search service.
     *
     * @param skillsetName         The name of the skillset to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Skillset> getAsync(
        String skillsetName, SearchRequestOptions searchRequestOptions,
        final ServiceCallback<Skillset> serviceCallback) {
        return ServiceFuture.fromResponse(
            getWithServiceResponseAsync(skillsetName, searchRequestOptions),
            serviceCallback);
    }

    /**
     * Retrieves a cognitive skillset in an Azure Search service.
     *
     * @param skillsetName         The name of the skillset to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the Skillset object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Skillset> getAsync(String skillsetName, SearchRequestOptions searchRequestOptions) {
        return getWithServiceResponseAsync(skillsetName, searchRequestOptions)
            .map(new Func1<ServiceResponse<Skillset>, Skillset>() {
                @Override
                public Skillset call(ServiceResponse<Skillset> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieves a cognitive skillset in an Azure Search service.
     *
     * @param skillsetName         The name of the skillset to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the Skillset object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Skillset>> getWithServiceResponseAsync(
        String skillsetName, SearchRequestOptions searchRequestOptions) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (skillsetName == null) {
            throw new IllegalArgumentException("Parameter skillsetName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(searchRequestOptions);
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.get(skillsetName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Skillset>>>() {
                @Override
                public Observable<ServiceResponse<Skillset>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Skillset> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Skillset> getDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Skillset, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(200, new TypeToken<Skillset>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

    /**
     * List all cognitive skillsets in an Azure Search service.
     *
     * @return the SkillsetListResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public SkillsetListResult list() {
        return listWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * List all cognitive skillsets in an Azure Search service.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<SkillsetListResult> listAsync(final ServiceCallback<SkillsetListResult> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * List all cognitive skillsets in an Azure Search service.
     *
     * @return the observable to the SkillsetListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<SkillsetListResult> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<SkillsetListResult>, SkillsetListResult>() {
            @Override
            public SkillsetListResult call(ServiceResponse<SkillsetListResult> response) {
                return response.body();
            }
        });
    }

    /**
     * List all cognitive skillsets in an Azure Search service.
     *
     * @return the observable to the SkillsetListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<SkillsetListResult>> listWithServiceResponseAsync() {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final SearchRequestOptions searchRequestOptions = null;
        UUID clientRequestId = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.list(this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId, parameterizedHost,
            this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SkillsetListResult>>>() {
                @Override
                public Observable<ServiceResponse<SkillsetListResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SkillsetListResult> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List all cognitive skillsets in an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the SkillsetListResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public SkillsetListResult list(SearchRequestOptions searchRequestOptions) {
        return listWithServiceResponseAsync(searchRequestOptions).toBlocking().single().body();
    }

    /**
     * List all cognitive skillsets in an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<SkillsetListResult> listAsync(
        SearchRequestOptions searchRequestOptions,
        final ServiceCallback<SkillsetListResult> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(searchRequestOptions), serviceCallback);
    }

    /**
     * List all cognitive skillsets in an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the SkillsetListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<SkillsetListResult> listAsync(SearchRequestOptions searchRequestOptions) {
        return listWithServiceResponseAsync(searchRequestOptions).map(new Func1<ServiceResponse<SkillsetListResult>,
            SkillsetListResult>() {
            @Override
            public SkillsetListResult call(ServiceResponse<SkillsetListResult> response) {
                return response.body();
            }
        });
    }

    /**
     * List all cognitive skillsets in an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the SkillsetListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<SkillsetListResult>> listWithServiceResponseAsync(
        SearchRequestOptions searchRequestOptions) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(searchRequestOptions);
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.list(this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId, parameterizedHost,
            this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SkillsetListResult>>>() {
                @Override
                public Observable<ServiceResponse<SkillsetListResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SkillsetListResult> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SkillsetListResult> listDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SkillsetListResult, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(200, new TypeToken<SkillsetListResult>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

    /**
     * Creates a new cognitive skillset in an Azure Search service.
     *
     * @param skillset The skillset containing one or more cognitive skills to create in an Azure Search service.
     * @return the Skillset object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public Skillset create(Skillset skillset) {
        return createWithServiceResponseAsync(skillset).toBlocking().single().body();
    }

    /**
     * Creates a new cognitive skillset in an Azure Search service.
     *
     * @param skillset        The skillset containing one or more cognitive skills to create in an Azure Search service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Skillset> createAsync(Skillset skillset, final ServiceCallback<Skillset> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(skillset), serviceCallback);
    }

    /**
     * Creates a new cognitive skillset in an Azure Search service.
     *
     * @param skillset The skillset containing one or more cognitive skills to create in an Azure Search service.
     * @return the observable to the Skillset object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Skillset> createAsync(Skillset skillset) {
        return createWithServiceResponseAsync(skillset).map(new Func1<ServiceResponse<Skillset>, Skillset>() {
            @Override
            public Skillset call(ServiceResponse<Skillset> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new cognitive skillset in an Azure Search service.
     *
     * @param skillset The skillset containing one or more cognitive skills to create in an Azure Search service.
     * @return the observable to the Skillset object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Skillset>> createWithServiceResponseAsync(Skillset skillset) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (skillset == null) {
            throw new IllegalArgumentException("Parameter skillset is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(skillset);
        final SearchRequestOptions searchRequestOptions = null;
        UUID clientRequestId = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.create(skillset, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Skillset>>>() {
                @Override
                public Observable<ServiceResponse<Skillset>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Skillset> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates a new cognitive skillset in an Azure Search service.
     *
     * @param skillset             The skillset containing one or more cognitive skills to create in an Azure Search
     *                             service.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the Skillset object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public Skillset create(Skillset skillset, SearchRequestOptions searchRequestOptions) {
        return createWithServiceResponseAsync(skillset, searchRequestOptions).toBlocking().single().body();
    }

    /**
     * Creates a new cognitive skillset in an Azure Search service.
     *
     * @param skillset             The skillset containing one or more cognitive skills to create in an Azure Search
     *                             service.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Skillset> createAsync(
        Skillset skillset, SearchRequestOptions searchRequestOptions,
        final ServiceCallback<Skillset> serviceCallback) {
        return ServiceFuture.fromResponse(
            createWithServiceResponseAsync(skillset, searchRequestOptions),
            serviceCallback);
    }

    /**
     * Creates a new cognitive skillset in an Azure Search service.
     *
     * @param skillset             The skillset containing one or more cognitive skills to create in an Azure Search
     *                             service.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the Skillset object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Skillset> createAsync(Skillset skillset, SearchRequestOptions searchRequestOptions) {
        return createWithServiceResponseAsync(skillset, searchRequestOptions).map(new Func1<ServiceResponse<Skillset>
            , Skillset>() {
            @Override
            public Skillset call(ServiceResponse<Skillset> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new cognitive skillset in an Azure Search service.
     *
     * @param skillset             The skillset containing one or more cognitive skills to create in an Azure Search
     *                             service.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the Skillset object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Skillset>> createWithServiceResponseAsync(
        Skillset skillset, SearchRequestOptions searchRequestOptions) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (skillset == null) {
            throw new IllegalArgumentException("Parameter skillset is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(skillset);
        Validator.validate(searchRequestOptions);
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.create(skillset, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Skillset>>>() {
                @Override
                public Observable<ServiceResponse<Skillset>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Skillset> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Skillset> createDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Skillset, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(201, new TypeToken<Skillset>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

}
