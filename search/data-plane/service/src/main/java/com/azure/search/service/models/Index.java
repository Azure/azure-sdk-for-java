/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service.models;

import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.List;

/**
 * Represents an index definition in Azure Search, which describes the fields
 * and search behavior of an index.
 */
public class Index {
    /**
     * The name of the index.
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /**
     * The fields of the index.
     */
    @JsonProperty(value = "fields", required = true)
    private List<Field> fields;

    /**
     * The scoring profiles for the index.
     */
    @JsonProperty(value = "scoringProfiles")
    private List<ScoringProfile> scoringProfiles;

    /**
     * The name of the scoring profile to use if none is specified in the
     * query. If this property is not set and no scoring profile is specified
     * in the query, then default scoring (tf-idf) will be used.
     */
    @JsonProperty(value = "defaultScoringProfile")
    private String defaultScoringProfile;

    /**
     * Options to control Cross-Origin Resource Sharing (CORS) for the index.
     */
    @JsonProperty(value = "corsOptions")
    private CorsOptions corsOptions;

    /**
     * The suggesters for the index.
     */
    @JsonProperty(value = "suggesters")
    private List<Suggester> suggesters;

    /**
     * The analyzers for the index.
     */
    @JsonProperty(value = "analyzers")
    private List<Analyzer> analyzers;

    /**
     * The tokenizers for the index.
     */
    @JsonProperty(value = "tokenizers")
    private List<Tokenizer> tokenizers;

    /**
     * The token filters for the index.
     */
    @JsonProperty(value = "tokenFilters")
    private List<TokenFilter> tokenFilters;

    /**
     * The character filters for the index.
     */
    @JsonProperty(value = "charFilters")
    private List<CharFilter> charFilters;

    /**
     * The ETag of the index.
     */
    @JsonProperty(value = "@odata\\.etag")
    private String eTag;

    /**
     * Get the name of the index.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name of the index.
     *
     * @param name the name value to set
     * @return the Index object itself.
     */
    public Index withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the fields of the index.
     *
     * @return the fields value
     */
    public List<Field> fields() {
        return this.fields;
    }

    /**
     * Set the fields of the index.
     *
     * @param fields the fields value to set
     * @return the Index object itself.
     */
    public Index withFields(List<Field> fields) {
        this.fields = fields;
        return this;
    }

    /**
     * Get the scoring profiles for the index.
     *
     * @return the scoringProfiles value
     */
    public List<ScoringProfile> scoringProfiles() {
        return this.scoringProfiles;
    }

    /**
     * Set the scoring profiles for the index.
     *
     * @param scoringProfiles the scoringProfiles value to set
     * @return the Index object itself.
     */
    public Index withScoringProfiles(List<ScoringProfile> scoringProfiles) {
        this.scoringProfiles = scoringProfiles;
        return this;
    }

    /**
     * Get the name of the scoring profile to use if none is specified in the query. If this property is not set and
     * no scoring profile is specified in the query, then default scoring (tf-idf) will be used.
     *
     * @return the defaultScoringProfile value
     */
    public String defaultScoringProfile() {
        return this.defaultScoringProfile;
    }

    /**
     * Set the name of the scoring profile to use if none is specified in the query. If this property is not set and
     * no scoring profile is specified in the query, then default scoring (tf-idf) will be used.
     *
     * @param defaultScoringProfile the defaultScoringProfile value to set
     * @return the Index object itself.
     */
    public Index withDefaultScoringProfile(String defaultScoringProfile) {
        this.defaultScoringProfile = defaultScoringProfile;
        return this;
    }

    /**
     * Get options to control Cross-Origin Resource Sharing (CORS) for the index.
     *
     * @return the corsOptions value
     */
    public CorsOptions corsOptions() {
        return this.corsOptions;
    }

    /**
     * Set options to control Cross-Origin Resource Sharing (CORS) for the index.
     *
     * @param corsOptions the corsOptions value to set
     * @return the Index object itself.
     */
    public Index withCorsOptions(CorsOptions corsOptions) {
        this.corsOptions = corsOptions;
        return this;
    }

    /**
     * Get the suggesters for the index.
     *
     * @return the suggesters value
     */
    public List<Suggester> suggesters() {
        return this.suggesters;
    }

    /**
     * Set the suggesters for the index.
     *
     * @param suggesters the suggesters value to set
     * @return the Index object itself.
     */
    public Index withSuggesters(List<Suggester> suggesters) {
        this.suggesters = suggesters;
        return this;
    }

    /**
     * Get the analyzers for the index.
     *
     * @return the analyzers value
     */
    public List<Analyzer> analyzers() {
        return this.analyzers;
    }

    /**
     * Set the analyzers for the index.
     *
     * @param analyzers the analyzers value to set
     * @return the Index object itself.
     */
    public Index withAnalyzers(List<Analyzer> analyzers) {
        this.analyzers = analyzers;
        return this;
    }

    /**
     * Get the tokenizers for the index.
     *
     * @return the tokenizers value
     */
    public List<Tokenizer> tokenizers() {
        return this.tokenizers;
    }

    /**
     * Set the tokenizers for the index.
     *
     * @param tokenizers the tokenizers value to set
     * @return the Index object itself.
     */
    public Index withTokenizers(List<Tokenizer> tokenizers) {
        this.tokenizers = tokenizers;
        return this;
    }

    /**
     * Get the token filters for the index.
     *
     * @return the tokenFilters value
     */
    public List<TokenFilter> tokenFilters() {
        return this.tokenFilters;
    }

    /**
     * Set the token filters for the index.
     *
     * @param tokenFilters the tokenFilters value to set
     * @return the Index object itself.
     */
    public Index withTokenFilters(List<TokenFilter> tokenFilters) {
        this.tokenFilters = tokenFilters;
        return this;
    }

    /**
     * Get the character filters for the index.
     *
     * @return the charFilters value
     */
    public List<CharFilter> charFilters() {
        return this.charFilters;
    }

    /**
     * Set the character filters for the index.
     *
     * @param charFilters the charFilters value to set
     * @return the Index object itself.
     */
    public Index withCharFilters(List<CharFilter> charFilters) {
        this.charFilters = charFilters;
        return this;
    }

    /**
     * Get the ETag of the index.
     *
     * @return the eTag value
     */
    public String eTag() {
        return this.eTag;
    }

    /**
     * Set the ETag of the index.
     *
     * @param eTag the eTag value to set
     * @return the Index object itself.
     */
    public Index withETag(String eTag) {
        this.eTag = eTag;
        return this;
    }

}
