/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

import java.util.List;

/**
 * Removes stop words from a token stream. This token filter is implemented
 * using Apache Lucene.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@odata\\.type")
@JsonTypeName("#Microsoft.Azure.Search.StopwordsTokenFilter")
public class StopwordsTokenFilter extends TokenFilter {
    /**
     * The list of stopwords. This property and the stopwords list property
     * cannot both be set.
     */
    @JsonProperty(value = "stopwords")
    private List<String> stopwords;

    /**
     * A predefined list of stopwords to use. This property and the stopwords
     * property cannot both be set. Default is English. Possible values
     * include: 'arabic', 'armenian', 'basque', 'brazilian', 'bulgarian',
     * 'catalan', 'czech', 'danish', 'dutch', 'english', 'finnish', 'french',
     * 'galician', 'german', 'greek', 'hindi', 'hungarian', 'indonesian',
     * 'irish', 'italian', 'latvian', 'norwegian', 'persian', 'portuguese',
     * 'romanian', 'russian', 'sorani', 'spanish', 'swedish', 'thai',
     * 'turkish'.
     */
    @JsonProperty(value = "stopwordsList")
    private StopwordsList stopwordsList;

    /**
     * A value indicating whether to ignore case. If true, all words are
     * converted to lower case first. Default is false.
     */
    @JsonProperty(value = "ignoreCase")
    private Boolean ignoreCase;

    /**
     * A value indicating whether to ignore the last search term if it's a stop
     * word. Default is true.
     */
    @JsonProperty(value = "removeTrailing")
    private Boolean removeTrailingStopWords;

    /**
     * Get the list of stopwords. This property and the stopwords list property cannot both be set.
     *
     * @return the stopwords value
     */
    public List<String> stopwords() {
        return this.stopwords;
    }

    /**
     * Set the list of stopwords. This property and the stopwords list property cannot both be set.
     *
     * @param stopwords the stopwords value to set
     * @return the StopwordsTokenFilter object itself.
     */
    public StopwordsTokenFilter withStopwords(List<String> stopwords) {
        this.stopwords = stopwords;
        return this;
    }

    /**
     * Get a predefined list of stopwords to use. This property and the stopwords property cannot both be set.
     * Default is English. Possible values include: 'arabic', 'armenian', 'basque', 'brazilian', 'bulgarian',
     * 'catalan', 'czech', 'danish', 'dutch', 'english', 'finnish', 'french', 'galician', 'german', 'greek', 'hindi',
     * 'hungarian', 'indonesian', 'irish', 'italian', 'latvian', 'norwegian', 'persian', 'portuguese', 'romanian',
     * 'russian', 'sorani', 'spanish', 'swedish', 'thai', 'turkish'.
     *
     * @return the stopwordsList value
     */
    public StopwordsList stopwordsList() {
        return this.stopwordsList;
    }

    /**
     * Set a predefined list of stopwords to use. This property and the stopwords property cannot both be set.
     * Default is English. Possible values include: 'arabic', 'armenian', 'basque', 'brazilian', 'bulgarian',
     * 'catalan', 'czech', 'danish', 'dutch', 'english', 'finnish', 'french', 'galician', 'german', 'greek', 'hindi',
     * 'hungarian', 'indonesian', 'irish', 'italian', 'latvian', 'norwegian', 'persian', 'portuguese', 'romanian',
     * 'russian', 'sorani', 'spanish', 'swedish', 'thai', 'turkish'.
     *
     * @param stopwordsList the stopwordsList value to set
     * @return the StopwordsTokenFilter object itself.
     */
    public StopwordsTokenFilter withStopwordsList(StopwordsList stopwordsList) {
        this.stopwordsList = stopwordsList;
        return this;
    }

    /**
     * Get a value indicating whether to ignore case. If true, all words are converted to lower case first. Default
     * is false.
     *
     * @return the ignoreCase value
     */
    public Boolean ignoreCase() {
        return this.ignoreCase;
    }

    /**
     * Set a value indicating whether to ignore case. If true, all words are converted to lower case first. Default
     * is false.
     *
     * @param ignoreCase the ignoreCase value to set
     * @return the StopwordsTokenFilter object itself.
     */
    public StopwordsTokenFilter withIgnoreCase(Boolean ignoreCase) {
        this.ignoreCase = ignoreCase;
        return this;
    }

    /**
     * Get a value indicating whether to ignore the last search term if it's a stop word. Default is true.
     *
     * @return the removeTrailingStopWords value
     */
    public Boolean removeTrailingStopWords() {
        return this.removeTrailingStopWords;
    }

    /**
     * Set a value indicating whether to ignore the last search term if it's a stop word. Default is true.
     *
     * @param removeTrailingStopWords the removeTrailingStopWords value to set
     * @return the StopwordsTokenFilter object itself.
     */
    public StopwordsTokenFilter withRemoveTrailingStopWords(Boolean removeTrailingStopWords) {
        this.removeTrailingStopWords = removeTrailingStopWords;
        return this;
    }

}
