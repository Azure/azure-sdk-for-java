/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

import java.util.List;

/**
 * Text analytics entity recognition.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@odata\\.type")
@JsonTypeName("#Microsoft.Skills.Text.EntityRecognitionSkill")
public class EntityRecognitionSkill extends Skill {
    /**
     * A list of entity categories that should be extracted.
     */
    @JsonProperty(value = "categories")
    private List<EntityCategory> categories;

    /**
     * A value indicating which language code to use. Default is en. Possible
     * values include: 'de', 'en', 'es', 'fr', 'it'.
     */
    @JsonProperty(value = "defaultLanguageCode")
    private EntityRecognitionSkillLanguage defaultLanguageCode;

    /**
     * Determines whether or not to include entities which are well known but
     * don't conform to a pre-defined type. If this configuration is not set
     * (default), set to null or set to false, entities which don't conform to
     * one of the pre-defined types will not be surfaced.
     */
    @JsonProperty(value = "includeTypelessEntities")
    private Boolean includeTypelessEntities;

    /**
     * A value between 0 and 1 that be used to only include entities whose
     * confidence score is greater than the value specified. If not set
     * (default), or if explicitly set to null, all entities will be included.
     */
    @JsonProperty(value = "minimumPrecision")
    private Double minimumPrecision;

    /**
     * Get a list of entity categories that should be extracted.
     *
     * @return the categories value
     */
    public List<EntityCategory> categories() {
        return this.categories;
    }

    /**
     * Set a list of entity categories that should be extracted.
     *
     * @param categories the categories value to set
     * @return the EntityRecognitionSkill object itself.
     */
    public EntityRecognitionSkill withCategories(List<EntityCategory> categories) {
        this.categories = categories;
        return this;
    }

    /**
     * Get a value indicating which language code to use. Default is en. Possible values include: 'de', 'en', 'es',
     * 'fr', 'it'.
     *
     * @return the defaultLanguageCode value
     */
    public EntityRecognitionSkillLanguage defaultLanguageCode() {
        return this.defaultLanguageCode;
    }

    /**
     * Set a value indicating which language code to use. Default is en. Possible values include: 'de', 'en', 'es',
     * 'fr', 'it'.
     *
     * @param defaultLanguageCode the defaultLanguageCode value to set
     * @return the EntityRecognitionSkill object itself.
     */
    public EntityRecognitionSkill withDefaultLanguageCode(EntityRecognitionSkillLanguage defaultLanguageCode) {
        this.defaultLanguageCode = defaultLanguageCode;
        return this;
    }

    /**
     * Get determines whether or not to include entities which are well known but don't conform to a pre-defined type
     * . If this configuration is not set (default), set to null or set to false, entities which don't conform to one
     * of the pre-defined types will not be surfaced.
     *
     * @return the includeTypelessEntities value
     */
    public Boolean includeTypelessEntities() {
        return this.includeTypelessEntities;
    }

    /**
     * Set determines whether or not to include entities which are well known but don't conform to a pre-defined type
     * . If this configuration is not set (default), set to null or set to false, entities which don't conform to one
     * of the pre-defined types will not be surfaced.
     *
     * @param includeTypelessEntities the includeTypelessEntities value to set
     * @return the EntityRecognitionSkill object itself.
     */
    public EntityRecognitionSkill withIncludeTypelessEntities(Boolean includeTypelessEntities) {
        this.includeTypelessEntities = includeTypelessEntities;
        return this;
    }

    /**
     * Get a value between 0 and 1 that be used to only include entities whose confidence score is greater than the
     * value specified. If not set (default), or if explicitly set to null, all entities will be included.
     *
     * @return the minimumPrecision value
     */
    public Double minimumPrecision() {
        return this.minimumPrecision;
    }

    /**
     * Set a value between 0 and 1 that be used to only include entities whose confidence score is greater than the
     * value specified. If not set (default), or if explicitly set to null, all entities will be included.
     *
     * @param minimumPrecision the minimumPrecision value to set
     * @return the EntityRecognitionSkill object itself.
     */
    public EntityRecognitionSkill withMinimumPrecision(Double minimumPrecision) {
        this.minimumPrecision = minimumPrecision;
        return this;
    }

}
