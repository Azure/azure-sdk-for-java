/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service;

import com.azure.search.service.models.*;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Indexes.
 */
public interface Indexes {
    /**
     * Creates a new Azure Search index.
     *
     * @param index The definition of the index to create.
     * @return the Index object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    Index create(Index index);

    /**
     * Creates a new Azure Search index.
     *
     * @param index           The definition of the index to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Index> createAsync(Index index, final ServiceCallback<Index> serviceCallback);

    /**
     * Creates a new Azure Search index.
     *
     * @param index The definition of the index to create.
     * @return the observable to the Index object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Index> createAsync(Index index);

    /**
     * Creates a new Azure Search index.
     *
     * @param index The definition of the index to create.
     * @return the observable to the Index object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Index>> createWithServiceResponseAsync(Index index);

    /**
     * Creates a new Azure Search index.
     *
     * @param index                The definition of the index to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the Index object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    Index create(Index index, SearchRequestOptions searchRequestOptions);

    /**
     * Creates a new Azure Search index.
     *
     * @param index                The definition of the index to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Index> createAsync(
        Index index, SearchRequestOptions searchRequestOptions, final ServiceCallback<Index> serviceCallback);

    /**
     * Creates a new Azure Search index.
     *
     * @param index                The definition of the index to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the Index object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Index> createAsync(Index index, SearchRequestOptions searchRequestOptions);

    /**
     * Creates a new Azure Search index.
     *
     * @param index                The definition of the index to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the Index object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Index>> createWithServiceResponseAsync(
        Index index, SearchRequestOptions searchRequestOptions);

    /**
     * Lists all indexes available for an Azure Search service.
     *
     * @return the IndexListResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    IndexListResult list();

    /**
     * Lists all indexes available for an Azure Search service.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<IndexListResult> listAsync(final ServiceCallback<IndexListResult> serviceCallback);

    /**
     * Lists all indexes available for an Azure Search service.
     *
     * @return the observable to the IndexListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<IndexListResult> listAsync();

    /**
     * Lists all indexes available for an Azure Search service.
     *
     * @return the observable to the IndexListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<IndexListResult>> listWithServiceResponseAsync();

    /**
     * Lists all indexes available for an Azure Search service.
     *
     * @param select               Selects which properties of the index definitions to retrieve. Specified as a
     *                             comma-separated list of JSON property names, or '*' for all properties. The
     *                             default is all properties.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the IndexListResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    IndexListResult list(String select, SearchRequestOptions searchRequestOptions);

    /**
     * Lists all indexes available for an Azure Search service.
     *
     * @param select               Selects which properties of the index definitions to retrieve. Specified as a
     *                             comma-separated list of JSON property names, or '*' for all properties. The
     *                             default is all properties.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<IndexListResult> listAsync(
        String select, SearchRequestOptions searchRequestOptions,
        final ServiceCallback<IndexListResult> serviceCallback);

    /**
     * Lists all indexes available for an Azure Search service.
     *
     * @param select               Selects which properties of the index definitions to retrieve. Specified as a
     *                             comma-separated list of JSON property names, or '*' for all properties. The
     *                             default is all properties.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the IndexListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<IndexListResult> listAsync(String select, SearchRequestOptions searchRequestOptions);

    /**
     * Lists all indexes available for an Azure Search service.
     *
     * @param select               Selects which properties of the index definitions to retrieve. Specified as a
     *                             comma-separated list of JSON property names, or '*' for all properties. The
     *                             default is all properties.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the IndexListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<IndexListResult>> listWithServiceResponseAsync(
        String select,
        SearchRequestOptions searchRequestOptions);

    /**
     * Creates a new Azure Search index or updates an index if it already exists.
     *
     * @param indexName The definition of the index to create or update.
     * @param index     The definition of the index to create or update.
     * @return the Index object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    Index createOrUpdate(String indexName, Index index);

    /**
     * Creates a new Azure Search index or updates an index if it already exists.
     *
     * @param indexName       The definition of the index to create or update.
     * @param index           The definition of the index to create or update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Index> createOrUpdateAsync(
        String indexName, Index index,
        final ServiceCallback<Index> serviceCallback);

    /**
     * Creates a new Azure Search index or updates an index if it already exists.
     *
     * @param indexName The definition of the index to create or update.
     * @param index     The definition of the index to create or update.
     * @return the observable to the Index object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Index> createOrUpdateAsync(String indexName, Index index);

    /**
     * Creates a new Azure Search index or updates an index if it already exists.
     *
     * @param indexName The definition of the index to create or update.
     * @param index     The definition of the index to create or update.
     * @return the observable to the Index object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Index>> createOrUpdateWithServiceResponseAsync(String indexName, Index index);

    /**
     * Creates a new Azure Search index or updates an index if it already exists.
     *
     * @param indexName            The definition of the index to create or update.
     * @param index                The definition of the index to create or update.
     * @param allowIndexDowntime   Allows new analyzers, tokenizers, token filters, or char filters to be added to an
     *                             index by taking the index offline for at least a few seconds. This temporarily
     *                             causes indexing and query requests to fail. Performance and write availability of
     *                             the index can be impaired for several minutes after the index is updated, or
     *                             longer for very large indexes.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the Index object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    Index createOrUpdate(
        String indexName, Index index, Boolean allowIndexDowntime,
        SearchRequestOptions searchRequestOptions, AccessCondition accessCondition);

    /**
     * Creates a new Azure Search index or updates an index if it already exists.
     *
     * @param indexName            The definition of the index to create or update.
     * @param index                The definition of the index to create or update.
     * @param allowIndexDowntime   Allows new analyzers, tokenizers, token filters, or char filters to be added to an
     *                             index by taking the index offline for at least a few seconds. This temporarily
     *                             causes indexing and query requests to fail. Performance and write availability of
     *                             the index can be impaired for several minutes after the index is updated, or
     *                             longer for very large indexes.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Index> createOrUpdateAsync(
        String indexName, Index index, Boolean allowIndexDowntime,
        SearchRequestOptions searchRequestOptions, AccessCondition accessCondition,
        final ServiceCallback<Index> serviceCallback);

    /**
     * Creates a new Azure Search index or updates an index if it already exists.
     *
     * @param indexName            The definition of the index to create or update.
     * @param index                The definition of the index to create or update.
     * @param allowIndexDowntime   Allows new analyzers, tokenizers, token filters, or char filters to be added to an
     *                             index by taking the index offline for at least a few seconds. This temporarily
     *                             causes indexing and query requests to fail. Performance and write availability of
     *                             the index can be impaired for several minutes after the index is updated, or
     *                             longer for very large indexes.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the observable to the Index object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Index> createOrUpdateAsync(
        String indexName, Index index, Boolean allowIndexDowntime,
        SearchRequestOptions searchRequestOptions, AccessCondition accessCondition);

    /**
     * Creates a new Azure Search index or updates an index if it already exists.
     *
     * @param indexName            The definition of the index to create or update.
     * @param index                The definition of the index to create or update.
     * @param allowIndexDowntime   Allows new analyzers, tokenizers, token filters, or char filters to be added to an
     *                             index by taking the index offline for at least a few seconds. This temporarily
     *                             causes indexing and query requests to fail. Performance and write availability of
     *                             the index can be impaired for several minutes after the index is updated, or
     *                             longer for very large indexes.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the observable to the Index object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Index>> createOrUpdateWithServiceResponseAsync(
        String indexName, Index index,
        Boolean allowIndexDowntime, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition);

    /**
     * Deletes an Azure Search index and all the documents it contains.
     *
     * @param indexName The name of the index to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String indexName);

    /**
     * Deletes an Azure Search index and all the documents it contains.
     *
     * @param indexName       The name of the index to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Void> deleteAsync(String indexName, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes an Azure Search index and all the documents it contains.
     *
     * @param indexName The name of the index to delete.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Void> deleteAsync(String indexName);

    /**
     * Deletes an Azure Search index and all the documents it contains.
     *
     * @param indexName The name of the index to delete.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String indexName);

    /**
     * Deletes an Azure Search index and all the documents it contains.
     *
     * @param indexName            The name of the index to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String indexName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition);

    /**
     * Deletes an Azure Search index and all the documents it contains.
     *
     * @param indexName            The name of the index to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Void> deleteAsync(
        String indexName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition,
        final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes an Azure Search index and all the documents it contains.
     *
     * @param indexName            The name of the index to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Void> deleteAsync(
        String indexName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition);

    /**
     * Deletes an Azure Search index and all the documents it contains.
     *
     * @param indexName            The name of the index to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(
        String indexName,
        SearchRequestOptions searchRequestOptions, AccessCondition accessCondition);

    /**
     * Retrieves an index definition from Azure Search.
     *
     * @param indexName The name of the index to retrieve.
     * @return the Index object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    Index get(String indexName);

    /**
     * Retrieves an index definition from Azure Search.
     *
     * @param indexName       The name of the index to retrieve.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Index> getAsync(String indexName, final ServiceCallback<Index> serviceCallback);

    /**
     * Retrieves an index definition from Azure Search.
     *
     * @param indexName The name of the index to retrieve.
     * @return the observable to the Index object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Index> getAsync(String indexName);

    /**
     * Retrieves an index definition from Azure Search.
     *
     * @param indexName The name of the index to retrieve.
     * @return the observable to the Index object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Index>> getWithServiceResponseAsync(String indexName);

    /**
     * Retrieves an index definition from Azure Search.
     *
     * @param indexName            The name of the index to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the Index object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    Index get(String indexName, SearchRequestOptions searchRequestOptions);

    /**
     * Retrieves an index definition from Azure Search.
     *
     * @param indexName            The name of the index to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Index> getAsync(
        String indexName, SearchRequestOptions searchRequestOptions,
        final ServiceCallback<Index> serviceCallback);

    /**
     * Retrieves an index definition from Azure Search.
     *
     * @param indexName            The name of the index to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the Index object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Index> getAsync(String indexName, SearchRequestOptions searchRequestOptions);

    /**
     * Retrieves an index definition from Azure Search.
     *
     * @param indexName            The name of the index to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the Index object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Index>> getWithServiceResponseAsync(
        String indexName, SearchRequestOptions searchRequestOptions);

    /**
     * Returns statistics for the given index, including a document count and storage usage.
     *
     * @param indexName The name of the index for which to retrieve statistics.
     * @return the IndexGetStatisticsResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    IndexGetStatisticsResult getStatistics(String indexName);

    /**
     * Returns statistics for the given index, including a document count and storage usage.
     *
     * @param indexName       The name of the index for which to retrieve statistics.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<IndexGetStatisticsResult> getStatisticsAsync(
        String indexName,
        final ServiceCallback<IndexGetStatisticsResult> serviceCallback);

    /**
     * Returns statistics for the given index, including a document count and storage usage.
     *
     * @param indexName The name of the index for which to retrieve statistics.
     * @return the observable to the IndexGetStatisticsResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<IndexGetStatisticsResult> getStatisticsAsync(String indexName);

    /**
     * Returns statistics for the given index, including a document count and storage usage.
     *
     * @param indexName The name of the index for which to retrieve statistics.
     * @return the observable to the IndexGetStatisticsResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<IndexGetStatisticsResult>> getStatisticsWithServiceResponseAsync(String indexName);

    /**
     * Returns statistics for the given index, including a document count and storage usage.
     *
     * @param indexName            The name of the index for which to retrieve statistics.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the IndexGetStatisticsResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    IndexGetStatisticsResult getStatistics(String indexName, SearchRequestOptions searchRequestOptions);

    /**
     * Returns statistics for the given index, including a document count and storage usage.
     *
     * @param indexName            The name of the index for which to retrieve statistics.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<IndexGetStatisticsResult> getStatisticsAsync(
        String indexName, SearchRequestOptions searchRequestOptions,
        final ServiceCallback<IndexGetStatisticsResult> serviceCallback);

    /**
     * Returns statistics for the given index, including a document count and storage usage.
     *
     * @param indexName            The name of the index for which to retrieve statistics.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the IndexGetStatisticsResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<IndexGetStatisticsResult> getStatisticsAsync(
        String indexName, SearchRequestOptions searchRequestOptions);

    /**
     * Returns statistics for the given index, including a document count and storage usage.
     *
     * @param indexName            The name of the index for which to retrieve statistics.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the IndexGetStatisticsResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<IndexGetStatisticsResult>> getStatisticsWithServiceResponseAsync(
        String indexName, SearchRequestOptions searchRequestOptions);

    /**
     * Shows how an analyzer breaks text into tokens.
     *
     * @param indexName The name of the index for which to test an analyzer.
     * @param request   The text and analyzer or analysis components to test.
     * @return the AnalyzeResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    AnalyzeResult analyze(String indexName, AnalyzeRequest request);

    /**
     * Shows how an analyzer breaks text into tokens.
     *
     * @param indexName       The name of the index for which to test an analyzer.
     * @param request         The text and analyzer or analysis components to test.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<AnalyzeResult> analyzeAsync(
        String indexName, AnalyzeRequest request,
        final ServiceCallback<AnalyzeResult> serviceCallback);

    /**
     * Shows how an analyzer breaks text into tokens.
     *
     * @param indexName The name of the index for which to test an analyzer.
     * @param request   The text and analyzer or analysis components to test.
     * @return the observable to the AnalyzeResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<AnalyzeResult> analyzeAsync(String indexName, AnalyzeRequest request);

    /**
     * Shows how an analyzer breaks text into tokens.
     *
     * @param indexName The name of the index for which to test an analyzer.
     * @param request   The text and analyzer or analysis components to test.
     * @return the observable to the AnalyzeResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<AnalyzeResult>> analyzeWithServiceResponseAsync(
        String indexName,
        AnalyzeRequest request);

    /**
     * Shows how an analyzer breaks text into tokens.
     *
     * @param indexName            The name of the index for which to test an analyzer.
     * @param request              The text and analyzer or analysis components to test.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the AnalyzeResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    AnalyzeResult analyze(String indexName, AnalyzeRequest request, SearchRequestOptions searchRequestOptions);

    /**
     * Shows how an analyzer breaks text into tokens.
     *
     * @param indexName            The name of the index for which to test an analyzer.
     * @param request              The text and analyzer or analysis components to test.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<AnalyzeResult> analyzeAsync(
        String indexName, AnalyzeRequest request, SearchRequestOptions searchRequestOptions,
        final ServiceCallback<AnalyzeResult> serviceCallback);

    /**
     * Shows how an analyzer breaks text into tokens.
     *
     * @param indexName            The name of the index for which to test an analyzer.
     * @param request              The text and analyzer or analysis components to test.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the AnalyzeResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<AnalyzeResult> analyzeAsync(
        String indexName, AnalyzeRequest request, SearchRequestOptions searchRequestOptions);

    /**
     * Shows how an analyzer breaks text into tokens.
     *
     * @param indexName            The name of the index for which to test an analyzer.
     * @param request              The text and analyzer or analysis components to test.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the AnalyzeResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<AnalyzeResult>> analyzeWithServiceResponseAsync(
        String indexName, AnalyzeRequest request, SearchRequestOptions searchRequestOptions);

}
