/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.joda.time.DateTime;

import java.util.List;

/**
 * Represents the result of an individual indexer execution.
 */
public class IndexerExecutionResult {
    /**
     * The outcome of this indexer execution. Possible values include:
     * 'transientFailure', 'success', 'inProgress', 'reset'.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private IndexerExecutionStatus status;

    /**
     * The error message indicating the top-level error, if any.
     */
    @JsonProperty(value = "errorMessage", access = JsonProperty.Access.WRITE_ONLY)
    private String errorMessage;

    /**
     * The start time of this indexer execution.
     */
    @JsonProperty(value = "startTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime startTime;

    /**
     * The end time of this indexer execution, if the execution has already
     * completed.
     */
    @JsonProperty(value = "endTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime endTime;

    /**
     * The item-level indexing errors.
     */
    @JsonProperty(value = "errors", access = JsonProperty.Access.WRITE_ONLY)
    private List<ItemError> errors;

    /**
     * The item-level indexing warnings.
     */
    @JsonProperty(value = "warnings", access = JsonProperty.Access.WRITE_ONLY)
    private List<ItemWarning> warnings;

    /**
     * The number of items that were processed during this indexer execution.
     * This includes both successfully processed items and items where indexing
     * was attempted but failed.
     */
    @JsonProperty(value = "itemsProcessed", access = JsonProperty.Access.WRITE_ONLY)
    private int itemCount;

    /**
     * The number of items that failed to be indexed during this indexer
     * execution.
     */
    @JsonProperty(value = "itemsFailed", access = JsonProperty.Access.WRITE_ONLY)
    private int failedItemCount;

    /**
     * Change tracking state with which an indexer execution started.
     */
    @JsonProperty(value = "initialTrackingState", access = JsonProperty.Access.WRITE_ONLY)
    private String initialTrackingState;

    /**
     * Change tracking state with which an indexer execution finished.
     */
    @JsonProperty(value = "finalTrackingState", access = JsonProperty.Access.WRITE_ONLY)
    private String finalTrackingState;

    /**
     * Get the outcome of this indexer execution. Possible values include: 'transientFailure', 'success',
     * 'inProgress', 'reset'.
     *
     * @return the status value
     */
    public IndexerExecutionStatus status() {
        return this.status;
    }

    /**
     * Get the error message indicating the top-level error, if any.
     *
     * @return the errorMessage value
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Get the start time of this indexer execution.
     *
     * @return the startTime value
     */
    public DateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the end time of this indexer execution, if the execution has already completed.
     *
     * @return the endTime value
     */
    public DateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the item-level indexing errors.
     *
     * @return the errors value
     */
    public List<ItemError> errors() {
        return this.errors;
    }

    /**
     * Get the item-level indexing warnings.
     *
     * @return the warnings value
     */
    public List<ItemWarning> warnings() {
        return this.warnings;
    }

    /**
     * Get the number of items that were processed during this indexer execution. This includes both successfully
     * processed items and items where indexing was attempted but failed.
     *
     * @return the itemCount value
     */
    public int itemCount() {
        return this.itemCount;
    }

    /**
     * Get the number of items that failed to be indexed during this indexer execution.
     *
     * @return the failedItemCount value
     */
    public int failedItemCount() {
        return this.failedItemCount;
    }

    /**
     * Get change tracking state with which an indexer execution started.
     *
     * @return the initialTrackingState value
     */
    public String initialTrackingState() {
        return this.initialTrackingState;
    }

    /**
     * Get change tracking state with which an indexer execution finished.
     *
     * @return the finalTrackingState value
     */
    public String finalTrackingState() {
        return this.finalTrackingState;
    }

}
