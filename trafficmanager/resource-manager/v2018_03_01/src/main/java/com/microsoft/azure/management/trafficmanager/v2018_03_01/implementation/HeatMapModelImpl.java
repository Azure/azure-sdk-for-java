/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.trafficmanager.v2018_03_01.implementation;

import com.microsoft.azure.management.trafficmanager.v2018_03_01.HeatMapModel;
import com.microsoft.azure.arm.model.implementation.IndexableRefreshableWrapperImpl;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.trafficmanager.v2018_03_01.HeatMapEndpoint;
import org.joda.time.DateTime;
import com.microsoft.azure.management.trafficmanager.v2018_03_01.TrafficFlow;

class HeatMapModelImpl extends IndexableRefreshableWrapperImpl<HeatMapModel, HeatMapModelInner> implements HeatMapModel {
    private final NetworkManager manager;
    private String resourceGroupName;
    private String profileName;

    HeatMapModelImpl(HeatMapModelInner inner,  NetworkManager manager) {
        super(null, inner);
        this.manager = manager;
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.profileName = IdParsingUtils.getValueFromIdByName(inner.id(), "trafficmanagerprofiles");
    }

    @Override
    public NetworkManager manager() {
        return this.manager;
    }

    @Override
    protected Observable<HeatMapModelInner> getInnerAsync() {
        HeatMapsInner client = this.manager().inner().heatMaps();
        return client.getAsync(this.resourceGroupName, this.profileName);
    }



    @Override
    public List<HeatMapEndpoint> endpoints() {
        return this.inner().endpoints();
    }

    @Override
    public DateTime endTime() {
        return this.inner().endTime();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public DateTime startTime() {
        return this.inner().startTime();
    }

    @Override
    public List<TrafficFlow> trafficFlows() {
        return this.inner().trafficFlows();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
