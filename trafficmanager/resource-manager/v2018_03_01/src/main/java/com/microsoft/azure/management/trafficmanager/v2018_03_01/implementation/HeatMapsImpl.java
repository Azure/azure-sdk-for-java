/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.trafficmanager.v2018_03_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.trafficmanager.v2018_03_01.HeatMaps;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.trafficmanager.v2018_03_01.HeatMapModel;

class HeatMapsImpl extends WrapperImpl<HeatMapsInner> implements HeatMaps {
    private final NetworkManager manager;

    HeatMapsImpl(NetworkManager manager) {
        super(manager.inner().heatMaps());
        this.manager = manager;
    }

    public NetworkManager manager() {
        return this.manager;
    }

    private HeatMapModelImpl wrapModel(HeatMapModelInner inner) {
        return  new HeatMapModelImpl(inner, manager());
    }

    @Override
    public Observable<HeatMapModel> getAsync(String resourceGroupName, String profileName) {
        HeatMapsInner client = this.inner();
        return client.getAsync(resourceGroupName, profileName)
        .map(new Func1<HeatMapModelInner, HeatMapModel>() {
            @Override
            public HeatMapModel call(HeatMapModelInner inner) {
                return wrapModel(inner);
            }
       });
    }

}
