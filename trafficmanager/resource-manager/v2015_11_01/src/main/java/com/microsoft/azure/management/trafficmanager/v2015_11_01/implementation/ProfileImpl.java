/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.trafficmanager.v2015_11_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.trafficmanager.v2015_11_01.Profile;
import rx.Observable;
import com.microsoft.azure.management.trafficmanager.v2015_11_01.DnsConfig;
import com.microsoft.azure.management.trafficmanager.v2015_11_01.MonitorConfig;
import java.util.List;
import java.util.ArrayList;
import com.microsoft.azure.management.trafficmanager.v2015_11_01.Endpoint;

class ProfileImpl extends GroupableResourceCoreImpl<Profile, ProfileInner, ProfileImpl, NetworkManager> implements Profile, Profile.Definition, Profile.Update {
    ProfileImpl(String name, ProfileInner inner, NetworkManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<Profile> createResourceAsync() {
        ProfilesInner client = this.manager().inner().profiles();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Profile> updateResourceAsync() {
        ProfilesInner client = this.manager().inner().profiles();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ProfileInner> getInnerAsync() {
        ProfilesInner client = this.manager().inner().profiles();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public DnsConfig dnsConfig() {
        return this.inner().dnsConfig();
    }

    @Override
    public List<Endpoint> endpoints() {
        List<Endpoint> lst = new ArrayList<Endpoint>();
        if (this.inner().endpoints() != null) {
            for (EndpointInner inner : this.inner().endpoints()) {
                lst.add( new EndpointImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public MonitorConfig monitorConfig() {
        return this.inner().monitorConfig();
    }

    @Override
    public String profileStatus() {
        return this.inner().profileStatus();
    }

    @Override
    public String trafficRoutingMethod() {
        return this.inner().trafficRoutingMethod();
    }

    @Override
    public ProfileImpl withDnsConfig(DnsConfig dnsConfig) {
        this.inner().withDnsConfig(dnsConfig);
        return this;
    }

    @Override
    public ProfileImpl withEndpoints(List<EndpointInner> endpoints) {
        this.inner().withEndpoints(endpoints);
        return this;
    }

    @Override
    public ProfileImpl withMonitorConfig(MonitorConfig monitorConfig) {
        this.inner().withMonitorConfig(monitorConfig);
        return this;
    }

    @Override
    public ProfileImpl withProfileStatus(String profileStatus) {
        this.inner().withProfileStatus(profileStatus);
        return this;
    }

    @Override
    public ProfileImpl withTrafficRoutingMethod(String trafficRoutingMethod) {
        this.inner().withTrafficRoutingMethod(trafficRoutingMethod);
        return this;
    }

}
