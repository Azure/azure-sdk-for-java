/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.ManagementAssociations;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.ManagementAssociation;

class ManagementAssociationsImpl extends WrapperImpl<ManagementAssociationsInner> implements ManagementAssociations {
    private final OperationsManagementManager manager;

    ManagementAssociationsImpl(OperationsManagementManager manager) {
        super(manager.inner().managementAssociations());
        this.manager = manager;
    }

    public OperationsManagementManager manager() {
        return this.manager;
    }

    @Override
    public ManagementAssociationImpl define(String name) {
        return wrapModel(name);
    }

    private ManagementAssociationImpl wrapModel(ManagementAssociationInner inner) {
        return  new ManagementAssociationImpl(inner, manager());
    }

    private ManagementAssociationImpl wrapModel(String name) {
        return new ManagementAssociationImpl(name, this.manager());
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String managementAssociationName) {
        ManagementAssociationsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, managementAssociationName).toCompletable();
    }

    @Override
    public Observable<ManagementAssociation> getAsync(String resourceGroupName, String managementAssociationName) {
        ManagementAssociationsInner client = this.inner();
        return client.getAsync(resourceGroupName, managementAssociationName)
        .map(new Func1<ManagementAssociationInner, ManagementAssociation>() {
            @Override
            public ManagementAssociation call(ManagementAssociationInner inner) {
                return new ManagementAssociationImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ManagementAssociation> listAsync() {
        ManagementAssociationsInner client = this.inner();
        return client.listAsync()
        .flatMap(new Func1<Page<ManagementAssociationInner>, Observable<ManagementAssociationInner>>() {
            @Override
            public Observable<ManagementAssociationInner> call(Page<ManagementAssociationInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<ManagementAssociationInner, ManagementAssociation>() {
            @Override
            public ManagementAssociation call(ManagementAssociationInner inner) {
                return new ManagementAssociationImpl(inner, manager());
            }
        });
    }

}
