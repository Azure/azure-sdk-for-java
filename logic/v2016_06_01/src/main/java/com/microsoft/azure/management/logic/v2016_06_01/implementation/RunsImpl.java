/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.logic.v2016_06_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.logic.v2016_06_01.Runs;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import rx.Completable;
import com.microsoft.azure.management.logic.v2016_06_01.WorkflowWorkflowRun;
import com.microsoft.azure.management.logic.v2016_06_01.Actions;
import com.microsoft.azure.management.logic.v2016_06_01.Operations;

class RunsImpl extends WrapperImpl<WorkflowRunsInner> implements Runs {
    private final LogicManager manager;

    RunsImpl(LogicManager manager) {
        super(manager.inner().workflowRuns());
        this.manager = manager;
    }

    @Override
    public Actions actions() {
        Actions accessor = this.manager().actions();
        return accessor;
    }

    @Override
    public Operations operations() {
        Operations accessor = this.manager().operations();
        return accessor;
    }

    public LogicManager manager() {
        return this.manager;
    }

    private WorkflowWorkflowRunImpl wrapModel(WorkflowRunInner inner) {
        return  new WorkflowWorkflowRunImpl(inner, manager());
    }

    @Override
    public Completable cancelAsync(String resourceGroupName, String workflowName, String runName) {
        WorkflowRunsInner client = this.inner();
        return client.cancelAsync(resourceGroupName, workflowName, runName).toCompletable();
    }

    private Observable<Page<WorkflowRunInner>> listByWorkflowNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WorkflowRunsInner client = this.inner();
        return client.listNextAsync(nextLink)
        .flatMap(new Func1<Page<WorkflowRunInner>, Observable<Page<WorkflowRunInner>>>() {
            @Override
            public Observable<Page<WorkflowRunInner>> call(Page<WorkflowRunInner> page) {
                return Observable.just(page).concatWith(listByWorkflowNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<WorkflowWorkflowRun> listByWorkflowAsync(final String resourceGroupName, final String workflowName) {
        WorkflowRunsInner client = this.inner();
        return client.listAsync(resourceGroupName, workflowName)
        .flatMap(new Func1<Page<WorkflowRunInner>, Observable<Page<WorkflowRunInner>>>() {
            @Override
            public Observable<Page<WorkflowRunInner>> call(Page<WorkflowRunInner> page) {
                return listByWorkflowNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<WorkflowRunInner>, Iterable<WorkflowRunInner>>() {
            @Override
            public Iterable<WorkflowRunInner> call(Page<WorkflowRunInner> page) {
                return page.items();
            }
       })
        .map(new Func1<WorkflowRunInner, WorkflowWorkflowRun>() {
            @Override
            public WorkflowWorkflowRun call(WorkflowRunInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Observable<WorkflowWorkflowRun> getByWorkflowAsync(String resourceGroupName, String workflowName, String runName) {
        WorkflowRunsInner client = this.inner();
        return client.getAsync(resourceGroupName, workflowName, runName)
        .map(new Func1<WorkflowRunInner, WorkflowWorkflowRun>() {
            @Override
            public WorkflowWorkflowRun call(WorkflowRunInner inner) {
                return wrapModel(inner);
            }
       });
    }

}
