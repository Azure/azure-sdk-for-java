/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.logic.v2016_06_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.logic.v2016_06_01.WorkflowTriggers;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import rx.Completable;
import com.microsoft.azure.management.logic.v2016_06_01.WorkflowTriggerCallbackUrl;
import com.microsoft.azure.management.logic.v2016_06_01.WorkflowTrigger;
import com.microsoft.azure.management.logic.v2016_06_01.WorkflowSchemas;
import com.microsoft.azure.management.logic.v2016_06_01.Histories;

class WorkflowTriggersImpl extends WrapperImpl<WorkflowTriggersInner> implements WorkflowTriggers {
    private final LogicManager manager;

    WorkflowTriggersImpl(LogicManager manager) {
        super(manager.inner().workflowTriggers());
        this.manager = manager;
    }

    @Override
    public WorkflowSchemas schemas() {
        WorkflowSchemas accessor = this.manager().workflowSchemas();
        return accessor;
    }

    @Override
    public Histories histories() {
        Histories accessor = this.manager().histories();
        return accessor;
    }

    public LogicManager manager() {
        return this.manager;
    }

    private WorkflowTriggerImpl wrapModel(WorkflowTriggerInner inner) {
        return  new WorkflowTriggerImpl(inner, manager());
    }

    @Override
    public Completable resetAsync(String resourceGroupName, String workflowName, String triggerName) {
        WorkflowTriggersInner client = this.inner();
        return client.resetAsync(resourceGroupName, workflowName, triggerName).toCompletable();
    }

    @Override
    public Completable runAsync(String resourceGroupName, String workflowName, String triggerName) {
        WorkflowTriggersInner client = this.inner();
        return client.runAsync(resourceGroupName, workflowName, triggerName).toCompletable();
    }

    @Override
    public Completable setStateAsync(String resourceGroupName, String workflowName, String triggerName, WorkflowTriggerInner source) {
        WorkflowTriggersInner client = this.inner();
        return client.setStateAsync(resourceGroupName, workflowName, triggerName, source).toCompletable();
    }

    @Override
    public Observable<WorkflowTriggerCallbackUrl> listCallbackUrlAsync(String resourceGroupName, String workflowName, String triggerName) {
        WorkflowTriggersInner client = this.inner();
        return client.listCallbackUrlAsync(resourceGroupName, workflowName, triggerName)
        .map(new Func1<WorkflowTriggerCallbackUrlInner, WorkflowTriggerCallbackUrl>() {
            @Override
            public WorkflowTriggerCallbackUrl call(WorkflowTriggerCallbackUrlInner inner) {
                return new WorkflowTriggerCallbackUrlImpl(inner, manager());
            }
        });
    }

    private Observable<Page<WorkflowTriggerInner>> listByWorkflowNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WorkflowTriggersInner client = this.inner();
        return client.listNextAsync(nextLink)
        .flatMap(new Func1<Page<WorkflowTriggerInner>, Observable<Page<WorkflowTriggerInner>>>() {
            @Override
            public Observable<Page<WorkflowTriggerInner>> call(Page<WorkflowTriggerInner> page) {
                return Observable.just(page).concatWith(listByWorkflowNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<WorkflowTrigger> listByWorkflowAsync(final String resourceGroupName, final String workflowName) {
        WorkflowTriggersInner client = this.inner();
        return client.listAsync(resourceGroupName, workflowName)
        .flatMap(new Func1<Page<WorkflowTriggerInner>, Observable<Page<WorkflowTriggerInner>>>() {
            @Override
            public Observable<Page<WorkflowTriggerInner>> call(Page<WorkflowTriggerInner> page) {
                return listByWorkflowNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<WorkflowTriggerInner>, Iterable<WorkflowTriggerInner>>() {
            @Override
            public Iterable<WorkflowTriggerInner> call(Page<WorkflowTriggerInner> page) {
                return page.items();
            }
       })
        .map(new Func1<WorkflowTriggerInner, WorkflowTrigger>() {
            @Override
            public WorkflowTrigger call(WorkflowTriggerInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Observable<WorkflowTrigger> getByWorkflowAsync(String resourceGroupName, String workflowName, String triggerName) {
        WorkflowTriggersInner client = this.inner();
        return client.getAsync(resourceGroupName, workflowName, triggerName)
        .map(new Func1<WorkflowTriggerInner, WorkflowTrigger>() {
            @Override
            public WorkflowTrigger call(WorkflowTriggerInner inner) {
                return wrapModel(inner);
            }
       });
    }

}
