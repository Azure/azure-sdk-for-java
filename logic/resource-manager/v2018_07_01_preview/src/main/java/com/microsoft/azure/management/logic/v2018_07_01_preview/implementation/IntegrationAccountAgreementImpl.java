/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.logic.v2018_07_01_preview.implementation;

import com.microsoft.azure.management.logic.v2018_07_01_preview.IntegrationAccountAgreement;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.Map;
import org.joda.time.DateTime;
import com.microsoft.azure.management.logic.v2018_07_01_preview.AgreementType;
import com.microsoft.azure.management.logic.v2018_07_01_preview.BusinessIdentity;
import com.microsoft.azure.management.logic.v2018_07_01_preview.AgreementContent;

class IntegrationAccountAgreementImpl extends CreatableUpdatableImpl<IntegrationAccountAgreement, IntegrationAccountAgreementInner, IntegrationAccountAgreementImpl> implements IntegrationAccountAgreement, IntegrationAccountAgreement.Definition, IntegrationAccountAgreement.Update {
    private final LogicManager manager;
    private String resourceGroupName;
    private String integrationAccountName;
    private String agreementName;

    IntegrationAccountAgreementImpl(String name, LogicManager manager) {
        super(name, new IntegrationAccountAgreementInner());
        this.manager = manager;
        // Set resource name
        this.agreementName = name;
        //
    }

    IntegrationAccountAgreementImpl(IntegrationAccountAgreementInner inner, LogicManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.agreementName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.integrationAccountName = IdParsingUtils.getValueFromIdByName(inner.id(), "integrationAccounts");
        this.agreementName = IdParsingUtils.getValueFromIdByName(inner.id(), "agreements");
        //
    }

    @Override
    public LogicManager manager() {
        return this.manager;
    }

    @Override
    public Observable<IntegrationAccountAgreement> createResourceAsync() {
        IntegrationAccountAgreementsInner client = this.manager().inner().integrationAccountAgreements();
        return client.createOrUpdateAsync(this.resourceGroupName, this.integrationAccountName, this.agreementName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<IntegrationAccountAgreement> updateResourceAsync() {
        IntegrationAccountAgreementsInner client = this.manager().inner().integrationAccountAgreements();
        return client.createOrUpdateAsync(this.resourceGroupName, this.integrationAccountName, this.agreementName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<IntegrationAccountAgreementInner> getInnerAsync() {
        IntegrationAccountAgreementsInner client = this.manager().inner().integrationAccountAgreements();
        return client.getAsync(this.resourceGroupName, this.integrationAccountName, this.agreementName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public AgreementType agreementType() {
        return this.inner().agreementType();
    }

    @Override
    public DateTime changedTime() {
        return this.inner().changedTime();
    }

    @Override
    public AgreementContent content() {
        return this.inner().content();
    }

    @Override
    public DateTime createdTime() {
        return this.inner().createdTime();
    }

    @Override
    public BusinessIdentity guestIdentity() {
        return this.inner().guestIdentity();
    }

    @Override
    public String guestPartner() {
        return this.inner().guestPartner();
    }

    @Override
    public BusinessIdentity hostIdentity() {
        return this.inner().hostIdentity();
    }

    @Override
    public String hostPartner() {
        return this.inner().hostPartner();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public Object metadata() {
        return this.inner().metadata();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public IntegrationAccountAgreementImpl withExistingIntegrationAccount(String resourceGroupName, String integrationAccountName) {
        this.resourceGroupName = resourceGroupName;
        this.integrationAccountName = integrationAccountName;
        return this;
    }

    @Override
    public IntegrationAccountAgreementImpl withAgreementType(AgreementType agreementType) {
        this.inner().withAgreementType(agreementType);
        return this;
    }

    @Override
    public IntegrationAccountAgreementImpl withContent(AgreementContent content) {
        this.inner().withContent(content);
        return this;
    }

    @Override
    public IntegrationAccountAgreementImpl withGuestIdentity(BusinessIdentity guestIdentity) {
        this.inner().withGuestIdentity(guestIdentity);
        return this;
    }

    @Override
    public IntegrationAccountAgreementImpl withGuestPartner(String guestPartner) {
        this.inner().withGuestPartner(guestPartner);
        return this;
    }

    @Override
    public IntegrationAccountAgreementImpl withHostIdentity(BusinessIdentity hostIdentity) {
        this.inner().withHostIdentity(hostIdentity);
        return this;
    }

    @Override
    public IntegrationAccountAgreementImpl withHostPartner(String hostPartner) {
        this.inner().withHostPartner(hostPartner);
        return this;
    }

    @Override
    public IntegrationAccountAgreementImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public IntegrationAccountAgreementImpl withMetadata(Object metadata) {
        this.inner().withMetadata(metadata);
        return this;
    }

    @Override
    public IntegrationAccountAgreementImpl withTags(Map<String, String> tags) {
        this.inner().withTags(tags);
        return this;
    }

}
