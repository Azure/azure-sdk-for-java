/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.logic.v2018_07_01_preview.implementation;

import org.joda.time.DateTime;
import com.microsoft.azure.management.logic.v2018_07_01_preview.WorkflowStatus;
import com.microsoft.azure.management.logic.v2018_07_01_preview.Correlation;
import com.microsoft.azure.management.logic.v2018_07_01_preview.ResourceReference;
import com.microsoft.azure.management.logic.v2018_07_01_preview.WorkflowRunTrigger;
import java.util.Map;
import com.microsoft.azure.management.logic.v2018_07_01_preview.WorkflowOutputParameter;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.SubResource;

/**
 * The workflow run.
 */
@JsonFlatten
public class WorkflowRunInner extends SubResource {
    /**
     * Gets the wait end time.
     */
    @JsonProperty(value = "properties.waitEndTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime waitEndTime;

    /**
     * Gets the start time.
     */
    @JsonProperty(value = "properties.startTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime startTime;

    /**
     * Gets the end time.
     */
    @JsonProperty(value = "properties.endTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime endTime;

    /**
     * Gets the status. Possible values include: 'NotSpecified', 'Paused',
     * 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled',
     * 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'Ignored'.
     */
    @JsonProperty(value = "properties.status", access = JsonProperty.Access.WRITE_ONLY)
    private WorkflowStatus status;

    /**
     * Gets the code.
     */
    @JsonProperty(value = "properties.code", access = JsonProperty.Access.WRITE_ONLY)
    private String code;

    /**
     * Gets the error.
     */
    @JsonProperty(value = "properties.error", access = JsonProperty.Access.WRITE_ONLY)
    private Object error;

    /**
     * Gets the correlation id.
     */
    @JsonProperty(value = "properties.correlationId", access = JsonProperty.Access.WRITE_ONLY)
    private String correlationId;

    /**
     * The run correlation.
     */
    @JsonProperty(value = "properties.correlation")
    private Correlation correlation;

    /**
     * Gets the reference to workflow version.
     */
    @JsonProperty(value = "properties.workflow", access = JsonProperty.Access.WRITE_ONLY)
    private ResourceReference workflow;

    /**
     * Gets the fired trigger.
     */
    @JsonProperty(value = "properties.trigger", access = JsonProperty.Access.WRITE_ONLY)
    private WorkflowRunTrigger trigger;

    /**
     * Gets the outputs.
     */
    @JsonProperty(value = "properties.outputs", access = JsonProperty.Access.WRITE_ONLY)
    private Map<String, WorkflowOutputParameter> outputs;

    /**
     * Gets the response of the flow run.
     */
    @JsonProperty(value = "properties.response", access = JsonProperty.Access.WRITE_ONLY)
    private WorkflowRunTrigger response;

    /**
     * Gets the workflow run name.
     */
    @JsonProperty(value = "name", access = JsonProperty.Access.WRITE_ONLY)
    private String name;

    /**
     * Gets the workflow run type.
     */
    @JsonProperty(value = "type", access = JsonProperty.Access.WRITE_ONLY)
    private String type;

    /**
     * Get gets the wait end time.
     *
     * @return the waitEndTime value
     */
    public DateTime waitEndTime() {
        return this.waitEndTime;
    }

    /**
     * Get gets the start time.
     *
     * @return the startTime value
     */
    public DateTime startTime() {
        return this.startTime;
    }

    /**
     * Get gets the end time.
     *
     * @return the endTime value
     */
    public DateTime endTime() {
        return this.endTime;
    }

    /**
     * Get gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'Ignored'.
     *
     * @return the status value
     */
    public WorkflowStatus status() {
        return this.status;
    }

    /**
     * Get gets the code.
     *
     * @return the code value
     */
    public String code() {
        return this.code;
    }

    /**
     * Get gets the error.
     *
     * @return the error value
     */
    public Object error() {
        return this.error;
    }

    /**
     * Get gets the correlation id.
     *
     * @return the correlationId value
     */
    public String correlationId() {
        return this.correlationId;
    }

    /**
     * Get the run correlation.
     *
     * @return the correlation value
     */
    public Correlation correlation() {
        return this.correlation;
    }

    /**
     * Set the run correlation.
     *
     * @param correlation the correlation value to set
     * @return the WorkflowRunInner object itself.
     */
    public WorkflowRunInner withCorrelation(Correlation correlation) {
        this.correlation = correlation;
        return this;
    }

    /**
     * Get gets the reference to workflow version.
     *
     * @return the workflow value
     */
    public ResourceReference workflow() {
        return this.workflow;
    }

    /**
     * Get gets the fired trigger.
     *
     * @return the trigger value
     */
    public WorkflowRunTrigger trigger() {
        return this.trigger;
    }

    /**
     * Get gets the outputs.
     *
     * @return the outputs value
     */
    public Map<String, WorkflowOutputParameter> outputs() {
        return this.outputs;
    }

    /**
     * Get gets the response of the flow run.
     *
     * @return the response value
     */
    public WorkflowRunTrigger response() {
        return this.response;
    }

    /**
     * Get gets the workflow run name.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Get gets the workflow run type.
     *
     * @return the type value
     */
    public String type() {
        return this.type;
    }

}
