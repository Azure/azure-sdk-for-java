/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.scheduler.v2016_03_01.implementation;

import com.microsoft.azure.management.scheduler.v2016_03_01.JobCollectionDefinition;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.Map;
import com.microsoft.azure.management.scheduler.v2016_03_01.JobCollectionProperties;

class JobCollectionDefinitionImpl extends CreatableUpdatableImpl<JobCollectionDefinition, JobCollectionDefinitionInner, JobCollectionDefinitionImpl> implements JobCollectionDefinition, JobCollectionDefinition.Definition, JobCollectionDefinition.Update {
    private String resourceGroupName;
    private String jobCollectionName;
    private final SchedulerManager manager;

    JobCollectionDefinitionImpl(String name, SchedulerManager manager) {
        super(name, new JobCollectionDefinitionInner());
        this.manager = manager;
        // Set resource name
        this.jobCollectionName = name;
        //
    }

    JobCollectionDefinitionImpl(JobCollectionDefinitionInner inner, SchedulerManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.jobCollectionName = inner.name();
        // resource ancestor names
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.jobCollectionName = IdParsingUtils.getValueFromIdByName(inner.id(), "jobCollections");
        //
    }

    @Override
    public SchedulerManager manager() {
        return this.manager;
    }

    @Override
    public Observable<JobCollectionDefinition> createResourceAsync() {
        JobCollectionsInner client = this.manager().inner().jobCollections();
        return client.createOrUpdateAsync(this.resourceGroupName, this.jobCollectionName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<JobCollectionDefinition> updateResourceAsync() {
        JobCollectionsInner client = this.manager().inner().jobCollections();
        return client.patchAsync(this.resourceGroupName, this.jobCollectionName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<JobCollectionDefinitionInner> getInnerAsync() {
        JobCollectionsInner client = this.manager().inner().jobCollections();
        return client.getByResourceGroupAsync(this.resourceGroupName, this.jobCollectionName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public JobCollectionProperties properties() {
        return this.inner().properties();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().tags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public JobCollectionDefinitionImpl withResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    @Override
    public JobCollectionDefinitionImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public JobCollectionDefinitionImpl withName(String name) {
        this.inner().withName(name);
        return this;
    }

    @Override
    public JobCollectionDefinitionImpl withProperties(JobCollectionProperties properties) {
        this.inner().withProperties(properties);
        return this;
    }

    @Override
    public JobCollectionDefinitionImpl withTags(Map<String, String> tags) {
        this.inner().withTags(tags);
        return this;
    }

}
