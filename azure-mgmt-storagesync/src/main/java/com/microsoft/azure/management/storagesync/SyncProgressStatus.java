/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storagesync;

import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Sync Session status object.
 */
public class SyncProgressStatus {
    /**
     * Progress timestamp.
     */
    @JsonProperty(value = "progressTimestamp")
    private DateTime progressTimestamp;

    /**
     * Sync direction. Possible values include: 'none', 'initialize',
     * 'download', 'upload', 'recall'.
     */
    @JsonProperty(value = "syncDirection")
    private String syncDirection;

    /**
     * Per item error count.
     */
    @JsonProperty(value = "perItemErrorCount")
    private Integer perItemErrorCount;

    /**
     * Applied item count.
     */
    @JsonProperty(value = "appliedItemCount")
    private Integer appliedItemCount;

    /**
     * Total item count.
     */
    @JsonProperty(value = "totalItemCount")
    private Integer totalItemCount;

    /**
     * Applied bytes.
     */
    @JsonProperty(value = "appliedBytes")
    private Integer appliedBytes;

    /**
     * Total bytes.
     */
    @JsonProperty(value = "totalBytes")
    private Integer totalBytes;

    /**
     * Get progress timestamp.
     *
     * @return the progressTimestamp value
     */
    public DateTime progressTimestamp() {
        return this.progressTimestamp;
    }

    /**
     * Set progress timestamp.
     *
     * @param progressTimestamp the progressTimestamp value to set
     * @return the SyncProgressStatus object itself.
     */
    public SyncProgressStatus withProgressTimestamp(DateTime progressTimestamp) {
        this.progressTimestamp = progressTimestamp;
        return this;
    }

    /**
     * Get sync direction. Possible values include: 'none', 'initialize', 'download', 'upload', 'recall'.
     *
     * @return the syncDirection value
     */
    public String syncDirection() {
        return this.syncDirection;
    }

    /**
     * Set sync direction. Possible values include: 'none', 'initialize', 'download', 'upload', 'recall'.
     *
     * @param syncDirection the syncDirection value to set
     * @return the SyncProgressStatus object itself.
     */
    public SyncProgressStatus withSyncDirection(String syncDirection) {
        this.syncDirection = syncDirection;
        return this;
    }

    /**
     * Get per item error count.
     *
     * @return the perItemErrorCount value
     */
    public Integer perItemErrorCount() {
        return this.perItemErrorCount;
    }

    /**
     * Set per item error count.
     *
     * @param perItemErrorCount the perItemErrorCount value to set
     * @return the SyncProgressStatus object itself.
     */
    public SyncProgressStatus withPerItemErrorCount(Integer perItemErrorCount) {
        this.perItemErrorCount = perItemErrorCount;
        return this;
    }

    /**
     * Get applied item count.
     *
     * @return the appliedItemCount value
     */
    public Integer appliedItemCount() {
        return this.appliedItemCount;
    }

    /**
     * Set applied item count.
     *
     * @param appliedItemCount the appliedItemCount value to set
     * @return the SyncProgressStatus object itself.
     */
    public SyncProgressStatus withAppliedItemCount(Integer appliedItemCount) {
        this.appliedItemCount = appliedItemCount;
        return this;
    }

    /**
     * Get total item count.
     *
     * @return the totalItemCount value
     */
    public Integer totalItemCount() {
        return this.totalItemCount;
    }

    /**
     * Set total item count.
     *
     * @param totalItemCount the totalItemCount value to set
     * @return the SyncProgressStatus object itself.
     */
    public SyncProgressStatus withTotalItemCount(Integer totalItemCount) {
        this.totalItemCount = totalItemCount;
        return this;
    }

    /**
     * Get applied bytes.
     *
     * @return the appliedBytes value
     */
    public Integer appliedBytes() {
        return this.appliedBytes;
    }

    /**
     * Set applied bytes.
     *
     * @param appliedBytes the appliedBytes value to set
     * @return the SyncProgressStatus object itself.
     */
    public SyncProgressStatus withAppliedBytes(Integer appliedBytes) {
        this.appliedBytes = appliedBytes;
        return this;
    }

    /**
     * Get total bytes.
     *
     * @return the totalBytes value
     */
    public Integer totalBytes() {
        return this.totalBytes;
    }

    /**
     * Set total bytes.
     *
     * @param totalBytes the totalBytes value to set
     * @return the SyncProgressStatus object itself.
     */
    public SyncProgressStatus withTotalBytes(Integer totalBytes) {
        this.totalBytes = totalBytes;
        return this;
    }

}
