/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storagesync;

import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ServerEndpoint Health object.
 */
public class ServerEndpointHealth {
    /**
     * Download Health Status. Possible values include: 'Healthy', 'Error',
     * 'SyncBlockedForRestore', 'SyncBlockedForChangeDetectionPostRestore',
     * 'NoActivity'.
     */
    @JsonProperty(value = "downloadHealth")
    private String downloadHealth;

    /**
     * Upload Health Status. Possible values include: 'Healthy', 'Error',
     * 'SyncBlockedForRestore', 'SyncBlockedForChangeDetectionPostRestore',
     * 'NoActivity'.
     */
    @JsonProperty(value = "uploadHealth")
    private String uploadHealth;

    /**
     * Combined Health Status. Possible values include: 'Healthy', 'Error',
     * 'SyncBlockedForRestore', 'SyncBlockedForChangeDetectionPostRestore',
     * 'NoActivity'.
     */
    @JsonProperty(value = "combinedHealth")
    private String combinedHealth;

    /**
     * Last Updated Timestamp.
     */
    @JsonProperty(value = "lastUpdatedTimestamp")
    private DateTime lastUpdatedTimestamp;

    /**
     * Upload Status.
     */
    @JsonProperty(value = "uploadStatus")
    private SyncSessionStatus uploadStatus;

    /**
     * Download Status.
     */
    @JsonProperty(value = "downloadStatus")
    private SyncSessionStatus downloadStatus;

    /**
     * Current progress.
     */
    @JsonProperty(value = "currentProgress")
    private SyncProgressStatus currentProgress;

    /**
     * Offline Data Transfer State. Possible values include: 'InProgress',
     * 'Stopping', 'NotRunning', 'Complete'.
     */
    @JsonProperty(value = "offlineDataTransferStatus")
    private String offlineDataTransferStatus;

    /**
     * Get download Health Status. Possible values include: 'Healthy', 'Error', 'SyncBlockedForRestore', 'SyncBlockedForChangeDetectionPostRestore', 'NoActivity'.
     *
     * @return the downloadHealth value
     */
    public String downloadHealth() {
        return this.downloadHealth;
    }

    /**
     * Set download Health Status. Possible values include: 'Healthy', 'Error', 'SyncBlockedForRestore', 'SyncBlockedForChangeDetectionPostRestore', 'NoActivity'.
     *
     * @param downloadHealth the downloadHealth value to set
     * @return the ServerEndpointHealth object itself.
     */
    public ServerEndpointHealth withDownloadHealth(String downloadHealth) {
        this.downloadHealth = downloadHealth;
        return this;
    }

    /**
     * Get upload Health Status. Possible values include: 'Healthy', 'Error', 'SyncBlockedForRestore', 'SyncBlockedForChangeDetectionPostRestore', 'NoActivity'.
     *
     * @return the uploadHealth value
     */
    public String uploadHealth() {
        return this.uploadHealth;
    }

    /**
     * Set upload Health Status. Possible values include: 'Healthy', 'Error', 'SyncBlockedForRestore', 'SyncBlockedForChangeDetectionPostRestore', 'NoActivity'.
     *
     * @param uploadHealth the uploadHealth value to set
     * @return the ServerEndpointHealth object itself.
     */
    public ServerEndpointHealth withUploadHealth(String uploadHealth) {
        this.uploadHealth = uploadHealth;
        return this;
    }

    /**
     * Get combined Health Status. Possible values include: 'Healthy', 'Error', 'SyncBlockedForRestore', 'SyncBlockedForChangeDetectionPostRestore', 'NoActivity'.
     *
     * @return the combinedHealth value
     */
    public String combinedHealth() {
        return this.combinedHealth;
    }

    /**
     * Set combined Health Status. Possible values include: 'Healthy', 'Error', 'SyncBlockedForRestore', 'SyncBlockedForChangeDetectionPostRestore', 'NoActivity'.
     *
     * @param combinedHealth the combinedHealth value to set
     * @return the ServerEndpointHealth object itself.
     */
    public ServerEndpointHealth withCombinedHealth(String combinedHealth) {
        this.combinedHealth = combinedHealth;
        return this;
    }

    /**
     * Get last Updated Timestamp.
     *
     * @return the lastUpdatedTimestamp value
     */
    public DateTime lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Set last Updated Timestamp.
     *
     * @param lastUpdatedTimestamp the lastUpdatedTimestamp value to set
     * @return the ServerEndpointHealth object itself.
     */
    public ServerEndpointHealth withLastUpdatedTimestamp(DateTime lastUpdatedTimestamp) {
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        return this;
    }

    /**
     * Get upload Status.
     *
     * @return the uploadStatus value
     */
    public SyncSessionStatus uploadStatus() {
        return this.uploadStatus;
    }

    /**
     * Set upload Status.
     *
     * @param uploadStatus the uploadStatus value to set
     * @return the ServerEndpointHealth object itself.
     */
    public ServerEndpointHealth withUploadStatus(SyncSessionStatus uploadStatus) {
        this.uploadStatus = uploadStatus;
        return this;
    }

    /**
     * Get download Status.
     *
     * @return the downloadStatus value
     */
    public SyncSessionStatus downloadStatus() {
        return this.downloadStatus;
    }

    /**
     * Set download Status.
     *
     * @param downloadStatus the downloadStatus value to set
     * @return the ServerEndpointHealth object itself.
     */
    public ServerEndpointHealth withDownloadStatus(SyncSessionStatus downloadStatus) {
        this.downloadStatus = downloadStatus;
        return this;
    }

    /**
     * Get current progress.
     *
     * @return the currentProgress value
     */
    public SyncProgressStatus currentProgress() {
        return this.currentProgress;
    }

    /**
     * Set current progress.
     *
     * @param currentProgress the currentProgress value to set
     * @return the ServerEndpointHealth object itself.
     */
    public ServerEndpointHealth withCurrentProgress(SyncProgressStatus currentProgress) {
        this.currentProgress = currentProgress;
        return this;
    }

    /**
     * Get offline Data Transfer State. Possible values include: 'InProgress', 'Stopping', 'NotRunning', 'Complete'.
     *
     * @return the offlineDataTransferStatus value
     */
    public String offlineDataTransferStatus() {
        return this.offlineDataTransferStatus;
    }

    /**
     * Set offline Data Transfer State. Possible values include: 'InProgress', 'Stopping', 'NotRunning', 'Complete'.
     *
     * @param offlineDataTransferStatus the offlineDataTransferStatus value to set
     * @return the ServerEndpointHealth object itself.
     */
    public ServerEndpointHealth withOfflineDataTransferStatus(String offlineDataTransferStatus) {
        this.offlineDataTransferStatus = offlineDataTransferStatus;
        return this;
    }

}
