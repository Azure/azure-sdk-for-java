/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.eventhubs.v2018_01_01_preview.implementation;

import com.microsoft.azure.management.eventhubs.v2018_01_01_preview.IpFilterRule;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.eventhubs.v2018_01_01_preview.IPAction;

class IpFilterRuleImpl extends CreatableUpdatableImpl<IpFilterRule, IpFilterRuleInner, IpFilterRuleImpl> implements IpFilterRule, IpFilterRule.Definition, IpFilterRule.Update {
    private final EventHubsManager manager;
    private String resourceGroupName;
    private String namespaceName;
    private String ipFilterRuleName;

    IpFilterRuleImpl(String name, EventHubsManager manager) {
        super(name, new IpFilterRuleInner());
        this.manager = manager;
        // Set resource name
        this.ipFilterRuleName = name;
        //
    }

    IpFilterRuleImpl(IpFilterRuleInner inner, EventHubsManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.ipFilterRuleName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.namespaceName = IdParsingUtils.getValueFromIdByName(inner.id(), "namespaces");
        this.ipFilterRuleName = IdParsingUtils.getValueFromIdByName(inner.id(), "ipfilterrules");
        //
    }

    @Override
    public EventHubsManager manager() {
        return this.manager;
    }

    @Override
    public Observable<IpFilterRule> createResourceAsync() {
        NamespacesInner client = this.manager().inner().namespaces();
        return client.createOrUpdateIpFilterRuleAsync(this.resourceGroupName, this.namespaceName, this.ipFilterRuleName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<IpFilterRule> updateResourceAsync() {
        NamespacesInner client = this.manager().inner().namespaces();
        return client.createOrUpdateIpFilterRuleAsync(this.resourceGroupName, this.namespaceName, this.ipFilterRuleName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<IpFilterRuleInner> getInnerAsync() {
        NamespacesInner client = this.manager().inner().namespaces();
        return client.getIpFilterRuleAsync(this.resourceGroupName, this.namespaceName, this.ipFilterRuleName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public IPAction action() {
        return this.inner().action();
    }

    @Override
    public String filterName() {
        return this.inner().filterName();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String ipMask() {
        return this.inner().ipMask();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public IpFilterRuleImpl withExistingNamespace(String resourceGroupName, String namespaceName) {
        this.resourceGroupName = resourceGroupName;
        this.namespaceName = namespaceName;
        return this;
    }

    @Override
    public IpFilterRuleImpl withAction(IPAction action) {
        this.inner().withAction(action);
        return this;
    }

    @Override
    public IpFilterRuleImpl withFilterName(String filterName) {
        this.inner().withFilterName(filterName);
        return this;
    }

    @Override
    public IpFilterRuleImpl withIpMask(String ipMask) {
        this.inner().withIpMask(ipMask);
        return this;
    }

}
