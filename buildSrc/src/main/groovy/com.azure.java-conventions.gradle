/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'checkstyle'
    id 'com.github.spotbugs'
    id 'com.azure.revapi'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }

    maven {
        url = uri('https://oss.sonatype.org/content/repositories/snapshots/')
    }

    maven {
        url = uri('https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-java/maven/v1')
    }
}

group = 'com.azure'

compileJava {
    exclude 'module-info.java'
    options.release = 8
    modularity.inferModulePath = false
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

task compileModuleInfoJava(type: JavaCompile) {
    classpath = files() // empty
    source = 'src/main/java/module-info.java'
    destinationDirectory = compileJava.destinationDirectory // same dir to see classes compiled by compileJava
    options.release = 9
    modularity.inferModulePath = false
    doFirst {
        options.compilerArgs = [
            '--module-path', compileJava.classpath.asPath,
        ]
    }
}

compileModuleInfoJava.dependsOn compileJava
classes.dependsOn compileModuleInfoJava

javadoc {
    exclude 'module-info.java', '**/impl/**', '**/implementation/**'
    modularity.inferModulePath = false
}

java {
    withSourcesJar()
    withJavadocJar()
}

test {
    useJUnitPlatform()
}

processResources {
    filesMatching('**.properties') {
        expand(
            'project' : [
                'artifactId' : project.name,
                'version' : project.version
            ]
        )
    }
}

checkstyle {
    configFile = file("${rootProject.projectDir}/eng/code-quality-reports/src/main/resources/checkstyle/checkstyle.xml")
    configProperties = [samedir: "${rootProject.projectDir}/eng/code-quality-reports/src/main/resources/checkstyle"]
    toolVersion "9.2"
}

dependencies {
    checkstyle project(":eng:code-quality-reports")
    spotbugs 'com.github.spotbugs:spotbugs:4.2.2'
}

spotbugs {
    effort = "max"
    excludeFilter = file("${rootProject.projectDir}/eng/code-quality-reports/src/main/resources/spotbugs/spotbugs-exclude.xml")
}

spotbugsTest.enabled = false

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.name
            from components.java
            pom {
                name = project.publishName
                description = project.publishDescription
                url = 'https://github.com/Azure/azure-sdk-for-java'
                packaging = "jar"
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'http://opensource.org/licenses/MIT'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/Azure/azure-sdk-for-java.git'
                    developerConnection = 'scm:git:https://github.com/Azure/azure-sdk-for-java.git'
                    url = 'https://github.com/Azure/azure-sdk-for-java'
                }
            }
        }
    }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

jar {
    into("META-INF/maven/$project.group/$project.name") {
        from { generatePomFileForMavenJavaPublication }
        rename ".*", "pom.xml"
    }
}

task stageArtifacts(type: Copy) {
    from(generatePomFileForMavenJavaPublication) {
        rename ".*", "${project.name}-${project.version}.pom"
    }
    from(jar)
    from(javadocJar)
    from(sourcesJar)
    into "build/artifacts"
}

build.dependsOn stageArtifacts
