import com.github.spotbugs.snom.Effort

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    `java-library`
    `maven-publish`
    checkstyle
    id("com.github.spotbugs")
    id("com.azure.revapi-conventions")
}

repositories {
    mavenLocal()
    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }

    maven {
        url = uri("https://oss.sonatype.org/content/repositories/snapshots/")
    }

    maven {
        url = uri("https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-java/maven/v1")
    }
}

group = "com.azure"

tasks.named<JavaCompile>("compileJava") {
    exclude("module-info.java")
    options.release.set(8)
    modularity.inferModulePath.set(false)
    options.encoding = "UTF-8"
}

tasks.named<JavaCompile>("compileTestJava") {
    options.encoding = "UTF-8"
}

tasks.register<JavaCompile>("compileModuleInfoJava") {
    dependsOn("compileJava")
    classpath = files() // empty
    source = fileTree("src/main/java/module-info.java")
    destinationDirectory.set(tasks.named<JavaCompile>("compileJava").get().destinationDirectory) // same dir to see classes compiled by compileJava
    options.release.set(9)
    modularity.inferModulePath.set(false)
    doFirst {
        options.compilerArgs = listOf("--module-path", tasks.named<JavaCompile>("compileJava").get().classpath.asPath)
    }
}

tasks.named("classes") {
    dependsOn("compileModuleInfoJava")
}

tasks.named<Javadoc>("javadoc") {
    exclude("module-info.java", "**/impl/**", "**/implementation/**")
    modularity.inferModulePath.set(false)
}

java {
    withSourcesJar()
    withJavadocJar()
}

tasks.named<Test>("test") {
    useJUnitPlatform()
}

tasks.named<Copy>("processResources") {
    filesMatching("**.properties") {
        expand(mapOf("project" to mapOf("artifactId" to project.name, "version" to project.version)))
    }
}

checkstyle {
    configFile = file("${rootProject.projectDir}/eng/code-quality-reports/src/main/resources/checkstyle/checkstyle.xml")
    configProperties = mapOf("samedir" to "${rootProject.projectDir}/eng/code-quality-reports/src/main/resources/checkstyle")
    toolVersion = "9.2"
}

dependencies {
    checkstyle(project(":eng:code-quality-reports"))
    spotbugs("com.github.spotbugs:spotbugs:4.2.2")
}

spotbugs {
    effort.set(Effort.MAX)
    excludeFilter.set(file("${rootProject.projectDir}/eng/code-quality-reports/src/main/resources/spotbugs/spotbugs-exclude.xml"))
}

tasks.named("spotbugsTest") {
    enabled = false
}

val publishName: String by project
val publishDescription: String by project

publishing {
    publications {
        create<MavenPublication>("mavenJava") {
            artifactId = project.name
            from(components["java"])
            pom {
                name.set(publishName)
                description.set(publishDescription)
                url.set("https://github.com/Azure/azure-sdk-for-java")
                packaging = "jar"
                licenses {
                    license {
                        name.set("The MIT License (MIT)")
                        url.set("http://opensource.org/licenses/MIT")
                    }
                }
                scm {
                    connection.set("scm:git:https://github.com/Azure/azure-sdk-for-java.git")
                    developerConnection.set("scm:git:https://github.com/Azure/azure-sdk-for-java.git")
                    url.set("https://github.com/Azure/azure-sdk-for-java")
                }
            }
        }
    }
}

tasks.withType<GenerateModuleMetadata> {
    enabled = false
}

tasks.named<Jar>("jar") {
    into("META-INF/maven/${project.group}/${project.name}") {
        from(tasks.named("generatePomFileForMavenJavaPublication"))
        rename(".*", "pom.xml")
    }
}

tasks.register<Copy>("stageArtifacts") {
    from(tasks.named("generatePomFileForMavenJavaPublication")) {
        rename(".*", "${project.name}-${project.version}.pom")
    }
    from(tasks.named("jar"))
    from(tasks.named("javadocJar"))
    from(tasks.named("sourcesJar"))
    into("build/artifacts")
}

tasks.named("build") {
    dependsOn("stageArtifacts")
}
