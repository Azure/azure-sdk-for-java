/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appservice.v2016_08_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.appservice.v2016_08_01.implementation.FunctionEnvelopeInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.appservice.v2016_08_01.implementation.AppServiceManager;
import java.util.Map;

/**
 * Type representing FunctionEnvelope.
 */
public interface FunctionEnvelope extends HasInner<FunctionEnvelopeInner>, Indexable, Refreshable<FunctionEnvelope>, Updatable<FunctionEnvelope.Update>, HasManager<AppServiceManager> {
    /**
     * @return the config value.
     */
    Object config();

    /**
     * @return the configHref value.
     */
    String configHref();

    /**
     * @return the files value.
     */
    Map<String, String> files();

    /**
     * @return the functionAppId value.
     */
    String functionAppId();

    /**
     * @return the functionEnvelopeName value.
     */
    String functionEnvelopeName();

    /**
     * @return the href value.
     */
    String href();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the kind value.
     */
    String kind();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the scriptHref value.
     */
    String scriptHref();

    /**
     * @return the scriptRootPathHref value.
     */
    String scriptRootPathHref();

    /**
     * @return the secretsFileHref value.
     */
    String secretsFileHref();

    /**
     * @return the testData value.
     */
    String testData();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the FunctionEnvelope definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithSite, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of FunctionEnvelope definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a FunctionEnvelope definition.
         */
        interface Blank extends WithSite {
        }

        /**
         * The stage of the functionenvelope definition allowing to specify Site.
         */
        interface WithSite {
           /**
            * Specifies resourceGroupName, name.
            */
            WithCreate withExistingSite(String resourceGroupName, String name);
        }

        /**
         * The stage of the functionenvelope definition allowing to specify Config.
         */
        interface WithConfig {
            /**
             * Specifies config.
             */
            WithCreate withConfig(Object config);
        }

        /**
         * The stage of the functionenvelope definition allowing to specify ConfigHref.
         */
        interface WithConfigHref {
            /**
             * Specifies configHref.
             */
            WithCreate withConfigHref(String configHref);
        }

        /**
         * The stage of the functionenvelope definition allowing to specify Files.
         */
        interface WithFiles {
            /**
             * Specifies files.
             */
            WithCreate withFiles(Map<String, String> files);
        }

        /**
         * The stage of the functionenvelope definition allowing to specify Href.
         */
        interface WithHref {
            /**
             * Specifies href.
             */
            WithCreate withHref(String href);
        }

        /**
         * The stage of the functionenvelope definition allowing to specify Kind.
         */
        interface WithKind {
            /**
             * Specifies kind.
             */
            WithCreate withKind(String kind);
        }

        /**
         * The stage of the functionenvelope definition allowing to specify ScriptHref.
         */
        interface WithScriptHref {
            /**
             * Specifies scriptHref.
             */
            WithCreate withScriptHref(String scriptHref);
        }

        /**
         * The stage of the functionenvelope definition allowing to specify ScriptRootPathHref.
         */
        interface WithScriptRootPathHref {
            /**
             * Specifies scriptRootPathHref.
             */
            WithCreate withScriptRootPathHref(String scriptRootPathHref);
        }

        /**
         * The stage of the functionenvelope definition allowing to specify SecretsFileHref.
         */
        interface WithSecretsFileHref {
            /**
             * Specifies secretsFileHref.
             */
            WithCreate withSecretsFileHref(String secretsFileHref);
        }

        /**
         * The stage of the functionenvelope definition allowing to specify TestData.
         */
        interface WithTestData {
            /**
             * Specifies testData.
             */
            WithCreate withTestData(String testData);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<FunctionEnvelope>, DefinitionStages.WithConfig, DefinitionStages.WithConfigHref, DefinitionStages.WithFiles, DefinitionStages.WithHref, DefinitionStages.WithKind, DefinitionStages.WithScriptHref, DefinitionStages.WithScriptRootPathHref, DefinitionStages.WithSecretsFileHref, DefinitionStages.WithTestData {
        }
    }
    /**
     * The template for a FunctionEnvelope update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<FunctionEnvelope>, UpdateStages.WithConfig, UpdateStages.WithConfigHref, UpdateStages.WithFiles, UpdateStages.WithHref, UpdateStages.WithKind, UpdateStages.WithScriptHref, UpdateStages.WithScriptRootPathHref, UpdateStages.WithSecretsFileHref, UpdateStages.WithTestData {
    }

    /**
     * Grouping of FunctionEnvelope update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the functionenvelope update allowing to specify Config.
         */
        interface WithConfig {
            /**
             * Specifies config.
             */
            Update withConfig(Object config);
        }

        /**
         * The stage of the functionenvelope update allowing to specify ConfigHref.
         */
        interface WithConfigHref {
            /**
             * Specifies configHref.
             */
            Update withConfigHref(String configHref);
        }

        /**
         * The stage of the functionenvelope update allowing to specify Files.
         */
        interface WithFiles {
            /**
             * Specifies files.
             */
            Update withFiles(Map<String, String> files);
        }

        /**
         * The stage of the functionenvelope update allowing to specify Href.
         */
        interface WithHref {
            /**
             * Specifies href.
             */
            Update withHref(String href);
        }

        /**
         * The stage of the functionenvelope update allowing to specify Kind.
         */
        interface WithKind {
            /**
             * Specifies kind.
             */
            Update withKind(String kind);
        }

        /**
         * The stage of the functionenvelope update allowing to specify ScriptHref.
         */
        interface WithScriptHref {
            /**
             * Specifies scriptHref.
             */
            Update withScriptHref(String scriptHref);
        }

        /**
         * The stage of the functionenvelope update allowing to specify ScriptRootPathHref.
         */
        interface WithScriptRootPathHref {
            /**
             * Specifies scriptRootPathHref.
             */
            Update withScriptRootPathHref(String scriptRootPathHref);
        }

        /**
         * The stage of the functionenvelope update allowing to specify SecretsFileHref.
         */
        interface WithSecretsFileHref {
            /**
             * Specifies secretsFileHref.
             */
            Update withSecretsFileHref(String secretsFileHref);
        }

        /**
         * The stage of the functionenvelope update allowing to specify TestData.
         */
        interface WithTestData {
            /**
             * Specifies testData.
             */
            Update withTestData(String testData);
        }

    }
}
