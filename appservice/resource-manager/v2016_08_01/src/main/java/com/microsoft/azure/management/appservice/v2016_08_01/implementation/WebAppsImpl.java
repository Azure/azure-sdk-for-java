/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.appservice.v2016_08_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.appservice.v2016_08_01.WebApps;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.appservice.v2016_08_01.Sites;
import com.microsoft.azure.Page;
import rx.Completable;
import com.microsoft.azure.management.appservice.v2016_08_01.CustomHostnameAnalysisResult;
import com.microsoft.azure.management.appservice.v2016_08_01.BackupItem;
import com.microsoft.azure.management.appservice.v2016_08_01.SiteConfigResource;
import com.microsoft.azure.management.appservice.v2016_08_01.BackupRequest;
import com.microsoft.azure.management.appservice.v2016_08_01.StringDictionary;
import com.microsoft.azure.management.appservice.v2016_08_01.RelayServiceConnectionEntity;
import com.microsoft.azure.management.appservice.v2016_08_01.SiteCloneability;
import com.microsoft.azure.management.appservice.v2016_08_01.FunctionSecrets;
import com.microsoft.azure.management.appservice.v2016_08_01.StorageMigrationResponse;
import com.microsoft.azure.management.appservice.v2016_08_01.Operation;
import com.microsoft.azure.management.appservice.v2016_08_01.SitePhpErrorLogFlag;
import com.microsoft.azure.management.appservice.v2016_08_01.SlotDifference;
import com.microsoft.azure.management.appservice.v2016_08_01.CsmSlotEntity;
import com.microsoft.azure.management.appservice.v2016_08_01.StorageMigrationOptions;
import com.microsoft.azure.management.appservice.v2016_08_01.MigrateMySqlRequest;
import com.microsoft.azure.management.appservice.v2016_08_01.SnapshotRecoveryRequest;
import com.microsoft.azure.management.appservice.v2016_08_01.RestoreRequest;
import com.microsoft.azure.management.appservice.v2016_08_01.RestoreResponse;
import com.microsoft.azure.management.appservice.v2016_08_01.SiteAuthSettings;
import com.microsoft.azure.management.appservice.v2016_08_01.ConnectionStringDictionary;
import com.microsoft.azure.management.appservice.v2016_08_01.SiteLogsConfig;
import com.microsoft.azure.management.appservice.v2016_08_01.User;
import com.microsoft.azure.management.appservice.v2016_08_01.PushSettings;
import com.microsoft.azure.management.appservice.v2016_08_01.SlotConfigNamesResource;
import com.microsoft.azure.management.appservice.v2016_08_01.Snapshot;
import com.microsoft.azure.management.appservice.v2016_08_01.SiteConfigurationSnapshotInfo;
import com.microsoft.azure.management.appservice.v2016_08_01.ContinuousWebJob;
import com.microsoft.azure.management.appservice.v2016_08_01.Deployment;
import com.microsoft.azure.management.appservice.v2016_08_01.Identifier;
import com.microsoft.azure.management.appservice.v2016_08_01.MSDeployStatus;
import com.microsoft.azure.management.appservice.v2016_08_01.MSDeployLog;
import com.microsoft.azure.management.appservice.v2016_08_01.MSDeploy;
import com.microsoft.azure.management.appservice.v2016_08_01.FunctionEnvelope;
import com.microsoft.azure.management.appservice.v2016_08_01.HostNameBinding;
import com.microsoft.azure.management.appservice.v2016_08_01.HybridConnection;
import com.microsoft.azure.management.appservice.v2016_08_01.HybridConnectionKey;
import com.microsoft.azure.management.appservice.v2016_08_01.SiteInstance;
import com.microsoft.azure.management.appservice.v2016_08_01.ProcessInfo;
import com.microsoft.azure.management.appservice.v2016_08_01.ProcessModuleInfo;
import com.microsoft.azure.management.appservice.v2016_08_01.ProcessThreadInfo;
import com.microsoft.azure.management.appservice.v2016_08_01.ResourceMetricDefinition;
import com.microsoft.azure.management.appservice.v2016_08_01.ResourceMetric;
import com.microsoft.azure.management.appservice.v2016_08_01.MigrateMySqlStatus;
import com.microsoft.azure.management.appservice.v2016_08_01.NetworkFeatures;
import com.microsoft.azure.management.appservice.v2016_08_01.PerfMonResponse;
import com.microsoft.azure.management.appservice.v2016_08_01.PremierAddOn;
import com.microsoft.azure.management.appservice.v2016_08_01.PublicCertificate;
import com.microsoft.azure.management.appservice.v2016_08_01.SiteExtensionInfo;
import com.microsoft.azure.management.appservice.v2016_08_01.Slots;
import com.microsoft.azure.management.appservice.v2016_08_01.SiteSourceControl;
import com.microsoft.azure.management.appservice.v2016_08_01.TriggeredWebJob;
import com.microsoft.azure.management.appservice.v2016_08_01.TriggeredJobHistory;
import com.microsoft.azure.management.appservice.v2016_08_01.CsmUsageQuota;
import com.microsoft.azure.management.appservice.v2016_08_01.VnetInfo;
import java.util.List;
import com.microsoft.azure.management.appservice.v2016_08_01.VnetGateway;
import com.microsoft.azure.management.appservice.v2016_08_01.WebJob;

class WebAppsImpl extends WrapperImpl<WebAppsInner> implements WebApps {
    private final AppServiceManager manager;

    WebAppsImpl(AppServiceManager manager) {
        super(manager.inner().webApps());
        this.manager = manager;
    }

    public AppServiceManager manager() {
        return this.manager;
    }

    @Override
    public SitesImpl defineSite(String name) {
        return wrapSiteModel(name);
    }

    @Override
    public DeploymentImpl defineDeployment(String name) {
        return wrapDeploymentModel(name);
    }

    @Override
    public IdentifierImpl defineDomainOwnershipIdentifier(String name) {
        return wrapDomainOwnershipIdentifierModel(name);
    }

    @Override
    public FunctionEnvelopeImpl defineFunction(String name) {
        return wrapFunctionModel(name);
    }

    @Override
    public HostNameBindingImpl defineHostNameBinding(String name) {
        return wrapHostNameBindingModel(name);
    }

    @Override
    public HybridConnectionImpl defineRelay(String name) {
        return wrapRelayModel(name);
    }

    @Override
    public PremierAddOnImpl definePremieraddon(String name) {
        return wrapPremieraddonModel(name);
    }

    @Override
    public PublicCertificateImpl definePublicCertificate(String name) {
        return wrapPublicCertificateModel(name);
    }

    @Override
    public SiteExtensionInfoImpl defineSiteextension(String name) {
        return wrapSiteextensionModel(name);
    }

    @Override
    public SlotsImpl defineSlot(String name) {
        return wrapSlotModel(name);
    }

    @Override
    public VnetInfoImpl defineVirtualNetworkConnection(String name) {
        return wrapVirtualNetworkConnectionModel(name);
    }

    @Override
    public VnetGatewayImpl defineGateway(String name) {
        return wrapGatewayModel(name);
    }

    private SitesImpl wrapSiteModel(String name) {
        return new SitesImpl(name, new SiteInner(), this.manager());
    }

    private DeploymentImpl wrapDeploymentModel(String name) {
        return new DeploymentImpl(name, this.manager());
    }

    private IdentifierImpl wrapDomainOwnershipIdentifierModel(String name) {
        return new IdentifierImpl(name, this.manager());
    }

    private FunctionEnvelopeImpl wrapFunctionModel(String name) {
        return new FunctionEnvelopeImpl(name, this.manager());
    }

    private HostNameBindingImpl wrapHostNameBindingModel(String name) {
        return new HostNameBindingImpl(name, this.manager());
    }

    private HybridConnectionImpl wrapRelayModel(String name) {
        return new HybridConnectionImpl(name, this.manager());
    }

    private PremierAddOnImpl wrapPremieraddonModel(String name) {
        return new PremierAddOnImpl(name, this.manager());
    }

    private PublicCertificateImpl wrapPublicCertificateModel(String name) {
        return new PublicCertificateImpl(name, this.manager());
    }

    private SiteExtensionInfoImpl wrapSiteextensionModel(String name) {
        return new SiteExtensionInfoImpl(name, this.manager());
    }

    private SlotsImpl wrapSlotModel(String name) {
        return new SlotsImpl(name, this.manager());
    }

    private VnetInfoImpl wrapVirtualNetworkConnectionModel(String name) {
        return new VnetInfoImpl(name, this.manager());
    }

    private VnetGatewayImpl wrapGatewayModel(String name) {
        return new VnetGatewayImpl(name, this.manager());
    }

    private SitesImpl wrapSitesModel(SiteInner inner) {
        return  new SitesImpl(inner.name(), inner, manager());
    }

    private BackupItemImpl wrapBackupItemModel(BackupItemInner inner) {
        return  new BackupItemImpl(inner, manager());
    }

    private SnapshotImpl wrapSnapshotModel(SnapshotInner inner) {
        return  new SnapshotImpl(inner, manager());
    }

    private ContinuousWebJobImpl wrapContinuousWebJobModel(ContinuousWebJobInner inner) {
        return  new ContinuousWebJobImpl(inner, manager());
    }

    private DeploymentImpl wrapDeploymentModel(DeploymentInner inner) {
        return  new DeploymentImpl(inner, manager());
    }

    private IdentifierImpl wrapIdentifierModel(IdentifierInner inner) {
        return  new IdentifierImpl(inner, manager());
    }

    private FunctionEnvelopeImpl wrapFunctionEnvelopeModel(FunctionEnvelopeInner inner) {
        return  new FunctionEnvelopeImpl(inner, manager());
    }

    private HostNameBindingImpl wrapHostNameBindingModel(HostNameBindingInner inner) {
        return  new HostNameBindingImpl(inner, manager());
    }

    private HybridConnectionImpl wrapHybridConnectionModel(HybridConnectionInner inner) {
        return  new HybridConnectionImpl(inner, manager());
    }

    private SiteInstanceImpl wrapSiteInstanceModel(SiteInstanceInner inner) {
        return  new SiteInstanceImpl(inner, manager());
    }

    private ProcessInfoImpl wrapProcessInfoModel(ProcessInfoInner inner) {
        return  new ProcessInfoImpl(inner, manager());
    }

    private ProcessModuleInfoImpl wrapProcessModuleInfoModel(ProcessModuleInfoInner inner) {
        return  new ProcessModuleInfoImpl(inner, manager());
    }

    private ProcessThreadInfoImpl wrapProcessThreadInfoModel(ProcessThreadInfoInner inner) {
        return  new ProcessThreadInfoImpl(inner, manager());
    }

    private ResourceMetricDefinitionImpl wrapResourceMetricDefinitionModel(ResourceMetricDefinitionInner inner) {
        return  new ResourceMetricDefinitionImpl(inner, manager());
    }

    private ResourceMetricImpl wrapResourceMetricModel(ResourceMetricInner inner) {
        return  new ResourceMetricImpl(inner, manager());
    }

    private NetworkFeaturesImpl wrapNetworkFeaturesModel(NetworkFeaturesInner inner) {
        return  new NetworkFeaturesImpl(inner, manager());
    }

    private PerfMonResponseImpl wrapPerfMonResponseModel(PerfMonResponseInner inner) {
        return  new PerfMonResponseImpl(inner, manager());
    }

    private PremierAddOnImpl wrapPremierAddOnModel(PremierAddOnInner inner) {
        return  new PremierAddOnImpl(inner, manager());
    }

    private PublicCertificateImpl wrapPublicCertificateModel(PublicCertificateInner inner) {
        return  new PublicCertificateImpl(inner, manager());
    }

    private SiteExtensionInfoImpl wrapSiteExtensionInfoModel(SiteExtensionInfoInner inner) {
        return  new SiteExtensionInfoImpl(inner, manager());
    }

    private SlotsImpl wrapSlotsModel(SiteInner inner) {
        return  new SlotsImpl(inner, manager());
    }

    private TriggeredWebJobImpl wrapTriggeredWebJobModel(TriggeredWebJobInner inner) {
        return  new TriggeredWebJobImpl(inner, manager());
    }

    private CsmUsageQuotaImpl wrapCsmUsageQuotaModel(CsmUsageQuotaInner inner) {
        return  new CsmUsageQuotaImpl(inner, manager());
    }

    private VnetInfoImpl wrapVnetInfoModel(VnetInfoInner inner) {
        return  new VnetInfoImpl(inner, manager());
    }

    private VnetGatewayImpl wrapVnetGatewayModel(VnetGatewayInner inner) {
        return  new VnetGatewayImpl(inner, manager());
    }

    private WebJobImpl wrapWebJobModel(WebJobInner inner) {
        return  new WebJobImpl(inner, manager());
    }

    private Observable<SiteInner> getSiteInnerUsingWebAppsInnerAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    private Observable<BackupItemInner> getBackupItemInnerUsingWebAppsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "sites");
        String backupId = IdParsingUtils.getValueFromIdByName(id, "backups");
        WebAppsInner client = this.inner();
        return client.getBackupStatusAsync(resourceGroupName, name, backupId);
    }

    private Observable<ContinuousWebJobInner> getContinuousWebJobInnerUsingWebAppsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "sites");
        String webJobName = IdParsingUtils.getValueFromIdByName(id, "continuouswebjobs");
        WebAppsInner client = this.inner();
        return client.getContinuousWebJobAsync(resourceGroupName, name, webJobName);
    }

    private Observable<DeploymentInner> getDeploymentInnerUsingWebAppsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "sites");
        String deploymentName = IdParsingUtils.getValueFromIdByName(id, "deployments");
        WebAppsInner client = this.inner();
        return client.getDeploymentAsync(resourceGroupName, name, deploymentName);
    }

    private Observable<IdentifierInner> getIdentifierInnerUsingWebAppsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "sites");
        String domainOwnershipIdentifierName = IdParsingUtils.getValueFromIdByName(id, "domainOwnershipIdentifiers");
        WebAppsInner client = this.inner();
        return client.getDomainOwnershipIdentifierAsync(resourceGroupName, name, domainOwnershipIdentifierName);
    }

    private Observable<FunctionEnvelopeInner> getFunctionEnvelopeInnerUsingWebAppsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "sites");
        String functionName = IdParsingUtils.getValueFromIdByName(id, "functions");
        WebAppsInner client = this.inner();
        return client.getFunctionAsync(resourceGroupName, name, functionName);
    }

    private Observable<HostNameBindingInner> getHostNameBindingInnerUsingWebAppsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "sites");
        String hostName = IdParsingUtils.getValueFromIdByName(id, "hostNameBindings");
        WebAppsInner client = this.inner();
        return client.getHostNameBindingAsync(resourceGroupName, name, hostName);
    }

    private Observable<HybridConnectionInner> getHybridConnectionInnerUsingWebAppsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "sites");
        String namespaceName = IdParsingUtils.getValueFromIdByName(id, "hybridConnectionNamespaces");
        String relayName = IdParsingUtils.getValueFromIdByName(id, "relays");
        WebAppsInner client = this.inner();
        return client.getHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName);
    }

    private Observable<ProcessInfoInner> getProcessInfoInnerUsingWebAppsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "sites");
        String instanceId = IdParsingUtils.getValueFromIdByName(id, "instances");
        String processId = IdParsingUtils.getValueFromIdByName(id, "processes");
        WebAppsInner client = this.inner();
        return client.getInstanceProcessAsync(resourceGroupName, name, processId, instanceId);
    }

    private Observable<ProcessModuleInfoInner> getProcessModuleInfoInnerUsingWebAppsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "sites");
        String instanceId = IdParsingUtils.getValueFromIdByName(id, "instances");
        String processId = IdParsingUtils.getValueFromIdByName(id, "processes");
        String baseAddress = IdParsingUtils.getValueFromIdByName(id, "modules");
        WebAppsInner client = this.inner();
        return client.getInstanceProcessModuleAsync(resourceGroupName, name, processId, baseAddress, instanceId);
    }

    private Observable<ProcessThreadInfoInner> getProcessThreadInfoInnerUsingWebAppsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "sites");
        String instanceId = IdParsingUtils.getValueFromIdByName(id, "instances");
        String processId = IdParsingUtils.getValueFromIdByName(id, "processes");
        String threadId = IdParsingUtils.getValueFromIdByName(id, "threads");
        WebAppsInner client = this.inner();
        return client.getInstanceProcessThreadAsync(resourceGroupName, name, processId, threadId, instanceId);
    }

    private Observable<NetworkFeaturesInner> getNetworkFeaturesInnerUsingWebAppsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "sites");
        String view = IdParsingUtils.getValueFromIdByName(id, "networkFeatures");
        WebAppsInner client = this.inner();
        return client.listNetworkFeaturesAsync(resourceGroupName, name, view);
    }

    private Observable<PremierAddOnInner> getPremierAddOnInnerUsingWebAppsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "sites");
        String premierAddOnName = IdParsingUtils.getValueFromIdByName(id, "premieraddons");
        WebAppsInner client = this.inner();
        return client.getPremierAddOnAsync(resourceGroupName, name, premierAddOnName);
    }

    private Observable<PublicCertificateInner> getPublicCertificateInnerUsingWebAppsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "sites");
        String publicCertificateName = IdParsingUtils.getValueFromIdByName(id, "publicCertificates");
        WebAppsInner client = this.inner();
        return client.getPublicCertificateAsync(resourceGroupName, name, publicCertificateName);
    }

    private Observable<SiteExtensionInfoInner> getSiteExtensionInfoInnerUsingWebAppsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "sites");
        String siteExtensionId = IdParsingUtils.getValueFromIdByName(id, "siteextensions");
        WebAppsInner client = this.inner();
        return client.getSiteExtensionAsync(resourceGroupName, name, siteExtensionId);
    }

    private Observable<SiteInner> getSiteInnerUsingWebAppsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "sites");
        String slot = IdParsingUtils.getValueFromIdByName(id, "slots");
        WebAppsInner client = this.inner();
        return client.getSlotAsync(resourceGroupName, name, slot);
    }

    private Observable<TriggeredWebJobInner> getTriggeredWebJobInnerUsingWebAppsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "sites");
        String slot = IdParsingUtils.getValueFromIdByName(id, "slots");
        String webJobName = IdParsingUtils.getValueFromIdByName(id, "triggeredwebjobs");
        WebAppsInner client = this.inner();
        return client.getTriggeredWebJobSlotAsync(resourceGroupName, name, webJobName, slot);
    }

    private Observable<VnetInfoInner> getVnetInfoInnerUsingWebAppsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "sites");
        String slot = IdParsingUtils.getValueFromIdByName(id, "slots");
        String vnetName = IdParsingUtils.getValueFromIdByName(id, "virtualNetworkConnections");
        WebAppsInner client = this.inner();
        return client.getVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot);
    }

    private Observable<VnetGatewayInner> getVnetGatewayInnerUsingWebAppsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "sites");
        String slot = IdParsingUtils.getValueFromIdByName(id, "slots");
        String vnetName = IdParsingUtils.getValueFromIdByName(id, "virtualNetworkConnections");
        String gatewayName = IdParsingUtils.getValueFromIdByName(id, "gateways");
        WebAppsInner client = this.inner();
        return client.getVnetConnectionGatewaySlotAsync(resourceGroupName, name, vnetName, gatewayName, slot);
    }

    private Observable<WebJobInner> getWebJobInnerUsingWebAppsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "sites");
        String slot = IdParsingUtils.getValueFromIdByName(id, "slots");
        String webJobName = IdParsingUtils.getValueFromIdByName(id, "webjobs");
        WebAppsInner client = this.inner();
        return client.getWebJobSlotAsync(resourceGroupName, name, webJobName, slot);
    }

    @Override
    public Observable<Sites> getByResourceGroupAsync(String resourceGroupName, String name) {
        return this.getSiteInnerUsingWebAppsInnerAsync(resourceGroupName, name).map(new Func1<SiteInner, Sites> () {
            @Override
            public Sites call(SiteInner inner) {
                return wrapSitesModel(inner);
            }
        });
    }

    private Observable<Page<SiteInner>> listByResourceGroupNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listByResourceGroupNextAsync(nextLink)
        .flatMap(new Func1<Page<SiteInner>, Observable<Page<SiteInner>>>() {
            @Override
            public Observable<Page<SiteInner>> call(Page<SiteInner> page) {
                return Observable.just(page).concatWith(listByResourceGroupNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<Sites> listByResourceGroupAsync(String resourceGroupName) {
        WebAppsInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMap(new Func1<Page<SiteInner>, Observable<Page<SiteInner>>>() {
            @Override
            public Observable<Page<SiteInner>> call(Page<SiteInner> page) {
                return listByResourceGroupNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<SiteInner>, Iterable<SiteInner>>() {
            @Override
            public Iterable<SiteInner> call(Page<SiteInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SiteInner, Sites>() {
            @Override
            public Sites call(SiteInner inner) {
                return wrapSitesModel(inner);
            }
        });
    }

    private Observable<Page<SiteInner>> listNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listNextAsync(nextLink)
        .flatMap(new Func1<Page<SiteInner>, Observable<Page<SiteInner>>>() {
            @Override
            public Observable<Page<SiteInner>> call(Page<SiteInner> page) {
                return Observable.just(page).concatWith(listNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<Sites> listAsync() {
        WebAppsInner client = this.inner();
        return client.listAsync()
        .flatMap(new Func1<Page<SiteInner>, Observable<Page<SiteInner>>>() {
            @Override
            public Observable<Page<SiteInner>> call(Page<SiteInner> page) {
                return listNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<SiteInner>, Iterable<SiteInner>>() {
            @Override
            public Iterable<SiteInner> call(Page<SiteInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SiteInner, Sites>() {
            @Override
            public Sites call(SiteInner inner) {
                return wrapSitesModel(inner);
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String name) {
        return this.inner().deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<CustomHostnameAnalysisResult> analyzeCustomHostnameAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.analyzeCustomHostnameAsync(resourceGroupName, name)
        .map(new Func1<CustomHostnameAnalysisResultInner, CustomHostnameAnalysisResult>() {
            @Override
            public CustomHostnameAnalysisResult call(CustomHostnameAnalysisResultInner inner) {
                return new CustomHostnameAnalysisResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable applySlotConfigToProductionAsync(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        WebAppsInner client = this.inner();
        return client.applySlotConfigToProductionAsync(resourceGroupName, name, slotSwapEntity).toCompletable();
    }

    @Override
    public Observable<BackupItem> backupAsync(String resourceGroupName, String name, BackupRequestInner request) {
        WebAppsInner client = this.inner();
        return client.backupAsync(resourceGroupName, name, request)
        .map(new Func1<BackupItemInner, BackupItem>() {
            @Override
            public BackupItem call(BackupItemInner inner) {
                return new BackupItemImpl(inner, manager());
            }
        });
    }

    private Observable<Page<SiteConfigResourceInner>> listConfigurationsNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listConfigurationsNextAsync(nextLink)
        .flatMap(new Func1<Page<SiteConfigResourceInner>, Observable<Page<SiteConfigResourceInner>>>() {
            @Override
            public Observable<Page<SiteConfigResourceInner>> call(Page<SiteConfigResourceInner> page) {
                return Observable.just(page).concatWith(listConfigurationsNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<SiteConfigResource> listConfigurationsAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listConfigurationsAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<SiteConfigResourceInner>, Observable<Page<SiteConfigResourceInner>>>() {
            @Override
            public Observable<Page<SiteConfigResourceInner>> call(Page<SiteConfigResourceInner> page) {
                return listConfigurationsNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<SiteConfigResourceInner>, Iterable<SiteConfigResourceInner>>() {
            @Override
            public Iterable<SiteConfigResourceInner> call(Page<SiteConfigResourceInner> page) {
                return page.items();
            }
       })
        .map(new Func1<SiteConfigResourceInner, SiteConfigResource>() {
            @Override
            public SiteConfigResource call(SiteConfigResourceInner inner) {
                return new SiteConfigResourceImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<BackupRequest> updateBackupConfigurationAsync(String resourceGroupName, String name, BackupRequestInner request) {
        WebAppsInner client = this.inner();
        return client.updateBackupConfigurationAsync(resourceGroupName, name, request)
        .map(new Func1<BackupRequestInner, BackupRequest>() {
            @Override
            public BackupRequest call(BackupRequestInner inner) {
                return new BackupRequestImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteBackupConfigurationAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.deleteBackupConfigurationAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<BackupRequest> getBackupConfigurationAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.getBackupConfigurationAsync(resourceGroupName, name)
        .map(new Func1<BackupRequestInner, BackupRequest>() {
            @Override
            public BackupRequest call(BackupRequestInner inner) {
                return new BackupRequestImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<StringDictionary> updateMetadataAsync(String resourceGroupName, String name, StringDictionaryInner metadata) {
        WebAppsInner client = this.inner();
        return client.updateMetadataAsync(resourceGroupName, name, metadata)
        .map(new Func1<StringDictionaryInner, StringDictionary>() {
            @Override
            public StringDictionary call(StringDictionaryInner inner) {
                return new StringDictionaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<StringDictionary> listMetadataAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.listMetadataAsync(resourceGroupName, name)
        .map(new Func1<StringDictionaryInner, StringDictionary>() {
            @Override
            public StringDictionary call(StringDictionaryInner inner) {
                return new StringDictionaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteConfigResource> getConfigurationAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.getConfigurationAsync(resourceGroupName, name)
        .map(new Func1<SiteConfigResourceInner, SiteConfigResource>() {
            @Override
            public SiteConfigResource call(SiteConfigResourceInner inner) {
                return new SiteConfigResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteConfigResource> createOrUpdateConfigurationAsync(String resourceGroupName, String name, SiteConfigResourceInner siteConfig) {
        WebAppsInner client = this.inner();
        return client.createOrUpdateConfigurationAsync(resourceGroupName, name, siteConfig)
        .map(new Func1<SiteConfigResourceInner, SiteConfigResource>() {
            @Override
            public SiteConfigResource call(SiteConfigResourceInner inner) {
                return new SiteConfigResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteConfigResource> updateConfigurationAsync(String resourceGroupName, String name, SiteConfigResourceInner siteConfig) {
        WebAppsInner client = this.inner();
        return client.updateConfigurationAsync(resourceGroupName, name, siteConfig)
        .map(new Func1<SiteConfigResourceInner, SiteConfigResource>() {
            @Override
            public SiteConfigResource call(SiteConfigResourceInner inner) {
                return new SiteConfigResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable getWebSiteContainerLogsAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.getWebSiteContainerLogsAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Completable getFunctionsAdminTokenAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.getFunctionsAdminTokenAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<RelayServiceConnectionEntity> listRelayServiceConnectionsAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.listRelayServiceConnectionsAsync(resourceGroupName, name)
        .map(new Func1<RelayServiceConnectionEntityInner, RelayServiceConnectionEntity>() {
            @Override
            public RelayServiceConnectionEntity call(RelayServiceConnectionEntityInner inner) {
                return new RelayServiceConnectionEntityImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<RelayServiceConnectionEntity> getRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName) {
        WebAppsInner client = this.inner();
        return client.getRelayServiceConnectionAsync(resourceGroupName, name, entityName)
        .map(new Func1<RelayServiceConnectionEntityInner, RelayServiceConnectionEntity>() {
            @Override
            public RelayServiceConnectionEntity call(RelayServiceConnectionEntityInner inner) {
                return new RelayServiceConnectionEntityImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<RelayServiceConnectionEntity> createOrUpdateRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName, RelayServiceConnectionEntityInner connectionEnvelope) {
        WebAppsInner client = this.inner();
        return client.createOrUpdateRelayServiceConnectionAsync(resourceGroupName, name, entityName, connectionEnvelope)
        .map(new Func1<RelayServiceConnectionEntityInner, RelayServiceConnectionEntity>() {
            @Override
            public RelayServiceConnectionEntity call(RelayServiceConnectionEntityInner inner) {
                return new RelayServiceConnectionEntityImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName) {
        WebAppsInner client = this.inner();
        return client.deleteRelayServiceConnectionAsync(resourceGroupName, name, entityName).toCompletable();
    }

    @Override
    public Observable<RelayServiceConnectionEntity> updateRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName, RelayServiceConnectionEntityInner connectionEnvelope) {
        WebAppsInner client = this.inner();
        return client.updateRelayServiceConnectionAsync(resourceGroupName, name, entityName, connectionEnvelope)
        .map(new Func1<RelayServiceConnectionEntityInner, RelayServiceConnectionEntity>() {
            @Override
            public RelayServiceConnectionEntity call(RelayServiceConnectionEntityInner inner) {
                return new RelayServiceConnectionEntityImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteCloneability> isCloneableAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.isCloneableAsync(resourceGroupName, name)
        .map(new Func1<SiteCloneabilityInner, SiteCloneability>() {
            @Override
            public SiteCloneability call(SiteCloneabilityInner inner) {
                return new SiteCloneabilityImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<FunctionSecrets> listSyncFunctionTriggersAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.listSyncFunctionTriggersAsync(resourceGroupName, name)
        .map(new Func1<FunctionSecretsInner, FunctionSecrets>() {
            @Override
            public FunctionSecrets call(FunctionSecretsInner inner) {
                return new FunctionSecretsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<StorageMigrationResponse> migrateStorageAsync(String resourceGroupName, String name, String subscriptionName, StorageMigrationOptions migrationOptions) {
        WebAppsInner client = this.inner();
        return client.migrateStorageAsync(resourceGroupName, name, subscriptionName, migrationOptions)
        .map(new Func1<StorageMigrationResponseInner, StorageMigrationResponse>() {
            @Override
            public StorageMigrationResponse call(StorageMigrationResponseInner inner) {
                return new StorageMigrationResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Operation> migrateMySqlAsync(String resourceGroupName, String name, MigrateMySqlRequest migrationRequestEnvelope) {
        WebAppsInner client = this.inner();
        return client.migrateMySqlAsync(resourceGroupName, name, migrationRequestEnvelope)
        .map(new Func1<OperationInner, Operation>() {
            @Override
            public Operation call(OperationInner inner) {
                return new OperationImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable startWebSiteNetworkTraceAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.startWebSiteNetworkTraceAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Completable stopWebSiteNetworkTraceAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.stopWebSiteNetworkTraceAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Completable generateNewSitePublishingPasswordAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.generateNewSitePublishingPasswordAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<SitePhpErrorLogFlag> getSitePhpErrorLogFlagAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.getSitePhpErrorLogFlagAsync(resourceGroupName, name)
        .map(new Func1<SitePhpErrorLogFlagInner, SitePhpErrorLogFlag>() {
            @Override
            public SitePhpErrorLogFlag call(SitePhpErrorLogFlagInner inner) {
                return new SitePhpErrorLogFlagImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable getProcessDumpAsync(String resourceGroupName, String name, String processId) {
        WebAppsInner client = this.inner();
        return client.getProcessDumpAsync(resourceGroupName, name, processId).toCompletable();
    }

    @Override
    public Completable listPublishingProfileXmlWithSecretsAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.listPublishingProfileXmlWithSecretsAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Completable recoverAsync(String resourceGroupName, String name, SnapshotRecoveryRequest recoveryEntity) {
        WebAppsInner client = this.inner();
        return client.recoverAsync(resourceGroupName, name, recoveryEntity).toCompletable();
    }

    @Override
    public Completable resetProductionSlotConfigAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.resetProductionSlotConfigAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Completable restartAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.restartAsync(resourceGroupName, name).toCompletable();
    }

    private Observable<Page<SlotDifferenceInner>> listSlotDifferencesFromProductionNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listSlotDifferencesFromProductionNextAsync(nextLink)
        .flatMap(new Func1<Page<SlotDifferenceInner>, Observable<Page<SlotDifferenceInner>>>() {
            @Override
            public Observable<Page<SlotDifferenceInner>> call(Page<SlotDifferenceInner> page) {
                return Observable.just(page).concatWith(listSlotDifferencesFromProductionNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<SlotDifference> listSlotDifferencesFromProductionAsync(final String resourceGroupName, final String name, final CsmSlotEntity slotSwapEntity) {
        WebAppsInner client = this.inner();
        return client.listSlotDifferencesFromProductionAsync(resourceGroupName, name, slotSwapEntity)
        .flatMap(new Func1<Page<SlotDifferenceInner>, Observable<Page<SlotDifferenceInner>>>() {
            @Override
            public Observable<Page<SlotDifferenceInner>> call(Page<SlotDifferenceInner> page) {
                return listSlotDifferencesFromProductionNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<SlotDifferenceInner>, Iterable<SlotDifferenceInner>>() {
            @Override
            public Iterable<SlotDifferenceInner> call(Page<SlotDifferenceInner> page) {
                return page.items();
            }
       })
        .map(new Func1<SlotDifferenceInner, SlotDifference>() {
            @Override
            public SlotDifference call(SlotDifferenceInner inner) {
                return new SlotDifferenceImpl(inner, manager());
            }
       });
    }

    @Override
    public Completable swapSlotWithProductionAsync(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        WebAppsInner client = this.inner();
        return client.swapSlotWithProductionAsync(resourceGroupName, name, slotSwapEntity).toCompletable();
    }

    @Override
    public Completable startAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.startAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Completable stopAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.stopAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Completable syncRepositoryAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.syncRepositoryAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Completable syncFunctionTriggersAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.syncFunctionTriggersAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<BackupItem> getBackupStatusAsync(String resourceGroupName, String name, String backupId) {
        WebAppsInner client = this.inner();
        return client.getBackupStatusAsync(resourceGroupName, name, backupId)
        .map(new Func1<BackupItemInner, BackupItem>() {
            @Override
            public BackupItem call(BackupItemInner inner) {
                return wrapBackupItemModel(inner);
            }
       });
    }

    private Observable<Page<BackupItemInner>> listBackupsNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listBackupsNextAsync(nextLink)
        .flatMap(new Func1<Page<BackupItemInner>, Observable<Page<BackupItemInner>>>() {
            @Override
            public Observable<Page<BackupItemInner>> call(Page<BackupItemInner> page) {
                return Observable.just(page).concatWith(listBackupsNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<BackupItem> listBackupsAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listBackupsAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<BackupItemInner>, Observable<Page<BackupItemInner>>>() {
            @Override
            public Observable<Page<BackupItemInner>> call(Page<BackupItemInner> page) {
                return listBackupsNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<BackupItemInner>, Iterable<BackupItemInner>>() {
            @Override
            public Iterable<BackupItemInner> call(Page<BackupItemInner> page) {
                return page.items();
            }
        })
        .map(new Func1<BackupItemInner, BackupItem>() {
            @Override
            public BackupItem call(BackupItemInner inner) {
                return wrapBackupItemModel(inner);
            }
        });
    }

    @Override
    public Completable deleteBackupAsync(String resourceGroupName, String name, String backupId) {
        WebAppsInner client = this.inner();
        return client.deleteBackupAsync(resourceGroupName, name, backupId).toCompletable();
    }

    @Override
    public Observable<RestoreRequest> discoverRestoreAsync(String resourceGroupName, String name, RestoreRequestInner request) {
        WebAppsInner client = this.inner();
        return client.discoverRestoreAsync(resourceGroupName, name, request)
        .map(new Func1<RestoreRequestInner, RestoreRequest>() {
            @Override
            public RestoreRequest call(RestoreRequestInner inner) {
                return new RestoreRequestImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BackupItem> listBackupStatusSecretsAsync(String resourceGroupName, String name, String backupId, BackupRequestInner request) {
        WebAppsInner client = this.inner();
        return client.listBackupStatusSecretsAsync(resourceGroupName, name, backupId, request)
        .map(new Func1<BackupItemInner, BackupItem>() {
            @Override
            public BackupItem call(BackupItemInner inner) {
                return new BackupItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<RestoreResponse> restoreAsync(String resourceGroupName, String name, String backupId, RestoreRequestInner request) {
        WebAppsInner client = this.inner();
        return client.restoreAsync(resourceGroupName, name, backupId, request)
        .map(new Func1<RestoreResponseInner, RestoreResponse>() {
            @Override
            public RestoreResponse call(RestoreResponseInner inner) {
                return new RestoreResponseImpl(inner, manager());
            }
        });
    }

    private Observable<Page<BackupItemInner>> listBackupsSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listBackupsSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<BackupItemInner>, Observable<Page<BackupItemInner>>>() {
            @Override
            public Observable<Page<BackupItemInner>> call(Page<BackupItemInner> page) {
                return Observable.just(page).concatWith(listBackupsSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<BackupItem> listBackupsSlotAsync(final String resourceGroupName, final String name, final String slot) {
        WebAppsInner client = this.inner();
        return client.listBackupsSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<Page<BackupItemInner>, Observable<Page<BackupItemInner>>>() {
            @Override
            public Observable<Page<BackupItemInner>> call(Page<BackupItemInner> page) {
                return listBackupsSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<BackupItemInner>, Iterable<BackupItemInner>>() {
            @Override
            public Iterable<BackupItemInner> call(Page<BackupItemInner> page) {
                return page.items();
            }
       })
        .map(new Func1<BackupItemInner, BackupItem>() {
            @Override
            public BackupItem call(BackupItemInner inner) {
                return new BackupItemImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<RestoreRequest> discoverRestoreSlotAsync(String resourceGroupName, String name, String slot, RestoreRequestInner request) {
        WebAppsInner client = this.inner();
        return client.discoverRestoreSlotAsync(resourceGroupName, name, slot, request)
        .map(new Func1<RestoreRequestInner, RestoreRequest>() {
            @Override
            public RestoreRequest call(RestoreRequestInner inner) {
                return new RestoreRequestImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BackupItem> getBackupStatusSlotAsync(String resourceGroupName, String name, String backupId, String slot) {
        WebAppsInner client = this.inner();
        return client.getBackupStatusSlotAsync(resourceGroupName, name, backupId, slot)
        .map(new Func1<BackupItemInner, BackupItem>() {
            @Override
            public BackupItem call(BackupItemInner inner) {
                return new BackupItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteBackupSlotAsync(String resourceGroupName, String name, String backupId, String slot) {
        WebAppsInner client = this.inner();
        return client.deleteBackupSlotAsync(resourceGroupName, name, backupId, slot).toCompletable();
    }

    @Override
    public Observable<BackupItem> listBackupStatusSecretsSlotAsync(String resourceGroupName, String name, String backupId, String slot, BackupRequestInner request) {
        WebAppsInner client = this.inner();
        return client.listBackupStatusSecretsSlotAsync(resourceGroupName, name, backupId, slot, request)
        .map(new Func1<BackupItemInner, BackupItem>() {
            @Override
            public BackupItem call(BackupItemInner inner) {
                return new BackupItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<RestoreResponse> restoreSlotAsync(String resourceGroupName, String name, String backupId, String slot, RestoreRequestInner request) {
        WebAppsInner client = this.inner();
        return client.restoreSlotAsync(resourceGroupName, name, backupId, slot, request)
        .map(new Func1<RestoreResponseInner, RestoreResponse>() {
            @Override
            public RestoreResponse call(RestoreResponseInner inner) {
                return new RestoreResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<StringDictionary> updateApplicationSettingsAsync(String resourceGroupName, String name, StringDictionaryInner appSettings) {
        WebAppsInner client = this.inner();
        return client.updateApplicationSettingsAsync(resourceGroupName, name, appSettings)
        .map(new Func1<StringDictionaryInner, StringDictionary>() {
            @Override
            public StringDictionary call(StringDictionaryInner inner) {
                return new StringDictionaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<StringDictionary> listApplicationSettingsAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.listApplicationSettingsAsync(resourceGroupName, name)
        .map(new Func1<StringDictionaryInner, StringDictionary>() {
            @Override
            public StringDictionary call(StringDictionaryInner inner) {
                return new StringDictionaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<StringDictionary> updateApplicationSettingsSlotAsync(String resourceGroupName, String name, String slot, StringDictionaryInner appSettings) {
        WebAppsInner client = this.inner();
        return client.updateApplicationSettingsSlotAsync(resourceGroupName, name, slot, appSettings)
        .map(new Func1<StringDictionaryInner, StringDictionary>() {
            @Override
            public StringDictionary call(StringDictionaryInner inner) {
                return new StringDictionaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<StringDictionary> listApplicationSettingsSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.listApplicationSettingsSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<StringDictionaryInner, StringDictionary>() {
            @Override
            public StringDictionary call(StringDictionaryInner inner) {
                return new StringDictionaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteAuthSettings> updateAuthSettingsAsync(String resourceGroupName, String name, SiteAuthSettingsInner siteAuthSettings) {
        WebAppsInner client = this.inner();
        return client.updateAuthSettingsAsync(resourceGroupName, name, siteAuthSettings)
        .map(new Func1<SiteAuthSettingsInner, SiteAuthSettings>() {
            @Override
            public SiteAuthSettings call(SiteAuthSettingsInner inner) {
                return new SiteAuthSettingsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteAuthSettings> getAuthSettingsAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.getAuthSettingsAsync(resourceGroupName, name)
        .map(new Func1<SiteAuthSettingsInner, SiteAuthSettings>() {
            @Override
            public SiteAuthSettings call(SiteAuthSettingsInner inner) {
                return new SiteAuthSettingsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteAuthSettings> updateAuthSettingsSlotAsync(String resourceGroupName, String name, String slot, SiteAuthSettingsInner siteAuthSettings) {
        WebAppsInner client = this.inner();
        return client.updateAuthSettingsSlotAsync(resourceGroupName, name, slot, siteAuthSettings)
        .map(new Func1<SiteAuthSettingsInner, SiteAuthSettings>() {
            @Override
            public SiteAuthSettings call(SiteAuthSettingsInner inner) {
                return new SiteAuthSettingsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteAuthSettings> getAuthSettingsSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.getAuthSettingsSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<SiteAuthSettingsInner, SiteAuthSettings>() {
            @Override
            public SiteAuthSettings call(SiteAuthSettingsInner inner) {
                return new SiteAuthSettingsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ConnectionStringDictionary> updateConnectionStringsAsync(String resourceGroupName, String name, ConnectionStringDictionaryInner connectionStrings) {
        WebAppsInner client = this.inner();
        return client.updateConnectionStringsAsync(resourceGroupName, name, connectionStrings)
        .map(new Func1<ConnectionStringDictionaryInner, ConnectionStringDictionary>() {
            @Override
            public ConnectionStringDictionary call(ConnectionStringDictionaryInner inner) {
                return new ConnectionStringDictionaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ConnectionStringDictionary> listConnectionStringsAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.listConnectionStringsAsync(resourceGroupName, name)
        .map(new Func1<ConnectionStringDictionaryInner, ConnectionStringDictionary>() {
            @Override
            public ConnectionStringDictionary call(ConnectionStringDictionaryInner inner) {
                return new ConnectionStringDictionaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ConnectionStringDictionary> updateConnectionStringsSlotAsync(String resourceGroupName, String name, String slot, ConnectionStringDictionaryInner connectionStrings) {
        WebAppsInner client = this.inner();
        return client.updateConnectionStringsSlotAsync(resourceGroupName, name, slot, connectionStrings)
        .map(new Func1<ConnectionStringDictionaryInner, ConnectionStringDictionary>() {
            @Override
            public ConnectionStringDictionary call(ConnectionStringDictionaryInner inner) {
                return new ConnectionStringDictionaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ConnectionStringDictionary> listConnectionStringsSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.listConnectionStringsSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<ConnectionStringDictionaryInner, ConnectionStringDictionary>() {
            @Override
            public ConnectionStringDictionary call(ConnectionStringDictionaryInner inner) {
                return new ConnectionStringDictionaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteLogsConfig> getDiagnosticLogsConfigurationAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.getDiagnosticLogsConfigurationAsync(resourceGroupName, name)
        .map(new Func1<SiteLogsConfigInner, SiteLogsConfig>() {
            @Override
            public SiteLogsConfig call(SiteLogsConfigInner inner) {
                return new SiteLogsConfigImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteLogsConfig> updateDiagnosticLogsConfigAsync(String resourceGroupName, String name, SiteLogsConfigInner siteLogsConfig) {
        WebAppsInner client = this.inner();
        return client.updateDiagnosticLogsConfigAsync(resourceGroupName, name, siteLogsConfig)
        .map(new Func1<SiteLogsConfigInner, SiteLogsConfig>() {
            @Override
            public SiteLogsConfig call(SiteLogsConfigInner inner) {
                return new SiteLogsConfigImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteLogsConfig> getDiagnosticLogsConfigurationSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.getDiagnosticLogsConfigurationSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<SiteLogsConfigInner, SiteLogsConfig>() {
            @Override
            public SiteLogsConfig call(SiteLogsConfigInner inner) {
                return new SiteLogsConfigImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteLogsConfig> updateDiagnosticLogsConfigSlotAsync(String resourceGroupName, String name, String slot, SiteLogsConfigInner siteLogsConfig) {
        WebAppsInner client = this.inner();
        return client.updateDiagnosticLogsConfigSlotAsync(resourceGroupName, name, slot, siteLogsConfig)
        .map(new Func1<SiteLogsConfigInner, SiteLogsConfig>() {
            @Override
            public SiteLogsConfig call(SiteLogsConfigInner inner) {
                return new SiteLogsConfigImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<User> listPublishingCredentialsAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.listPublishingCredentialsAsync(resourceGroupName, name)
        .map(new Func1<UserInner, User>() {
            @Override
            public User call(UserInner inner) {
                return new UserImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<User> listPublishingCredentialsSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.listPublishingCredentialsSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<UserInner, User>() {
            @Override
            public User call(UserInner inner) {
                return new UserImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PushSettings> updateSitePushSettingsAsync(String resourceGroupName, String name, PushSettingsInner pushSettings) {
        WebAppsInner client = this.inner();
        return client.updateSitePushSettingsAsync(resourceGroupName, name, pushSettings)
        .map(new Func1<PushSettingsInner, PushSettings>() {
            @Override
            public PushSettings call(PushSettingsInner inner) {
                return new PushSettingsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PushSettings> listSitePushSettingsAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.listSitePushSettingsAsync(resourceGroupName, name)
        .map(new Func1<PushSettingsInner, PushSettings>() {
            @Override
            public PushSettings call(PushSettingsInner inner) {
                return new PushSettingsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PushSettings> updateSitePushSettingsSlotAsync(String resourceGroupName, String name, String slot, PushSettingsInner pushSettings) {
        WebAppsInner client = this.inner();
        return client.updateSitePushSettingsSlotAsync(resourceGroupName, name, slot, pushSettings)
        .map(new Func1<PushSettingsInner, PushSettings>() {
            @Override
            public PushSettings call(PushSettingsInner inner) {
                return new PushSettingsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PushSettings> listSitePushSettingsSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.listSitePushSettingsSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<PushSettingsInner, PushSettings>() {
            @Override
            public PushSettings call(PushSettingsInner inner) {
                return new PushSettingsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SlotConfigNamesResource> listSlotConfigurationNamesAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.listSlotConfigurationNamesAsync(resourceGroupName, name)
        .map(new Func1<SlotConfigNamesResourceInner, SlotConfigNamesResource>() {
            @Override
            public SlotConfigNamesResource call(SlotConfigNamesResourceInner inner) {
                return new SlotConfigNamesResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SlotConfigNamesResource> updateSlotConfigurationNamesAsync(String resourceGroupName, String name, SlotConfigNamesResourceInner slotConfigNames) {
        WebAppsInner client = this.inner();
        return client.updateSlotConfigurationNamesAsync(resourceGroupName, name, slotConfigNames)
        .map(new Func1<SlotConfigNamesResourceInner, SlotConfigNamesResource>() {
            @Override
            public SlotConfigNamesResource call(SlotConfigNamesResourceInner inner) {
                return new SlotConfigNamesResourceImpl(inner, manager());
            }
        });
    }

    private Observable<Page<SnapshotInner>> listSnapshotsNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listSnapshotsNextAsync(nextLink)
        .flatMap(new Func1<Page<SnapshotInner>, Observable<Page<SnapshotInner>>>() {
            @Override
            public Observable<Page<SnapshotInner>> call(Page<SnapshotInner> page) {
                return Observable.just(page).concatWith(listSnapshotsNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<Snapshot> listSnapshotsAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listSnapshotsAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<SnapshotInner>, Observable<Page<SnapshotInner>>>() {
            @Override
            public Observable<Page<SnapshotInner>> call(Page<SnapshotInner> page) {
                return listSnapshotsNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<SnapshotInner>, Iterable<SnapshotInner>>() {
            @Override
            public Iterable<SnapshotInner> call(Page<SnapshotInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SnapshotInner, Snapshot>() {
            @Override
            public Snapshot call(SnapshotInner inner) {
                return wrapSnapshotModel(inner);
            }
        });
    }

    private Observable<Page<SiteConfigurationSnapshotInfoInner>> listConfigurationSnapshotInfoNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listConfigurationSnapshotInfoNextAsync(nextLink)
        .flatMap(new Func1<Page<SiteConfigurationSnapshotInfoInner>, Observable<Page<SiteConfigurationSnapshotInfoInner>>>() {
            @Override
            public Observable<Page<SiteConfigurationSnapshotInfoInner>> call(Page<SiteConfigurationSnapshotInfoInner> page) {
                return Observable.just(page).concatWith(listConfigurationSnapshotInfoNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<SiteConfigurationSnapshotInfo> listConfigurationSnapshotInfoAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listConfigurationSnapshotInfoAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<SiteConfigurationSnapshotInfoInner>, Observable<Page<SiteConfigurationSnapshotInfoInner>>>() {
            @Override
            public Observable<Page<SiteConfigurationSnapshotInfoInner>> call(Page<SiteConfigurationSnapshotInfoInner> page) {
                return listConfigurationSnapshotInfoNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<SiteConfigurationSnapshotInfoInner>, Iterable<SiteConfigurationSnapshotInfoInner>>() {
            @Override
            public Iterable<SiteConfigurationSnapshotInfoInner> call(Page<SiteConfigurationSnapshotInfoInner> page) {
                return page.items();
            }
       })
        .map(new Func1<SiteConfigurationSnapshotInfoInner, SiteConfigurationSnapshotInfo>() {
            @Override
            public SiteConfigurationSnapshotInfo call(SiteConfigurationSnapshotInfoInner inner) {
                return new SiteConfigurationSnapshotInfoImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<SiteConfigResource> getConfigurationSnapshotAsync(String resourceGroupName, String name, String snapshotId) {
        WebAppsInner client = this.inner();
        return client.getConfigurationSnapshotAsync(resourceGroupName, name, snapshotId)
        .map(new Func1<SiteConfigResourceInner, SiteConfigResource>() {
            @Override
            public SiteConfigResource call(SiteConfigResourceInner inner) {
                return new SiteConfigResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable recoverSiteConfigurationSnapshotAsync(String resourceGroupName, String name, String snapshotId) {
        WebAppsInner client = this.inner();
        return client.recoverSiteConfigurationSnapshotAsync(resourceGroupName, name, snapshotId).toCompletable();
    }

    private Observable<Page<SiteConfigurationSnapshotInfoInner>> listConfigurationSnapshotInfoSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listConfigurationSnapshotInfoSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<SiteConfigurationSnapshotInfoInner>, Observable<Page<SiteConfigurationSnapshotInfoInner>>>() {
            @Override
            public Observable<Page<SiteConfigurationSnapshotInfoInner>> call(Page<SiteConfigurationSnapshotInfoInner> page) {
                return Observable.just(page).concatWith(listConfigurationSnapshotInfoSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<SiteConfigurationSnapshotInfo> listConfigurationSnapshotInfoSlotAsync(final String resourceGroupName, final String name, final String slot) {
        WebAppsInner client = this.inner();
        return client.listConfigurationSnapshotInfoSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<Page<SiteConfigurationSnapshotInfoInner>, Observable<Page<SiteConfigurationSnapshotInfoInner>>>() {
            @Override
            public Observable<Page<SiteConfigurationSnapshotInfoInner>> call(Page<SiteConfigurationSnapshotInfoInner> page) {
                return listConfigurationSnapshotInfoSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<SiteConfigurationSnapshotInfoInner>, Iterable<SiteConfigurationSnapshotInfoInner>>() {
            @Override
            public Iterable<SiteConfigurationSnapshotInfoInner> call(Page<SiteConfigurationSnapshotInfoInner> page) {
                return page.items();
            }
       })
        .map(new Func1<SiteConfigurationSnapshotInfoInner, SiteConfigurationSnapshotInfo>() {
            @Override
            public SiteConfigurationSnapshotInfo call(SiteConfigurationSnapshotInfoInner inner) {
                return new SiteConfigurationSnapshotInfoImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<SiteConfigResource> getConfigurationSnapshotSlotAsync(String resourceGroupName, String name, String snapshotId, String slot) {
        WebAppsInner client = this.inner();
        return client.getConfigurationSnapshotSlotAsync(resourceGroupName, name, snapshotId, slot)
        .map(new Func1<SiteConfigResourceInner, SiteConfigResource>() {
            @Override
            public SiteConfigResource call(SiteConfigResourceInner inner) {
                return new SiteConfigResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable recoverSiteConfigurationSnapshotSlotAsync(String resourceGroupName, String name, String snapshotId, String slot) {
        WebAppsInner client = this.inner();
        return client.recoverSiteConfigurationSnapshotSlotAsync(resourceGroupName, name, snapshotId, slot).toCompletable();
    }

    private Observable<Page<SnapshotInner>> listSnapshotsSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listSnapshotsSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<SnapshotInner>, Observable<Page<SnapshotInner>>>() {
            @Override
            public Observable<Page<SnapshotInner>> call(Page<SnapshotInner> page) {
                return Observable.just(page).concatWith(listSnapshotsSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<Snapshot> listSnapshotsSlotAsync(final String resourceGroupName, final String name, final String slot) {
        WebAppsInner client = this.inner();
        return client.listSnapshotsSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<Page<SnapshotInner>, Observable<Page<SnapshotInner>>>() {
            @Override
            public Observable<Page<SnapshotInner>> call(Page<SnapshotInner> page) {
                return listSnapshotsSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<SnapshotInner>, Iterable<SnapshotInner>>() {
            @Override
            public Iterable<SnapshotInner> call(Page<SnapshotInner> page) {
                return page.items();
            }
       })
        .map(new Func1<SnapshotInner, Snapshot>() {
            @Override
            public Snapshot call(SnapshotInner inner) {
                return new SnapshotImpl(inner, manager());
            }
       });
    }

    @Override
    public Completable getWebSiteContainerLogsZipAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.getWebSiteContainerLogsZipAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Completable getWebSiteContainerLogsZipSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.getWebSiteContainerLogsZipSlotAsync(resourceGroupName, name, slot).toCompletable();
    }

    @Override
    public Observable<ContinuousWebJob> getContinuousWebJobAsync(String resourceGroupName, String name, String webJobName) {
        WebAppsInner client = this.inner();
        return client.getContinuousWebJobAsync(resourceGroupName, name, webJobName)
        .map(new Func1<ContinuousWebJobInner, ContinuousWebJob>() {
            @Override
            public ContinuousWebJob call(ContinuousWebJobInner inner) {
                return wrapContinuousWebJobModel(inner);
            }
       });
    }

    private Observable<Page<ContinuousWebJobInner>> listContinuousWebJobsNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listContinuousWebJobsNextAsync(nextLink)
        .flatMap(new Func1<Page<ContinuousWebJobInner>, Observable<Page<ContinuousWebJobInner>>>() {
            @Override
            public Observable<Page<ContinuousWebJobInner>> call(Page<ContinuousWebJobInner> page) {
                return Observable.just(page).concatWith(listContinuousWebJobsNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ContinuousWebJob> listContinuousWebJobsAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listContinuousWebJobsAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<ContinuousWebJobInner>, Observable<Page<ContinuousWebJobInner>>>() {
            @Override
            public Observable<Page<ContinuousWebJobInner>> call(Page<ContinuousWebJobInner> page) {
                return listContinuousWebJobsNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ContinuousWebJobInner>, Iterable<ContinuousWebJobInner>>() {
            @Override
            public Iterable<ContinuousWebJobInner> call(Page<ContinuousWebJobInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ContinuousWebJobInner, ContinuousWebJob>() {
            @Override
            public ContinuousWebJob call(ContinuousWebJobInner inner) {
                return wrapContinuousWebJobModel(inner);
            }
        });
    }

    @Override
    public Completable deleteContinuousWebJobAsync(String resourceGroupName, String name, String webJobName) {
        WebAppsInner client = this.inner();
        return client.deleteContinuousWebJobAsync(resourceGroupName, name, webJobName).toCompletable();
    }

    @Override
    public Completable startContinuousWebJobAsync(String resourceGroupName, String name, String webJobName) {
        WebAppsInner client = this.inner();
        return client.startContinuousWebJobAsync(resourceGroupName, name, webJobName).toCompletable();
    }

    @Override
    public Completable stopContinuousWebJobAsync(String resourceGroupName, String name, String webJobName) {
        WebAppsInner client = this.inner();
        return client.stopContinuousWebJobAsync(resourceGroupName, name, webJobName).toCompletable();
    }

    private Observable<Page<ContinuousWebJobInner>> listContinuousWebJobsSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listContinuousWebJobsSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<ContinuousWebJobInner>, Observable<Page<ContinuousWebJobInner>>>() {
            @Override
            public Observable<Page<ContinuousWebJobInner>> call(Page<ContinuousWebJobInner> page) {
                return Observable.just(page).concatWith(listContinuousWebJobsSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ContinuousWebJob> listContinuousWebJobsSlotAsync(final String resourceGroupName, final String name, final String slot) {
        WebAppsInner client = this.inner();
        return client.listContinuousWebJobsSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<Page<ContinuousWebJobInner>, Observable<Page<ContinuousWebJobInner>>>() {
            @Override
            public Observable<Page<ContinuousWebJobInner>> call(Page<ContinuousWebJobInner> page) {
                return listContinuousWebJobsSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ContinuousWebJobInner>, Iterable<ContinuousWebJobInner>>() {
            @Override
            public Iterable<ContinuousWebJobInner> call(Page<ContinuousWebJobInner> page) {
                return page.items();
            }
       })
        .map(new Func1<ContinuousWebJobInner, ContinuousWebJob>() {
            @Override
            public ContinuousWebJob call(ContinuousWebJobInner inner) {
                return new ContinuousWebJobImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<ContinuousWebJob> getContinuousWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot) {
        WebAppsInner client = this.inner();
        return client.getContinuousWebJobSlotAsync(resourceGroupName, name, webJobName, slot)
        .map(new Func1<ContinuousWebJobInner, ContinuousWebJob>() {
            @Override
            public ContinuousWebJob call(ContinuousWebJobInner inner) {
                return new ContinuousWebJobImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteContinuousWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot) {
        WebAppsInner client = this.inner();
        return client.deleteContinuousWebJobSlotAsync(resourceGroupName, name, webJobName, slot).toCompletable();
    }

    @Override
    public Completable startContinuousWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot) {
        WebAppsInner client = this.inner();
        return client.startContinuousWebJobSlotAsync(resourceGroupName, name, webJobName, slot).toCompletable();
    }

    @Override
    public Completable stopContinuousWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot) {
        WebAppsInner client = this.inner();
        return client.stopContinuousWebJobSlotAsync(resourceGroupName, name, webJobName, slot).toCompletable();
    }

    @Override
    public Observable<Deployment> getDeploymentAsync(String resourceGroupName, String name, String id) {
        WebAppsInner client = this.inner();
        return client.getDeploymentAsync(resourceGroupName, name, id)
        .map(new Func1<DeploymentInner, Deployment>() {
            @Override
            public Deployment call(DeploymentInner inner) {
                return wrapDeploymentModel(inner);
            }
       });
    }

    private Observable<Page<DeploymentInner>> listDeploymentsNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listDeploymentsNextAsync(nextLink)
        .flatMap(new Func1<Page<DeploymentInner>, Observable<Page<DeploymentInner>>>() {
            @Override
            public Observable<Page<DeploymentInner>> call(Page<DeploymentInner> page) {
                return Observable.just(page).concatWith(listDeploymentsNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<Deployment> listDeploymentsAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listDeploymentsAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<DeploymentInner>, Observable<Page<DeploymentInner>>>() {
            @Override
            public Observable<Page<DeploymentInner>> call(Page<DeploymentInner> page) {
                return listDeploymentsNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<DeploymentInner>, Iterable<DeploymentInner>>() {
            @Override
            public Iterable<DeploymentInner> call(Page<DeploymentInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DeploymentInner, Deployment>() {
            @Override
            public Deployment call(DeploymentInner inner) {
                return wrapDeploymentModel(inner);
            }
        });
    }

    @Override
    public Completable deleteDeploymentAsync(String resourceGroupName, String name, String id) {
        WebAppsInner client = this.inner();
        return client.deleteDeploymentAsync(resourceGroupName, name, id).toCompletable();
    }

    @Override
    public Observable<Deployment> listDeploymentLogAsync(String resourceGroupName, String name, String id) {
        WebAppsInner client = this.inner();
        return client.listDeploymentLogAsync(resourceGroupName, name, id)
        .map(new Func1<DeploymentInner, Deployment>() {
            @Override
            public Deployment call(DeploymentInner inner) {
                return new DeploymentImpl(inner, manager());
            }
        });
    }

    private Observable<Page<DeploymentInner>> listDeploymentsSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listDeploymentsSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<DeploymentInner>, Observable<Page<DeploymentInner>>>() {
            @Override
            public Observable<Page<DeploymentInner>> call(Page<DeploymentInner> page) {
                return Observable.just(page).concatWith(listDeploymentsSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<Deployment> listDeploymentsSlotAsync(final String resourceGroupName, final String name, final String slot) {
        WebAppsInner client = this.inner();
        return client.listDeploymentsSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<Page<DeploymentInner>, Observable<Page<DeploymentInner>>>() {
            @Override
            public Observable<Page<DeploymentInner>> call(Page<DeploymentInner> page) {
                return listDeploymentsSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<DeploymentInner>, Iterable<DeploymentInner>>() {
            @Override
            public Iterable<DeploymentInner> call(Page<DeploymentInner> page) {
                return page.items();
            }
       })
        .map(new Func1<DeploymentInner, Deployment>() {
            @Override
            public Deployment call(DeploymentInner inner) {
                return new DeploymentImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<Deployment> getDeploymentSlotAsync(String resourceGroupName, String name, String id, String slot) {
        WebAppsInner client = this.inner();
        return client.getDeploymentSlotAsync(resourceGroupName, name, id, slot)
        .map(new Func1<DeploymentInner, Deployment>() {
            @Override
            public Deployment call(DeploymentInner inner) {
                return new DeploymentImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Deployment> createDeploymentSlotAsync(String resourceGroupName, String name, String id, String slot, DeploymentInner deployment) {
        WebAppsInner client = this.inner();
        return client.createDeploymentSlotAsync(resourceGroupName, name, id, slot, deployment)
        .map(new Func1<DeploymentInner, Deployment>() {
            @Override
            public Deployment call(DeploymentInner inner) {
                return new DeploymentImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteDeploymentSlotAsync(String resourceGroupName, String name, String id, String slot) {
        WebAppsInner client = this.inner();
        return client.deleteDeploymentSlotAsync(resourceGroupName, name, id, slot).toCompletable();
    }

    @Override
    public Observable<Deployment> listDeploymentLogSlotAsync(String resourceGroupName, String name, String id, String slot) {
        WebAppsInner client = this.inner();
        return client.listDeploymentLogSlotAsync(resourceGroupName, name, id, slot)
        .map(new Func1<DeploymentInner, Deployment>() {
            @Override
            public Deployment call(DeploymentInner inner) {
                return new DeploymentImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Identifier> getDomainOwnershipIdentifierAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName) {
        WebAppsInner client = this.inner();
        return client.getDomainOwnershipIdentifierAsync(resourceGroupName, name, domainOwnershipIdentifierName)
        .map(new Func1<IdentifierInner, Identifier>() {
            @Override
            public Identifier call(IdentifierInner inner) {
                return wrapIdentifierModel(inner);
            }
       });
    }

    private Observable<Page<IdentifierInner>> listDomainOwnershipIdentifiersNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listDomainOwnershipIdentifiersNextAsync(nextLink)
        .flatMap(new Func1<Page<IdentifierInner>, Observable<Page<IdentifierInner>>>() {
            @Override
            public Observable<Page<IdentifierInner>> call(Page<IdentifierInner> page) {
                return Observable.just(page).concatWith(listDomainOwnershipIdentifiersNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<Identifier> listDomainOwnershipIdentifiersAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listDomainOwnershipIdentifiersAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<IdentifierInner>, Observable<Page<IdentifierInner>>>() {
            @Override
            public Observable<Page<IdentifierInner>> call(Page<IdentifierInner> page) {
                return listDomainOwnershipIdentifiersNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<IdentifierInner>, Iterable<IdentifierInner>>() {
            @Override
            public Iterable<IdentifierInner> call(Page<IdentifierInner> page) {
                return page.items();
            }
        })
        .map(new Func1<IdentifierInner, Identifier>() {
            @Override
            public Identifier call(IdentifierInner inner) {
                return wrapIdentifierModel(inner);
            }
        });
    }

    @Override
    public Completable deleteDomainOwnershipIdentifierAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName) {
        WebAppsInner client = this.inner();
        return client.deleteDomainOwnershipIdentifierAsync(resourceGroupName, name, domainOwnershipIdentifierName).toCompletable();
    }

    private Observable<Page<IdentifierInner>> listDomainOwnershipIdentifiersSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listDomainOwnershipIdentifiersSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<IdentifierInner>, Observable<Page<IdentifierInner>>>() {
            @Override
            public Observable<Page<IdentifierInner>> call(Page<IdentifierInner> page) {
                return Observable.just(page).concatWith(listDomainOwnershipIdentifiersSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<Identifier> listDomainOwnershipIdentifiersSlotAsync(final String resourceGroupName, final String name, final String slot) {
        WebAppsInner client = this.inner();
        return client.listDomainOwnershipIdentifiersSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<Page<IdentifierInner>, Observable<Page<IdentifierInner>>>() {
            @Override
            public Observable<Page<IdentifierInner>> call(Page<IdentifierInner> page) {
                return listDomainOwnershipIdentifiersSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<IdentifierInner>, Iterable<IdentifierInner>>() {
            @Override
            public Iterable<IdentifierInner> call(Page<IdentifierInner> page) {
                return page.items();
            }
       })
        .map(new Func1<IdentifierInner, Identifier>() {
            @Override
            public Identifier call(IdentifierInner inner) {
                return new IdentifierImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<Identifier> getDomainOwnershipIdentifierSlotAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot) {
        WebAppsInner client = this.inner();
        return client.getDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot)
        .map(new Func1<IdentifierInner, Identifier>() {
            @Override
            public Identifier call(IdentifierInner inner) {
                return new IdentifierImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Identifier> createOrUpdateDomainOwnershipIdentifierSlotAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, IdentifierInner domainOwnershipIdentifier) {
        WebAppsInner client = this.inner();
        return client.createOrUpdateDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot, domainOwnershipIdentifier)
        .map(new Func1<IdentifierInner, Identifier>() {
            @Override
            public Identifier call(IdentifierInner inner) {
                return new IdentifierImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteDomainOwnershipIdentifierSlotAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot) {
        WebAppsInner client = this.inner();
        return client.deleteDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot).toCompletable();
    }

    @Override
    public Observable<Identifier> updateDomainOwnershipIdentifierSlotAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, IdentifierInner domainOwnershipIdentifier) {
        WebAppsInner client = this.inner();
        return client.updateDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot, domainOwnershipIdentifier)
        .map(new Func1<IdentifierInner, Identifier>() {
            @Override
            public Identifier call(IdentifierInner inner) {
                return new IdentifierImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MSDeployStatus> getMSDeployStatusAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.getMSDeployStatusAsync(resourceGroupName, name)
        .map(new Func1<MSDeployStatusInner, MSDeployStatus>() {
            @Override
            public MSDeployStatus call(MSDeployStatusInner inner) {
                return new MSDeployStatusImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MSDeployStatus> createMSDeployOperationAsync(String resourceGroupName, String name, MSDeploy mSDeploy) {
        WebAppsInner client = this.inner();
        return client.createMSDeployOperationAsync(resourceGroupName, name, mSDeploy)
        .map(new Func1<MSDeployStatusInner, MSDeployStatus>() {
            @Override
            public MSDeployStatus call(MSDeployStatusInner inner) {
                return new MSDeployStatusImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MSDeployLog> getMSDeployLogAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.getMSDeployLogAsync(resourceGroupName, name)
        .map(new Func1<MSDeployLogInner, MSDeployLog>() {
            @Override
            public MSDeployLog call(MSDeployLogInner inner) {
                return new MSDeployLogImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MSDeployStatus> getInstanceMsDeployStatusAsync(String resourceGroupName, String name, String instanceId) {
        WebAppsInner client = this.inner();
        return client.getInstanceMsDeployStatusAsync(resourceGroupName, name, instanceId)
        .map(new Func1<MSDeployStatusInner, MSDeployStatus>() {
            @Override
            public MSDeployStatus call(MSDeployStatusInner inner) {
                return new MSDeployStatusImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MSDeployStatus> createInstanceMSDeployOperationAsync(String resourceGroupName, String name, String instanceId, MSDeploy mSDeploy) {
        WebAppsInner client = this.inner();
        return client.createInstanceMSDeployOperationAsync(resourceGroupName, name, instanceId, mSDeploy)
        .map(new Func1<MSDeployStatusInner, MSDeployStatus>() {
            @Override
            public MSDeployStatus call(MSDeployStatusInner inner) {
                return new MSDeployStatusImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MSDeployLog> getInstanceMSDeployLogAsync(String resourceGroupName, String name, String instanceId) {
        WebAppsInner client = this.inner();
        return client.getInstanceMSDeployLogAsync(resourceGroupName, name, instanceId)
        .map(new Func1<MSDeployLogInner, MSDeployLog>() {
            @Override
            public MSDeployLog call(MSDeployLogInner inner) {
                return new MSDeployLogImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MSDeployStatus> getMSDeployStatusSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.getMSDeployStatusSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<MSDeployStatusInner, MSDeployStatus>() {
            @Override
            public MSDeployStatus call(MSDeployStatusInner inner) {
                return new MSDeployStatusImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MSDeployStatus> createMSDeployOperationSlotAsync(String resourceGroupName, String name, String slot, MSDeploy mSDeploy) {
        WebAppsInner client = this.inner();
        return client.createMSDeployOperationSlotAsync(resourceGroupName, name, slot, mSDeploy)
        .map(new Func1<MSDeployStatusInner, MSDeployStatus>() {
            @Override
            public MSDeployStatus call(MSDeployStatusInner inner) {
                return new MSDeployStatusImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MSDeployLog> getMSDeployLogSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.getMSDeployLogSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<MSDeployLogInner, MSDeployLog>() {
            @Override
            public MSDeployLog call(MSDeployLogInner inner) {
                return new MSDeployLogImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MSDeployStatus> getInstanceMsDeployStatusSlotAsync(String resourceGroupName, String name, String slot, String instanceId) {
        WebAppsInner client = this.inner();
        return client.getInstanceMsDeployStatusSlotAsync(resourceGroupName, name, slot, instanceId)
        .map(new Func1<MSDeployStatusInner, MSDeployStatus>() {
            @Override
            public MSDeployStatus call(MSDeployStatusInner inner) {
                return new MSDeployStatusImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MSDeployStatus> createInstanceMSDeployOperationSlotAsync(String resourceGroupName, String name, String slot, String instanceId, MSDeploy mSDeploy) {
        WebAppsInner client = this.inner();
        return client.createInstanceMSDeployOperationSlotAsync(resourceGroupName, name, slot, instanceId, mSDeploy)
        .map(new Func1<MSDeployStatusInner, MSDeployStatus>() {
            @Override
            public MSDeployStatus call(MSDeployStatusInner inner) {
                return new MSDeployStatusImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MSDeployLog> getInstanceMSDeployLogSlotAsync(String resourceGroupName, String name, String slot, String instanceId) {
        WebAppsInner client = this.inner();
        return client.getInstanceMSDeployLogSlotAsync(resourceGroupName, name, slot, instanceId)
        .map(new Func1<MSDeployLogInner, MSDeployLog>() {
            @Override
            public MSDeployLog call(MSDeployLogInner inner) {
                return new MSDeployLogImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<FunctionEnvelope> getFunctionAsync(String resourceGroupName, String name, String functionName) {
        WebAppsInner client = this.inner();
        return client.getFunctionAsync(resourceGroupName, name, functionName)
        .map(new Func1<FunctionEnvelopeInner, FunctionEnvelope>() {
            @Override
            public FunctionEnvelope call(FunctionEnvelopeInner inner) {
                return wrapFunctionEnvelopeModel(inner);
            }
       });
    }

    private Observable<Page<FunctionEnvelopeInner>> listFunctionsNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listFunctionsNextAsync(nextLink)
        .flatMap(new Func1<Page<FunctionEnvelopeInner>, Observable<Page<FunctionEnvelopeInner>>>() {
            @Override
            public Observable<Page<FunctionEnvelopeInner>> call(Page<FunctionEnvelopeInner> page) {
                return Observable.just(page).concatWith(listFunctionsNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<FunctionEnvelope> listFunctionsAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listFunctionsAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<FunctionEnvelopeInner>, Observable<Page<FunctionEnvelopeInner>>>() {
            @Override
            public Observable<Page<FunctionEnvelopeInner>> call(Page<FunctionEnvelopeInner> page) {
                return listFunctionsNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<FunctionEnvelopeInner>, Iterable<FunctionEnvelopeInner>>() {
            @Override
            public Iterable<FunctionEnvelopeInner> call(Page<FunctionEnvelopeInner> page) {
                return page.items();
            }
        })
        .map(new Func1<FunctionEnvelopeInner, FunctionEnvelope>() {
            @Override
            public FunctionEnvelope call(FunctionEnvelopeInner inner) {
                return wrapFunctionEnvelopeModel(inner);
            }
        });
    }

    @Override
    public Completable deleteFunctionAsync(String resourceGroupName, String name, String functionName) {
        WebAppsInner client = this.inner();
        return client.deleteFunctionAsync(resourceGroupName, name, functionName).toCompletable();
    }

    @Override
    public Observable<FunctionSecrets> listFunctionSecretsAsync(String resourceGroupName, String name, String functionName) {
        WebAppsInner client = this.inner();
        return client.listFunctionSecretsAsync(resourceGroupName, name, functionName)
        .map(new Func1<FunctionSecretsInner, FunctionSecrets>() {
            @Override
            public FunctionSecrets call(FunctionSecretsInner inner) {
                return new FunctionSecretsImpl(inner, manager());
            }
        });
    }

    private Observable<Page<FunctionEnvelopeInner>> listInstanceFunctionsSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listInstanceFunctionsSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<FunctionEnvelopeInner>, Observable<Page<FunctionEnvelopeInner>>>() {
            @Override
            public Observable<Page<FunctionEnvelopeInner>> call(Page<FunctionEnvelopeInner> page) {
                return Observable.just(page).concatWith(listInstanceFunctionsSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<FunctionEnvelope> listInstanceFunctionsSlotAsync(final String resourceGroupName, final String name, final String slot) {
        WebAppsInner client = this.inner();
        return client.listInstanceFunctionsSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<Page<FunctionEnvelopeInner>, Observable<Page<FunctionEnvelopeInner>>>() {
            @Override
            public Observable<Page<FunctionEnvelopeInner>> call(Page<FunctionEnvelopeInner> page) {
                return listInstanceFunctionsSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<FunctionEnvelopeInner>, Iterable<FunctionEnvelopeInner>>() {
            @Override
            public Iterable<FunctionEnvelopeInner> call(Page<FunctionEnvelopeInner> page) {
                return page.items();
            }
       })
        .map(new Func1<FunctionEnvelopeInner, FunctionEnvelope>() {
            @Override
            public FunctionEnvelope call(FunctionEnvelopeInner inner) {
                return new FunctionEnvelopeImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<FunctionEnvelope> getInstanceFunctionSlotAsync(String resourceGroupName, String name, String functionName, String slot) {
        WebAppsInner client = this.inner();
        return client.getInstanceFunctionSlotAsync(resourceGroupName, name, functionName, slot)
        .map(new Func1<FunctionEnvelopeInner, FunctionEnvelope>() {
            @Override
            public FunctionEnvelope call(FunctionEnvelopeInner inner) {
                return new FunctionEnvelopeImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<FunctionEnvelope> createInstanceFunctionSlotAsync(String resourceGroupName, String name, String functionName, String slot, FunctionEnvelopeInner functionEnvelope) {
        WebAppsInner client = this.inner();
        return client.createInstanceFunctionSlotAsync(resourceGroupName, name, functionName, slot, functionEnvelope)
        .map(new Func1<FunctionEnvelopeInner, FunctionEnvelope>() {
            @Override
            public FunctionEnvelope call(FunctionEnvelopeInner inner) {
                return new FunctionEnvelopeImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteInstanceFunctionSlotAsync(String resourceGroupName, String name, String functionName, String slot) {
        WebAppsInner client = this.inner();
        return client.deleteInstanceFunctionSlotAsync(resourceGroupName, name, functionName, slot).toCompletable();
    }

    @Override
    public Observable<FunctionSecrets> listFunctionSecretsSlotAsync(String resourceGroupName, String name, String functionName, String slot) {
        WebAppsInner client = this.inner();
        return client.listFunctionSecretsSlotAsync(resourceGroupName, name, functionName, slot)
        .map(new Func1<FunctionSecretsInner, FunctionSecrets>() {
            @Override
            public FunctionSecrets call(FunctionSecretsInner inner) {
                return new FunctionSecretsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<HostNameBinding> getHostNameBindingAsync(String resourceGroupName, String name, String hostName) {
        WebAppsInner client = this.inner();
        return client.getHostNameBindingAsync(resourceGroupName, name, hostName)
        .map(new Func1<HostNameBindingInner, HostNameBinding>() {
            @Override
            public HostNameBinding call(HostNameBindingInner inner) {
                return wrapHostNameBindingModel(inner);
            }
       });
    }

    private Observable<Page<HostNameBindingInner>> listHostNameBindingsNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listHostNameBindingsNextAsync(nextLink)
        .flatMap(new Func1<Page<HostNameBindingInner>, Observable<Page<HostNameBindingInner>>>() {
            @Override
            public Observable<Page<HostNameBindingInner>> call(Page<HostNameBindingInner> page) {
                return Observable.just(page).concatWith(listHostNameBindingsNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<HostNameBinding> listHostNameBindingsAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listHostNameBindingsAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<HostNameBindingInner>, Observable<Page<HostNameBindingInner>>>() {
            @Override
            public Observable<Page<HostNameBindingInner>> call(Page<HostNameBindingInner> page) {
                return listHostNameBindingsNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<HostNameBindingInner>, Iterable<HostNameBindingInner>>() {
            @Override
            public Iterable<HostNameBindingInner> call(Page<HostNameBindingInner> page) {
                return page.items();
            }
        })
        .map(new Func1<HostNameBindingInner, HostNameBinding>() {
            @Override
            public HostNameBinding call(HostNameBindingInner inner) {
                return wrapHostNameBindingModel(inner);
            }
        });
    }

    @Override
    public Completable deleteHostNameBindingAsync(String resourceGroupName, String name, String hostName) {
        WebAppsInner client = this.inner();
        return client.deleteHostNameBindingAsync(resourceGroupName, name, hostName).toCompletable();
    }

    private Observable<Page<HostNameBindingInner>> listHostNameBindingsSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listHostNameBindingsSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<HostNameBindingInner>, Observable<Page<HostNameBindingInner>>>() {
            @Override
            public Observable<Page<HostNameBindingInner>> call(Page<HostNameBindingInner> page) {
                return Observable.just(page).concatWith(listHostNameBindingsSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<HostNameBinding> listHostNameBindingsSlotAsync(final String resourceGroupName, final String name, final String slot) {
        WebAppsInner client = this.inner();
        return client.listHostNameBindingsSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<Page<HostNameBindingInner>, Observable<Page<HostNameBindingInner>>>() {
            @Override
            public Observable<Page<HostNameBindingInner>> call(Page<HostNameBindingInner> page) {
                return listHostNameBindingsSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<HostNameBindingInner>, Iterable<HostNameBindingInner>>() {
            @Override
            public Iterable<HostNameBindingInner> call(Page<HostNameBindingInner> page) {
                return page.items();
            }
       })
        .map(new Func1<HostNameBindingInner, HostNameBinding>() {
            @Override
            public HostNameBinding call(HostNameBindingInner inner) {
                return new HostNameBindingImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<HostNameBinding> getHostNameBindingSlotAsync(String resourceGroupName, String name, String slot, String hostName) {
        WebAppsInner client = this.inner();
        return client.getHostNameBindingSlotAsync(resourceGroupName, name, slot, hostName)
        .map(new Func1<HostNameBindingInner, HostNameBinding>() {
            @Override
            public HostNameBinding call(HostNameBindingInner inner) {
                return new HostNameBindingImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<HostNameBinding> createOrUpdateHostNameBindingSlotAsync(String resourceGroupName, String name, String hostName, String slot, HostNameBindingInner hostNameBinding) {
        WebAppsInner client = this.inner();
        return client.createOrUpdateHostNameBindingSlotAsync(resourceGroupName, name, hostName, slot, hostNameBinding)
        .map(new Func1<HostNameBindingInner, HostNameBinding>() {
            @Override
            public HostNameBinding call(HostNameBindingInner inner) {
                return new HostNameBindingImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteHostNameBindingSlotAsync(String resourceGroupName, String name, String slot, String hostName) {
        WebAppsInner client = this.inner();
        return client.deleteHostNameBindingSlotAsync(resourceGroupName, name, slot, hostName).toCompletable();
    }

    @Override
    public Observable<HybridConnection> getHybridConnectionAsync(String resourceGroupName, String name, String namespaceName, String relayName) {
        WebAppsInner client = this.inner();
        return client.getHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName)
        .map(new Func1<HybridConnectionInner, HybridConnection>() {
            @Override
            public HybridConnection call(HybridConnectionInner inner) {
                return wrapHybridConnectionModel(inner);
            }
       });
    }

    @Override
    public Completable deleteHybridConnectionAsync(String resourceGroupName, String name, String namespaceName, String relayName) {
        WebAppsInner client = this.inner();
        return client.deleteHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName).toCompletable();
    }

    @Override
    public Observable<HybridConnectionKey> listHybridConnectionKeysAsync(String resourceGroupName, String name, String namespaceName, String relayName) {
        WebAppsInner client = this.inner();
        return client.listHybridConnectionKeysAsync(resourceGroupName, name, namespaceName, relayName)
        .map(new Func1<HybridConnectionKeyInner, HybridConnectionKey>() {
            @Override
            public HybridConnectionKey call(HybridConnectionKeyInner inner) {
                return new HybridConnectionKeyImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<HybridConnection> getHybridConnectionSlotAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot) {
        WebAppsInner client = this.inner();
        return client.getHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, slot)
        .map(new Func1<HybridConnectionInner, HybridConnection>() {
            @Override
            public HybridConnection call(HybridConnectionInner inner) {
                return new HybridConnectionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<HybridConnection> createOrUpdateHybridConnectionSlotAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot, HybridConnectionInner connectionEnvelope) {
        WebAppsInner client = this.inner();
        return client.createOrUpdateHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, slot, connectionEnvelope)
        .map(new Func1<HybridConnectionInner, HybridConnection>() {
            @Override
            public HybridConnection call(HybridConnectionInner inner) {
                return new HybridConnectionImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteHybridConnectionSlotAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot) {
        WebAppsInner client = this.inner();
        return client.deleteHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, slot).toCompletable();
    }

    @Override
    public Observable<HybridConnection> updateHybridConnectionSlotAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot, HybridConnectionInner connectionEnvelope) {
        WebAppsInner client = this.inner();
        return client.updateHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, slot, connectionEnvelope)
        .map(new Func1<HybridConnectionInner, HybridConnection>() {
            @Override
            public HybridConnection call(HybridConnectionInner inner) {
                return new HybridConnectionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<HybridConnectionKey> listHybridConnectionKeysSlotAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot) {
        WebAppsInner client = this.inner();
        return client.listHybridConnectionKeysSlotAsync(resourceGroupName, name, namespaceName, relayName, slot)
        .map(new Func1<HybridConnectionKeyInner, HybridConnectionKey>() {
            @Override
            public HybridConnectionKey call(HybridConnectionKeyInner inner) {
                return new HybridConnectionKeyImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<HybridConnection> listHybridConnectionsAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.listHybridConnectionsAsync(resourceGroupName, name)
        .map(new Func1<HybridConnectionInner, HybridConnection>() {
            @Override
            public HybridConnection call(HybridConnectionInner inner) {
                return new HybridConnectionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<HybridConnection> listHybridConnectionsSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.listHybridConnectionsSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<HybridConnectionInner, HybridConnection>() {
            @Override
            public HybridConnection call(HybridConnectionInner inner) {
                return new HybridConnectionImpl(inner, manager());
            }
        });
    }

    private Observable<Page<SiteInstanceInner>> listInstanceIdentifiersNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listInstanceIdentifiersNextAsync(nextLink)
        .flatMap(new Func1<Page<SiteInstanceInner>, Observable<Page<SiteInstanceInner>>>() {
            @Override
            public Observable<Page<SiteInstanceInner>> call(Page<SiteInstanceInner> page) {
                return Observable.just(page).concatWith(listInstanceIdentifiersNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<SiteInstance> listInstanceIdentifiersAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listInstanceIdentifiersAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<SiteInstanceInner>, Observable<Page<SiteInstanceInner>>>() {
            @Override
            public Observable<Page<SiteInstanceInner>> call(Page<SiteInstanceInner> page) {
                return listInstanceIdentifiersNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<SiteInstanceInner>, Iterable<SiteInstanceInner>>() {
            @Override
            public Iterable<SiteInstanceInner> call(Page<SiteInstanceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SiteInstanceInner, SiteInstance>() {
            @Override
            public SiteInstance call(SiteInstanceInner inner) {
                return wrapSiteInstanceModel(inner);
            }
        });
    }

    @Override
    public Completable getInstanceProcessDumpAsync(String resourceGroupName, String name, String processId, String instanceId) {
        WebAppsInner client = this.inner();
        return client.getInstanceProcessDumpAsync(resourceGroupName, name, processId, instanceId).toCompletable();
    }

    private Observable<Page<SiteInstanceInner>> listInstanceIdentifiersSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listInstanceIdentifiersSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<SiteInstanceInner>, Observable<Page<SiteInstanceInner>>>() {
            @Override
            public Observable<Page<SiteInstanceInner>> call(Page<SiteInstanceInner> page) {
                return Observable.just(page).concatWith(listInstanceIdentifiersSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<SiteInstance> listInstanceIdentifiersSlotAsync(final String resourceGroupName, final String name, final String slot) {
        WebAppsInner client = this.inner();
        return client.listInstanceIdentifiersSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<Page<SiteInstanceInner>, Observable<Page<SiteInstanceInner>>>() {
            @Override
            public Observable<Page<SiteInstanceInner>> call(Page<SiteInstanceInner> page) {
                return listInstanceIdentifiersSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<SiteInstanceInner>, Iterable<SiteInstanceInner>>() {
            @Override
            public Iterable<SiteInstanceInner> call(Page<SiteInstanceInner> page) {
                return page.items();
            }
       })
        .map(new Func1<SiteInstanceInner, SiteInstance>() {
            @Override
            public SiteInstance call(SiteInstanceInner inner) {
                return new SiteInstanceImpl(inner, manager());
            }
       });
    }

    @Override
    public Completable getInstanceProcessDumpSlotAsync(String resourceGroupName, String name, String processId, String slot, String instanceId) {
        WebAppsInner client = this.inner();
        return client.getInstanceProcessDumpSlotAsync(resourceGroupName, name, processId, slot, instanceId).toCompletable();
    }

    @Override
    public Observable<ProcessInfo> getInstanceProcessAsync(String resourceGroupName, String name, String processId, String instanceId) {
        WebAppsInner client = this.inner();
        return client.getInstanceProcessAsync(resourceGroupName, name, processId, instanceId)
        .map(new Func1<ProcessInfoInner, ProcessInfo>() {
            @Override
            public ProcessInfo call(ProcessInfoInner inner) {
                return wrapProcessInfoModel(inner);
            }
       });
    }

    private Observable<Page<ProcessInfoInner>> listInstanceProcessesNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listInstanceProcessesNextAsync(nextLink)
        .flatMap(new Func1<Page<ProcessInfoInner>, Observable<Page<ProcessInfoInner>>>() {
            @Override
            public Observable<Page<ProcessInfoInner>> call(Page<ProcessInfoInner> page) {
                return Observable.just(page).concatWith(listInstanceProcessesNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ProcessInfo> listInstanceProcessesAsync(final String resourceGroupName, final String name, final String instanceId) {
        WebAppsInner client = this.inner();
        return client.listInstanceProcessesAsync(resourceGroupName, name, instanceId)
        .flatMap(new Func1<Page<ProcessInfoInner>, Observable<Page<ProcessInfoInner>>>() {
            @Override
            public Observable<Page<ProcessInfoInner>> call(Page<ProcessInfoInner> page) {
                return listInstanceProcessesNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ProcessInfoInner>, Iterable<ProcessInfoInner>>() {
            @Override
            public Iterable<ProcessInfoInner> call(Page<ProcessInfoInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ProcessInfoInner, ProcessInfo>() {
            @Override
            public ProcessInfo call(ProcessInfoInner inner) {
                return wrapProcessInfoModel(inner);
            }
        });
    }

    @Override
    public Completable deleteInstanceProcessAsync(String resourceGroupName, String name, String processId, String instanceId) {
        WebAppsInner client = this.inner();
        return client.deleteInstanceProcessAsync(resourceGroupName, name, processId, instanceId).toCompletable();
    }

    private Observable<Page<ProcessInfoInner>> listProcessesNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listProcessesNextAsync(nextLink)
        .flatMap(new Func1<Page<ProcessInfoInner>, Observable<Page<ProcessInfoInner>>>() {
            @Override
            public Observable<Page<ProcessInfoInner>> call(Page<ProcessInfoInner> page) {
                return Observable.just(page).concatWith(listProcessesNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ProcessInfo> listProcessesAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listProcessesAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<ProcessInfoInner>, Observable<Page<ProcessInfoInner>>>() {
            @Override
            public Observable<Page<ProcessInfoInner>> call(Page<ProcessInfoInner> page) {
                return listProcessesNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ProcessInfoInner>, Iterable<ProcessInfoInner>>() {
            @Override
            public Iterable<ProcessInfoInner> call(Page<ProcessInfoInner> page) {
                return page.items();
            }
       })
        .map(new Func1<ProcessInfoInner, ProcessInfo>() {
            @Override
            public ProcessInfo call(ProcessInfoInner inner) {
                return new ProcessInfoImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<ProcessInfo> getProcessAsync(String resourceGroupName, String name, String processId) {
        WebAppsInner client = this.inner();
        return client.getProcessAsync(resourceGroupName, name, processId)
        .map(new Func1<ProcessInfoInner, ProcessInfo>() {
            @Override
            public ProcessInfo call(ProcessInfoInner inner) {
                return new ProcessInfoImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteProcessAsync(String resourceGroupName, String name, String processId) {
        WebAppsInner client = this.inner();
        return client.deleteProcessAsync(resourceGroupName, name, processId).toCompletable();
    }

    private Observable<Page<ProcessInfoInner>> listInstanceProcessesSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listInstanceProcessesSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<ProcessInfoInner>, Observable<Page<ProcessInfoInner>>>() {
            @Override
            public Observable<Page<ProcessInfoInner>> call(Page<ProcessInfoInner> page) {
                return Observable.just(page).concatWith(listInstanceProcessesSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ProcessInfo> listInstanceProcessesSlotAsync(final String resourceGroupName, final String name, final String slot, final String instanceId) {
        WebAppsInner client = this.inner();
        return client.listInstanceProcessesSlotAsync(resourceGroupName, name, slot, instanceId)
        .flatMap(new Func1<Page<ProcessInfoInner>, Observable<Page<ProcessInfoInner>>>() {
            @Override
            public Observable<Page<ProcessInfoInner>> call(Page<ProcessInfoInner> page) {
                return listInstanceProcessesSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ProcessInfoInner>, Iterable<ProcessInfoInner>>() {
            @Override
            public Iterable<ProcessInfoInner> call(Page<ProcessInfoInner> page) {
                return page.items();
            }
       })
        .map(new Func1<ProcessInfoInner, ProcessInfo>() {
            @Override
            public ProcessInfo call(ProcessInfoInner inner) {
                return new ProcessInfoImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<ProcessInfo> getInstanceProcessSlotAsync(String resourceGroupName, String name, String processId, String slot, String instanceId) {
        WebAppsInner client = this.inner();
        return client.getInstanceProcessSlotAsync(resourceGroupName, name, processId, slot, instanceId)
        .map(new Func1<ProcessInfoInner, ProcessInfo>() {
            @Override
            public ProcessInfo call(ProcessInfoInner inner) {
                return new ProcessInfoImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteInstanceProcessSlotAsync(String resourceGroupName, String name, String processId, String slot, String instanceId) {
        WebAppsInner client = this.inner();
        return client.deleteInstanceProcessSlotAsync(resourceGroupName, name, processId, slot, instanceId).toCompletable();
    }

    private Observable<Page<ProcessInfoInner>> listProcessesSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listProcessesSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<ProcessInfoInner>, Observable<Page<ProcessInfoInner>>>() {
            @Override
            public Observable<Page<ProcessInfoInner>> call(Page<ProcessInfoInner> page) {
                return Observable.just(page).concatWith(listProcessesSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ProcessInfo> listProcessesSlotAsync(final String resourceGroupName, final String name, final String slot) {
        WebAppsInner client = this.inner();
        return client.listProcessesSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<Page<ProcessInfoInner>, Observable<Page<ProcessInfoInner>>>() {
            @Override
            public Observable<Page<ProcessInfoInner>> call(Page<ProcessInfoInner> page) {
                return listProcessesSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ProcessInfoInner>, Iterable<ProcessInfoInner>>() {
            @Override
            public Iterable<ProcessInfoInner> call(Page<ProcessInfoInner> page) {
                return page.items();
            }
       })
        .map(new Func1<ProcessInfoInner, ProcessInfo>() {
            @Override
            public ProcessInfo call(ProcessInfoInner inner) {
                return new ProcessInfoImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<ProcessInfo> getProcessSlotAsync(String resourceGroupName, String name, String processId, String slot) {
        WebAppsInner client = this.inner();
        return client.getProcessSlotAsync(resourceGroupName, name, processId, slot)
        .map(new Func1<ProcessInfoInner, ProcessInfo>() {
            @Override
            public ProcessInfo call(ProcessInfoInner inner) {
                return new ProcessInfoImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteProcessSlotAsync(String resourceGroupName, String name, String processId, String slot) {
        WebAppsInner client = this.inner();
        return client.deleteProcessSlotAsync(resourceGroupName, name, processId, slot).toCompletable();
    }

    @Override
    public Observable<ProcessModuleInfo> getInstanceProcessModuleAsync(String resourceGroupName, String name, String processId, String baseAddress, String instanceId) {
        WebAppsInner client = this.inner();
        return client.getInstanceProcessModuleAsync(resourceGroupName, name, processId, baseAddress, instanceId)
        .map(new Func1<ProcessModuleInfoInner, ProcessModuleInfo>() {
            @Override
            public ProcessModuleInfo call(ProcessModuleInfoInner inner) {
                return wrapProcessModuleInfoModel(inner);
            }
       });
    }

    private Observable<Page<ProcessModuleInfoInner>> listInstanceProcessModulesNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listInstanceProcessModulesNextAsync(nextLink)
        .flatMap(new Func1<Page<ProcessModuleInfoInner>, Observable<Page<ProcessModuleInfoInner>>>() {
            @Override
            public Observable<Page<ProcessModuleInfoInner>> call(Page<ProcessModuleInfoInner> page) {
                return Observable.just(page).concatWith(listInstanceProcessModulesNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ProcessModuleInfo> listInstanceProcessModulesAsync(final String resourceGroupName, final String name, final String processId, final String instanceId) {
        WebAppsInner client = this.inner();
        return client.listInstanceProcessModulesAsync(resourceGroupName, name, processId, instanceId)
        .flatMap(new Func1<Page<ProcessModuleInfoInner>, Observable<Page<ProcessModuleInfoInner>>>() {
            @Override
            public Observable<Page<ProcessModuleInfoInner>> call(Page<ProcessModuleInfoInner> page) {
                return listInstanceProcessModulesNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ProcessModuleInfoInner>, Iterable<ProcessModuleInfoInner>>() {
            @Override
            public Iterable<ProcessModuleInfoInner> call(Page<ProcessModuleInfoInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ProcessModuleInfoInner, ProcessModuleInfo>() {
            @Override
            public ProcessModuleInfo call(ProcessModuleInfoInner inner) {
                return wrapProcessModuleInfoModel(inner);
            }
        });
    }

    private Observable<Page<ProcessModuleInfoInner>> listProcessModulesNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listProcessModulesNextAsync(nextLink)
        .flatMap(new Func1<Page<ProcessModuleInfoInner>, Observable<Page<ProcessModuleInfoInner>>>() {
            @Override
            public Observable<Page<ProcessModuleInfoInner>> call(Page<ProcessModuleInfoInner> page) {
                return Observable.just(page).concatWith(listProcessModulesNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ProcessModuleInfo> listProcessModulesAsync(final String resourceGroupName, final String name, final String processId) {
        WebAppsInner client = this.inner();
        return client.listProcessModulesAsync(resourceGroupName, name, processId)
        .flatMap(new Func1<Page<ProcessModuleInfoInner>, Observable<Page<ProcessModuleInfoInner>>>() {
            @Override
            public Observable<Page<ProcessModuleInfoInner>> call(Page<ProcessModuleInfoInner> page) {
                return listProcessModulesNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ProcessModuleInfoInner>, Iterable<ProcessModuleInfoInner>>() {
            @Override
            public Iterable<ProcessModuleInfoInner> call(Page<ProcessModuleInfoInner> page) {
                return page.items();
            }
       })
        .map(new Func1<ProcessModuleInfoInner, ProcessModuleInfo>() {
            @Override
            public ProcessModuleInfo call(ProcessModuleInfoInner inner) {
                return new ProcessModuleInfoImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<ProcessModuleInfo> getProcessModuleAsync(String resourceGroupName, String name, String processId, String baseAddress) {
        WebAppsInner client = this.inner();
        return client.getProcessModuleAsync(resourceGroupName, name, processId, baseAddress)
        .map(new Func1<ProcessModuleInfoInner, ProcessModuleInfo>() {
            @Override
            public ProcessModuleInfo call(ProcessModuleInfoInner inner) {
                return new ProcessModuleInfoImpl(inner, manager());
            }
        });
    }

    private Observable<Page<ProcessModuleInfoInner>> listInstanceProcessModulesSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listInstanceProcessModulesSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<ProcessModuleInfoInner>, Observable<Page<ProcessModuleInfoInner>>>() {
            @Override
            public Observable<Page<ProcessModuleInfoInner>> call(Page<ProcessModuleInfoInner> page) {
                return Observable.just(page).concatWith(listInstanceProcessModulesSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ProcessModuleInfo> listInstanceProcessModulesSlotAsync(final String resourceGroupName, final String name, final String processId, final String slot, final String instanceId) {
        WebAppsInner client = this.inner();
        return client.listInstanceProcessModulesSlotAsync(resourceGroupName, name, processId, slot, instanceId)
        .flatMap(new Func1<Page<ProcessModuleInfoInner>, Observable<Page<ProcessModuleInfoInner>>>() {
            @Override
            public Observable<Page<ProcessModuleInfoInner>> call(Page<ProcessModuleInfoInner> page) {
                return listInstanceProcessModulesSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ProcessModuleInfoInner>, Iterable<ProcessModuleInfoInner>>() {
            @Override
            public Iterable<ProcessModuleInfoInner> call(Page<ProcessModuleInfoInner> page) {
                return page.items();
            }
       })
        .map(new Func1<ProcessModuleInfoInner, ProcessModuleInfo>() {
            @Override
            public ProcessModuleInfo call(ProcessModuleInfoInner inner) {
                return new ProcessModuleInfoImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<ProcessModuleInfo> getInstanceProcessModuleSlotAsync(String resourceGroupName, String name, String processId, String baseAddress, String slot, String instanceId) {
        WebAppsInner client = this.inner();
        return client.getInstanceProcessModuleSlotAsync(resourceGroupName, name, processId, baseAddress, slot, instanceId)
        .map(new Func1<ProcessModuleInfoInner, ProcessModuleInfo>() {
            @Override
            public ProcessModuleInfo call(ProcessModuleInfoInner inner) {
                return new ProcessModuleInfoImpl(inner, manager());
            }
        });
    }

    private Observable<Page<ProcessModuleInfoInner>> listProcessModulesSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listProcessModulesSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<ProcessModuleInfoInner>, Observable<Page<ProcessModuleInfoInner>>>() {
            @Override
            public Observable<Page<ProcessModuleInfoInner>> call(Page<ProcessModuleInfoInner> page) {
                return Observable.just(page).concatWith(listProcessModulesSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ProcessModuleInfo> listProcessModulesSlotAsync(final String resourceGroupName, final String name, final String processId, final String slot) {
        WebAppsInner client = this.inner();
        return client.listProcessModulesSlotAsync(resourceGroupName, name, processId, slot)
        .flatMap(new Func1<Page<ProcessModuleInfoInner>, Observable<Page<ProcessModuleInfoInner>>>() {
            @Override
            public Observable<Page<ProcessModuleInfoInner>> call(Page<ProcessModuleInfoInner> page) {
                return listProcessModulesSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ProcessModuleInfoInner>, Iterable<ProcessModuleInfoInner>>() {
            @Override
            public Iterable<ProcessModuleInfoInner> call(Page<ProcessModuleInfoInner> page) {
                return page.items();
            }
       })
        .map(new Func1<ProcessModuleInfoInner, ProcessModuleInfo>() {
            @Override
            public ProcessModuleInfo call(ProcessModuleInfoInner inner) {
                return new ProcessModuleInfoImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<ProcessModuleInfo> getProcessModuleSlotAsync(String resourceGroupName, String name, String processId, String baseAddress, String slot) {
        WebAppsInner client = this.inner();
        return client.getProcessModuleSlotAsync(resourceGroupName, name, processId, baseAddress, slot)
        .map(new Func1<ProcessModuleInfoInner, ProcessModuleInfo>() {
            @Override
            public ProcessModuleInfo call(ProcessModuleInfoInner inner) {
                return new ProcessModuleInfoImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ProcessThreadInfo> getInstanceProcessThreadAsync(String resourceGroupName, String name, String processId, String threadId, String instanceId) {
        WebAppsInner client = this.inner();
        return client.getInstanceProcessThreadAsync(resourceGroupName, name, processId, threadId, instanceId)
        .map(new Func1<ProcessThreadInfoInner, ProcessThreadInfo>() {
            @Override
            public ProcessThreadInfo call(ProcessThreadInfoInner inner) {
                return wrapProcessThreadInfoModel(inner);
            }
       });
    }

    private Observable<Page<ProcessThreadInfoInner>> listInstanceProcessThreadsNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listInstanceProcessThreadsNextAsync(nextLink)
        .flatMap(new Func1<Page<ProcessThreadInfoInner>, Observable<Page<ProcessThreadInfoInner>>>() {
            @Override
            public Observable<Page<ProcessThreadInfoInner>> call(Page<ProcessThreadInfoInner> page) {
                return Observable.just(page).concatWith(listInstanceProcessThreadsNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ProcessThreadInfo> listInstanceProcessThreadsAsync(final String resourceGroupName, final String name, final String processId, final String instanceId) {
        WebAppsInner client = this.inner();
        return client.listInstanceProcessThreadsAsync(resourceGroupName, name, processId, instanceId)
        .flatMap(new Func1<Page<ProcessThreadInfoInner>, Observable<Page<ProcessThreadInfoInner>>>() {
            @Override
            public Observable<Page<ProcessThreadInfoInner>> call(Page<ProcessThreadInfoInner> page) {
                return listInstanceProcessThreadsNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ProcessThreadInfoInner>, Iterable<ProcessThreadInfoInner>>() {
            @Override
            public Iterable<ProcessThreadInfoInner> call(Page<ProcessThreadInfoInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ProcessThreadInfoInner, ProcessThreadInfo>() {
            @Override
            public ProcessThreadInfo call(ProcessThreadInfoInner inner) {
                return wrapProcessThreadInfoModel(inner);
            }
        });
    }

    private Observable<Page<ProcessThreadInfoInner>> listProcessThreadsNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listProcessThreadsNextAsync(nextLink)
        .flatMap(new Func1<Page<ProcessThreadInfoInner>, Observable<Page<ProcessThreadInfoInner>>>() {
            @Override
            public Observable<Page<ProcessThreadInfoInner>> call(Page<ProcessThreadInfoInner> page) {
                return Observable.just(page).concatWith(listProcessThreadsNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ProcessThreadInfo> listProcessThreadsAsync(final String resourceGroupName, final String name, final String processId) {
        WebAppsInner client = this.inner();
        return client.listProcessThreadsAsync(resourceGroupName, name, processId)
        .flatMap(new Func1<Page<ProcessThreadInfoInner>, Observable<Page<ProcessThreadInfoInner>>>() {
            @Override
            public Observable<Page<ProcessThreadInfoInner>> call(Page<ProcessThreadInfoInner> page) {
                return listProcessThreadsNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ProcessThreadInfoInner>, Iterable<ProcessThreadInfoInner>>() {
            @Override
            public Iterable<ProcessThreadInfoInner> call(Page<ProcessThreadInfoInner> page) {
                return page.items();
            }
       })
        .map(new Func1<ProcessThreadInfoInner, ProcessThreadInfo>() {
            @Override
            public ProcessThreadInfo call(ProcessThreadInfoInner inner) {
                return new ProcessThreadInfoImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<ProcessThreadInfo> getProcessThreadAsync(String resourceGroupName, String name, String processId, String threadId) {
        WebAppsInner client = this.inner();
        return client.getProcessThreadAsync(resourceGroupName, name, processId, threadId)
        .map(new Func1<ProcessThreadInfoInner, ProcessThreadInfo>() {
            @Override
            public ProcessThreadInfo call(ProcessThreadInfoInner inner) {
                return new ProcessThreadInfoImpl(inner, manager());
            }
        });
    }

    private Observable<Page<ProcessThreadInfoInner>> listInstanceProcessThreadsSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listInstanceProcessThreadsSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<ProcessThreadInfoInner>, Observable<Page<ProcessThreadInfoInner>>>() {
            @Override
            public Observable<Page<ProcessThreadInfoInner>> call(Page<ProcessThreadInfoInner> page) {
                return Observable.just(page).concatWith(listInstanceProcessThreadsSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ProcessThreadInfo> listInstanceProcessThreadsSlotAsync(final String resourceGroupName, final String name, final String processId, final String slot, final String instanceId) {
        WebAppsInner client = this.inner();
        return client.listInstanceProcessThreadsSlotAsync(resourceGroupName, name, processId, slot, instanceId)
        .flatMap(new Func1<Page<ProcessThreadInfoInner>, Observable<Page<ProcessThreadInfoInner>>>() {
            @Override
            public Observable<Page<ProcessThreadInfoInner>> call(Page<ProcessThreadInfoInner> page) {
                return listInstanceProcessThreadsSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ProcessThreadInfoInner>, Iterable<ProcessThreadInfoInner>>() {
            @Override
            public Iterable<ProcessThreadInfoInner> call(Page<ProcessThreadInfoInner> page) {
                return page.items();
            }
       })
        .map(new Func1<ProcessThreadInfoInner, ProcessThreadInfo>() {
            @Override
            public ProcessThreadInfo call(ProcessThreadInfoInner inner) {
                return new ProcessThreadInfoImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<ProcessThreadInfo> getInstanceProcessThreadSlotAsync(String resourceGroupName, String name, String processId, String threadId, String slot, String instanceId) {
        WebAppsInner client = this.inner();
        return client.getInstanceProcessThreadSlotAsync(resourceGroupName, name, processId, threadId, slot, instanceId)
        .map(new Func1<ProcessThreadInfoInner, ProcessThreadInfo>() {
            @Override
            public ProcessThreadInfo call(ProcessThreadInfoInner inner) {
                return new ProcessThreadInfoImpl(inner, manager());
            }
        });
    }

    private Observable<Page<ProcessThreadInfoInner>> listProcessThreadsSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listProcessThreadsSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<ProcessThreadInfoInner>, Observable<Page<ProcessThreadInfoInner>>>() {
            @Override
            public Observable<Page<ProcessThreadInfoInner>> call(Page<ProcessThreadInfoInner> page) {
                return Observable.just(page).concatWith(listProcessThreadsSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ProcessThreadInfo> listProcessThreadsSlotAsync(final String resourceGroupName, final String name, final String processId, final String slot) {
        WebAppsInner client = this.inner();
        return client.listProcessThreadsSlotAsync(resourceGroupName, name, processId, slot)
        .flatMap(new Func1<Page<ProcessThreadInfoInner>, Observable<Page<ProcessThreadInfoInner>>>() {
            @Override
            public Observable<Page<ProcessThreadInfoInner>> call(Page<ProcessThreadInfoInner> page) {
                return listProcessThreadsSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ProcessThreadInfoInner>, Iterable<ProcessThreadInfoInner>>() {
            @Override
            public Iterable<ProcessThreadInfoInner> call(Page<ProcessThreadInfoInner> page) {
                return page.items();
            }
       })
        .map(new Func1<ProcessThreadInfoInner, ProcessThreadInfo>() {
            @Override
            public ProcessThreadInfo call(ProcessThreadInfoInner inner) {
                return new ProcessThreadInfoImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<ProcessThreadInfo> getProcessThreadSlotAsync(String resourceGroupName, String name, String processId, String threadId, String slot) {
        WebAppsInner client = this.inner();
        return client.getProcessThreadSlotAsync(resourceGroupName, name, processId, threadId, slot)
        .map(new Func1<ProcessThreadInfoInner, ProcessThreadInfo>() {
            @Override
            public ProcessThreadInfo call(ProcessThreadInfoInner inner) {
                return new ProcessThreadInfoImpl(inner, manager());
            }
        });
    }

    private Observable<Page<ResourceMetricDefinitionInner>> listMetricDefinitionsNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listMetricDefinitionsNextAsync(nextLink)
        .flatMap(new Func1<Page<ResourceMetricDefinitionInner>, Observable<Page<ResourceMetricDefinitionInner>>>() {
            @Override
            public Observable<Page<ResourceMetricDefinitionInner>> call(Page<ResourceMetricDefinitionInner> page) {
                return Observable.just(page).concatWith(listMetricDefinitionsNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ResourceMetricDefinition> listMetricDefinitionsAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listMetricDefinitionsAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<ResourceMetricDefinitionInner>, Observable<Page<ResourceMetricDefinitionInner>>>() {
            @Override
            public Observable<Page<ResourceMetricDefinitionInner>> call(Page<ResourceMetricDefinitionInner> page) {
                return listMetricDefinitionsNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ResourceMetricDefinitionInner>, Iterable<ResourceMetricDefinitionInner>>() {
            @Override
            public Iterable<ResourceMetricDefinitionInner> call(Page<ResourceMetricDefinitionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ResourceMetricDefinitionInner, ResourceMetricDefinition>() {
            @Override
            public ResourceMetricDefinition call(ResourceMetricDefinitionInner inner) {
                return wrapResourceMetricDefinitionModel(inner);
            }
        });
    }

    private Observable<Page<ResourceMetricDefinitionInner>> listMetricDefinitionsSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listMetricDefinitionsSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<ResourceMetricDefinitionInner>, Observable<Page<ResourceMetricDefinitionInner>>>() {
            @Override
            public Observable<Page<ResourceMetricDefinitionInner>> call(Page<ResourceMetricDefinitionInner> page) {
                return Observable.just(page).concatWith(listMetricDefinitionsSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ResourceMetricDefinition> listMetricDefinitionsSlotAsync(final String resourceGroupName, final String name, final String slot) {
        WebAppsInner client = this.inner();
        return client.listMetricDefinitionsSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<Page<ResourceMetricDefinitionInner>, Observable<Page<ResourceMetricDefinitionInner>>>() {
            @Override
            public Observable<Page<ResourceMetricDefinitionInner>> call(Page<ResourceMetricDefinitionInner> page) {
                return listMetricDefinitionsSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ResourceMetricDefinitionInner>, Iterable<ResourceMetricDefinitionInner>>() {
            @Override
            public Iterable<ResourceMetricDefinitionInner> call(Page<ResourceMetricDefinitionInner> page) {
                return page.items();
            }
       })
        .map(new Func1<ResourceMetricDefinitionInner, ResourceMetricDefinition>() {
            @Override
            public ResourceMetricDefinition call(ResourceMetricDefinitionInner inner) {
                return new ResourceMetricDefinitionImpl(inner, manager());
            }
       });
    }

    private Observable<Page<ResourceMetricInner>> listMetricsNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listMetricsNextAsync(nextLink)
        .flatMap(new Func1<Page<ResourceMetricInner>, Observable<Page<ResourceMetricInner>>>() {
            @Override
            public Observable<Page<ResourceMetricInner>> call(Page<ResourceMetricInner> page) {
                return Observable.just(page).concatWith(listMetricsNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ResourceMetric> listMetricsAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listMetricsAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<ResourceMetricInner>, Observable<Page<ResourceMetricInner>>>() {
            @Override
            public Observable<Page<ResourceMetricInner>> call(Page<ResourceMetricInner> page) {
                return listMetricsNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ResourceMetricInner>, Iterable<ResourceMetricInner>>() {
            @Override
            public Iterable<ResourceMetricInner> call(Page<ResourceMetricInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ResourceMetricInner, ResourceMetric>() {
            @Override
            public ResourceMetric call(ResourceMetricInner inner) {
                return wrapResourceMetricModel(inner);
            }
        });
    }

    private Observable<Page<ResourceMetricInner>> listMetricsSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listMetricsSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<ResourceMetricInner>, Observable<Page<ResourceMetricInner>>>() {
            @Override
            public Observable<Page<ResourceMetricInner>> call(Page<ResourceMetricInner> page) {
                return Observable.just(page).concatWith(listMetricsSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ResourceMetric> listMetricsSlotAsync(final String resourceGroupName, final String name, final String slot) {
        WebAppsInner client = this.inner();
        return client.listMetricsSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<Page<ResourceMetricInner>, Observable<Page<ResourceMetricInner>>>() {
            @Override
            public Observable<Page<ResourceMetricInner>> call(Page<ResourceMetricInner> page) {
                return listMetricsSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ResourceMetricInner>, Iterable<ResourceMetricInner>>() {
            @Override
            public Iterable<ResourceMetricInner> call(Page<ResourceMetricInner> page) {
                return page.items();
            }
       })
        .map(new Func1<ResourceMetricInner, ResourceMetric>() {
            @Override
            public ResourceMetric call(ResourceMetricInner inner) {
                return new ResourceMetricImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<MigrateMySqlStatus> getMigrateMySqlStatusAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.getMigrateMySqlStatusAsync(resourceGroupName, name)
        .map(new Func1<MigrateMySqlStatusInner, MigrateMySqlStatus>() {
            @Override
            public MigrateMySqlStatus call(MigrateMySqlStatusInner inner) {
                return new MigrateMySqlStatusImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MigrateMySqlStatus> getMigrateMySqlStatusSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.getMigrateMySqlStatusSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<MigrateMySqlStatusInner, MigrateMySqlStatus>() {
            @Override
            public MigrateMySqlStatus call(MigrateMySqlStatusInner inner) {
                return new MigrateMySqlStatusImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<NetworkFeatures> listNetworkFeaturesAsync(String resourceGroupName, String name, String view) {
        WebAppsInner client = this.inner();
        return client.listNetworkFeaturesAsync(resourceGroupName, name, view)
        .map(new Func1<NetworkFeaturesInner, NetworkFeatures>() {
            @Override
            public NetworkFeatures call(NetworkFeaturesInner inner) {
                return wrapNetworkFeaturesModel(inner);
            }
       });
    }

    @Override
    public Observable<NetworkFeatures> listNetworkFeaturesSlotAsync(String resourceGroupName, String name, String view, String slot) {
        WebAppsInner client = this.inner();
        return client.listNetworkFeaturesSlotAsync(resourceGroupName, name, view, slot)
        .map(new Func1<NetworkFeaturesInner, NetworkFeatures>() {
            @Override
            public NetworkFeatures call(NetworkFeaturesInner inner) {
                return new NetworkFeaturesImpl(inner, manager());
            }
        });
    }

    private Observable<Page<PerfMonResponseInner>> listPerfMonCountersNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listPerfMonCountersNextAsync(nextLink)
        .flatMap(new Func1<Page<PerfMonResponseInner>, Observable<Page<PerfMonResponseInner>>>() {
            @Override
            public Observable<Page<PerfMonResponseInner>> call(Page<PerfMonResponseInner> page) {
                return Observable.just(page).concatWith(listPerfMonCountersNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<PerfMonResponse> listPerfMonCountersAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listPerfMonCountersAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<PerfMonResponseInner>, Observable<Page<PerfMonResponseInner>>>() {
            @Override
            public Observable<Page<PerfMonResponseInner>> call(Page<PerfMonResponseInner> page) {
                return listPerfMonCountersNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<PerfMonResponseInner>, Iterable<PerfMonResponseInner>>() {
            @Override
            public Iterable<PerfMonResponseInner> call(Page<PerfMonResponseInner> page) {
                return page.items();
            }
        })
        .map(new Func1<PerfMonResponseInner, PerfMonResponse>() {
            @Override
            public PerfMonResponse call(PerfMonResponseInner inner) {
                return wrapPerfMonResponseModel(inner);
            }
        });
    }

    private Observable<Page<PerfMonResponseInner>> listPerfMonCountersSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listPerfMonCountersSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<PerfMonResponseInner>, Observable<Page<PerfMonResponseInner>>>() {
            @Override
            public Observable<Page<PerfMonResponseInner>> call(Page<PerfMonResponseInner> page) {
                return Observable.just(page).concatWith(listPerfMonCountersSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<PerfMonResponse> listPerfMonCountersSlotAsync(final String resourceGroupName, final String name, final String slot) {
        WebAppsInner client = this.inner();
        return client.listPerfMonCountersSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<Page<PerfMonResponseInner>, Observable<Page<PerfMonResponseInner>>>() {
            @Override
            public Observable<Page<PerfMonResponseInner>> call(Page<PerfMonResponseInner> page) {
                return listPerfMonCountersSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<PerfMonResponseInner>, Iterable<PerfMonResponseInner>>() {
            @Override
            public Iterable<PerfMonResponseInner> call(Page<PerfMonResponseInner> page) {
                return page.items();
            }
       })
        .map(new Func1<PerfMonResponseInner, PerfMonResponse>() {
            @Override
            public PerfMonResponse call(PerfMonResponseInner inner) {
                return new PerfMonResponseImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<PremierAddOn> getPremierAddOnAsync(String resourceGroupName, String name, String premierAddOnName) {
        WebAppsInner client = this.inner();
        return client.getPremierAddOnAsync(resourceGroupName, name, premierAddOnName)
        .map(new Func1<PremierAddOnInner, PremierAddOn>() {
            @Override
            public PremierAddOn call(PremierAddOnInner inner) {
                return wrapPremierAddOnModel(inner);
            }
       });
    }

    @Override
    public Completable deletePremierAddOnAsync(String resourceGroupName, String name, String premierAddOnName) {
        WebAppsInner client = this.inner();
        return client.deletePremierAddOnAsync(resourceGroupName, name, premierAddOnName).toCompletable();
    }

    @Override
    public Observable<PremierAddOn> listPremierAddOnsAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.listPremierAddOnsAsync(resourceGroupName, name)
        .map(new Func1<PremierAddOnInner, PremierAddOn>() {
            @Override
            public PremierAddOn call(PremierAddOnInner inner) {
                return new PremierAddOnImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PremierAddOn> listPremierAddOnsSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.listPremierAddOnsSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<PremierAddOnInner, PremierAddOn>() {
            @Override
            public PremierAddOn call(PremierAddOnInner inner) {
                return new PremierAddOnImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PremierAddOn> getPremierAddOnSlotAsync(String resourceGroupName, String name, String premierAddOnName, String slot) {
        WebAppsInner client = this.inner();
        return client.getPremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot)
        .map(new Func1<PremierAddOnInner, PremierAddOn>() {
            @Override
            public PremierAddOn call(PremierAddOnInner inner) {
                return new PremierAddOnImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PremierAddOn> addPremierAddOnSlotAsync(String resourceGroupName, String name, String premierAddOnName, String slot, PremierAddOnInner premierAddOn) {
        WebAppsInner client = this.inner();
        return client.addPremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot, premierAddOn)
        .map(new Func1<PremierAddOnInner, PremierAddOn>() {
            @Override
            public PremierAddOn call(PremierAddOnInner inner) {
                return new PremierAddOnImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deletePremierAddOnSlotAsync(String resourceGroupName, String name, String premierAddOnName, String slot) {
        WebAppsInner client = this.inner();
        return client.deletePremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot).toCompletable();
    }

    @Override
    public Observable<PublicCertificate> getPublicCertificateAsync(String resourceGroupName, String name, String publicCertificateName) {
        WebAppsInner client = this.inner();
        return client.getPublicCertificateAsync(resourceGroupName, name, publicCertificateName)
        .map(new Func1<PublicCertificateInner, PublicCertificate>() {
            @Override
            public PublicCertificate call(PublicCertificateInner inner) {
                return wrapPublicCertificateModel(inner);
            }
       });
    }

    private Observable<Page<PublicCertificateInner>> listPublicCertificatesNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listPublicCertificatesNextAsync(nextLink)
        .flatMap(new Func1<Page<PublicCertificateInner>, Observable<Page<PublicCertificateInner>>>() {
            @Override
            public Observable<Page<PublicCertificateInner>> call(Page<PublicCertificateInner> page) {
                return Observable.just(page).concatWith(listPublicCertificatesNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<PublicCertificate> listPublicCertificatesAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listPublicCertificatesAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<PublicCertificateInner>, Observable<Page<PublicCertificateInner>>>() {
            @Override
            public Observable<Page<PublicCertificateInner>> call(Page<PublicCertificateInner> page) {
                return listPublicCertificatesNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<PublicCertificateInner>, Iterable<PublicCertificateInner>>() {
            @Override
            public Iterable<PublicCertificateInner> call(Page<PublicCertificateInner> page) {
                return page.items();
            }
        })
        .map(new Func1<PublicCertificateInner, PublicCertificate>() {
            @Override
            public PublicCertificate call(PublicCertificateInner inner) {
                return wrapPublicCertificateModel(inner);
            }
        });
    }

    @Override
    public Completable deletePublicCertificateAsync(String resourceGroupName, String name, String publicCertificateName) {
        WebAppsInner client = this.inner();
        return client.deletePublicCertificateAsync(resourceGroupName, name, publicCertificateName).toCompletable();
    }

    private Observable<Page<PublicCertificateInner>> listPublicCertificatesSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listPublicCertificatesSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<PublicCertificateInner>, Observable<Page<PublicCertificateInner>>>() {
            @Override
            public Observable<Page<PublicCertificateInner>> call(Page<PublicCertificateInner> page) {
                return Observable.just(page).concatWith(listPublicCertificatesSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<PublicCertificate> listPublicCertificatesSlotAsync(final String resourceGroupName, final String name, final String slot) {
        WebAppsInner client = this.inner();
        return client.listPublicCertificatesSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<Page<PublicCertificateInner>, Observable<Page<PublicCertificateInner>>>() {
            @Override
            public Observable<Page<PublicCertificateInner>> call(Page<PublicCertificateInner> page) {
                return listPublicCertificatesSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<PublicCertificateInner>, Iterable<PublicCertificateInner>>() {
            @Override
            public Iterable<PublicCertificateInner> call(Page<PublicCertificateInner> page) {
                return page.items();
            }
       })
        .map(new Func1<PublicCertificateInner, PublicCertificate>() {
            @Override
            public PublicCertificate call(PublicCertificateInner inner) {
                return new PublicCertificateImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<PublicCertificate> getPublicCertificateSlotAsync(String resourceGroupName, String name, String slot, String publicCertificateName) {
        WebAppsInner client = this.inner();
        return client.getPublicCertificateSlotAsync(resourceGroupName, name, slot, publicCertificateName)
        .map(new Func1<PublicCertificateInner, PublicCertificate>() {
            @Override
            public PublicCertificate call(PublicCertificateInner inner) {
                return new PublicCertificateImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PublicCertificate> createOrUpdatePublicCertificateSlotAsync(String resourceGroupName, String name, String publicCertificateName, String slot, PublicCertificateInner publicCertificate) {
        WebAppsInner client = this.inner();
        return client.createOrUpdatePublicCertificateSlotAsync(resourceGroupName, name, publicCertificateName, slot, publicCertificate)
        .map(new Func1<PublicCertificateInner, PublicCertificate>() {
            @Override
            public PublicCertificate call(PublicCertificateInner inner) {
                return new PublicCertificateImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deletePublicCertificateSlotAsync(String resourceGroupName, String name, String slot, String publicCertificateName) {
        WebAppsInner client = this.inner();
        return client.deletePublicCertificateSlotAsync(resourceGroupName, name, slot, publicCertificateName).toCompletable();
    }

    @Override
    public Observable<SiteExtensionInfo> getSiteExtensionAsync(String resourceGroupName, String name, String siteExtensionId) {
        WebAppsInner client = this.inner();
        return client.getSiteExtensionAsync(resourceGroupName, name, siteExtensionId)
        .map(new Func1<SiteExtensionInfoInner, SiteExtensionInfo>() {
            @Override
            public SiteExtensionInfo call(SiteExtensionInfoInner inner) {
                return wrapSiteExtensionInfoModel(inner);
            }
       });
    }

    private Observable<Page<SiteExtensionInfoInner>> listSiteExtensionsNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listSiteExtensionsNextAsync(nextLink)
        .flatMap(new Func1<Page<SiteExtensionInfoInner>, Observable<Page<SiteExtensionInfoInner>>>() {
            @Override
            public Observable<Page<SiteExtensionInfoInner>> call(Page<SiteExtensionInfoInner> page) {
                return Observable.just(page).concatWith(listSiteExtensionsNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<SiteExtensionInfo> listSiteExtensionsAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listSiteExtensionsAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<SiteExtensionInfoInner>, Observable<Page<SiteExtensionInfoInner>>>() {
            @Override
            public Observable<Page<SiteExtensionInfoInner>> call(Page<SiteExtensionInfoInner> page) {
                return listSiteExtensionsNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<SiteExtensionInfoInner>, Iterable<SiteExtensionInfoInner>>() {
            @Override
            public Iterable<SiteExtensionInfoInner> call(Page<SiteExtensionInfoInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SiteExtensionInfoInner, SiteExtensionInfo>() {
            @Override
            public SiteExtensionInfo call(SiteExtensionInfoInner inner) {
                return wrapSiteExtensionInfoModel(inner);
            }
        });
    }

    @Override
    public Completable deleteSiteExtensionAsync(String resourceGroupName, String name, String siteExtensionId) {
        WebAppsInner client = this.inner();
        return client.deleteSiteExtensionAsync(resourceGroupName, name, siteExtensionId).toCompletable();
    }

    private Observable<Page<SiteExtensionInfoInner>> listSiteExtensionsSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listSiteExtensionsSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<SiteExtensionInfoInner>, Observable<Page<SiteExtensionInfoInner>>>() {
            @Override
            public Observable<Page<SiteExtensionInfoInner>> call(Page<SiteExtensionInfoInner> page) {
                return Observable.just(page).concatWith(listSiteExtensionsSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<SiteExtensionInfo> listSiteExtensionsSlotAsync(final String resourceGroupName, final String name, final String slot) {
        WebAppsInner client = this.inner();
        return client.listSiteExtensionsSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<Page<SiteExtensionInfoInner>, Observable<Page<SiteExtensionInfoInner>>>() {
            @Override
            public Observable<Page<SiteExtensionInfoInner>> call(Page<SiteExtensionInfoInner> page) {
                return listSiteExtensionsSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<SiteExtensionInfoInner>, Iterable<SiteExtensionInfoInner>>() {
            @Override
            public Iterable<SiteExtensionInfoInner> call(Page<SiteExtensionInfoInner> page) {
                return page.items();
            }
       })
        .map(new Func1<SiteExtensionInfoInner, SiteExtensionInfo>() {
            @Override
            public SiteExtensionInfo call(SiteExtensionInfoInner inner) {
                return new SiteExtensionInfoImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<SiteExtensionInfo> getSiteExtensionSlotAsync(String resourceGroupName, String name, String siteExtensionId, String slot) {
        WebAppsInner client = this.inner();
        return client.getSiteExtensionSlotAsync(resourceGroupName, name, siteExtensionId, slot)
        .map(new Func1<SiteExtensionInfoInner, SiteExtensionInfo>() {
            @Override
            public SiteExtensionInfo call(SiteExtensionInfoInner inner) {
                return new SiteExtensionInfoImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteExtensionInfo> installSiteExtensionSlotAsync(String resourceGroupName, String name, String siteExtensionId, String slot) {
        WebAppsInner client = this.inner();
        return client.installSiteExtensionSlotAsync(resourceGroupName, name, siteExtensionId, slot)
        .map(new Func1<SiteExtensionInfoInner, SiteExtensionInfo>() {
            @Override
            public SiteExtensionInfo call(SiteExtensionInfoInner inner) {
                return new SiteExtensionInfoImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteSiteExtensionSlotAsync(String resourceGroupName, String name, String siteExtensionId, String slot) {
        WebAppsInner client = this.inner();
        return client.deleteSiteExtensionSlotAsync(resourceGroupName, name, siteExtensionId, slot).toCompletable();
    }

    @Override
    public Observable<Slots> getSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.getSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<SiteInner, Slots>() {
            @Override
            public Slots call(SiteInner inner) {
                return wrapSlotsModel(inner);
            }
       });
    }

    private Observable<Page<SiteInner>> listSlotsNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listSlotsNextAsync(nextLink)
        .flatMap(new Func1<Page<SiteInner>, Observable<Page<SiteInner>>>() {
            @Override
            public Observable<Page<SiteInner>> call(Page<SiteInner> page) {
                return Observable.just(page).concatWith(listSlotsNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<Slots> listSlotsAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listSlotsAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<SiteInner>, Observable<Page<SiteInner>>>() {
            @Override
            public Observable<Page<SiteInner>> call(Page<SiteInner> page) {
                return listSlotsNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<SiteInner>, Iterable<SiteInner>>() {
            @Override
            public Iterable<SiteInner> call(Page<SiteInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SiteInner, Slots>() {
            @Override
            public Slots call(SiteInner inner) {
                return wrapSlotsModel(inner);
            }
        });
    }

    @Override
    public Completable deleteSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.deleteSlotAsync(resourceGroupName, name, slot).toCompletable();
    }

    @Override
    public Observable<CustomHostnameAnalysisResult> analyzeCustomHostnameSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.analyzeCustomHostnameSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<CustomHostnameAnalysisResultInner, CustomHostnameAnalysisResult>() {
            @Override
            public CustomHostnameAnalysisResult call(CustomHostnameAnalysisResultInner inner) {
                return new CustomHostnameAnalysisResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable applySlotConfigurationSlotAsync(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        WebAppsInner client = this.inner();
        return client.applySlotConfigurationSlotAsync(resourceGroupName, name, slot, slotSwapEntity).toCompletable();
    }

    @Override
    public Observable<BackupItem> backupSlotAsync(String resourceGroupName, String name, String slot, BackupRequestInner request) {
        WebAppsInner client = this.inner();
        return client.backupSlotAsync(resourceGroupName, name, slot, request)
        .map(new Func1<BackupItemInner, BackupItem>() {
            @Override
            public BackupItem call(BackupItemInner inner) {
                return new BackupItemImpl(inner, manager());
            }
        });
    }

    private Observable<Page<SiteConfigResourceInner>> listConfigurationsSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listConfigurationsSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<SiteConfigResourceInner>, Observable<Page<SiteConfigResourceInner>>>() {
            @Override
            public Observable<Page<SiteConfigResourceInner>> call(Page<SiteConfigResourceInner> page) {
                return Observable.just(page).concatWith(listConfigurationsSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<SiteConfigResource> listConfigurationsSlotAsync(final String resourceGroupName, final String name, final String slot) {
        WebAppsInner client = this.inner();
        return client.listConfigurationsSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<Page<SiteConfigResourceInner>, Observable<Page<SiteConfigResourceInner>>>() {
            @Override
            public Observable<Page<SiteConfigResourceInner>> call(Page<SiteConfigResourceInner> page) {
                return listConfigurationsSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<SiteConfigResourceInner>, Iterable<SiteConfigResourceInner>>() {
            @Override
            public Iterable<SiteConfigResourceInner> call(Page<SiteConfigResourceInner> page) {
                return page.items();
            }
       })
        .map(new Func1<SiteConfigResourceInner, SiteConfigResource>() {
            @Override
            public SiteConfigResource call(SiteConfigResourceInner inner) {
                return new SiteConfigResourceImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<BackupRequest> updateBackupConfigurationSlotAsync(String resourceGroupName, String name, String slot, BackupRequestInner request) {
        WebAppsInner client = this.inner();
        return client.updateBackupConfigurationSlotAsync(resourceGroupName, name, slot, request)
        .map(new Func1<BackupRequestInner, BackupRequest>() {
            @Override
            public BackupRequest call(BackupRequestInner inner) {
                return new BackupRequestImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteBackupConfigurationSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.deleteBackupConfigurationSlotAsync(resourceGroupName, name, slot).toCompletable();
    }

    @Override
    public Observable<BackupRequest> getBackupConfigurationSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.getBackupConfigurationSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<BackupRequestInner, BackupRequest>() {
            @Override
            public BackupRequest call(BackupRequestInner inner) {
                return new BackupRequestImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<StringDictionary> updateMetadataSlotAsync(String resourceGroupName, String name, String slot, StringDictionaryInner metadata) {
        WebAppsInner client = this.inner();
        return client.updateMetadataSlotAsync(resourceGroupName, name, slot, metadata)
        .map(new Func1<StringDictionaryInner, StringDictionary>() {
            @Override
            public StringDictionary call(StringDictionaryInner inner) {
                return new StringDictionaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<StringDictionary> listMetadataSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.listMetadataSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<StringDictionaryInner, StringDictionary>() {
            @Override
            public StringDictionary call(StringDictionaryInner inner) {
                return new StringDictionaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteConfigResource> getConfigurationSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.getConfigurationSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<SiteConfigResourceInner, SiteConfigResource>() {
            @Override
            public SiteConfigResource call(SiteConfigResourceInner inner) {
                return new SiteConfigResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteConfigResource> createOrUpdateConfigurationSlotAsync(String resourceGroupName, String name, String slot, SiteConfigResourceInner siteConfig) {
        WebAppsInner client = this.inner();
        return client.createOrUpdateConfigurationSlotAsync(resourceGroupName, name, slot, siteConfig)
        .map(new Func1<SiteConfigResourceInner, SiteConfigResource>() {
            @Override
            public SiteConfigResource call(SiteConfigResourceInner inner) {
                return new SiteConfigResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteConfigResource> updateConfigurationSlotAsync(String resourceGroupName, String name, String slot, SiteConfigResourceInner siteConfig) {
        WebAppsInner client = this.inner();
        return client.updateConfigurationSlotAsync(resourceGroupName, name, slot, siteConfig)
        .map(new Func1<SiteConfigResourceInner, SiteConfigResource>() {
            @Override
            public SiteConfigResource call(SiteConfigResourceInner inner) {
                return new SiteConfigResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable getWebSiteContainerLogsSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.getWebSiteContainerLogsSlotAsync(resourceGroupName, name, slot).toCompletable();
    }

    @Override
    public Completable getFunctionsAdminTokenSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.getFunctionsAdminTokenSlotAsync(resourceGroupName, name, slot).toCompletable();
    }

    @Override
    public Observable<RelayServiceConnectionEntity> listRelayServiceConnectionsSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.listRelayServiceConnectionsSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<RelayServiceConnectionEntityInner, RelayServiceConnectionEntity>() {
            @Override
            public RelayServiceConnectionEntity call(RelayServiceConnectionEntityInner inner) {
                return new RelayServiceConnectionEntityImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<RelayServiceConnectionEntity> getRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot) {
        WebAppsInner client = this.inner();
        return client.getRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot)
        .map(new Func1<RelayServiceConnectionEntityInner, RelayServiceConnectionEntity>() {
            @Override
            public RelayServiceConnectionEntity call(RelayServiceConnectionEntityInner inner) {
                return new RelayServiceConnectionEntityImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<RelayServiceConnectionEntity> createOrUpdateRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot, RelayServiceConnectionEntityInner connectionEnvelope) {
        WebAppsInner client = this.inner();
        return client.createOrUpdateRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot, connectionEnvelope)
        .map(new Func1<RelayServiceConnectionEntityInner, RelayServiceConnectionEntity>() {
            @Override
            public RelayServiceConnectionEntity call(RelayServiceConnectionEntityInner inner) {
                return new RelayServiceConnectionEntityImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot) {
        WebAppsInner client = this.inner();
        return client.deleteRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot).toCompletable();
    }

    @Override
    public Observable<RelayServiceConnectionEntity> updateRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot, RelayServiceConnectionEntityInner connectionEnvelope) {
        WebAppsInner client = this.inner();
        return client.updateRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot, connectionEnvelope)
        .map(new Func1<RelayServiceConnectionEntityInner, RelayServiceConnectionEntity>() {
            @Override
            public RelayServiceConnectionEntity call(RelayServiceConnectionEntityInner inner) {
                return new RelayServiceConnectionEntityImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteCloneability> isCloneableSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.isCloneableSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<SiteCloneabilityInner, SiteCloneability>() {
            @Override
            public SiteCloneability call(SiteCloneabilityInner inner) {
                return new SiteCloneabilityImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<FunctionSecrets> listSyncFunctionTriggersSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.listSyncFunctionTriggersSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<FunctionSecretsInner, FunctionSecrets>() {
            @Override
            public FunctionSecrets call(FunctionSecretsInner inner) {
                return new FunctionSecretsImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable startWebSiteNetworkTraceSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.startWebSiteNetworkTraceSlotAsync(resourceGroupName, name, slot).toCompletable();
    }

    @Override
    public Completable stopWebSiteNetworkTraceSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.stopWebSiteNetworkTraceSlotAsync(resourceGroupName, name, slot).toCompletable();
    }

    @Override
    public Completable generateNewSitePublishingPasswordSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.generateNewSitePublishingPasswordSlotAsync(resourceGroupName, name, slot).toCompletable();
    }

    @Override
    public Observable<SitePhpErrorLogFlag> getSitePhpErrorLogFlagSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.getSitePhpErrorLogFlagSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<SitePhpErrorLogFlagInner, SitePhpErrorLogFlag>() {
            @Override
            public SitePhpErrorLogFlag call(SitePhpErrorLogFlagInner inner) {
                return new SitePhpErrorLogFlagImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable getProcessDumpSlotAsync(String resourceGroupName, String name, String processId, String slot) {
        WebAppsInner client = this.inner();
        return client.getProcessDumpSlotAsync(resourceGroupName, name, processId, slot).toCompletable();
    }

    @Override
    public Completable listPublishingProfileXmlWithSecretsSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.listPublishingProfileXmlWithSecretsSlotAsync(resourceGroupName, name, slot).toCompletable();
    }

    @Override
    public Completable recoverSlotAsync(String resourceGroupName, String name, String slot, SnapshotRecoveryRequest recoveryEntity) {
        WebAppsInner client = this.inner();
        return client.recoverSlotAsync(resourceGroupName, name, slot, recoveryEntity).toCompletable();
    }

    @Override
    public Completable resetSlotConfigurationSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.resetSlotConfigurationSlotAsync(resourceGroupName, name, slot).toCompletable();
    }

    @Override
    public Completable restartSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.restartSlotAsync(resourceGroupName, name, slot).toCompletable();
    }

    private Observable<Page<SlotDifferenceInner>> listSlotDifferencesSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listSlotDifferencesSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<SlotDifferenceInner>, Observable<Page<SlotDifferenceInner>>>() {
            @Override
            public Observable<Page<SlotDifferenceInner>> call(Page<SlotDifferenceInner> page) {
                return Observable.just(page).concatWith(listSlotDifferencesSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<SlotDifference> listSlotDifferencesSlotAsync(final String resourceGroupName, final String name, final String slot, final CsmSlotEntity slotSwapEntity) {
        WebAppsInner client = this.inner();
        return client.listSlotDifferencesSlotAsync(resourceGroupName, name, slot, slotSwapEntity)
        .flatMap(new Func1<Page<SlotDifferenceInner>, Observable<Page<SlotDifferenceInner>>>() {
            @Override
            public Observable<Page<SlotDifferenceInner>> call(Page<SlotDifferenceInner> page) {
                return listSlotDifferencesSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<SlotDifferenceInner>, Iterable<SlotDifferenceInner>>() {
            @Override
            public Iterable<SlotDifferenceInner> call(Page<SlotDifferenceInner> page) {
                return page.items();
            }
       })
        .map(new Func1<SlotDifferenceInner, SlotDifference>() {
            @Override
            public SlotDifference call(SlotDifferenceInner inner) {
                return new SlotDifferenceImpl(inner, manager());
            }
       });
    }

    @Override
    public Completable swapSlotSlotAsync(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        WebAppsInner client = this.inner();
        return client.swapSlotSlotAsync(resourceGroupName, name, slot, slotSwapEntity).toCompletable();
    }

    @Override
    public Completable startSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.startSlotAsync(resourceGroupName, name, slot).toCompletable();
    }

    @Override
    public Completable stopSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.stopSlotAsync(resourceGroupName, name, slot).toCompletable();
    }

    @Override
    public Completable syncRepositorySlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.syncRepositorySlotAsync(resourceGroupName, name, slot).toCompletable();
    }

    @Override
    public Completable syncFunctionTriggersSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.syncFunctionTriggersSlotAsync(resourceGroupName, name, slot).toCompletable();
    }

    @Override
    public Observable<SiteSourceControl> getSourceControlSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.getSourceControlSlotAsync(resourceGroupName, name, slot)
        .map(new Func1<SiteSourceControlInner, SiteSourceControl>() {
            @Override
            public SiteSourceControl call(SiteSourceControlInner inner) {
                return new SiteSourceControlImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteSourceControl> createOrUpdateSourceControlSlotAsync(String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        WebAppsInner client = this.inner();
        return client.createOrUpdateSourceControlSlotAsync(resourceGroupName, name, slot, siteSourceControl)
        .map(new Func1<SiteSourceControlInner, SiteSourceControl>() {
            @Override
            public SiteSourceControl call(SiteSourceControlInner inner) {
                return new SiteSourceControlImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteSourceControlSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.deleteSourceControlSlotAsync(resourceGroupName, name, slot).toCompletable();
    }

    @Override
    public Observable<SiteSourceControl> updateSourceControlSlotAsync(String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        WebAppsInner client = this.inner();
        return client.updateSourceControlSlotAsync(resourceGroupName, name, slot, siteSourceControl)
        .map(new Func1<SiteSourceControlInner, SiteSourceControl>() {
            @Override
            public SiteSourceControl call(SiteSourceControlInner inner) {
                return new SiteSourceControlImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteSourceControl> getSourceControlAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.getSourceControlAsync(resourceGroupName, name)
        .map(new Func1<SiteSourceControlInner, SiteSourceControl>() {
            @Override
            public SiteSourceControl call(SiteSourceControlInner inner) {
                return new SiteSourceControlImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SiteSourceControl> createOrUpdateSourceControlAsync(String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        WebAppsInner client = this.inner();
        return client.createOrUpdateSourceControlAsync(resourceGroupName, name, siteSourceControl)
        .map(new Func1<SiteSourceControlInner, SiteSourceControl>() {
            @Override
            public SiteSourceControl call(SiteSourceControlInner inner) {
                return new SiteSourceControlImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteSourceControlAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.deleteSourceControlAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<SiteSourceControl> updateSourceControlAsync(String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        WebAppsInner client = this.inner();
        return client.updateSourceControlAsync(resourceGroupName, name, siteSourceControl)
        .map(new Func1<SiteSourceControlInner, SiteSourceControl>() {
            @Override
            public SiteSourceControl call(SiteSourceControlInner inner) {
                return new SiteSourceControlImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<TriggeredWebJob> getTriggeredWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot) {
        WebAppsInner client = this.inner();
        return client.getTriggeredWebJobSlotAsync(resourceGroupName, name, webJobName, slot)
        .map(new Func1<TriggeredWebJobInner, TriggeredWebJob>() {
            @Override
            public TriggeredWebJob call(TriggeredWebJobInner inner) {
                return wrapTriggeredWebJobModel(inner);
            }
       });
    }

    private Observable<Page<TriggeredWebJobInner>> listTriggeredWebJobsSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listTriggeredWebJobsSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<TriggeredWebJobInner>, Observable<Page<TriggeredWebJobInner>>>() {
            @Override
            public Observable<Page<TriggeredWebJobInner>> call(Page<TriggeredWebJobInner> page) {
                return Observable.just(page).concatWith(listTriggeredWebJobsSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<TriggeredWebJob> listTriggeredWebJobsSlotAsync(final String resourceGroupName, final String name, final String slot) {
        WebAppsInner client = this.inner();
        return client.listTriggeredWebJobsSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<Page<TriggeredWebJobInner>, Observable<Page<TriggeredWebJobInner>>>() {
            @Override
            public Observable<Page<TriggeredWebJobInner>> call(Page<TriggeredWebJobInner> page) {
                return listTriggeredWebJobsSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<TriggeredWebJobInner>, Iterable<TriggeredWebJobInner>>() {
            @Override
            public Iterable<TriggeredWebJobInner> call(Page<TriggeredWebJobInner> page) {
                return page.items();
            }
        })
        .map(new Func1<TriggeredWebJobInner, TriggeredWebJob>() {
            @Override
            public TriggeredWebJob call(TriggeredWebJobInner inner) {
                return wrapTriggeredWebJobModel(inner);
            }
        });
    }

    @Override
    public Completable deleteTriggeredWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot) {
        WebAppsInner client = this.inner();
        return client.deleteTriggeredWebJobSlotAsync(resourceGroupName, name, webJobName, slot).toCompletable();
    }

    private Observable<Page<TriggeredJobHistoryInner>> listTriggeredWebJobHistorySlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listTriggeredWebJobHistorySlotNextAsync(nextLink)
        .flatMap(new Func1<Page<TriggeredJobHistoryInner>, Observable<Page<TriggeredJobHistoryInner>>>() {
            @Override
            public Observable<Page<TriggeredJobHistoryInner>> call(Page<TriggeredJobHistoryInner> page) {
                return Observable.just(page).concatWith(listTriggeredWebJobHistorySlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<TriggeredJobHistory> listTriggeredWebJobHistorySlotAsync(final String resourceGroupName, final String name, final String webJobName, final String slot) {
        WebAppsInner client = this.inner();
        return client.listTriggeredWebJobHistorySlotAsync(resourceGroupName, name, webJobName, slot)
        .flatMap(new Func1<Page<TriggeredJobHistoryInner>, Observable<Page<TriggeredJobHistoryInner>>>() {
            @Override
            public Observable<Page<TriggeredJobHistoryInner>> call(Page<TriggeredJobHistoryInner> page) {
                return listTriggeredWebJobHistorySlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<TriggeredJobHistoryInner>, Iterable<TriggeredJobHistoryInner>>() {
            @Override
            public Iterable<TriggeredJobHistoryInner> call(Page<TriggeredJobHistoryInner> page) {
                return page.items();
            }
       })
        .map(new Func1<TriggeredJobHistoryInner, TriggeredJobHistory>() {
            @Override
            public TriggeredJobHistory call(TriggeredJobHistoryInner inner) {
                return new TriggeredJobHistoryImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<TriggeredJobHistory> getTriggeredWebJobHistorySlotAsync(String resourceGroupName, String name, String webJobName, String id, String slot) {
        WebAppsInner client = this.inner();
        return client.getTriggeredWebJobHistorySlotAsync(resourceGroupName, name, webJobName, id, slot)
        .map(new Func1<TriggeredJobHistoryInner, TriggeredJobHistory>() {
            @Override
            public TriggeredJobHistory call(TriggeredJobHistoryInner inner) {
                return new TriggeredJobHistoryImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable runTriggeredWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot) {
        WebAppsInner client = this.inner();
        return client.runTriggeredWebJobSlotAsync(resourceGroupName, name, webJobName, slot).toCompletable();
    }

    private Observable<Page<TriggeredWebJobInner>> listTriggeredWebJobsNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listTriggeredWebJobsNextAsync(nextLink)
        .flatMap(new Func1<Page<TriggeredWebJobInner>, Observable<Page<TriggeredWebJobInner>>>() {
            @Override
            public Observable<Page<TriggeredWebJobInner>> call(Page<TriggeredWebJobInner> page) {
                return Observable.just(page).concatWith(listTriggeredWebJobsNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<TriggeredWebJob> listTriggeredWebJobsAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listTriggeredWebJobsAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<TriggeredWebJobInner>, Observable<Page<TriggeredWebJobInner>>>() {
            @Override
            public Observable<Page<TriggeredWebJobInner>> call(Page<TriggeredWebJobInner> page) {
                return listTriggeredWebJobsNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<TriggeredWebJobInner>, Iterable<TriggeredWebJobInner>>() {
            @Override
            public Iterable<TriggeredWebJobInner> call(Page<TriggeredWebJobInner> page) {
                return page.items();
            }
       })
        .map(new Func1<TriggeredWebJobInner, TriggeredWebJob>() {
            @Override
            public TriggeredWebJob call(TriggeredWebJobInner inner) {
                return new TriggeredWebJobImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<TriggeredWebJob> getTriggeredWebJobAsync(String resourceGroupName, String name, String webJobName) {
        WebAppsInner client = this.inner();
        return client.getTriggeredWebJobAsync(resourceGroupName, name, webJobName)
        .map(new Func1<TriggeredWebJobInner, TriggeredWebJob>() {
            @Override
            public TriggeredWebJob call(TriggeredWebJobInner inner) {
                return new TriggeredWebJobImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteTriggeredWebJobAsync(String resourceGroupName, String name, String webJobName) {
        WebAppsInner client = this.inner();
        return client.deleteTriggeredWebJobAsync(resourceGroupName, name, webJobName).toCompletable();
    }

    private Observable<Page<TriggeredJobHistoryInner>> listTriggeredWebJobHistoryNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listTriggeredWebJobHistoryNextAsync(nextLink)
        .flatMap(new Func1<Page<TriggeredJobHistoryInner>, Observable<Page<TriggeredJobHistoryInner>>>() {
            @Override
            public Observable<Page<TriggeredJobHistoryInner>> call(Page<TriggeredJobHistoryInner> page) {
                return Observable.just(page).concatWith(listTriggeredWebJobHistoryNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<TriggeredJobHistory> listTriggeredWebJobHistoryAsync(final String resourceGroupName, final String name, final String webJobName) {
        WebAppsInner client = this.inner();
        return client.listTriggeredWebJobHistoryAsync(resourceGroupName, name, webJobName)
        .flatMap(new Func1<Page<TriggeredJobHistoryInner>, Observable<Page<TriggeredJobHistoryInner>>>() {
            @Override
            public Observable<Page<TriggeredJobHistoryInner>> call(Page<TriggeredJobHistoryInner> page) {
                return listTriggeredWebJobHistoryNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<TriggeredJobHistoryInner>, Iterable<TriggeredJobHistoryInner>>() {
            @Override
            public Iterable<TriggeredJobHistoryInner> call(Page<TriggeredJobHistoryInner> page) {
                return page.items();
            }
       })
        .map(new Func1<TriggeredJobHistoryInner, TriggeredJobHistory>() {
            @Override
            public TriggeredJobHistory call(TriggeredJobHistoryInner inner) {
                return new TriggeredJobHistoryImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<TriggeredJobHistory> getTriggeredWebJobHistoryAsync(String resourceGroupName, String name, String webJobName, String id) {
        WebAppsInner client = this.inner();
        return client.getTriggeredWebJobHistoryAsync(resourceGroupName, name, webJobName, id)
        .map(new Func1<TriggeredJobHistoryInner, TriggeredJobHistory>() {
            @Override
            public TriggeredJobHistory call(TriggeredJobHistoryInner inner) {
                return new TriggeredJobHistoryImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable runTriggeredWebJobAsync(String resourceGroupName, String name, String webJobName) {
        WebAppsInner client = this.inner();
        return client.runTriggeredWebJobAsync(resourceGroupName, name, webJobName).toCompletable();
    }

    private Observable<Page<CsmUsageQuotaInner>> listUsagesSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listUsagesSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<CsmUsageQuotaInner>, Observable<Page<CsmUsageQuotaInner>>>() {
            @Override
            public Observable<Page<CsmUsageQuotaInner>> call(Page<CsmUsageQuotaInner> page) {
                return Observable.just(page).concatWith(listUsagesSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<CsmUsageQuota> listUsagesSlotAsync(final String resourceGroupName, final String name, final String slot) {
        WebAppsInner client = this.inner();
        return client.listUsagesSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<Page<CsmUsageQuotaInner>, Observable<Page<CsmUsageQuotaInner>>>() {
            @Override
            public Observable<Page<CsmUsageQuotaInner>> call(Page<CsmUsageQuotaInner> page) {
                return listUsagesSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<CsmUsageQuotaInner>, Iterable<CsmUsageQuotaInner>>() {
            @Override
            public Iterable<CsmUsageQuotaInner> call(Page<CsmUsageQuotaInner> page) {
                return page.items();
            }
        })
        .map(new Func1<CsmUsageQuotaInner, CsmUsageQuota>() {
            @Override
            public CsmUsageQuota call(CsmUsageQuotaInner inner) {
                return wrapCsmUsageQuotaModel(inner);
            }
        });
    }

    private Observable<Page<CsmUsageQuotaInner>> listUsagesNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listUsagesNextAsync(nextLink)
        .flatMap(new Func1<Page<CsmUsageQuotaInner>, Observable<Page<CsmUsageQuotaInner>>>() {
            @Override
            public Observable<Page<CsmUsageQuotaInner>> call(Page<CsmUsageQuotaInner> page) {
                return Observable.just(page).concatWith(listUsagesNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<CsmUsageQuota> listUsagesAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listUsagesAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<CsmUsageQuotaInner>, Observable<Page<CsmUsageQuotaInner>>>() {
            @Override
            public Observable<Page<CsmUsageQuotaInner>> call(Page<CsmUsageQuotaInner> page) {
                return listUsagesNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<CsmUsageQuotaInner>, Iterable<CsmUsageQuotaInner>>() {
            @Override
            public Iterable<CsmUsageQuotaInner> call(Page<CsmUsageQuotaInner> page) {
                return page.items();
            }
       })
        .map(new Func1<CsmUsageQuotaInner, CsmUsageQuota>() {
            @Override
            public CsmUsageQuota call(CsmUsageQuotaInner inner) {
                return new CsmUsageQuotaImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<VnetInfo> getVnetConnectionSlotAsync(String resourceGroupName, String name, String vnetName, String slot) {
        WebAppsInner client = this.inner();
        return client.getVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot)
        .map(new Func1<VnetInfoInner, VnetInfo>() {
            @Override
            public VnetInfo call(VnetInfoInner inner) {
                return wrapVnetInfoModel(inner);
            }
       });
    }

    @Override
    public Observable<VnetInfo> listVnetConnectionsSlotAsync(String resourceGroupName, String name, String slot) {
        WebAppsInner client = this.inner();
        return client.listVnetConnectionsSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<List<VnetInfoInner>, Observable<VnetInfoInner>>() {
            @Override
            public Observable<VnetInfoInner> call(List<VnetInfoInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<VnetInfoInner, VnetInfo>() {
            @Override
            public VnetInfo call(VnetInfoInner inner) {
                return wrapVnetInfoModel(inner);
            }
        });
    }

    @Override
    public Completable deleteVnetConnectionSlotAsync(String resourceGroupName, String name, String vnetName, String slot) {
        WebAppsInner client = this.inner();
        return client.deleteVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot).toCompletable();
    }

    @Override
    public Observable<VnetInfo> listVnetConnectionsAsync(String resourceGroupName, String name) {
        WebAppsInner client = this.inner();
        return client.listVnetConnectionsAsync(resourceGroupName, name)
        .flatMap(new Func1<List<VnetInfoInner>, Observable<VnetInfoInner>>() {
            @Override
            public Observable<VnetInfoInner> call(List<VnetInfoInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<VnetInfoInner, VnetInfo>() {
            @Override
            public VnetInfo call(VnetInfoInner inner) {
                return new VnetInfoImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<VnetInfo> getVnetConnectionAsync(String resourceGroupName, String name, String vnetName) {
        WebAppsInner client = this.inner();
        return client.getVnetConnectionAsync(resourceGroupName, name, vnetName)
        .map(new Func1<VnetInfoInner, VnetInfo>() {
            @Override
            public VnetInfo call(VnetInfoInner inner) {
                return new VnetInfoImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<VnetInfo> createOrUpdateVnetConnectionAsync(String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope) {
        WebAppsInner client = this.inner();
        return client.createOrUpdateVnetConnectionAsync(resourceGroupName, name, vnetName, connectionEnvelope)
        .map(new Func1<VnetInfoInner, VnetInfo>() {
            @Override
            public VnetInfo call(VnetInfoInner inner) {
                return new VnetInfoImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteVnetConnectionAsync(String resourceGroupName, String name, String vnetName) {
        WebAppsInner client = this.inner();
        return client.deleteVnetConnectionAsync(resourceGroupName, name, vnetName).toCompletable();
    }

    @Override
    public Observable<VnetInfo> updateVnetConnectionAsync(String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope) {
        WebAppsInner client = this.inner();
        return client.updateVnetConnectionAsync(resourceGroupName, name, vnetName, connectionEnvelope)
        .map(new Func1<VnetInfoInner, VnetInfo>() {
            @Override
            public VnetInfo call(VnetInfoInner inner) {
                return new VnetInfoImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<VnetGateway> getVnetConnectionGatewaySlotAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String slot) {
        WebAppsInner client = this.inner();
        return client.getVnetConnectionGatewaySlotAsync(resourceGroupName, name, vnetName, gatewayName, slot)
        .map(new Func1<VnetGatewayInner, VnetGateway>() {
            @Override
            public VnetGateway call(VnetGatewayInner inner) {
                return wrapVnetGatewayModel(inner);
            }
       });
    }

    @Override
    public Observable<VnetGateway> getVnetConnectionGatewayAsync(String resourceGroupName, String name, String vnetName, String gatewayName) {
        WebAppsInner client = this.inner();
        return client.getVnetConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName)
        .map(new Func1<VnetGatewayInner, VnetGateway>() {
            @Override
            public VnetGateway call(VnetGatewayInner inner) {
                return new VnetGatewayImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<VnetGateway> createOrUpdateVnetConnectionGatewayAsync(String resourceGroupName, String name, String vnetName, String gatewayName, VnetGatewayInner connectionEnvelope) {
        WebAppsInner client = this.inner();
        return client.createOrUpdateVnetConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope)
        .map(new Func1<VnetGatewayInner, VnetGateway>() {
            @Override
            public VnetGateway call(VnetGatewayInner inner) {
                return new VnetGatewayImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<VnetGateway> updateVnetConnectionGatewayAsync(String resourceGroupName, String name, String vnetName, String gatewayName, VnetGatewayInner connectionEnvelope) {
        WebAppsInner client = this.inner();
        return client.updateVnetConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope)
        .map(new Func1<VnetGatewayInner, VnetGateway>() {
            @Override
            public VnetGateway call(VnetGatewayInner inner) {
                return new VnetGatewayImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<WebJob> getWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot) {
        WebAppsInner client = this.inner();
        return client.getWebJobSlotAsync(resourceGroupName, name, webJobName, slot)
        .map(new Func1<WebJobInner, WebJob>() {
            @Override
            public WebJob call(WebJobInner inner) {
                return wrapWebJobModel(inner);
            }
       });
    }

    private Observable<Page<WebJobInner>> listWebJobsSlotNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listWebJobsSlotNextAsync(nextLink)
        .flatMap(new Func1<Page<WebJobInner>, Observable<Page<WebJobInner>>>() {
            @Override
            public Observable<Page<WebJobInner>> call(Page<WebJobInner> page) {
                return Observable.just(page).concatWith(listWebJobsSlotNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<WebJob> listWebJobsSlotAsync(final String resourceGroupName, final String name, final String slot) {
        WebAppsInner client = this.inner();
        return client.listWebJobsSlotAsync(resourceGroupName, name, slot)
        .flatMap(new Func1<Page<WebJobInner>, Observable<Page<WebJobInner>>>() {
            @Override
            public Observable<Page<WebJobInner>> call(Page<WebJobInner> page) {
                return listWebJobsSlotNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<WebJobInner>, Iterable<WebJobInner>>() {
            @Override
            public Iterable<WebJobInner> call(Page<WebJobInner> page) {
                return page.items();
            }
        })
        .map(new Func1<WebJobInner, WebJob>() {
            @Override
            public WebJob call(WebJobInner inner) {
                return wrapWebJobModel(inner);
            }
        });
    }

    private Observable<Page<WebJobInner>> listWebJobsNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        WebAppsInner client = this.inner();
        return client.listWebJobsNextAsync(nextLink)
        .flatMap(new Func1<Page<WebJobInner>, Observable<Page<WebJobInner>>>() {
            @Override
            public Observable<Page<WebJobInner>> call(Page<WebJobInner> page) {
                return Observable.just(page).concatWith(listWebJobsNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<WebJob> listWebJobsAsync(final String resourceGroupName, final String name) {
        WebAppsInner client = this.inner();
        return client.listWebJobsAsync(resourceGroupName, name)
        .flatMap(new Func1<Page<WebJobInner>, Observable<Page<WebJobInner>>>() {
            @Override
            public Observable<Page<WebJobInner>> call(Page<WebJobInner> page) {
                return listWebJobsNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<WebJobInner>, Iterable<WebJobInner>>() {
            @Override
            public Iterable<WebJobInner> call(Page<WebJobInner> page) {
                return page.items();
            }
       })
        .map(new Func1<WebJobInner, WebJob>() {
            @Override
            public WebJob call(WebJobInner inner) {
                return new WebJobImpl(inner, manager());
            }
       });
    }

    @Override
    public Observable<WebJob> getWebJobAsync(String resourceGroupName, String name, String webJobName) {
        WebAppsInner client = this.inner();
        return client.getWebJobAsync(resourceGroupName, name, webJobName)
        .map(new Func1<WebJobInner, WebJob>() {
            @Override
            public WebJob call(WebJobInner inner) {
                return new WebJobImpl(inner, manager());
            }
        });
    }

}
