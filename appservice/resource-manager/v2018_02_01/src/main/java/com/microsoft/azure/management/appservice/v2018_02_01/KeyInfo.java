/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appservice.v2018_02_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.appservice.v2018_02_01.implementation.KeyInfoInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.appservice.v2018_02_01.implementation.CertificateRegistrationManager;

/**
 * Type representing KeyInfo.
 */
public interface KeyInfo extends HasInner<KeyInfoInner>, Indexable, Updatable<KeyInfo.Update>, HasManager<CertificateRegistrationManager> {
    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the keyInfoName value.
     */
    String keyInfoName();

    /**
     * @return the kind value.
     */
    String kind();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the value value.
     */
    String value();

    /**
     * The entirety of the KeyInfo definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithFunction, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of KeyInfo definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a KeyInfo definition.
         */
        interface Blank extends WithFunction {
        }

        /**
         * The stage of the keyinfo definition allowing to specify Function.
         */
        interface WithFunction {
           /**
            * Specifies resourceGroupName, name, functionName.
            * @param resourceGroupName Name of the resource group to which the resource belongs
            * @param name Site name
            * @param functionName The name of the function
            * @return the next definition stage
            */
            WithCreate withExistingFunction(String resourceGroupName, String name, String functionName);
        }

        /**
         * The stage of the keyinfo definition allowing to specify KeyInfoName.
         */
        interface WithKeyInfoName {
            /**
             * Specifies keyInfoName.
             * @param keyInfoName Key name
             * @return the next definition stage
             */
            WithCreate withKeyInfoName(String keyInfoName);
        }

        /**
         * The stage of the keyinfo definition allowing to specify Kind.
         */
        interface WithKind {
            /**
             * Specifies kind.
             * @param kind Kind of resource
             * @return the next definition stage
             */
            WithCreate withKind(String kind);
        }

        /**
         * The stage of the keyinfo definition allowing to specify Value.
         */
        interface WithValue {
            /**
             * Specifies value.
             * @param value Key value
             * @return the next definition stage
             */
            WithCreate withValue(String value);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<KeyInfo>, DefinitionStages.WithKeyInfoName, DefinitionStages.WithKind, DefinitionStages.WithValue {
        }
    }
    /**
     * The template for a KeyInfo update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<KeyInfo>, UpdateStages.WithKeyInfoName, UpdateStages.WithKind, UpdateStages.WithValue {
    }

    /**
     * Grouping of KeyInfo update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the keyinfo update allowing to specify KeyInfoName.
         */
        interface WithKeyInfoName {
            /**
             * Specifies keyInfoName.
             * @param keyInfoName Key name
             * @return the next update stage
             */
            Update withKeyInfoName(String keyInfoName);
        }

        /**
         * The stage of the keyinfo update allowing to specify Kind.
         */
        interface WithKind {
            /**
             * Specifies kind.
             * @param kind Kind of resource
             * @return the next update stage
             */
            Update withKind(String kind);
        }

        /**
         * The stage of the keyinfo update allowing to specify Value.
         */
        interface WithValue {
            /**
             * Specifies value.
             * @param value Key value
             * @return the next update stage
             */
            Update withValue(String value);
        }

    }
}
