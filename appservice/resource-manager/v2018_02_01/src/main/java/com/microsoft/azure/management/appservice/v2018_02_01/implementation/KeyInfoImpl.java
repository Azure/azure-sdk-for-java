/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appservice.v2018_02_01.implementation;

import com.microsoft.azure.management.appservice.v2018_02_01.KeyInfo;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;

class KeyInfoImpl extends CreatableUpdatableImpl<KeyInfo, KeyInfoInner, KeyInfoImpl> implements KeyInfo, KeyInfo.Definition, KeyInfo.Update {
    private final CertificateRegistrationManager manager;
    private String resourceGroupName;
    private String name;
    private String functionName;
    private String keyName;

    KeyInfoImpl(String name, CertificateRegistrationManager manager) {
        super(name, new KeyInfoInner());
        this.manager = manager;
        // Set resource name
        this.keyName = name;
        //
    }

    KeyInfoImpl(KeyInfoInner inner, CertificateRegistrationManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.keyName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.name = IdParsingUtils.getValueFromIdByName(inner.id(), "sites");
        this.functionName = IdParsingUtils.getValueFromIdByName(inner.id(), "functions");
        this.keyName = IdParsingUtils.getValueFromIdByName(inner.id(), "keys");
        //
    }

    @Override
    public CertificateRegistrationManager manager() {
        return this.manager;
    }

    @Override
    public Observable<KeyInfo> createResourceAsync() {
        WebAppsInner client = this.manager().inner().webApps();
        return client.createOrUpdateFunctionSecretAsync(this.resourceGroupName, this.name, this.functionName, this.keyName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<KeyInfo> updateResourceAsync() {
        WebAppsInner client = this.manager().inner().webApps();
        return client.createOrUpdateFunctionSecretAsync(this.resourceGroupName, this.name, this.functionName, this.keyName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<KeyInfoInner> getInnerAsync() {
        WebAppsInner client = this.manager().inner().webApps();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String keyInfoName() {
        return this.inner().keyInfoName();
    }

    @Override
    public String kind() {
        return this.inner().kind();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String value() {
        return this.inner().value();
    }

    @Override
    public KeyInfoImpl withExistingFunction(String resourceGroupName, String name, String functionName) {
        this.resourceGroupName = resourceGroupName;
        this.name = name;
        this.functionName = functionName;
        return this;
    }

    @Override
    public KeyInfoImpl withKeyInfoName(String keyInfoName) {
        this.inner().withKeyInfoName(keyInfoName);
        return this;
    }

    @Override
    public KeyInfoImpl withKind(String kind) {
        this.inner().withKind(kind);
        return this;
    }

    @Override
    public KeyInfoImpl withValue(String value) {
        this.inner().withValue(value);
        return this;
    }

}
