/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.costmanagement.v2018_05_31.implementation;

import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureClient;
import com.microsoft.azure.AzureServiceClient;
import com.microsoft.azure.management.costmanagement.v2018_05_31.ErrorResponseException;
import com.microsoft.azure.management.costmanagement.v2018_05_31.ReportConfigDefinition;
import com.microsoft.rest.credentials.ServiceClientCredentials;
import com.microsoft.rest.RestClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * Initializes a new instance of the CostManagementClientImpl class.
 */
public class CostManagementClientImpl extends AzureServiceClient {
    /** The Retrofit service to perform REST calls. */
    private CostManagementClientService service;
    /** the {@link AzureClient} used for long running operations. */
    private AzureClient azureClient;

    /**
     * Gets the {@link AzureClient} used for long running operations.
     * @return the azure client;
     */
    public AzureClient getAzureClient() {
        return this.azureClient;
    }

    /** Version of the API to be used with the client request. The current version is 2018-05-31. */
    private String apiVersion;

    /**
     * Gets Version of the API to be used with the client request. The current version is 2018-05-31.
     *
     * @return the apiVersion value.
     */
    public String apiVersion() {
        return this.apiVersion;
    }

    /** Azure Subscription ID. */
    private String subscriptionId;

    /**
     * Gets Azure Subscription ID.
     *
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Sets Azure Subscription ID.
     *
     * @param subscriptionId the subscriptionId value.
     * @return the service client itself
     */
    public CostManagementClientImpl withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /** The preferred language for the response. */
    private String acceptLanguage;

    /**
     * Gets The preferred language for the response.
     *
     * @return the acceptLanguage value.
     */
    public String acceptLanguage() {
        return this.acceptLanguage;
    }

    /**
     * Sets The preferred language for the response.
     *
     * @param acceptLanguage the acceptLanguage value.
     * @return the service client itself
     */
    public CostManagementClientImpl withAcceptLanguage(String acceptLanguage) {
        this.acceptLanguage = acceptLanguage;
        return this;
    }

    /** The retry timeout in seconds for Long Running Operations. Default value is 30. */
    private int longRunningOperationRetryTimeout;

    /**
     * Gets The retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @return the longRunningOperationRetryTimeout value.
     */
    public int longRunningOperationRetryTimeout() {
        return this.longRunningOperationRetryTimeout;
    }

    /**
     * Sets The retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @param longRunningOperationRetryTimeout the longRunningOperationRetryTimeout value.
     * @return the service client itself
     */
    public CostManagementClientImpl withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout) {
        this.longRunningOperationRetryTimeout = longRunningOperationRetryTimeout;
        return this;
    }

    /** Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true. */
    private boolean generateClientRequestId;

    /**
     * Gets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @return the generateClientRequestId value.
     */
    public boolean generateClientRequestId() {
        return this.generateClientRequestId;
    }

    /**
     * Sets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @param generateClientRequestId the generateClientRequestId value.
     * @return the service client itself
     */
    public CostManagementClientImpl withGenerateClientRequestId(boolean generateClientRequestId) {
        this.generateClientRequestId = generateClientRequestId;
        return this;
    }

    /**
     * The ReportConfigsInner object to access its operations.
     */
    private ReportConfigsInner reportConfigs;

    /**
     * Gets the ReportConfigsInner object to access its operations.
     * @return the ReportConfigsInner object.
     */
    public ReportConfigsInner reportConfigs() {
        return this.reportConfigs;
    }

    /**
     * The BillingAccountDimensionsInner object to access its operations.
     */
    private BillingAccountDimensionsInner billingAccountDimensions;

    /**
     * Gets the BillingAccountDimensionsInner object to access its operations.
     * @return the BillingAccountDimensionsInner object.
     */
    public BillingAccountDimensionsInner billingAccountDimensions() {
        return this.billingAccountDimensions;
    }

    /**
     * The SubscriptionDimensionsInner object to access its operations.
     */
    private SubscriptionDimensionsInner subscriptionDimensions;

    /**
     * Gets the SubscriptionDimensionsInner object to access its operations.
     * @return the SubscriptionDimensionsInner object.
     */
    public SubscriptionDimensionsInner subscriptionDimensions() {
        return this.subscriptionDimensions;
    }

    /**
     * The ResourceGroupDimensionsInner object to access its operations.
     */
    private ResourceGroupDimensionsInner resourceGroupDimensions;

    /**
     * Gets the ResourceGroupDimensionsInner object to access its operations.
     * @return the ResourceGroupDimensionsInner object.
     */
    public ResourceGroupDimensionsInner resourceGroupDimensions() {
        return this.resourceGroupDimensions;
    }

    /**
     * The OperationsInner object to access its operations.
     */
    private OperationsInner operations;

    /**
     * Gets the OperationsInner object to access its operations.
     * @return the OperationsInner object.
     */
    public OperationsInner operations() {
        return this.operations;
    }

    /**
     * Initializes an instance of CostManagementClient client.
     *
     * @param credentials the management credentials for Azure
     */
    public CostManagementClientImpl(ServiceClientCredentials credentials) {
        this("https://management.azure.com", credentials);
    }

    /**
     * Initializes an instance of CostManagementClient client.
     *
     * @param baseUrl the base URL of the host
     * @param credentials the management credentials for Azure
     */
    public CostManagementClientImpl(String baseUrl, ServiceClientCredentials credentials) {
        super(baseUrl, credentials);
        initialize();
    }

    /**
     * Initializes an instance of CostManagementClient client.
     *
     * @param restClient the REST client to connect to Azure.
     */
    public CostManagementClientImpl(RestClient restClient) {
        super(restClient);
        initialize();
    }

    protected void initialize() {
        this.apiVersion = "2018-05-31";
        this.acceptLanguage = "en-US";
        this.longRunningOperationRetryTimeout = 30;
        this.generateClientRequestId = true;
        this.reportConfigs = new ReportConfigsInner(restClient().retrofit(), this);
        this.billingAccountDimensions = new BillingAccountDimensionsInner(restClient().retrofit(), this);
        this.subscriptionDimensions = new SubscriptionDimensionsInner(restClient().retrofit(), this);
        this.resourceGroupDimensions = new ResourceGroupDimensionsInner(restClient().retrofit(), this);
        this.operations = new OperationsInner(restClient().retrofit(), this);
        this.azureClient = new AzureClient(this);
        initializeService();
    }

    /**
     * Gets the User-Agent header for the client.
     *
     * @return the user agent string.
     */
    @Override
    public String userAgent() {
        return String.format("%s (%s, %s, auto-generated)", super.userAgent(), "CostManagementClient", "2018-05-31");
    }

    private void initializeService() {
        service = restClient().retrofit().create(CostManagementClientService.class);
    }

    /**
     * The interface defining all the services for CostManagementClient to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CostManagementClientService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.costmanagement.v2018_05_31.CostManagementClient querySubscription" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.CostManagement/Query")
        Observable<Response<ResponseBody>> querySubscription(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Body ReportConfigDefinition parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.costmanagement.v2018_05_31.CostManagementClient queryResourceGroup" })
        @POST("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.CostManagement/Query")
        Observable<Response<ResponseBody>> queryResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Body ReportConfigDefinition parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.costmanagement.v2018_05_31.CostManagementClient queryBillingAccount" })
        @POST("providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.CostManagement/Query")
        Observable<Response<ResponseBody>> queryBillingAccount(@Path("billingAccountId") String billingAccountId, @Query("api-version") String apiVersion, @Body ReportConfigDefinition parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the usage data for subscriptionId.
     *
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;QueryInner&gt; object if successful.
     */
    public List<QueryInner> querySubscription(ReportConfigDefinition parameters) {
        return querySubscriptionWithServiceResponseAsync(parameters).toBlocking().single().body();
    }

    /**
     * Lists the usage data for subscriptionId.
     *
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<QueryInner>> querySubscriptionAsync(ReportConfigDefinition parameters, final ServiceCallback<List<QueryInner>> serviceCallback) {
        return ServiceFuture.fromResponse(querySubscriptionWithServiceResponseAsync(parameters), serviceCallback);
    }

    /**
     * Lists the usage data for subscriptionId.
     *
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;QueryInner&gt; object
     */
    public Observable<List<QueryInner>> querySubscriptionAsync(ReportConfigDefinition parameters) {
        return querySubscriptionWithServiceResponseAsync(parameters).map(new Func1<ServiceResponse<List<QueryInner>>, List<QueryInner>>() {
            @Override
            public List<QueryInner> call(ServiceResponse<List<QueryInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the usage data for subscriptionId.
     *
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;QueryInner&gt; object
     */
    public Observable<ServiceResponse<List<QueryInner>>> querySubscriptionWithServiceResponseAsync(ReportConfigDefinition parameters) {
        if (this.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.subscriptionId() is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.querySubscription(this.subscriptionId(), this.apiVersion(), parameters, this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<QueryInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<QueryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<QueryInner>> result = querySubscriptionDelegate(response);
                        List<QueryInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<QueryInner>> clientResponse = new ServiceResponse<List<QueryInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<QueryInner>> querySubscriptionDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<PageImpl<QueryInner>, ErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<PageImpl<QueryInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the usage data for subscriptionId and resource group.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;QueryInner&gt; object if successful.
     */
    public List<QueryInner> queryResourceGroup(String resourceGroupName, ReportConfigDefinition parameters) {
        return queryResourceGroupWithServiceResponseAsync(resourceGroupName, parameters).toBlocking().single().body();
    }

    /**
     * Lists the usage data for subscriptionId and resource group.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<QueryInner>> queryResourceGroupAsync(String resourceGroupName, ReportConfigDefinition parameters, final ServiceCallback<List<QueryInner>> serviceCallback) {
        return ServiceFuture.fromResponse(queryResourceGroupWithServiceResponseAsync(resourceGroupName, parameters), serviceCallback);
    }

    /**
     * Lists the usage data for subscriptionId and resource group.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;QueryInner&gt; object
     */
    public Observable<List<QueryInner>> queryResourceGroupAsync(String resourceGroupName, ReportConfigDefinition parameters) {
        return queryResourceGroupWithServiceResponseAsync(resourceGroupName, parameters).map(new Func1<ServiceResponse<List<QueryInner>>, List<QueryInner>>() {
            @Override
            public List<QueryInner> call(ServiceResponse<List<QueryInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the usage data for subscriptionId and resource group.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;QueryInner&gt; object
     */
    public Observable<ServiceResponse<List<QueryInner>>> queryResourceGroupWithServiceResponseAsync(String resourceGroupName, ReportConfigDefinition parameters) {
        if (this.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.queryResourceGroup(this.subscriptionId(), resourceGroupName, this.apiVersion(), parameters, this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<QueryInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<QueryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<QueryInner>> result = queryResourceGroupDelegate(response);
                        List<QueryInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<QueryInner>> clientResponse = new ServiceResponse<List<QueryInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<QueryInner>> queryResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<PageImpl<QueryInner>, ErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<PageImpl<QueryInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the usage data for billing account.
     *
     * @param billingAccountId BillingAccount ID
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;QueryInner&gt; object if successful.
     */
    public List<QueryInner> queryBillingAccount(String billingAccountId, ReportConfigDefinition parameters) {
        return queryBillingAccountWithServiceResponseAsync(billingAccountId, parameters).toBlocking().single().body();
    }

    /**
     * Lists the usage data for billing account.
     *
     * @param billingAccountId BillingAccount ID
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<QueryInner>> queryBillingAccountAsync(String billingAccountId, ReportConfigDefinition parameters, final ServiceCallback<List<QueryInner>> serviceCallback) {
        return ServiceFuture.fromResponse(queryBillingAccountWithServiceResponseAsync(billingAccountId, parameters), serviceCallback);
    }

    /**
     * Lists the usage data for billing account.
     *
     * @param billingAccountId BillingAccount ID
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;QueryInner&gt; object
     */
    public Observable<List<QueryInner>> queryBillingAccountAsync(String billingAccountId, ReportConfigDefinition parameters) {
        return queryBillingAccountWithServiceResponseAsync(billingAccountId, parameters).map(new Func1<ServiceResponse<List<QueryInner>>, List<QueryInner>>() {
            @Override
            public List<QueryInner> call(ServiceResponse<List<QueryInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the usage data for billing account.
     *
     * @param billingAccountId BillingAccount ID
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;QueryInner&gt; object
     */
    public Observable<ServiceResponse<List<QueryInner>>> queryBillingAccountWithServiceResponseAsync(String billingAccountId, ReportConfigDefinition parameters) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.queryBillingAccount(billingAccountId, this.apiVersion(), parameters, this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<QueryInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<QueryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<QueryInner>> result = queryBillingAccountDelegate(response);
                        List<QueryInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<QueryInner>> clientResponse = new ServiceResponse<List<QueryInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<QueryInner>> queryBillingAccountDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<PageImpl<QueryInner>, ErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<PageImpl<QueryInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
