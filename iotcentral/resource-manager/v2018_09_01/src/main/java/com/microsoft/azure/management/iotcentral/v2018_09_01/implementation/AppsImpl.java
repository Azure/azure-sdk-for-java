/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.iotcentral.v2018_09_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.iotcentral.v2018_09_01.Apps;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.iotcentral.v2018_09_01.App;
import com.microsoft.azure.Page;
import rx.Completable;
import com.microsoft.azure.management.iotcentral.v2018_09_01.AppTemplate;
import com.microsoft.azure.management.iotcentral.v2018_09_01.AppAvailabilityInfo;
import com.microsoft.azure.management.iotcentral.v2018_09_01.OperationInputs;

class AppsImpl extends WrapperImpl<AppsInner> implements Apps {
    private final IoTCentralManager manager;

    AppsImpl(IoTCentralManager manager) {
        super(manager.inner().apps());
        this.manager = manager;
    }

    public IoTCentralManager manager() {
        return this.manager;
    }

    @Override
    public AppImpl defineIoTApp(String name) {
        return wrapIoTAppModel(name);
    }

    private AppImpl wrapIoTAppModel(String name) {
        return new AppImpl(name, new AppInner(), this.manager());
    }

    private AppImpl wrapAppModel(AppInner inner) {
        return  new AppImpl(inner.name(), inner, manager());
    }

    private AppTemplateImpl wrapAppTemplateModel(AppTemplateInner inner) {
        return  new AppTemplateImpl(inner, manager());
    }

    private Observable<AppInner> getAppInnerUsingAppsInnerAsync(String resourceGroupName, String name) {
        AppsInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    public Observable<App> getByResourceGroupAsync(String resourceGroupName, String name) {
        return this.getAppInnerUsingAppsInnerAsync(resourceGroupName, name).map(new Func1<AppInner, App> () {
            @Override
            public App call(AppInner inner) {
                return wrapAppModel(inner);
            }
        });
    }

    @Override
    public Observable<App> listByResourceGroupAsync(String resourceGroupName) {
        AppsInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<AppInner>, Iterable<AppInner>>() {
            @Override
            public Iterable<AppInner> call(Page<AppInner> page) {
                return page.items();
            }
        })
        .map(new Func1<AppInner, App>() {
            @Override
            public App call(AppInner inner) {
                return wrapAppModel(inner);
            }
        });
    }

    @Override
    public Observable<App> listBySubscriptionAsync() {
        AppsInner client = this.inner();
        return client.listBySubscriptionAsync()
        .flatMapIterable(new Func1<Page<AppInner>, Iterable<AppInner>>() {
            @Override
            public Iterable<AppInner> call(Page<AppInner> page) {
                return page.items();
            }
        })
        .map(new Func1<AppInner, App>() {
            @Override
            public App call(AppInner inner) {
                return wrapAppModel(inner);
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String name) {
        return this.inner().deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<AppTemplate> listTemplatesAsync() {
        AppsInner client = this.inner();
        return client.listTemplatesAsync()
        .flatMapIterable(new Func1<Page<AppTemplateInner>, Iterable<AppTemplateInner>>() {
            @Override
            public Iterable<AppTemplateInner> call(Page<AppTemplateInner> page) {
                return page.items();
            }
        })
        .map(new Func1<AppTemplateInner, AppTemplate>() {
            @Override
            public AppTemplate call(AppTemplateInner inner) {
                return wrapAppTemplateModel(inner);
            }
        });
    }

    @Override
    public Observable<AppTemplate> templateAsync(String applicationTemplateId) {
        AppsInner client = this.inner();
        return client.templateAsync(applicationTemplateId)
        .map(new Func1<AppTemplateInner, AppTemplate>() {
            @Override
            public AppTemplate call(AppTemplateInner inner) {
                return new AppTemplateImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<AppAvailabilityInfo> checkNameAvailabilityAsync(OperationInputs operationInputs) {
        AppsInner client = this.inner();
        return client.checkNameAvailabilityAsync(operationInputs)
        .map(new Func1<AppAvailabilityInfoInner, AppAvailabilityInfo>() {
            @Override
            public AppAvailabilityInfo call(AppAvailabilityInfoInner inner) {
                return new AppAvailabilityInfoImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<AppAvailabilityInfo> checkSubdomainAvailabilityAsync(OperationInputs operationInputs) {
        AppsInner client = this.inner();
        return client.checkSubdomainAvailabilityAsync(operationInputs)
        .map(new Func1<AppAvailabilityInfoInner, AppAvailabilityInfo>() {
            @Override
            public AppAvailabilityInfo call(AppAvailabilityInfoInner inner) {
                return new AppAvailabilityInfoImpl(inner, manager());
            }
        });
    }

}
