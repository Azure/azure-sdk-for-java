/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hdinsight.v2018_06_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.hdinsight.v2018_06_01_preview.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Locations.
 */
public class LocationsInner {
    /** The Retrofit service to perform REST calls. */
    private LocationsService service;
    /** The service client containing this operation class. */
    private HDInsightManagementClientImpl client;

    /**
     * Initializes an instance of LocationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public LocationsInner(Retrofit retrofit, HDInsightManagementClientImpl client) {
        this.service = retrofit.create(LocationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Locations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface LocationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hdinsight.v2018_06_01_preview.Locations getCapabilities" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/capabilities")
        Observable<Response<ResponseBody>> getCapabilities(@Path("subscriptionId") String subscriptionId, @Path("location") String location, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hdinsight.v2018_06_01_preview.Locations listUsages" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/usages")
        Observable<Response<ResponseBody>> listUsages(@Path("subscriptionId") String subscriptionId, @Path("location") String location, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hdinsight.v2018_06_01_preview.Locations listBillingSpecs" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/billingSpecs")
        Observable<Response<ResponseBody>> listBillingSpecs(@Path("subscriptionId") String subscriptionId, @Path("location") String location, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the capabilities for the specified location.
     *
     * @param location The Azure location (region) for which to make the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CapabilitiesResultInner object if successful.
     */
    public CapabilitiesResultInner getCapabilities(String location) {
        return getCapabilitiesWithServiceResponseAsync(location).toBlocking().single().body();
    }

    /**
     * Gets the capabilities for the specified location.
     *
     * @param location The Azure location (region) for which to make the request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CapabilitiesResultInner> getCapabilitiesAsync(String location, final ServiceCallback<CapabilitiesResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(getCapabilitiesWithServiceResponseAsync(location), serviceCallback);
    }

    /**
     * Gets the capabilities for the specified location.
     *
     * @param location The Azure location (region) for which to make the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CapabilitiesResultInner object
     */
    public Observable<CapabilitiesResultInner> getCapabilitiesAsync(String location) {
        return getCapabilitiesWithServiceResponseAsync(location).map(new Func1<ServiceResponse<CapabilitiesResultInner>, CapabilitiesResultInner>() {
            @Override
            public CapabilitiesResultInner call(ServiceResponse<CapabilitiesResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the capabilities for the specified location.
     *
     * @param location The Azure location (region) for which to make the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CapabilitiesResultInner object
     */
    public Observable<ServiceResponse<CapabilitiesResultInner>> getCapabilitiesWithServiceResponseAsync(String location) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getCapabilities(this.client.subscriptionId(), location, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CapabilitiesResultInner>>>() {
                @Override
                public Observable<ServiceResponse<CapabilitiesResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CapabilitiesResultInner> clientResponse = getCapabilitiesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CapabilitiesResultInner> getCapabilitiesDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CapabilitiesResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CapabilitiesResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the usages for the specified location.
     *
     * @param location The Azure location (region) for which to make the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UsagesListResultInner object if successful.
     */
    public UsagesListResultInner listUsages(String location) {
        return listUsagesWithServiceResponseAsync(location).toBlocking().single().body();
    }

    /**
     * Lists the usages for the specified location.
     *
     * @param location The Azure location (region) for which to make the request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UsagesListResultInner> listUsagesAsync(String location, final ServiceCallback<UsagesListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listUsagesWithServiceResponseAsync(location), serviceCallback);
    }

    /**
     * Lists the usages for the specified location.
     *
     * @param location The Azure location (region) for which to make the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UsagesListResultInner object
     */
    public Observable<UsagesListResultInner> listUsagesAsync(String location) {
        return listUsagesWithServiceResponseAsync(location).map(new Func1<ServiceResponse<UsagesListResultInner>, UsagesListResultInner>() {
            @Override
            public UsagesListResultInner call(ServiceResponse<UsagesListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the usages for the specified location.
     *
     * @param location The Azure location (region) for which to make the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UsagesListResultInner object
     */
    public Observable<ServiceResponse<UsagesListResultInner>> listUsagesWithServiceResponseAsync(String location) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listUsages(this.client.subscriptionId(), location, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UsagesListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<UsagesListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UsagesListResultInner> clientResponse = listUsagesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UsagesListResultInner> listUsagesDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UsagesListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<UsagesListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the billingSpecs for the specified subscription and location.
     *
     * @param location The Azure location (region) for which to make the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingResponseListResultInner object if successful.
     */
    public BillingResponseListResultInner listBillingSpecs(String location) {
        return listBillingSpecsWithServiceResponseAsync(location).toBlocking().single().body();
    }

    /**
     * Lists the billingSpecs for the specified subscription and location.
     *
     * @param location The Azure location (region) for which to make the request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingResponseListResultInner> listBillingSpecsAsync(String location, final ServiceCallback<BillingResponseListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listBillingSpecsWithServiceResponseAsync(location), serviceCallback);
    }

    /**
     * Lists the billingSpecs for the specified subscription and location.
     *
     * @param location The Azure location (region) for which to make the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingResponseListResultInner object
     */
    public Observable<BillingResponseListResultInner> listBillingSpecsAsync(String location) {
        return listBillingSpecsWithServiceResponseAsync(location).map(new Func1<ServiceResponse<BillingResponseListResultInner>, BillingResponseListResultInner>() {
            @Override
            public BillingResponseListResultInner call(ServiceResponse<BillingResponseListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the billingSpecs for the specified subscription and location.
     *
     * @param location The Azure location (region) for which to make the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingResponseListResultInner object
     */
    public Observable<ServiceResponse<BillingResponseListResultInner>> listBillingSpecsWithServiceResponseAsync(String location) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listBillingSpecs(this.client.subscriptionId(), location, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingResponseListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingResponseListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingResponseListResultInner> clientResponse = listBillingSpecsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BillingResponseListResultInner> listBillingSpecsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingResponseListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingResponseListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
