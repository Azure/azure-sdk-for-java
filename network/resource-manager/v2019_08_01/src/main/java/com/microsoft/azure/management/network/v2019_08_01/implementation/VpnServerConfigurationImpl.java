/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2019_08_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.network.v2019_08_01.VpnServerConfiguration;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.network.v2019_08_01.VpnGatewayTunnelingProtocol;
import com.microsoft.azure.management.network.v2019_08_01.VpnAuthenticationType;
import com.microsoft.azure.management.network.v2019_08_01.VpnServerConfigVpnClientRootCertificate;
import com.microsoft.azure.management.network.v2019_08_01.VpnServerConfigVpnClientRevokedCertificate;
import com.microsoft.azure.management.network.v2019_08_01.VpnServerConfigRadiusServerRootCertificate;
import com.microsoft.azure.management.network.v2019_08_01.VpnServerConfigRadiusClientRootCertificate;
import com.microsoft.azure.management.network.v2019_08_01.IpsecPolicy;
import com.microsoft.azure.management.network.v2019_08_01.AadAuthenticationParameters;
import java.util.ArrayList;
import com.microsoft.azure.management.network.v2019_08_01.P2SVpnGateway;

class VpnServerConfigurationImpl extends GroupableResourceCoreImpl<VpnServerConfiguration, VpnServerConfigurationInner, VpnServerConfigurationImpl, NetworkManager> implements VpnServerConfiguration, VpnServerConfiguration.Definition, VpnServerConfiguration.Update {
    VpnServerConfigurationImpl(String name, VpnServerConfigurationInner inner, NetworkManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<VpnServerConfiguration> createResourceAsync() {
        VpnServerConfigurationsInner client = this.manager().inner().vpnServerConfigurations();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<VpnServerConfiguration> updateResourceAsync() {
        VpnServerConfigurationsInner client = this.manager().inner().vpnServerConfigurations();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<VpnServerConfigurationInner> getInnerAsync() {
        VpnServerConfigurationsInner client = this.manager().inner().vpnServerConfigurations();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public AadAuthenticationParameters aadAuthenticationParameters() {
        return this.inner().aadAuthenticationParameters();
    }

    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public List<P2SVpnGateway> p2SVpnGateways() {
        List<P2SVpnGateway> lst = new ArrayList<P2SVpnGateway>();
        if (this.inner().p2SVpnGateways() != null) {
            for (P2SVpnGatewayInner inner : this.inner().p2SVpnGateways()) {
                lst.add( new P2SVpnGatewayImpl(inner.name(), inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String radiusServerAddress() {
        return this.inner().radiusServerAddress();
    }

    @Override
    public String radiusServerSecret() {
        return this.inner().radiusServerSecret();
    }

    @Override
    public List<VpnAuthenticationType> vpnAuthenticationTypes() {
        return this.inner().vpnAuthenticationTypes();
    }

    @Override
    public List<IpsecPolicy> vpnClientIpsecPolicies() {
        return this.inner().vpnClientIpsecPolicies();
    }

    @Override
    public List<VpnGatewayTunnelingProtocol> vpnProtocols() {
        return this.inner().vpnProtocols();
    }

    @Override
    public List<VpnServerConfigRadiusClientRootCertificate> vpnServerConfigRadiusClientRootCertificates() {
        return this.inner().vpnServerConfigRadiusClientRootCertificates();
    }

    @Override
    public List<VpnServerConfigRadiusServerRootCertificate> vpnServerConfigRadiusServerRootCertificates() {
        return this.inner().vpnServerConfigRadiusServerRootCertificates();
    }

    @Override
    public String vpnServerConfigurationName() {
        return this.inner().vpnServerConfigurationName();
    }

    @Override
    public String vpnServerConfigurationPropertiesEtag() {
        return this.inner().vpnServerConfigurationPropertiesEtag();
    }

    @Override
    public List<VpnServerConfigVpnClientRevokedCertificate> vpnServerConfigVpnClientRevokedCertificates() {
        return this.inner().vpnServerConfigVpnClientRevokedCertificates();
    }

    @Override
    public List<VpnServerConfigVpnClientRootCertificate> vpnServerConfigVpnClientRootCertificates() {
        return this.inner().vpnServerConfigVpnClientRootCertificates();
    }

    @Override
    public VpnServerConfigurationImpl withAadAuthenticationParameters(AadAuthenticationParameters aadAuthenticationParameters) {
        this.inner().withAadAuthenticationParameters(aadAuthenticationParameters);
        return this;
    }

    @Override
    public VpnServerConfigurationImpl withRadiusServerAddress(String radiusServerAddress) {
        this.inner().withRadiusServerAddress(radiusServerAddress);
        return this;
    }

    @Override
    public VpnServerConfigurationImpl withRadiusServerSecret(String radiusServerSecret) {
        this.inner().withRadiusServerSecret(radiusServerSecret);
        return this;
    }

    @Override
    public VpnServerConfigurationImpl withVpnAuthenticationTypes(List<VpnAuthenticationType> vpnAuthenticationTypes) {
        this.inner().withVpnAuthenticationTypes(vpnAuthenticationTypes);
        return this;
    }

    @Override
    public VpnServerConfigurationImpl withVpnClientIpsecPolicies(List<IpsecPolicy> vpnClientIpsecPolicies) {
        this.inner().withVpnClientIpsecPolicies(vpnClientIpsecPolicies);
        return this;
    }

    @Override
    public VpnServerConfigurationImpl withVpnProtocols(List<VpnGatewayTunnelingProtocol> vpnProtocols) {
        this.inner().withVpnProtocols(vpnProtocols);
        return this;
    }

    @Override
    public VpnServerConfigurationImpl withVpnServerConfigRadiusClientRootCertificates(List<VpnServerConfigRadiusClientRootCertificate> vpnServerConfigRadiusClientRootCertificates) {
        this.inner().withVpnServerConfigRadiusClientRootCertificates(vpnServerConfigRadiusClientRootCertificates);
        return this;
    }

    @Override
    public VpnServerConfigurationImpl withVpnServerConfigRadiusServerRootCertificates(List<VpnServerConfigRadiusServerRootCertificate> vpnServerConfigRadiusServerRootCertificates) {
        this.inner().withVpnServerConfigRadiusServerRootCertificates(vpnServerConfigRadiusServerRootCertificates);
        return this;
    }

    @Override
    public VpnServerConfigurationImpl withVpnServerConfigurationName(String vpnServerConfigurationName) {
        this.inner().withVpnServerConfigurationName(vpnServerConfigurationName);
        return this;
    }

    @Override
    public VpnServerConfigurationImpl withVpnServerConfigurationPropertiesEtag(String vpnServerConfigurationPropertiesEtag) {
        this.inner().withVpnServerConfigurationPropertiesEtag(vpnServerConfigurationPropertiesEtag);
        return this;
    }

    @Override
    public VpnServerConfigurationImpl withVpnServerConfigVpnClientRevokedCertificates(List<VpnServerConfigVpnClientRevokedCertificate> vpnServerConfigVpnClientRevokedCertificates) {
        this.inner().withVpnServerConfigVpnClientRevokedCertificates(vpnServerConfigVpnClientRevokedCertificates);
        return this;
    }

    @Override
    public VpnServerConfigurationImpl withVpnServerConfigVpnClientRootCertificates(List<VpnServerConfigVpnClientRootCertificate> vpnServerConfigVpnClientRootCertificates) {
        this.inner().withVpnServerConfigVpnClientRootCertificates(vpnServerConfigVpnClientRootCertificates);
        return this;
    }

}
