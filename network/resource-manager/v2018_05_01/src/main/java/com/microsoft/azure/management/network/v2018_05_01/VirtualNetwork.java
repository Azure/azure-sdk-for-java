/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2018_05_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.network.v2018_05_01.implementation.NetworkManager;
import java.util.List;
import com.microsoft.azure.SubResource;
import com.microsoft.azure.management.network.v2018_05_01.implementation.SubnetInner;
import com.microsoft.azure.management.network.v2018_05_01.implementation.VirtualNetworkPeeringInner;
import com.microsoft.azure.management.network.v2018_05_01.implementation.VirtualNetworkInner;

/**
 * Type representing VirtualNetwork.
 */
public interface VirtualNetwork extends HasInner<VirtualNetworkInner>, Resource, GroupableResourceCore<NetworkManager, VirtualNetworkInner>, HasResourceGroup, Refreshable<VirtualNetwork>, Updatable<VirtualNetwork.Update>, HasManager<NetworkManager> {
    /**
     * @return the addressSpace value.
     */
    AddressSpace addressSpace();

    /**
     * @return the ddosProtectionPlan value.
     */
    SubResource ddosProtectionPlan();

    /**
     * @return the dhcpOptions value.
     */
    DhcpOptions dhcpOptions();

    /**
     * @return the enableDdosProtection value.
     */
    Boolean enableDdosProtection();

    /**
     * @return the enableVmProtection value.
     */
    Boolean enableVmProtection();

    /**
     * @return the etag value.
     */
    String etag();

    /**
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * @return the resourceGuid value.
     */
    String resourceGuid();

    /**
     * @return the subnets value.
     */
    List<Subnet> subnets();

    /**
     * @return the virtualNetworkPeerings value.
     */
    List<VirtualNetworkPeering> virtualNetworkPeerings();

    /**
     * The entirety of the VirtualNetwork definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of VirtualNetwork definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a VirtualNetwork definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the VirtualNetwork definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithCreate> {
        }

        /**
         * The stage of the virtualnetwork update allowing to specify AddressSpace.
         */
        interface WithAddressSpace {
            /**
             * Specifies addressSpace.
             */
            WithCreate withAddressSpace(AddressSpace addressSpace);
        }

        /**
         * The stage of the virtualnetwork update allowing to specify DdosProtectionPlan.
         */
        interface WithDdosProtectionPlan {
            /**
             * Specifies ddosProtectionPlan.
             */
            WithCreate withDdosProtectionPlan(SubResource ddosProtectionPlan);
        }

        /**
         * The stage of the virtualnetwork update allowing to specify DhcpOptions.
         */
        interface WithDhcpOptions {
            /**
             * Specifies dhcpOptions.
             */
            WithCreate withDhcpOptions(DhcpOptions dhcpOptions);
        }

        /**
         * The stage of the virtualnetwork update allowing to specify EnableDdosProtection.
         */
        interface WithEnableDdosProtection {
            /**
             * Specifies enableDdosProtection.
             */
            WithCreate withEnableDdosProtection(Boolean enableDdosProtection);
        }

        /**
         * The stage of the virtualnetwork update allowing to specify EnableVmProtection.
         */
        interface WithEnableVmProtection {
            /**
             * Specifies enableVmProtection.
             */
            WithCreate withEnableVmProtection(Boolean enableVmProtection);
        }

        /**
         * The stage of the virtualnetwork update allowing to specify Etag.
         */
        interface WithEtag {
            /**
             * Specifies etag.
             */
            WithCreate withEtag(String etag);
        }

        /**
         * The stage of the virtualnetwork update allowing to specify ProvisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies provisioningState.
             */
            WithCreate withProvisioningState(String provisioningState);
        }

        /**
         * The stage of the virtualnetwork update allowing to specify ResourceGuid.
         */
        interface WithResourceGuid {
            /**
             * Specifies resourceGuid.
             */
            WithCreate withResourceGuid(String resourceGuid);
        }

        /**
         * The stage of the virtualnetwork update allowing to specify Subnets.
         */
        interface WithSubnets {
            /**
             * Specifies subnets.
             */
            WithCreate withSubnets(List<SubnetInner> subnets);
        }

        /**
         * The stage of the virtualnetwork update allowing to specify VirtualNetworkPeerings.
         */
        interface WithVirtualNetworkPeerings {
            /**
             * Specifies virtualNetworkPeerings.
             */
            WithCreate withVirtualNetworkPeerings(List<VirtualNetworkPeeringInner> virtualNetworkPeerings);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<VirtualNetwork>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithAddressSpace, DefinitionStages.WithDdosProtectionPlan, DefinitionStages.WithDhcpOptions, DefinitionStages.WithEnableDdosProtection, DefinitionStages.WithEnableVmProtection, DefinitionStages.WithEtag, DefinitionStages.WithProvisioningState, DefinitionStages.WithResourceGuid, DefinitionStages.WithSubnets, DefinitionStages.WithVirtualNetworkPeerings {
        }
    }
    /**
     * The template for a VirtualNetwork update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<VirtualNetwork>, Resource.UpdateWithTags<Update>, UpdateStages.WithAddressSpace, UpdateStages.WithDdosProtectionPlan, UpdateStages.WithDhcpOptions, UpdateStages.WithEnableDdosProtection, UpdateStages.WithEnableVmProtection, UpdateStages.WithEtag, UpdateStages.WithProvisioningState, UpdateStages.WithResourceGuid, UpdateStages.WithSubnets, UpdateStages.WithVirtualNetworkPeerings {
    }

    /**
     * Grouping of VirtualNetwork update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the virtualnetwork {0} allowing to specify AddressSpace.
         */
        interface WithAddressSpace {
            /**
             * Specifies addressSpace.
             */
            Update withAddressSpace(AddressSpace addressSpace);
        }

        /**
         * The stage of the virtualnetwork {0} allowing to specify DdosProtectionPlan.
         */
        interface WithDdosProtectionPlan {
            /**
             * Specifies ddosProtectionPlan.
             */
            Update withDdosProtectionPlan(SubResource ddosProtectionPlan);
        }

        /**
         * The stage of the virtualnetwork {0} allowing to specify DhcpOptions.
         */
        interface WithDhcpOptions {
            /**
             * Specifies dhcpOptions.
             */
            Update withDhcpOptions(DhcpOptions dhcpOptions);
        }

        /**
         * The stage of the virtualnetwork {0} allowing to specify EnableDdosProtection.
         */
        interface WithEnableDdosProtection {
            /**
             * Specifies enableDdosProtection.
             */
            Update withEnableDdosProtection(Boolean enableDdosProtection);
        }

        /**
         * The stage of the virtualnetwork {0} allowing to specify EnableVmProtection.
         */
        interface WithEnableVmProtection {
            /**
             * Specifies enableVmProtection.
             */
            Update withEnableVmProtection(Boolean enableVmProtection);
        }

        /**
         * The stage of the virtualnetwork {0} allowing to specify Etag.
         */
        interface WithEtag {
            /**
             * Specifies etag.
             */
            Update withEtag(String etag);
        }

        /**
         * The stage of the virtualnetwork {0} allowing to specify ProvisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies provisioningState.
             */
            Update withProvisioningState(String provisioningState);
        }

        /**
         * The stage of the virtualnetwork {0} allowing to specify ResourceGuid.
         */
        interface WithResourceGuid {
            /**
             * Specifies resourceGuid.
             */
            Update withResourceGuid(String resourceGuid);
        }

        /**
         * The stage of the virtualnetwork {0} allowing to specify Subnets.
         */
        interface WithSubnets {
            /**
             * Specifies subnets.
             */
            Update withSubnets(List<SubnetInner> subnets);
        }

        /**
         * The stage of the virtualnetwork {0} allowing to specify VirtualNetworkPeerings.
         */
        interface WithVirtualNetworkPeerings {
            /**
             * Specifies virtualNetworkPeerings.
             */
            Update withVirtualNetworkPeerings(List<VirtualNetworkPeeringInner> virtualNetworkPeerings);
        }

    }
}
