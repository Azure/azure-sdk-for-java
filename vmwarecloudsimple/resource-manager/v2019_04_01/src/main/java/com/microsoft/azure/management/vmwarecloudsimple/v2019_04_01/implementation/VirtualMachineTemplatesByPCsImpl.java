/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachineTemplatesByPCs;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.PrivateCloudLocationVirtualMachineTemplate;

class VirtualMachineTemplatesByPCsImpl extends WrapperImpl<VirtualMachineTemplatesByPCsInner> implements VirtualMachineTemplatesByPCs {
    private final VMwareCloudSimpleManager manager;

    VirtualMachineTemplatesByPCsImpl(VMwareCloudSimpleManager manager) {
        super(manager.inner().virtualMachineTemplatesByPCs());
        this.manager = manager;
    }

    public VMwareCloudSimpleManager manager() {
        return this.manager;
    }

    private PrivateCloudLocationVirtualMachineTemplateImpl wrapModel(VirtualMachineTemplateInner inner) {
        return  new PrivateCloudLocationVirtualMachineTemplateImpl(inner, manager());
    }

    @Override
    public Observable<PrivateCloudLocationVirtualMachineTemplate> listAsync(final String pcName, final String resourcePoolName) {
        VirtualMachineTemplatesByPCsInner client = this.inner();
        return client.listAsync(pcName, resourcePoolName)
        .flatMapIterable(new Func1<Page<VirtualMachineTemplateInner>, Iterable<VirtualMachineTemplateInner>>() {
            @Override
            public Iterable<VirtualMachineTemplateInner> call(Page<VirtualMachineTemplateInner> page) {
                return page.items();
            }
        })
        .map(new Func1<VirtualMachineTemplateInner, PrivateCloudLocationVirtualMachineTemplate>() {
            @Override
            public PrivateCloudLocationVirtualMachineTemplate call(VirtualMachineTemplateInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
