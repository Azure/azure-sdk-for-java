/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.implementation;

import java.util.List;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualDiskController;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualDisk;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.GuestOSType;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualNic;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachineStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.Resource;

/**
 * Virtual machine model.
 */
@JsonFlatten
public class VirtualMachineInner extends Resource {
    /**
     * The amount of memory.
     */
    @JsonProperty(value = "properties.amountOfRam", required = true)
    private int amountOfRam;

    /**
     * The list of Virtual Disks' Controllers.
     */
    @JsonProperty(value = "properties.controllers", access = JsonProperty.Access.WRITE_ONLY)
    private List<VirtualDiskController> controllers;

    /**
     * The list of Virtual Disks.
     */
    @JsonProperty(value = "properties.disks")
    private List<VirtualDisk> disks;

    /**
     * The DNS name of Virtual Machine in VCenter.
     */
    @JsonProperty(value = "properties.dnsname", access = JsonProperty.Access.WRITE_ONLY)
    private String dnsname;

    /**
     * Expose Guest OS or not.
     */
    @JsonProperty(value = "properties.exposeToGuestVM")
    private Boolean exposeToGuestVM;

    /**
     * The path to virtual machine folder in VCenter.
     */
    @JsonProperty(value = "properties.folder", access = JsonProperty.Access.WRITE_ONLY)
    private String folder;

    /**
     * The name of Guest OS.
     */
    @JsonProperty(value = "properties.guestOS", access = JsonProperty.Access.WRITE_ONLY)
    private String guestOS;

    /**
     * The Guest OS type. Possible values include: 'linux', 'windows', 'other'.
     */
    @JsonProperty(value = "properties.guestOSType", access = JsonProperty.Access.WRITE_ONLY)
    private GuestOSType guestOSType;

    /**
     * The list of Virtual NICs.
     */
    @JsonProperty(value = "properties.nics")
    private List<VirtualNic> nics;

    /**
     * The number of CPU cores.
     */
    @JsonProperty(value = "properties.numberOfCores", required = true)
    private int numberOfCores;

    /**
     * Password for login.
     */
    @JsonProperty(value = "properties.password")
    private String password;

    /**
     * Private Cloud Id.
     */
    @JsonProperty(value = "properties.privateCloudId", required = true)
    private String privateCloudId;

    /**
     * The provisioning status of the resource.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /**
     * The public ip of Virtual Machine.
     */
    @JsonProperty(value = "properties.publicIP", access = JsonProperty.Access.WRITE_ONLY)
    private String publicIP;

    /**
     * Virtual Machines Resource Pool.
     */
    @JsonProperty(value = "properties.resourcePool")
    private ResourcePoolInner resourcePool;

    /**
     * The status of Virtual machine. Possible values include: 'running',
     * 'suspended', 'poweredoff', 'updating', 'deallocating', 'deleting'.
     */
    @JsonProperty(value = "properties.status", access = JsonProperty.Access.WRITE_ONLY)
    private VirtualMachineStatus status;

    /**
     * Virtual Machine Template Id.
     */
    @JsonProperty(value = "properties.templateId")
    private String templateId;

    /**
     * Username for login.
     */
    @JsonProperty(value = "properties.username")
    private String username;

    /**
     * The list of Virtual VSphere Networks.
     */
    @JsonProperty(value = "properties.vSphereNetworks")
    private List<String> vSphereNetworks;

    /**
     * The internal id of Virtual Machine in VCenter.
     */
    @JsonProperty(value = "properties.vmId", access = JsonProperty.Access.WRITE_ONLY)
    private String vmId;

    /**
     * VMware tools version.
     */
    @JsonProperty(value = "properties.vmwaretools", access = JsonProperty.Access.WRITE_ONLY)
    private String vmwaretools;

    /**
     * Get the amount of memory.
     *
     * @return the amountOfRam value
     */
    public int amountOfRam() {
        return this.amountOfRam;
    }

    /**
     * Set the amount of memory.
     *
     * @param amountOfRam the amountOfRam value to set
     * @return the VirtualMachineInner object itself.
     */
    public VirtualMachineInner withAmountOfRam(int amountOfRam) {
        this.amountOfRam = amountOfRam;
        return this;
    }

    /**
     * Get the list of Virtual Disks' Controllers.
     *
     * @return the controllers value
     */
    public List<VirtualDiskController> controllers() {
        return this.controllers;
    }

    /**
     * Get the list of Virtual Disks.
     *
     * @return the disks value
     */
    public List<VirtualDisk> disks() {
        return this.disks;
    }

    /**
     * Set the list of Virtual Disks.
     *
     * @param disks the disks value to set
     * @return the VirtualMachineInner object itself.
     */
    public VirtualMachineInner withDisks(List<VirtualDisk> disks) {
        this.disks = disks;
        return this;
    }

    /**
     * Get the DNS name of Virtual Machine in VCenter.
     *
     * @return the dnsname value
     */
    public String dnsname() {
        return this.dnsname;
    }

    /**
     * Get expose Guest OS or not.
     *
     * @return the exposeToGuestVM value
     */
    public Boolean exposeToGuestVM() {
        return this.exposeToGuestVM;
    }

    /**
     * Set expose Guest OS or not.
     *
     * @param exposeToGuestVM the exposeToGuestVM value to set
     * @return the VirtualMachineInner object itself.
     */
    public VirtualMachineInner withExposeToGuestVM(Boolean exposeToGuestVM) {
        this.exposeToGuestVM = exposeToGuestVM;
        return this;
    }

    /**
     * Get the path to virtual machine folder in VCenter.
     *
     * @return the folder value
     */
    public String folder() {
        return this.folder;
    }

    /**
     * Get the name of Guest OS.
     *
     * @return the guestOS value
     */
    public String guestOS() {
        return this.guestOS;
    }

    /**
     * Get the Guest OS type. Possible values include: 'linux', 'windows', 'other'.
     *
     * @return the guestOSType value
     */
    public GuestOSType guestOSType() {
        return this.guestOSType;
    }

    /**
     * Get the list of Virtual NICs.
     *
     * @return the nics value
     */
    public List<VirtualNic> nics() {
        return this.nics;
    }

    /**
     * Set the list of Virtual NICs.
     *
     * @param nics the nics value to set
     * @return the VirtualMachineInner object itself.
     */
    public VirtualMachineInner withNics(List<VirtualNic> nics) {
        this.nics = nics;
        return this;
    }

    /**
     * Get the number of CPU cores.
     *
     * @return the numberOfCores value
     */
    public int numberOfCores() {
        return this.numberOfCores;
    }

    /**
     * Set the number of CPU cores.
     *
     * @param numberOfCores the numberOfCores value to set
     * @return the VirtualMachineInner object itself.
     */
    public VirtualMachineInner withNumberOfCores(int numberOfCores) {
        this.numberOfCores = numberOfCores;
        return this;
    }

    /**
     * Get password for login.
     *
     * @return the password value
     */
    public String password() {
        return this.password;
    }

    /**
     * Set password for login.
     *
     * @param password the password value to set
     * @return the VirtualMachineInner object itself.
     */
    public VirtualMachineInner withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get private Cloud Id.
     *
     * @return the privateCloudId value
     */
    public String privateCloudId() {
        return this.privateCloudId;
    }

    /**
     * Set private Cloud Id.
     *
     * @param privateCloudId the privateCloudId value to set
     * @return the VirtualMachineInner object itself.
     */
    public VirtualMachineInner withPrivateCloudId(String privateCloudId) {
        this.privateCloudId = privateCloudId;
        return this;
    }

    /**
     * Get the provisioning status of the resource.
     *
     * @return the provisioningState value
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the public ip of Virtual Machine.
     *
     * @return the publicIP value
     */
    public String publicIP() {
        return this.publicIP;
    }

    /**
     * Get virtual Machines Resource Pool.
     *
     * @return the resourcePool value
     */
    public ResourcePoolInner resourcePool() {
        return this.resourcePool;
    }

    /**
     * Set virtual Machines Resource Pool.
     *
     * @param resourcePool the resourcePool value to set
     * @return the VirtualMachineInner object itself.
     */
    public VirtualMachineInner withResourcePool(ResourcePoolInner resourcePool) {
        this.resourcePool = resourcePool;
        return this;
    }

    /**
     * Get the status of Virtual machine. Possible values include: 'running', 'suspended', 'poweredoff', 'updating', 'deallocating', 'deleting'.
     *
     * @return the status value
     */
    public VirtualMachineStatus status() {
        return this.status;
    }

    /**
     * Get virtual Machine Template Id.
     *
     * @return the templateId value
     */
    public String templateId() {
        return this.templateId;
    }

    /**
     * Set virtual Machine Template Id.
     *
     * @param templateId the templateId value to set
     * @return the VirtualMachineInner object itself.
     */
    public VirtualMachineInner withTemplateId(String templateId) {
        this.templateId = templateId;
        return this;
    }

    /**
     * Get username for login.
     *
     * @return the username value
     */
    public String username() {
        return this.username;
    }

    /**
     * Set username for login.
     *
     * @param username the username value to set
     * @return the VirtualMachineInner object itself.
     */
    public VirtualMachineInner withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the list of Virtual VSphere Networks.
     *
     * @return the vSphereNetworks value
     */
    public List<String> vSphereNetworks() {
        return this.vSphereNetworks;
    }

    /**
     * Set the list of Virtual VSphere Networks.
     *
     * @param vSphereNetworks the vSphereNetworks value to set
     * @return the VirtualMachineInner object itself.
     */
    public VirtualMachineInner withVSphereNetworks(List<String> vSphereNetworks) {
        this.vSphereNetworks = vSphereNetworks;
        return this;
    }

    /**
     * Get the internal id of Virtual Machine in VCenter.
     *
     * @return the vmId value
     */
    public String vmId() {
        return this.vmId;
    }

    /**
     * Get vMware tools version.
     *
     * @return the vmwaretools value
     */
    public String vmwaretools() {
        return this.vmwaretools;
    }

}
