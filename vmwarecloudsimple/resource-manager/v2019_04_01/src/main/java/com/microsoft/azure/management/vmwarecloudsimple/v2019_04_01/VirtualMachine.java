/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.implementation.VMwareCloudSimpleManager;
import java.util.List;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.implementation.ResourcePoolInner;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.implementation.VirtualMachineInner;

/**
 * Type representing VirtualMachine.
 */
public interface VirtualMachine extends HasInner<VirtualMachineInner>, Resource, GroupableResourceCore<VMwareCloudSimpleManager, VirtualMachineInner>, HasResourceGroup, Refreshable<VirtualMachine>, Updatable<VirtualMachine.Update>, HasManager<VMwareCloudSimpleManager> {
    /**
     * @return the amountOfRam value.
     */
    int amountOfRam();

    /**
     * @return the controllers value.
     */
    List<VirtualDiskController> controllers();

    /**
     * @return the disks value.
     */
    List<VirtualDisk> disks();

    /**
     * @return the dnsname value.
     */
    String dnsname();

    /**
     * @return the exposeToGuestVM value.
     */
    Boolean exposeToGuestVM();

    /**
     * @return the folder value.
     */
    String folder();

    /**
     * @return the guestOS value.
     */
    String guestOS();

    /**
     * @return the guestOSType value.
     */
    GuestOSType guestOSType();

    /**
     * @return the nics value.
     */
    List<VirtualNic> nics();

    /**
     * @return the numberOfCores value.
     */
    int numberOfCores();

    /**
     * @return the password value.
     */
    String password();

    /**
     * @return the privateCloudId value.
     */
    String privateCloudId();

    /**
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * @return the publicIP value.
     */
    String publicIP();

    /**
     * @return the resourcePool value.
     */
    ResourcePool resourcePool();

    /**
     * @return the status value.
     */
    VirtualMachineStatus status();

    /**
     * @return the templateId value.
     */
    String templateId();

    /**
     * @return the username value.
     */
    String username();

    /**
     * @return the vmId value.
     */
    String vmId();

    /**
     * @return the vmwaretools value.
     */
    String vmwaretools();

    /**
     * @return the vSphereNetworks value.
     */
    List<String> vSphereNetworks();

    /**
     * The entirety of the VirtualMachine definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithAmountOfRam, DefinitionStages.WithNumberOfCores, DefinitionStages.WithPrivateCloudId, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of VirtualMachine definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a VirtualMachine definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the VirtualMachine definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithAmountOfRam> {
        }

        /**
         * The stage of the virtualmachine definition allowing to specify AmountOfRam.
         */
        interface WithAmountOfRam {
           /**
            * Specifies amountOfRam.
            * @param amountOfRam The amount of memory
            * @return the next definition stage
*/
            WithNumberOfCores withAmountOfRam(int amountOfRam);
        }

        /**
         * The stage of the virtualmachine definition allowing to specify NumberOfCores.
         */
        interface WithNumberOfCores {
           /**
            * Specifies numberOfCores.
            * @param numberOfCores The number of CPU cores
            * @return the next definition stage
*/
            WithPrivateCloudId withNumberOfCores(int numberOfCores);
        }

        /**
         * The stage of the virtualmachine definition allowing to specify PrivateCloudId.
         */
        interface WithPrivateCloudId {
           /**
            * Specifies privateCloudId.
            * @param privateCloudId Private Cloud Id
            * @return the next definition stage
*/
            WithCreate withPrivateCloudId(String privateCloudId);
        }

        /**
         * The stage of the virtualmachine definition allowing to specify Disks.
         */
        interface WithDisks {
            /**
             * Specifies disks.
             * @param disks The list of Virtual Disks
             * @return the next definition stage
             */
            WithCreate withDisks(List<VirtualDisk> disks);
        }

        /**
         * The stage of the virtualmachine definition allowing to specify ExposeToGuestVM.
         */
        interface WithExposeToGuestVM {
            /**
             * Specifies exposeToGuestVM.
             * @param exposeToGuestVM Expose Guest OS or not
             * @return the next definition stage
             */
            WithCreate withExposeToGuestVM(Boolean exposeToGuestVM);
        }

        /**
         * The stage of the virtualmachine definition allowing to specify Nics.
         */
        interface WithNics {
            /**
             * Specifies nics.
             * @param nics The list of Virtual NICs
             * @return the next definition stage
             */
            WithCreate withNics(List<VirtualNic> nics);
        }

        /**
         * The stage of the virtualmachine definition allowing to specify Password.
         */
        interface WithPassword {
            /**
             * Specifies password.
             * @param password Password for login
             * @return the next definition stage
             */
            WithCreate withPassword(String password);
        }

        /**
         * The stage of the virtualmachine definition allowing to specify ResourcePool.
         */
        interface WithResourcePool {
            /**
             * Specifies resourcePool.
             * @param resourcePool Virtual Machines Resource Pool
             * @return the next definition stage
             */
            WithCreate withResourcePool(ResourcePoolInner resourcePool);
        }

        /**
         * The stage of the virtualmachine definition allowing to specify TemplateId.
         */
        interface WithTemplateId {
            /**
             * Specifies templateId.
             * @param templateId Virtual Machine Template Id
             * @return the next definition stage
             */
            WithCreate withTemplateId(String templateId);
        }

        /**
         * The stage of the virtualmachine definition allowing to specify Username.
         */
        interface WithUsername {
            /**
             * Specifies username.
             * @param username Username for login
             * @return the next definition stage
             */
            WithCreate withUsername(String username);
        }

        /**
         * The stage of the virtualmachine definition allowing to specify VSphereNetworks.
         */
        interface WithVSphereNetworks {
            /**
             * Specifies vSphereNetworks.
             * @param vSphereNetworks The list of Virtual VSphere Networks
             * @return the next definition stage
             */
            WithCreate withVSphereNetworks(List<String> vSphereNetworks);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<VirtualMachine>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithDisks, DefinitionStages.WithExposeToGuestVM, DefinitionStages.WithNics, DefinitionStages.WithPassword, DefinitionStages.WithResourcePool, DefinitionStages.WithTemplateId, DefinitionStages.WithUsername, DefinitionStages.WithVSphereNetworks {
        }
    }
    /**
     * The template for a VirtualMachine update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<VirtualMachine>, Resource.UpdateWithTags<Update>, UpdateStages.WithDisks, UpdateStages.WithExposeToGuestVM, UpdateStages.WithNics, UpdateStages.WithPassword, UpdateStages.WithResourcePool, UpdateStages.WithTemplateId, UpdateStages.WithUsername, UpdateStages.WithVSphereNetworks {
    }

    /**
     * Grouping of VirtualMachine update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the virtualmachine update allowing to specify Disks.
         */
        interface WithDisks {
            /**
             * Specifies disks.
             * @param disks The list of Virtual Disks
             * @return the next update stage
             */
            Update withDisks(List<VirtualDisk> disks);
        }

        /**
         * The stage of the virtualmachine update allowing to specify ExposeToGuestVM.
         */
        interface WithExposeToGuestVM {
            /**
             * Specifies exposeToGuestVM.
             * @param exposeToGuestVM Expose Guest OS or not
             * @return the next update stage
             */
            Update withExposeToGuestVM(Boolean exposeToGuestVM);
        }

        /**
         * The stage of the virtualmachine update allowing to specify Nics.
         */
        interface WithNics {
            /**
             * Specifies nics.
             * @param nics The list of Virtual NICs
             * @return the next update stage
             */
            Update withNics(List<VirtualNic> nics);
        }

        /**
         * The stage of the virtualmachine update allowing to specify Password.
         */
        interface WithPassword {
            /**
             * Specifies password.
             * @param password Password for login
             * @return the next update stage
             */
            Update withPassword(String password);
        }

        /**
         * The stage of the virtualmachine update allowing to specify ResourcePool.
         */
        interface WithResourcePool {
            /**
             * Specifies resourcePool.
             * @param resourcePool Virtual Machines Resource Pool
             * @return the next update stage
             */
            Update withResourcePool(ResourcePoolInner resourcePool);
        }

        /**
         * The stage of the virtualmachine update allowing to specify TemplateId.
         */
        interface WithTemplateId {
            /**
             * Specifies templateId.
             * @param templateId Virtual Machine Template Id
             * @return the next update stage
             */
            Update withTemplateId(String templateId);
        }

        /**
         * The stage of the virtualmachine update allowing to specify Username.
         */
        interface WithUsername {
            /**
             * Specifies username.
             * @param username Username for login
             * @return the next update stage
             */
            Update withUsername(String username);
        }

        /**
         * The stage of the virtualmachine update allowing to specify VSphereNetworks.
         */
        interface WithVSphereNetworks {
            /**
             * Specifies vSphereNetworks.
             * @param vSphereNetworks The list of Virtual VSphere Networks
             * @return the next update stage
             */
            Update withVSphereNetworks(List<String> vSphereNetworks);
        }

    }
}
