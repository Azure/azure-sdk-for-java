/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.implementation;

import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.ResourcePool;
import com.microsoft.azure.arm.model.implementation.IndexableRefreshableWrapperImpl;
import rx.Observable;

class ResourcePoolImpl extends IndexableRefreshableWrapperImpl<ResourcePool, ResourcePoolInner> implements ResourcePool {
    private final VMwareCloudSimpleManager manager;
    private String regionId;
    private String pcName;
    private String resourcePoolName;

    ResourcePoolImpl(ResourcePoolInner inner,  VMwareCloudSimpleManager manager) {
        super(null, inner);
        this.manager = manager;
        // set resource ancestor and positional variables
        this.regionId = IdParsingUtils.getValueFromIdByName(inner.id(), "locations");
        this.pcName = IdParsingUtils.getValueFromIdByName(inner.id(), "privateClouds");
        this.resourcePoolName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourcePools");
    }

    @Override
    public VMwareCloudSimpleManager manager() {
        return this.manager;
    }

    @Override
    protected Observable<ResourcePoolInner> getInnerAsync() {
        ResourcePoolsInner client = this.manager().inner().resourcePools();
        return client.getAsync(this.regionId, this.pcName, this.resourcePoolName);
    }



    @Override
    public String fullName() {
        return this.inner().fullName();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String privateCloudId() {
        return this.inner().privateCloudId();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
