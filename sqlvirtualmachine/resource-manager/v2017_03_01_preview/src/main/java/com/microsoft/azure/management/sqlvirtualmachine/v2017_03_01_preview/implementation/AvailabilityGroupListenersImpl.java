/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.AvailabilityGroupListeners;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.AvailabilityGroupListener;

class AvailabilityGroupListenersImpl extends WrapperImpl<AvailabilityGroupListenersInner> implements AvailabilityGroupListeners {
    private final SqlVirtualMachineManager manager;

    AvailabilityGroupListenersImpl(SqlVirtualMachineManager manager) {
        super(manager.inner().availabilityGroupListeners());
        this.manager = manager;
    }

    public SqlVirtualMachineManager manager() {
        return this.manager;
    }

    @Override
    public AvailabilityGroupListenerImpl define(String name) {
        return wrapModel(name);
    }

    private AvailabilityGroupListenerImpl wrapModel(AvailabilityGroupListenerInner inner) {
        return  new AvailabilityGroupListenerImpl(inner, manager());
    }

    private AvailabilityGroupListenerImpl wrapModel(String name) {
        return new AvailabilityGroupListenerImpl(name, this.manager());
    }

    @Override
    public Observable<AvailabilityGroupListener> listByGroupAsync(final String resourceGroupName, final String sqlVirtualMachineGroupName) {
        AvailabilityGroupListenersInner client = this.inner();
        return client.listByGroupAsync(resourceGroupName, sqlVirtualMachineGroupName)
        .flatMapIterable(new Func1<Page<AvailabilityGroupListenerInner>, Iterable<AvailabilityGroupListenerInner>>() {
            @Override
            public Iterable<AvailabilityGroupListenerInner> call(Page<AvailabilityGroupListenerInner> page) {
                return page.items();
            }
        })
        .map(new Func1<AvailabilityGroupListenerInner, AvailabilityGroupListener>() {
            @Override
            public AvailabilityGroupListener call(AvailabilityGroupListenerInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<AvailabilityGroupListener> getAsync(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName) {
        AvailabilityGroupListenersInner client = this.inner();
        return client.getAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName)
        .map(new Func1<AvailabilityGroupListenerInner, AvailabilityGroupListener>() {
            @Override
            public AvailabilityGroupListener call(AvailabilityGroupListenerInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName) {
        AvailabilityGroupListenersInner client = this.inner();
        return client.deleteAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName).toCompletable();
    }

}
