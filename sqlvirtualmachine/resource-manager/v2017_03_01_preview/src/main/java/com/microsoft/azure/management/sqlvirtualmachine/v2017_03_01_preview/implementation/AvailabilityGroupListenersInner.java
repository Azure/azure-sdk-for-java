/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in AvailabilityGroupListeners.
 */
public class AvailabilityGroupListenersInner {
    /** The Retrofit service to perform REST calls. */
    private AvailabilityGroupListenersService service;
    /** The service client containing this operation class. */
    private SqlVirtualMachineManagementClientImpl client;

    /**
     * Initializes an instance of AvailabilityGroupListenersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public AvailabilityGroupListenersInner(Retrofit retrofit, SqlVirtualMachineManagementClientImpl client) {
        this.service = retrofit.create(AvailabilityGroupListenersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for AvailabilityGroupListeners to be
     * used by Retrofit to perform actually REST calls.
     */
    interface AvailabilityGroupListenersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.AvailabilityGroupListeners get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners/{availabilityGroupListenerName}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("sqlVirtualMachineGroupName") String sqlVirtualMachineGroupName, @Path("availabilityGroupListenerName") String availabilityGroupListenerName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.AvailabilityGroupListeners createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners/{availabilityGroupListenerName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("sqlVirtualMachineGroupName") String sqlVirtualMachineGroupName, @Path("availabilityGroupListenerName") String availabilityGroupListenerName, @Path("subscriptionId") String subscriptionId, @Body AvailabilityGroupListenerInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.AvailabilityGroupListeners beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners/{availabilityGroupListenerName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("sqlVirtualMachineGroupName") String sqlVirtualMachineGroupName, @Path("availabilityGroupListenerName") String availabilityGroupListenerName, @Path("subscriptionId") String subscriptionId, @Body AvailabilityGroupListenerInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.AvailabilityGroupListeners delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners/{availabilityGroupListenerName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("sqlVirtualMachineGroupName") String sqlVirtualMachineGroupName, @Path("availabilityGroupListenerName") String availabilityGroupListenerName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.AvailabilityGroupListeners beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners/{availabilityGroupListenerName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceGroupName") String resourceGroupName, @Path("sqlVirtualMachineGroupName") String sqlVirtualMachineGroupName, @Path("availabilityGroupListenerName") String availabilityGroupListenerName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.AvailabilityGroupListeners listByGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners")
        Observable<Response<ResponseBody>> listByGroup(@Path("resourceGroupName") String resourceGroupName, @Path("sqlVirtualMachineGroupName") String sqlVirtualMachineGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.AvailabilityGroupListeners listByGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AvailabilityGroupListenerInner object if successful.
     */
    public AvailabilityGroupListenerInner get(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName) {
        return getWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName).toBlocking().single().body();
    }

    /**
     * Gets an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AvailabilityGroupListenerInner> getAsync(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName, final ServiceCallback<AvailabilityGroupListenerInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName), serviceCallback);
    }

    /**
     * Gets an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AvailabilityGroupListenerInner object
     */
    public Observable<AvailabilityGroupListenerInner> getAsync(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName) {
        return getWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName).map(new Func1<ServiceResponse<AvailabilityGroupListenerInner>, AvailabilityGroupListenerInner>() {
            @Override
            public AvailabilityGroupListenerInner call(ServiceResponse<AvailabilityGroupListenerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AvailabilityGroupListenerInner object
     */
    public Observable<ServiceResponse<AvailabilityGroupListenerInner>> getWithServiceResponseAsync(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sqlVirtualMachineGroupName == null) {
            throw new IllegalArgumentException("Parameter sqlVirtualMachineGroupName is required and cannot be null.");
        }
        if (availabilityGroupListenerName == null) {
            throw new IllegalArgumentException("Parameter availabilityGroupListenerName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AvailabilityGroupListenerInner>>>() {
                @Override
                public Observable<ServiceResponse<AvailabilityGroupListenerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AvailabilityGroupListenerInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AvailabilityGroupListenerInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AvailabilityGroupListenerInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AvailabilityGroupListenerInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or updates an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param parameters The availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AvailabilityGroupListenerInner object if successful.
     */
    public AvailabilityGroupListenerInner createOrUpdate(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName, AvailabilityGroupListenerInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, parameters).toBlocking().last().body();
    }

    /**
     * Creates or updates an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param parameters The availability group listener.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AvailabilityGroupListenerInner> createOrUpdateAsync(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName, AvailabilityGroupListenerInner parameters, final ServiceCallback<AvailabilityGroupListenerInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, parameters), serviceCallback);
    }

    /**
     * Creates or updates an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param parameters The availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<AvailabilityGroupListenerInner> createOrUpdateAsync(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName, AvailabilityGroupListenerInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, parameters).map(new Func1<ServiceResponse<AvailabilityGroupListenerInner>, AvailabilityGroupListenerInner>() {
            @Override
            public AvailabilityGroupListenerInner call(ServiceResponse<AvailabilityGroupListenerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param parameters The availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<AvailabilityGroupListenerInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName, AvailabilityGroupListenerInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sqlVirtualMachineGroupName == null) {
            throw new IllegalArgumentException("Parameter sqlVirtualMachineGroupName is required and cannot be null.");
        }
        if (availabilityGroupListenerName == null) {
            throw new IllegalArgumentException("Parameter availabilityGroupListenerName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<AvailabilityGroupListenerInner>() { }.getType());
    }

    /**
     * Creates or updates an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param parameters The availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AvailabilityGroupListenerInner object if successful.
     */
    public AvailabilityGroupListenerInner beginCreateOrUpdate(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName, AvailabilityGroupListenerInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param parameters The availability group listener.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AvailabilityGroupListenerInner> beginCreateOrUpdateAsync(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName, AvailabilityGroupListenerInner parameters, final ServiceCallback<AvailabilityGroupListenerInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, parameters), serviceCallback);
    }

    /**
     * Creates or updates an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param parameters The availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AvailabilityGroupListenerInner object
     */
    public Observable<AvailabilityGroupListenerInner> beginCreateOrUpdateAsync(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName, AvailabilityGroupListenerInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, parameters).map(new Func1<ServiceResponse<AvailabilityGroupListenerInner>, AvailabilityGroupListenerInner>() {
            @Override
            public AvailabilityGroupListenerInner call(ServiceResponse<AvailabilityGroupListenerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param parameters The availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AvailabilityGroupListenerInner object
     */
    public Observable<ServiceResponse<AvailabilityGroupListenerInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName, AvailabilityGroupListenerInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sqlVirtualMachineGroupName == null) {
            throw new IllegalArgumentException("Parameter sqlVirtualMachineGroupName is required and cannot be null.");
        }
        if (availabilityGroupListenerName == null) {
            throw new IllegalArgumentException("Parameter availabilityGroupListenerName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginCreateOrUpdate(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AvailabilityGroupListenerInner>>>() {
                @Override
                public Observable<ServiceResponse<AvailabilityGroupListenerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AvailabilityGroupListenerInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AvailabilityGroupListenerInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AvailabilityGroupListenerInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AvailabilityGroupListenerInner>() { }.getType())
                .register(201, new TypeToken<AvailabilityGroupListenerInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName) {
        deleteWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName).toBlocking().last().body();
    }

    /**
     * Deletes an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName), serviceCallback);
    }

    /**
     * Deletes an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName) {
        return deleteWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sqlVirtualMachineGroupName == null) {
            throw new IllegalArgumentException("Parameter sqlVirtualMachineGroupName is required and cannot be null.");
        }
        if (availabilityGroupListenerName == null) {
            throw new IllegalArgumentException("Parameter availabilityGroupListenerName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName).toBlocking().single().body();
    }

    /**
     * Deletes an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName), serviceCallback);
    }

    /**
     * Deletes an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an availability group listener.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sqlVirtualMachineGroupName == null) {
            throw new IllegalArgumentException("Parameter sqlVirtualMachineGroupName is required and cannot be null.");
        }
        if (availabilityGroupListenerName == null) {
            throw new IllegalArgumentException("Parameter availabilityGroupListenerName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AvailabilityGroupListenerInner&gt; object if successful.
     */
    public PagedList<AvailabilityGroupListenerInner> listByGroup(final String resourceGroupName, final String sqlVirtualMachineGroupName) {
        ServiceResponse<Page<AvailabilityGroupListenerInner>> response = listByGroupSinglePageAsync(resourceGroupName, sqlVirtualMachineGroupName).toBlocking().single();
        return new PagedList<AvailabilityGroupListenerInner>(response.body()) {
            @Override
            public Page<AvailabilityGroupListenerInner> nextPage(String nextPageLink) {
                return listByGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AvailabilityGroupListenerInner>> listByGroupAsync(final String resourceGroupName, final String sqlVirtualMachineGroupName, final ListOperationCallback<AvailabilityGroupListenerInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByGroupSinglePageAsync(resourceGroupName, sqlVirtualMachineGroupName),
            new Func1<String, Observable<ServiceResponse<Page<AvailabilityGroupListenerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AvailabilityGroupListenerInner>>> call(String nextPageLink) {
                    return listByGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AvailabilityGroupListenerInner&gt; object
     */
    public Observable<Page<AvailabilityGroupListenerInner>> listByGroupAsync(final String resourceGroupName, final String sqlVirtualMachineGroupName) {
        return listByGroupWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineGroupName)
            .map(new Func1<ServiceResponse<Page<AvailabilityGroupListenerInner>>, Page<AvailabilityGroupListenerInner>>() {
                @Override
                public Page<AvailabilityGroupListenerInner> call(ServiceResponse<Page<AvailabilityGroupListenerInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AvailabilityGroupListenerInner&gt; object
     */
    public Observable<ServiceResponse<Page<AvailabilityGroupListenerInner>>> listByGroupWithServiceResponseAsync(final String resourceGroupName, final String sqlVirtualMachineGroupName) {
        return listByGroupSinglePageAsync(resourceGroupName, sqlVirtualMachineGroupName)
            .concatMap(new Func1<ServiceResponse<Page<AvailabilityGroupListenerInner>>, Observable<ServiceResponse<Page<AvailabilityGroupListenerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AvailabilityGroupListenerInner>>> call(ServiceResponse<Page<AvailabilityGroupListenerInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     *
    ServiceResponse<PageImpl<AvailabilityGroupListenerInner>> * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
    ServiceResponse<PageImpl<AvailabilityGroupListenerInner>> * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AvailabilityGroupListenerInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AvailabilityGroupListenerInner>>> listByGroupSinglePageAsync(final String resourceGroupName, final String sqlVirtualMachineGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sqlVirtualMachineGroupName == null) {
            throw new IllegalArgumentException("Parameter sqlVirtualMachineGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByGroup(resourceGroupName, sqlVirtualMachineGroupName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AvailabilityGroupListenerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AvailabilityGroupListenerInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AvailabilityGroupListenerInner>> result = listByGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AvailabilityGroupListenerInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AvailabilityGroupListenerInner>> listByGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<AvailabilityGroupListenerInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<AvailabilityGroupListenerInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AvailabilityGroupListenerInner&gt; object if successful.
     */
    public PagedList<AvailabilityGroupListenerInner> listByGroupNext(final String nextPageLink) {
        ServiceResponse<Page<AvailabilityGroupListenerInner>> response = listByGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<AvailabilityGroupListenerInner>(response.body()) {
            @Override
            public Page<AvailabilityGroupListenerInner> nextPage(String nextPageLink) {
                return listByGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AvailabilityGroupListenerInner>> listByGroupNextAsync(final String nextPageLink, final ServiceFuture<List<AvailabilityGroupListenerInner>> serviceFuture, final ListOperationCallback<AvailabilityGroupListenerInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<AvailabilityGroupListenerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AvailabilityGroupListenerInner>>> call(String nextPageLink) {
                    return listByGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AvailabilityGroupListenerInner&gt; object
     */
    public Observable<Page<AvailabilityGroupListenerInner>> listByGroupNextAsync(final String nextPageLink) {
        return listByGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<AvailabilityGroupListenerInner>>, Page<AvailabilityGroupListenerInner>>() {
                @Override
                public Page<AvailabilityGroupListenerInner> call(ServiceResponse<Page<AvailabilityGroupListenerInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AvailabilityGroupListenerInner&gt; object
     */
    public Observable<ServiceResponse<Page<AvailabilityGroupListenerInner>>> listByGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<AvailabilityGroupListenerInner>>, Observable<ServiceResponse<Page<AvailabilityGroupListenerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AvailabilityGroupListenerInner>>> call(ServiceResponse<Page<AvailabilityGroupListenerInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     *
    ServiceResponse<PageImpl<AvailabilityGroupListenerInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AvailabilityGroupListenerInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AvailabilityGroupListenerInner>>> listByGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AvailabilityGroupListenerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AvailabilityGroupListenerInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AvailabilityGroupListenerInner>> result = listByGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AvailabilityGroupListenerInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AvailabilityGroupListenerInner>> listByGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<AvailabilityGroupListenerInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<AvailabilityGroupListenerInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
