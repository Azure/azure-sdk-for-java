/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mediaservices.v2018_06_01_preview.implementation;

import org.joda.time.DateTime;
import java.util.UUID;
import java.util.List;
import com.microsoft.azure.management.mediaservices.v2018_06_01_preview.StreamingLocatorContentKey;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * A Streaming Locator resource.
 */
@JsonFlatten
public class StreamingLocatorInner extends ProxyResource {
    /**
     * Asset Name.
     */
    @JsonProperty(value = "properties.assetName", required = true)
    private String assetName;

    /**
     * Creation time of Streaming Locator.
     */
    @JsonProperty(value = "properties.created", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime created;

    /**
     * StartTime of Streaming Locator.
     */
    @JsonProperty(value = "properties.startTime")
    private DateTime startTime;

    /**
     * EndTime of Streaming Locator.
     */
    @JsonProperty(value = "properties.endTime")
    private DateTime endTime;

    /**
     * StreamingLocatorId of Streaming Locator.
     */
    @JsonProperty(value = "properties.streamingLocatorId")
    private UUID streamingLocatorId;

    /**
     * Streaming policy name used by this streaming locator. Either specify the
     * name of streaming policy you created or use one of the predefined
     * streaming polices. The predefined streaming policies available are:
     * 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly',
     * 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey',
     * 'Predefined_SecureStreaming' and
     * 'Predefined_SecureStreamingWithFairPlay'.
     */
    @JsonProperty(value = "properties.streamingPolicyName", required = true)
    private String streamingPolicyName;

    /**
     * Default ContentKeyPolicy used by this Streaming Locator.
     */
    @JsonProperty(value = "properties.defaultContentKeyPolicyName")
    private String defaultContentKeyPolicyName;

    /**
     * ContentKeys used by this Streaming Locator.
     */
    @JsonProperty(value = "properties.contentKeys")
    private List<StreamingLocatorContentKey> contentKeys;

    /**
     * An Alternative Media Identifier associated with the StreamingLocator.
     * This identifier can be used to distinguish different StreamingLocators
     * for the same Asset for authorization purposes in the
     * CustomLicenseAcquisitionUrlTemplate or the
     * CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the
     * StreamingPolicyName field.
     */
    @JsonProperty(value = "properties.alternativeMediaId")
    private String alternativeMediaId;

    /**
     * Get asset Name.
     *
     * @return the assetName value
     */
    public String assetName() {
        return this.assetName;
    }

    /**
     * Set asset Name.
     *
     * @param assetName the assetName value to set
     * @return the StreamingLocatorInner object itself.
     */
    public StreamingLocatorInner withAssetName(String assetName) {
        this.assetName = assetName;
        return this;
    }

    /**
     * Get creation time of Streaming Locator.
     *
     * @return the created value
     */
    public DateTime created() {
        return this.created;
    }

    /**
     * Get startTime of Streaming Locator.
     *
     * @return the startTime value
     */
    public DateTime startTime() {
        return this.startTime;
    }

    /**
     * Set startTime of Streaming Locator.
     *
     * @param startTime the startTime value to set
     * @return the StreamingLocatorInner object itself.
     */
    public StreamingLocatorInner withStartTime(DateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get endTime of Streaming Locator.
     *
     * @return the endTime value
     */
    public DateTime endTime() {
        return this.endTime;
    }

    /**
     * Set endTime of Streaming Locator.
     *
     * @param endTime the endTime value to set
     * @return the StreamingLocatorInner object itself.
     */
    public StreamingLocatorInner withEndTime(DateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get streamingLocatorId of Streaming Locator.
     *
     * @return the streamingLocatorId value
     */
    public UUID streamingLocatorId() {
        return this.streamingLocatorId;
    }

    /**
     * Set streamingLocatorId of Streaming Locator.
     *
     * @param streamingLocatorId the streamingLocatorId value to set
     * @return the StreamingLocatorInner object itself.
     */
    public StreamingLocatorInner withStreamingLocatorId(UUID streamingLocatorId) {
        this.streamingLocatorId = streamingLocatorId;
        return this;
    }

    /**
     * Get streaming policy name used by this streaming locator. Either specify the name of streaming policy you created or use one of the predefined streaming polices. The predefined streaming policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_SecureStreaming' and 'Predefined_SecureStreamingWithFairPlay'.
     *
     * @return the streamingPolicyName value
     */
    public String streamingPolicyName() {
        return this.streamingPolicyName;
    }

    /**
     * Set streaming policy name used by this streaming locator. Either specify the name of streaming policy you created or use one of the predefined streaming polices. The predefined streaming policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_SecureStreaming' and 'Predefined_SecureStreamingWithFairPlay'.
     *
     * @param streamingPolicyName the streamingPolicyName value to set
     * @return the StreamingLocatorInner object itself.
     */
    public StreamingLocatorInner withStreamingPolicyName(String streamingPolicyName) {
        this.streamingPolicyName = streamingPolicyName;
        return this;
    }

    /**
     * Get default ContentKeyPolicy used by this Streaming Locator.
     *
     * @return the defaultContentKeyPolicyName value
     */
    public String defaultContentKeyPolicyName() {
        return this.defaultContentKeyPolicyName;
    }

    /**
     * Set default ContentKeyPolicy used by this Streaming Locator.
     *
     * @param defaultContentKeyPolicyName the defaultContentKeyPolicyName value to set
     * @return the StreamingLocatorInner object itself.
     */
    public StreamingLocatorInner withDefaultContentKeyPolicyName(String defaultContentKeyPolicyName) {
        this.defaultContentKeyPolicyName = defaultContentKeyPolicyName;
        return this;
    }

    /**
     * Get contentKeys used by this Streaming Locator.
     *
     * @return the contentKeys value
     */
    public List<StreamingLocatorContentKey> contentKeys() {
        return this.contentKeys;
    }

    /**
     * Set contentKeys used by this Streaming Locator.
     *
     * @param contentKeys the contentKeys value to set
     * @return the StreamingLocatorInner object itself.
     */
    public StreamingLocatorInner withContentKeys(List<StreamingLocatorContentKey> contentKeys) {
        this.contentKeys = contentKeys;
        return this;
    }

    /**
     * Get an Alternative Media Identifier associated with the StreamingLocator.  This identifier can be used to distinguish different StreamingLocators for the same Asset for authorization purposes in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
     *
     * @return the alternativeMediaId value
     */
    public String alternativeMediaId() {
        return this.alternativeMediaId;
    }

    /**
     * Set an Alternative Media Identifier associated with the StreamingLocator.  This identifier can be used to distinguish different StreamingLocators for the same Asset for authorization purposes in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
     *
     * @param alternativeMediaId the alternativeMediaId value to set
     * @return the StreamingLocatorInner object itself.
     */
    public StreamingLocatorInner withAlternativeMediaId(String alternativeMediaId) {
        this.alternativeMediaId = alternativeMediaId;
        return this;
    }

}
