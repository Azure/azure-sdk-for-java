/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mediaservices.v2015_10_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.mediaservices.v2015_10_01.ApiErrorException;
import com.microsoft.azure.management.mediaservices.v2015_10_01.CheckNameAvailabilityInput;
import com.microsoft.azure.management.mediaservices.v2015_10_01.KeyType;
import com.microsoft.azure.management.mediaservices.v2015_10_01.RegenerateKeyInput;
import com.microsoft.azure.management.mediaservices.v2015_10_01.SyncStorageKeysInput;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in MediaServices.
 */
public class MediaServicesInner implements InnerSupportsGet<MediaServiceInner>, InnerSupportsDelete<Void> {
    /** The Retrofit service to perform REST calls. */
    private MediaServicesService service;
    /** The service client containing this operation class. */
    private MediaServicesManagementClientImpl client;

    /**
     * Initializes an instance of MediaServicesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public MediaServicesInner(Retrofit retrofit, MediaServicesManagementClientImpl client) {
        this.service = retrofit.create(MediaServicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for MediaServices to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MediaServicesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2015_10_01.MediaServices checkNameAvailability" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability")
        Observable<Response<ResponseBody>> checkNameAvailability(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body CheckNameAvailabilityInput parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2015_10_01.MediaServices listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2015_10_01.MediaServices getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("mediaServiceName") String mediaServiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2015_10_01.MediaServices create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("mediaServiceName") String mediaServiceName, @Query("api-version") String apiVersion, @Body MediaServiceInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2015_10_01.MediaServices delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("mediaServiceName") String mediaServiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2015_10_01.MediaServices update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("mediaServiceName") String mediaServiceName, @Query("api-version") String apiVersion, @Body MediaServiceInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2015_10_01.MediaServices regenerateKey" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey")
        Observable<Response<ResponseBody>> regenerateKey(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("mediaServiceName") String mediaServiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body RegenerateKeyInput parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2015_10_01.MediaServices listKeys" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys")
        Observable<Response<ResponseBody>> listKeys(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("mediaServiceName") String mediaServiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2015_10_01.MediaServices syncStorageKeys" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys")
        Observable<Response<ResponseBody>> syncStorageKeys(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("mediaServiceName") String mediaServiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body SyncStorageKeysInput parameters, @Header("User-Agent") String userAgent);

    }

    /**
     * Checks whether the Media Service resource name is available. The name must be globally unique.
     *
     * @param name The name of the resource. A name must be globally unique.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CheckNameAvailabilityOutputInner object if successful.
     */
    public CheckNameAvailabilityOutputInner checkNameAvailability(String name) {
        return checkNameAvailabilityWithServiceResponseAsync(name).toBlocking().single().body();
    }

    /**
     * Checks whether the Media Service resource name is available. The name must be globally unique.
     *
     * @param name The name of the resource. A name must be globally unique.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CheckNameAvailabilityOutputInner> checkNameAvailabilityAsync(String name, final ServiceCallback<CheckNameAvailabilityOutputInner> serviceCallback) {
        return ServiceFuture.fromResponse(checkNameAvailabilityWithServiceResponseAsync(name), serviceCallback);
    }

    /**
     * Checks whether the Media Service resource name is available. The name must be globally unique.
     *
     * @param name The name of the resource. A name must be globally unique.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckNameAvailabilityOutputInner object
     */
    public Observable<CheckNameAvailabilityOutputInner> checkNameAvailabilityAsync(String name) {
        return checkNameAvailabilityWithServiceResponseAsync(name).map(new Func1<ServiceResponse<CheckNameAvailabilityOutputInner>, CheckNameAvailabilityOutputInner>() {
            @Override
            public CheckNameAvailabilityOutputInner call(ServiceResponse<CheckNameAvailabilityOutputInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Checks whether the Media Service resource name is available. The name must be globally unique.
     *
     * @param name The name of the resource. A name must be globally unique.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckNameAvailabilityOutputInner object
     */
    public Observable<ServiceResponse<CheckNameAvailabilityOutputInner>> checkNameAvailabilityWithServiceResponseAsync(String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        CheckNameAvailabilityInput parameters = new CheckNameAvailabilityInput();
        parameters.withName(name);
        return service.checkNameAvailability(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CheckNameAvailabilityOutputInner>>>() {
                @Override
                public Observable<ServiceResponse<CheckNameAvailabilityOutputInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CheckNameAvailabilityOutputInner> clientResponse = checkNameAvailabilityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CheckNameAvailabilityOutputInner> checkNameAvailabilityDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CheckNameAvailabilityOutputInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CheckNameAvailabilityOutputInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Lists all of the Media Services in a resource group.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @return the PagedList<MediaServiceInner> object if successful.
     */
    public PagedList<MediaServiceInner> listByResourceGroup(String resourceGroupName) {
        PageImpl<MediaServiceInner> page = new PageImpl<>();
        page.setItems(listByResourceGroupWithServiceResponseAsync(resourceGroupName).toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<MediaServiceInner>(page) {
            @Override
            public Page<MediaServiceInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Lists all of the Media Services in a resource group.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MediaServiceInner>> listByResourceGroupAsync(String resourceGroupName, final ServiceCallback<List<MediaServiceInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByResourceGroupWithServiceResponseAsync(resourceGroupName), serviceCallback);
    }

    /**
     * Lists all of the Media Services in a resource group.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @return the observable to the List&lt;MediaServiceInner&gt; object
     */
    public Observable<Page<MediaServiceInner>> listByResourceGroupAsync(String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName).map(new Func1<ServiceResponse<List<MediaServiceInner>>, Page<MediaServiceInner>>() {
            @Override
            public Page<MediaServiceInner> call(ServiceResponse<List<MediaServiceInner>> response) {
                PageImpl<MediaServiceInner> page = new PageImpl<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Lists all of the Media Services in a resource group.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @return the observable to the List&lt;MediaServiceInner&gt; object
     */
    public Observable<ServiceResponse<List<MediaServiceInner>>> listByResourceGroupWithServiceResponseAsync(String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<MediaServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<MediaServiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MediaServiceInner>> result = listByResourceGroupDelegate(response);
                        List<MediaServiceInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<MediaServiceInner>> clientResponse = new ServiceResponse<List<MediaServiceInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MediaServiceInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MediaServiceInner>, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MediaServiceInner>>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Gets a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MediaServiceInner object if successful.
     */
    public MediaServiceInner getByResourceGroup(String resourceGroupName, String mediaServiceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, mediaServiceName).toBlocking().single().body();
    }

    /**
     * Gets a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MediaServiceInner> getByResourceGroupAsync(String resourceGroupName, String mediaServiceName, final ServiceCallback<MediaServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, mediaServiceName), serviceCallback);
    }

    /**
     * Gets a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MediaServiceInner object
     */
    public Observable<MediaServiceInner> getByResourceGroupAsync(String resourceGroupName, String mediaServiceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, mediaServiceName).map(new Func1<ServiceResponse<MediaServiceInner>, MediaServiceInner>() {
            @Override
            public MediaServiceInner call(ServiceResponse<MediaServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MediaServiceInner object
     */
    public Observable<ServiceResponse<MediaServiceInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String mediaServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (mediaServiceName == null) {
            throw new IllegalArgumentException("Parameter mediaServiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, mediaServiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MediaServiceInner>>>() {
                @Override
                public Observable<ServiceResponse<MediaServiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MediaServiceInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MediaServiceInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MediaServiceInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MediaServiceInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Creates a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @param parameters Media Service properties needed for creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MediaServiceInner object if successful.
     */
    public MediaServiceInner create(String resourceGroupName, String mediaServiceName, MediaServiceInner parameters) {
        return createWithServiceResponseAsync(resourceGroupName, mediaServiceName, parameters).toBlocking().single().body();
    }

    /**
     * Creates a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @param parameters Media Service properties needed for creation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MediaServiceInner> createAsync(String resourceGroupName, String mediaServiceName, MediaServiceInner parameters, final ServiceCallback<MediaServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, mediaServiceName, parameters), serviceCallback);
    }

    /**
     * Creates a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @param parameters Media Service properties needed for creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MediaServiceInner object
     */
    public Observable<MediaServiceInner> createAsync(String resourceGroupName, String mediaServiceName, MediaServiceInner parameters) {
        return createWithServiceResponseAsync(resourceGroupName, mediaServiceName, parameters).map(new Func1<ServiceResponse<MediaServiceInner>, MediaServiceInner>() {
            @Override
            public MediaServiceInner call(ServiceResponse<MediaServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @param parameters Media Service properties needed for creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MediaServiceInner object
     */
    public Observable<ServiceResponse<MediaServiceInner>> createWithServiceResponseAsync(String resourceGroupName, String mediaServiceName, MediaServiceInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (mediaServiceName == null) {
            throw new IllegalArgumentException("Parameter mediaServiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.create(this.client.subscriptionId(), resourceGroupName, mediaServiceName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MediaServiceInner>>>() {
                @Override
                public Observable<ServiceResponse<MediaServiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MediaServiceInner> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MediaServiceInner> createDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MediaServiceInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<MediaServiceInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Deletes a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String mediaServiceName) {
        deleteWithServiceResponseAsync(resourceGroupName, mediaServiceName).toBlocking().single().body();
    }

    /**
     * Deletes a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String mediaServiceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, mediaServiceName), serviceCallback);
    }

    /**
     * Deletes a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String mediaServiceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, mediaServiceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String mediaServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (mediaServiceName == null) {
            throw new IllegalArgumentException("Parameter mediaServiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, mediaServiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Updates a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @param parameters Media Service properties needed for update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MediaServiceInner object if successful.
     */
    public MediaServiceInner update(String resourceGroupName, String mediaServiceName, MediaServiceInner parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, mediaServiceName, parameters).toBlocking().single().body();
    }

    /**
     * Updates a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @param parameters Media Service properties needed for update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MediaServiceInner> updateAsync(String resourceGroupName, String mediaServiceName, MediaServiceInner parameters, final ServiceCallback<MediaServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, mediaServiceName, parameters), serviceCallback);
    }

    /**
     * Updates a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @param parameters Media Service properties needed for update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MediaServiceInner object
     */
    public Observable<MediaServiceInner> updateAsync(String resourceGroupName, String mediaServiceName, MediaServiceInner parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, mediaServiceName, parameters).map(new Func1<ServiceResponse<MediaServiceInner>, MediaServiceInner>() {
            @Override
            public MediaServiceInner call(ServiceResponse<MediaServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @param parameters Media Service properties needed for update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MediaServiceInner object
     */
    public Observable<ServiceResponse<MediaServiceInner>> updateWithServiceResponseAsync(String resourceGroupName, String mediaServiceName, MediaServiceInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (mediaServiceName == null) {
            throw new IllegalArgumentException("Parameter mediaServiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.update(this.client.subscriptionId(), resourceGroupName, mediaServiceName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MediaServiceInner>>>() {
                @Override
                public Observable<ServiceResponse<MediaServiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MediaServiceInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MediaServiceInner> updateDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MediaServiceInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MediaServiceInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Regenerates a primary or secondary key for a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @param keyType The keyType indicating which key you want to regenerate, Primary or Secondary. Possible values include: 'Primary', 'Secondary'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RegenerateKeyOutputInner object if successful.
     */
    public RegenerateKeyOutputInner regenerateKey(String resourceGroupName, String mediaServiceName, KeyType keyType) {
        return regenerateKeyWithServiceResponseAsync(resourceGroupName, mediaServiceName, keyType).toBlocking().single().body();
    }

    /**
     * Regenerates a primary or secondary key for a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @param keyType The keyType indicating which key you want to regenerate, Primary or Secondary. Possible values include: 'Primary', 'Secondary'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RegenerateKeyOutputInner> regenerateKeyAsync(String resourceGroupName, String mediaServiceName, KeyType keyType, final ServiceCallback<RegenerateKeyOutputInner> serviceCallback) {
        return ServiceFuture.fromResponse(regenerateKeyWithServiceResponseAsync(resourceGroupName, mediaServiceName, keyType), serviceCallback);
    }

    /**
     * Regenerates a primary or secondary key for a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @param keyType The keyType indicating which key you want to regenerate, Primary or Secondary. Possible values include: 'Primary', 'Secondary'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RegenerateKeyOutputInner object
     */
    public Observable<RegenerateKeyOutputInner> regenerateKeyAsync(String resourceGroupName, String mediaServiceName, KeyType keyType) {
        return regenerateKeyWithServiceResponseAsync(resourceGroupName, mediaServiceName, keyType).map(new Func1<ServiceResponse<RegenerateKeyOutputInner>, RegenerateKeyOutputInner>() {
            @Override
            public RegenerateKeyOutputInner call(ServiceResponse<RegenerateKeyOutputInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Regenerates a primary or secondary key for a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @param keyType The keyType indicating which key you want to regenerate, Primary or Secondary. Possible values include: 'Primary', 'Secondary'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RegenerateKeyOutputInner object
     */
    public Observable<ServiceResponse<RegenerateKeyOutputInner>> regenerateKeyWithServiceResponseAsync(String resourceGroupName, String mediaServiceName, KeyType keyType) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (mediaServiceName == null) {
            throw new IllegalArgumentException("Parameter mediaServiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (keyType == null) {
            throw new IllegalArgumentException("Parameter keyType is required and cannot be null.");
        }
        RegenerateKeyInput parameters = new RegenerateKeyInput();
        parameters.withKeyType(keyType);
        return service.regenerateKey(this.client.subscriptionId(), resourceGroupName, mediaServiceName, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RegenerateKeyOutputInner>>>() {
                @Override
                public Observable<ServiceResponse<RegenerateKeyOutputInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RegenerateKeyOutputInner> clientResponse = regenerateKeyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RegenerateKeyOutputInner> regenerateKeyDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RegenerateKeyOutputInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RegenerateKeyOutputInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Lists the keys for a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServiceKeysInner object if successful.
     */
    public ServiceKeysInner listKeys(String resourceGroupName, String mediaServiceName) {
        return listKeysWithServiceResponseAsync(resourceGroupName, mediaServiceName).toBlocking().single().body();
    }

    /**
     * Lists the keys for a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServiceKeysInner> listKeysAsync(String resourceGroupName, String mediaServiceName, final ServiceCallback<ServiceKeysInner> serviceCallback) {
        return ServiceFuture.fromResponse(listKeysWithServiceResponseAsync(resourceGroupName, mediaServiceName), serviceCallback);
    }

    /**
     * Lists the keys for a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceKeysInner object
     */
    public Observable<ServiceKeysInner> listKeysAsync(String resourceGroupName, String mediaServiceName) {
        return listKeysWithServiceResponseAsync(resourceGroupName, mediaServiceName).map(new Func1<ServiceResponse<ServiceKeysInner>, ServiceKeysInner>() {
            @Override
            public ServiceKeysInner call(ServiceResponse<ServiceKeysInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the keys for a Media Service.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServiceKeysInner object
     */
    public Observable<ServiceResponse<ServiceKeysInner>> listKeysWithServiceResponseAsync(String resourceGroupName, String mediaServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (mediaServiceName == null) {
            throw new IllegalArgumentException("Parameter mediaServiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listKeys(this.client.subscriptionId(), resourceGroupName, mediaServiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServiceKeysInner>>>() {
                @Override
                public Observable<ServiceResponse<ServiceKeysInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServiceKeysInner> clientResponse = listKeysDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServiceKeysInner> listKeysDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ServiceKeysInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ServiceKeysInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Synchronizes storage account keys for a storage account associated with the Media Service account.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @param id The id of the storage account resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void syncStorageKeys(String resourceGroupName, String mediaServiceName, String id) {
        syncStorageKeysWithServiceResponseAsync(resourceGroupName, mediaServiceName, id).toBlocking().single().body();
    }

    /**
     * Synchronizes storage account keys for a storage account associated with the Media Service account.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @param id The id of the storage account resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> syncStorageKeysAsync(String resourceGroupName, String mediaServiceName, String id, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(syncStorageKeysWithServiceResponseAsync(resourceGroupName, mediaServiceName, id), serviceCallback);
    }

    /**
     * Synchronizes storage account keys for a storage account associated with the Media Service account.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @param id The id of the storage account resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> syncStorageKeysAsync(String resourceGroupName, String mediaServiceName, String id) {
        return syncStorageKeysWithServiceResponseAsync(resourceGroupName, mediaServiceName, id).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Synchronizes storage account keys for a storage account associated with the Media Service account.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param mediaServiceName Name of the Media Service.
     * @param id The id of the storage account resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> syncStorageKeysWithServiceResponseAsync(String resourceGroupName, String mediaServiceName, String id) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (mediaServiceName == null) {
            throw new IllegalArgumentException("Parameter mediaServiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        SyncStorageKeysInput parameters = new SyncStorageKeysInput();
        parameters.withId(id);
        return service.syncStorageKeys(this.client.subscriptionId(), resourceGroupName, mediaServiceName, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = syncStorageKeysDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> syncStorageKeysDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

}
