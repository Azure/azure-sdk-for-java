/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.language.textanalytics.implementation;

import com.azure.common.ServiceClient;
import com.azure.common.annotations.BodyParam;
import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.POST;
import com.azure.common.annotations.QueryParam;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.http.HttpPipeline;
import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.implementation.RestProxy;
import com.azure.common.implementation.Validator;
import com.microsoft.azure.cognitiveservices.language.textanalytics.TextAnalyticsClient;
import com.microsoft.azure.cognitiveservices.language.textanalytics.models.EntitiesBatchResult;
import com.microsoft.azure.cognitiveservices.language.textanalytics.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.language.textanalytics.models.KeyPhraseBatchResult;
import com.microsoft.azure.cognitiveservices.language.textanalytics.models.LanguageBatchInput;
import com.microsoft.azure.cognitiveservices.language.textanalytics.models.LanguageBatchResult;
import com.microsoft.azure.cognitiveservices.language.textanalytics.models.LanguageInput;
import com.microsoft.azure.cognitiveservices.language.textanalytics.models.MultiLanguageBatchInput;
import com.microsoft.azure.cognitiveservices.language.textanalytics.models.MultiLanguageInput;
import java.util.ArrayList;
import java.util.List;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * Initializes a new instance of the TextAnalyticsClient type.
 */
public final class TextAnalyticsClientImpl extends ServiceClient implements TextAnalyticsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private TextAnalyticsClientService service;

    /**
     * Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).
     */
    private String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).
     *
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Sets Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).
     *
     * @param endpoint the endpoint value.
     * @return the service client itself.
     */
    public TextAnalyticsClientImpl withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Initializes an instance of TextAnalyticsClient client.
     */
    public TextAnalyticsClientImpl() {
        this(RestProxy.createDefaultPipeline());
    }

    /**
     * Initializes an instance of TextAnalyticsClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     */
    public TextAnalyticsClientImpl(@NonNull HttpPipeline httpPipeline) {
        super(httpPipeline);
        this.service = RestProxy.create(TextAnalyticsClientService.class, this);
    }

    /**
     * The interface defining all the services for TextAnalyticsClient to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{Endpoint}/text/analytics/v2.1")
    private interface TextAnalyticsClientService {
        @POST("languages")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<LanguageBatchResult>> detectLanguage(@HostParam("Endpoint") String endpoint, @QueryParam("showStats") Boolean showStats, @BodyParam("application/json; charset=utf-8") LanguageBatchInput languageBatchInput);

        @POST("entities")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<EntitiesBatchResult>> entities(@HostParam("Endpoint") String endpoint, @QueryParam("showStats") Boolean showStats, @BodyParam("application/json; charset=utf-8") MultiLanguageBatchInput multiLanguageBatchInput);

        @POST("keyPhrases")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<KeyPhraseBatchResult>> keyPhrases(@HostParam("Endpoint") String endpoint, @QueryParam("showStats") Boolean showStats, @BodyParam("application/json; charset=utf-8") MultiLanguageBatchInput multiLanguageBatchInput);

        @POST("sentiment")
        @ExpectedResponses({200, 500})
        Mono<SimpleResponse<Object>> sentiment(@HostParam("Endpoint") String endpoint, @QueryParam("showStats") Boolean showStats, @BodyParam("application/json; charset=utf-8") MultiLanguageBatchInput multiLanguageBatchInput);
    }

    /**
     * The API returns the detected language and a numeric score between 0 and 1.
     * Scores close to 1 indicate 100% certainty that the identified language is true. A total of 120 languages are supported.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the LanguageBatchResult object if successful.
     */
    public LanguageBatchResult detectLanguage() {
        return detectLanguageAsync().block();
    }

    /**
     * The API returns the detected language and a numeric score between 0 and 1.
     * Scores close to 1 indicate 100% certainty that the identified language is true. A total of 120 languages are supported.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<LanguageBatchResult>> detectLanguageWithRestResponseAsync() {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        final Boolean showStats = null;
        final LanguageBatchInput languageBatchInput = null;
        return service.detectLanguage(this.endpoint(), showStats, languageBatchInput);
    }

    /**
     * The API returns the detected language and a numeric score between 0 and 1.
     * Scores close to 1 indicate 100% certainty that the identified language is true. A total of 120 languages are supported.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<LanguageBatchResult> detectLanguageAsync() {
        return detectLanguageWithRestResponseAsync()
            .flatMap((SimpleResponse<LanguageBatchResult> res) -> Mono.just(res.value()));
    }

    /**
     * The API returns the detected language and a numeric score between 0 and 1.
     * Scores close to 1 indicate 100% certainty that the identified language is true. A total of 120 languages are supported.
     *
     * @param showStats (optional) if set to true, response will contain input and document level statistics.
     * @param documents the List&lt;LanguageInput&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the LanguageBatchResult object if successful.
     */
    public LanguageBatchResult detectLanguage(Boolean showStats, List<LanguageInput> documents) {
        return detectLanguageAsync(showStats, documents).block();
    }

    /**
     * The API returns the detected language and a numeric score between 0 and 1.
     * Scores close to 1 indicate 100% certainty that the identified language is true. A total of 120 languages are supported.
     *
     * @param showStats (optional) if set to true, response will contain input and document level statistics.
     * @param documents the List&lt;LanguageInput&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<LanguageBatchResult>> detectLanguageWithRestResponseAsync(Boolean showStats, List<LanguageInput> documents) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        Validator.validate(documents);
        LanguageBatchInput languageBatchInput = null;
        if (documents != null) {
            languageBatchInput = new LanguageBatchInput();
            languageBatchInput.withDocuments(documents);
        }
        return service.detectLanguage(this.endpoint(), showStats, languageBatchInput);
    }

    /**
     * The API returns the detected language and a numeric score between 0 and 1.
     * Scores close to 1 indicate 100% certainty that the identified language is true. A total of 120 languages are supported.
     *
     * @param showStats (optional) if set to true, response will contain input and document level statistics.
     * @param documents the List&lt;LanguageInput&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<LanguageBatchResult> detectLanguageAsync(Boolean showStats, List<LanguageInput> documents) {
        return detectLanguageWithRestResponseAsync(showStats, documents)
            .flatMap((SimpleResponse<LanguageBatchResult> res) -> Mono.just(res.value()));
    }

    /**
     * The API returns a list of recognized entities in a given document.
     * To get even more information on each recognized entity we recommend using the Bing Entity Search API by querying for the recognized entities names. See the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/text-analytics-supported-languages"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the EntitiesBatchResult object if successful.
     */
    public EntitiesBatchResult entities() {
        return entitiesAsync().block();
    }

    /**
     * The API returns a list of recognized entities in a given document.
     * To get even more information on each recognized entity we recommend using the Bing Entity Search API by querying for the recognized entities names. See the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/text-analytics-supported-languages"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<EntitiesBatchResult>> entitiesWithRestResponseAsync() {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        final Boolean showStats = null;
        final MultiLanguageBatchInput multiLanguageBatchInput = null;
        return service.entities(this.endpoint(), showStats, multiLanguageBatchInput);
    }

    /**
     * The API returns a list of recognized entities in a given document.
     * To get even more information on each recognized entity we recommend using the Bing Entity Search API by querying for the recognized entities names. See the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/text-analytics-supported-languages"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<EntitiesBatchResult> entitiesAsync() {
        return entitiesWithRestResponseAsync()
            .flatMap((SimpleResponse<EntitiesBatchResult> res) -> Mono.just(res.value()));
    }

    /**
     * The API returns a list of recognized entities in a given document.
     * To get even more information on each recognized entity we recommend using the Bing Entity Search API by querying for the recognized entities names. See the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/text-analytics-supported-languages"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     *
     * @param showStats (optional) if set to true, response will contain input and document level statistics.
     * @param documents the List&lt;MultiLanguageInput&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the EntitiesBatchResult object if successful.
     */
    public EntitiesBatchResult entities(Boolean showStats, List<MultiLanguageInput> documents) {
        return entitiesAsync(showStats, documents).block();
    }

    /**
     * The API returns a list of recognized entities in a given document.
     * To get even more information on each recognized entity we recommend using the Bing Entity Search API by querying for the recognized entities names. See the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/text-analytics-supported-languages"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     *
     * @param showStats (optional) if set to true, response will contain input and document level statistics.
     * @param documents the List&lt;MultiLanguageInput&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<EntitiesBatchResult>> entitiesWithRestResponseAsync(Boolean showStats, List<MultiLanguageInput> documents) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        Validator.validate(documents);
        MultiLanguageBatchInput multiLanguageBatchInput = null;
        if (documents != null) {
            multiLanguageBatchInput = new MultiLanguageBatchInput();
            multiLanguageBatchInput.withDocuments(documents);
        }
        return service.entities(this.endpoint(), showStats, multiLanguageBatchInput);
    }

    /**
     * The API returns a list of recognized entities in a given document.
     * To get even more information on each recognized entity we recommend using the Bing Entity Search API by querying for the recognized entities names. See the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/text-analytics-supported-languages"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     *
     * @param showStats (optional) if set to true, response will contain input and document level statistics.
     * @param documents the List&lt;MultiLanguageInput&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<EntitiesBatchResult> entitiesAsync(Boolean showStats, List<MultiLanguageInput> documents) {
        return entitiesWithRestResponseAsync(showStats, documents)
            .flatMap((SimpleResponse<EntitiesBatchResult> res) -> Mono.just(res.value()));
    }

    /**
     * The API returns a list of strings denoting the key talking points in the input text.
     * See the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages"&gt;Text Analytics Documentation&lt;/a&gt; for details about the languages that are supported by key phrase extraction.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyPhraseBatchResult object if successful.
     */
    public KeyPhraseBatchResult keyPhrases() {
        return keyPhrasesAsync().block();
    }

    /**
     * The API returns a list of strings denoting the key talking points in the input text.
     * See the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages"&gt;Text Analytics Documentation&lt;/a&gt; for details about the languages that are supported by key phrase extraction.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<KeyPhraseBatchResult>> keyPhrasesWithRestResponseAsync() {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        final Boolean showStats = null;
        final MultiLanguageBatchInput multiLanguageBatchInput = null;
        return service.keyPhrases(this.endpoint(), showStats, multiLanguageBatchInput);
    }

    /**
     * The API returns a list of strings denoting the key talking points in the input text.
     * See the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages"&gt;Text Analytics Documentation&lt;/a&gt; for details about the languages that are supported by key phrase extraction.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyPhraseBatchResult> keyPhrasesAsync() {
        return keyPhrasesWithRestResponseAsync()
            .flatMap((SimpleResponse<KeyPhraseBatchResult> res) -> Mono.just(res.value()));
    }

    /**
     * The API returns a list of strings denoting the key talking points in the input text.
     * See the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages"&gt;Text Analytics Documentation&lt;/a&gt; for details about the languages that are supported by key phrase extraction.
     *
     * @param showStats (optional) if set to true, response will contain input and document level statistics.
     * @param documents the List&lt;MultiLanguageInput&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyPhraseBatchResult object if successful.
     */
    public KeyPhraseBatchResult keyPhrases(Boolean showStats, List<MultiLanguageInput> documents) {
        return keyPhrasesAsync(showStats, documents).block();
    }

    /**
     * The API returns a list of strings denoting the key talking points in the input text.
     * See the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages"&gt;Text Analytics Documentation&lt;/a&gt; for details about the languages that are supported by key phrase extraction.
     *
     * @param showStats (optional) if set to true, response will contain input and document level statistics.
     * @param documents the List&lt;MultiLanguageInput&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<KeyPhraseBatchResult>> keyPhrasesWithRestResponseAsync(Boolean showStats, List<MultiLanguageInput> documents) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        Validator.validate(documents);
        MultiLanguageBatchInput multiLanguageBatchInput = null;
        if (documents != null) {
            multiLanguageBatchInput = new MultiLanguageBatchInput();
            multiLanguageBatchInput.withDocuments(documents);
        }
        return service.keyPhrases(this.endpoint(), showStats, multiLanguageBatchInput);
    }

    /**
     * The API returns a list of strings denoting the key talking points in the input text.
     * See the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages"&gt;Text Analytics Documentation&lt;/a&gt; for details about the languages that are supported by key phrase extraction.
     *
     * @param showStats (optional) if set to true, response will contain input and document level statistics.
     * @param documents the List&lt;MultiLanguageInput&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyPhraseBatchResult> keyPhrasesAsync(Boolean showStats, List<MultiLanguageInput> documents) {
        return keyPhrasesWithRestResponseAsync(showStats, documents)
            .flatMap((SimpleResponse<KeyPhraseBatchResult> res) -> Mono.just(res.value()));
    }

    /**
     * The API returns a numeric score between 0 and 1.
     * Scores close to 1 indicate positive sentiment, while scores close to 0 indicate negative sentiment. A score of 0.5 indicates the lack of sentiment (e.g. a factoid statement). See the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages"&gt;Text Analytics Documentation&lt;/a&gt; for details about the languages that are supported by sentiment analysis.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Object object if successful.
     */
    public Object sentiment() {
        return sentimentAsync().block();
    }

    /**
     * The API returns a numeric score between 0 and 1.
     * Scores close to 1 indicate positive sentiment, while scores close to 0 indicate negative sentiment. A score of 0.5 indicates the lack of sentiment (e.g. a factoid statement). See the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages"&gt;Text Analytics Documentation&lt;/a&gt; for details about the languages that are supported by sentiment analysis.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Object>> sentimentWithRestResponseAsync() {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        final Boolean showStats = null;
        final MultiLanguageBatchInput multiLanguageBatchInput = null;
        return service.sentiment(this.endpoint(), showStats, multiLanguageBatchInput);
    }

    /**
     * The API returns a numeric score between 0 and 1.
     * Scores close to 1 indicate positive sentiment, while scores close to 0 indicate negative sentiment. A score of 0.5 indicates the lack of sentiment (e.g. a factoid statement). See the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages"&gt;Text Analytics Documentation&lt;/a&gt; for details about the languages that are supported by sentiment analysis.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Object> sentimentAsync() {
        return sentimentWithRestResponseAsync()
            .flatMap((SimpleResponse<Object> res) -> Mono.just(res.value()));
    }

    /**
     * The API returns a numeric score between 0 and 1.
     * Scores close to 1 indicate positive sentiment, while scores close to 0 indicate negative sentiment. A score of 0.5 indicates the lack of sentiment (e.g. a factoid statement). See the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages"&gt;Text Analytics Documentation&lt;/a&gt; for details about the languages that are supported by sentiment analysis.
     *
     * @param showStats (optional) if set to true, response will contain input and document level statistics.
     * @param documents the List&lt;MultiLanguageInput&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Object object if successful.
     */
    public Object sentiment(Boolean showStats, List<MultiLanguageInput> documents) {
        return sentimentAsync(showStats, documents).block();
    }

    /**
     * The API returns a numeric score between 0 and 1.
     * Scores close to 1 indicate positive sentiment, while scores close to 0 indicate negative sentiment. A score of 0.5 indicates the lack of sentiment (e.g. a factoid statement). See the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages"&gt;Text Analytics Documentation&lt;/a&gt; for details about the languages that are supported by sentiment analysis.
     *
     * @param showStats (optional) if set to true, response will contain input and document level statistics.
     * @param documents the List&lt;MultiLanguageInput&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Object>> sentimentWithRestResponseAsync(Boolean showStats, List<MultiLanguageInput> documents) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        Validator.validate(documents);
        MultiLanguageBatchInput multiLanguageBatchInput = null;
        if (documents != null) {
            multiLanguageBatchInput = new MultiLanguageBatchInput();
            multiLanguageBatchInput.withDocuments(documents);
        }
        return service.sentiment(this.endpoint(), showStats, multiLanguageBatchInput);
    }

    /**
     * The API returns a numeric score between 0 and 1.
     * Scores close to 1 indicate positive sentiment, while scores close to 0 indicate negative sentiment. A score of 0.5 indicates the lack of sentiment (e.g. a factoid statement). See the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages"&gt;Text Analytics Documentation&lt;/a&gt; for details about the languages that are supported by sentiment analysis.
     *
     * @param showStats (optional) if set to true, response will contain input and document level statistics.
     * @param documents the List&lt;MultiLanguageInput&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Object> sentimentAsync(Boolean showStats, List<MultiLanguageInput> documents) {
        return sentimentWithRestResponseAsync(showStats, documents)
            .flatMap((SimpleResponse<Object> res) -> Mono.just(res.value()));
    }
}
