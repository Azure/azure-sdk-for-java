/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.language.luis.authoring.implementation;

import com.azure.common.annotations.BodyParam;
import com.azure.common.annotations.DELETE;
import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.GET;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.PathParam;
import com.azure.common.annotations.POST;
import com.azure.common.annotations.PUT;
import com.azure.common.annotations.QueryParam;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.http.rest.StreamResponse;
import com.azure.common.implementation.RestProxy;
import com.azure.common.implementation.Validator;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationCreateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationInfoResponse;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationPublishObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationSettings;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationSettingUpdateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationUpdateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AvailableCulture;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AzureClouds;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AzureRegions;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisApp;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PersonalAssistantsResponse;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomain;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomainCreateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ProductionOrStagingEndpointInfo;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PublishSettings;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PublishSettingUpdateObject;
import io.netty.buffer.ByteBuf;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Apps.
 */
public final class AppsImpl implements Apps {
    /**
     * The proxy service used to perform REST calls.
     */
    private AppsService service;

    /**
     * The service client containing this operation class.
     */
    private LUISAuthoringClientImpl client;

    /**
     * Initializes an instance of AppsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public AppsImpl(LUISAuthoringClientImpl client) {
        this.service = RestProxy.create(AppsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Apps to be used by the proxy
     * service to perform REST calls.
     */
    @Host("http://{AzureRegion}.api.cognitive.microsoft.{AzureCloud}/luis/api/v2.0")
    private interface AppsService {
        @POST("apps/")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<UUID>> add(@HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @BodyParam("application/json; charset=utf-8") ApplicationCreateObject applicationCreateObject);

        @GET("apps/")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<List<ApplicationInfoResponse>>> list(@HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @QueryParam("skip") Integer skip, @QueryParam("take") Integer take);

        @POST("apps/import")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<UUID>> importMethod(@HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @QueryParam("appName") String appName, @BodyParam("application/json; charset=utf-8") LuisApp luisApp);

        @GET("apps/assistants")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PersonalAssistantsResponse>> listCortanaEndpoints(@HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud);

        @GET("apps/domains")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<List<String>>> listDomains(@HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud);

        @GET("apps/usagescenarios")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<List<String>>> listUsageScenarios(@HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud);

        @GET("apps/cultures")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<List<AvailableCulture>>> listSupportedCultures(@HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud);

        @GET("apps/{appId}/querylogs")
        @ExpectedResponses({200})
        Mono<StreamResponse> downloadQueryLogs(@PathParam("appId") UUID appId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud);

        @GET("apps/{appId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<ApplicationInfoResponse>> get(@PathParam("appId") UUID appId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud);

        @PUT("apps/{appId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<OperationStatus>> update(@PathParam("appId") UUID appId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @BodyParam("application/json; charset=utf-8") ApplicationUpdateObject applicationUpdateObject);

        @DELETE("apps/{appId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<OperationStatus>> delete(@PathParam("appId") UUID appId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @QueryParam("force") Boolean force);

        @POST("apps/{appId}/publish")
        @ExpectedResponses({201, 207})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<ProductionOrStagingEndpointInfo>> publish(@PathParam("appId") UUID appId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @BodyParam("application/json; charset=utf-8") ApplicationPublishObject applicationPublishObject);

        @GET("apps/{appId}/settings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<ApplicationSettings>> getSettings(@PathParam("appId") UUID appId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud);

        @PUT("apps/{appId}/settings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<OperationStatus>> updateSettings(@PathParam("appId") UUID appId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @BodyParam("application/json; charset=utf-8") ApplicationSettingUpdateObject applicationSettingUpdateObject);

        @GET("apps/{appId}/publishsettings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PublishSettings>> getPublishSettings(@PathParam("appId") UUID appId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud);

        @PUT("apps/{appId}/publishsettings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<OperationStatus>> updatePublishSettings(@PathParam("appId") UUID appId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @BodyParam("application/json; charset=utf-8") PublishSettingUpdateObject publishSettingUpdateObject);

        @GET("apps/{appId}/endpoints")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<Map<String, String>>> listEndpoints(@PathParam("appId") UUID appId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud);

        @GET("apps/customprebuiltdomains")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<List<PrebuiltDomain>>> listAvailableCustomPrebuiltDomains(@HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud);

        @POST("apps/customprebuiltdomains")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<UUID>> addCustomPrebuiltDomain(@HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @BodyParam("application/json; charset=utf-8") PrebuiltDomainCreateObject prebuiltDomainCreateObject);

        @GET("apps/customprebuiltdomains/{culture}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<List<PrebuiltDomain>>> listAvailableCustomPrebuiltDomainsForCulture(@PathParam("culture") String culture, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud);

        @GET("package/{appId}/slot/{slotName}/gzip")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<StreamResponse> packagePublishedApplicationAsGzip(@PathParam("appId") UUID appId, @PathParam("slotName") String slotName, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud);

        @GET("package/{appId}/versions/{versionId}/gzip")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<StreamResponse> packageTrainedApplicationAsGzip(@PathParam("appId") UUID appId, @PathParam("versionId") String versionId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud);
    }

    /**
     * Creates a new LUIS app.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param applicationCreateObject An application containing Name, Description (optional), Culture, Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the application. Default value for the version ID is "0.1". Note: the culture cannot be changed after the app is created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the UUID object if successful.
     */
    public UUID add(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull ApplicationCreateObject applicationCreateObject) {
        return addAsync(azureRegion, azureCloud, applicationCreateObject).block();
    }

    /**
     * Creates a new LUIS app.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param applicationCreateObject An application containing Name, Description (optional), Culture, Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the application. Default value for the version ID is "0.1". Note: the culture cannot be changed after the app is created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<UUID>> addWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull ApplicationCreateObject applicationCreateObject) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (applicationCreateObject == null) {
            throw new IllegalArgumentException("Parameter applicationCreateObject is required and cannot be null.");
        }
        Validator.validate(applicationCreateObject);
        return service.add(azureRegion, azureCloud, applicationCreateObject);
    }

    /**
     * Creates a new LUIS app.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param applicationCreateObject An application containing Name, Description (optional), Culture, Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the application. Default value for the version ID is "0.1". Note: the culture cannot be changed after the app is created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<UUID> addAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull ApplicationCreateObject applicationCreateObject) {
        return addWithRestResponseAsync(azureRegion, azureCloud, applicationCreateObject)
            .flatMap((SimpleResponse<UUID> res) -> Mono.just(res.value()));
    }

    /**
     * Lists all of the user's applications.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;ApplicationInfoResponse&gt; object if successful.
     */
    public List<ApplicationInfoResponse> list(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud) {
        return listAsync(azureRegion, azureCloud).block();
    }

    /**
     * Lists all of the user's applications.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<ApplicationInfoResponse>>> listWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        final Integer skip = 0;
        final Integer take = 100;
        return service.list(azureRegion, azureCloud, skip, take);
    }

    /**
     * Lists all of the user's applications.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<ApplicationInfoResponse>> listAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud) {
        return listWithRestResponseAsync(azureRegion, azureCloud)
            .flatMap((SimpleResponse<List<ApplicationInfoResponse>> res) -> Mono.just(res.value()));
    }

    /**
     * Lists all of the user's applications.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;ApplicationInfoResponse&gt; object if successful.
     */
    public List<ApplicationInfoResponse> list(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, Integer skip, Integer take) {
        return listAsync(azureRegion, azureCloud, skip, take).block();
    }

    /**
     * Lists all of the user's applications.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<ApplicationInfoResponse>>> listWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, Integer skip, Integer take) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        return service.list(azureRegion, azureCloud, skip, take);
    }

    /**
     * Lists all of the user's applications.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<ApplicationInfoResponse>> listAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, Integer skip, Integer take) {
        return listWithRestResponseAsync(azureRegion, azureCloud, skip, take)
            .flatMap((SimpleResponse<List<ApplicationInfoResponse>> res) -> Mono.just(res.value()));
    }

    /**
     * Imports an application to LUIS, the application's structure is included in the request body.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param luisApp A LUIS application structure.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the UUID object if successful.
     */
    public UUID importMethod(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull LuisApp luisApp) {
        return importMethodAsync(azureRegion, azureCloud, luisApp).block();
    }

    /**
     * Imports an application to LUIS, the application's structure is included in the request body.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param luisApp A LUIS application structure.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<UUID>> importMethodWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull LuisApp luisApp) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (luisApp == null) {
            throw new IllegalArgumentException("Parameter luisApp is required and cannot be null.");
        }
        Validator.validate(luisApp);
        final String appName = null;
        return service.importMethod(azureRegion, azureCloud, appName, luisApp);
    }

    /**
     * Imports an application to LUIS, the application's structure is included in the request body.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param luisApp A LUIS application structure.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<UUID> importMethodAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull LuisApp luisApp) {
        return importMethodWithRestResponseAsync(azureRegion, azureCloud, luisApp)
            .flatMap((SimpleResponse<UUID> res) -> Mono.just(res.value()));
    }

    /**
     * Imports an application to LUIS, the application's structure is included in the request body.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param luisApp A LUIS application structure.
     * @param appName The application name to create. If not specified, the application name will be read from the imported object. If the application name already exists, an error is returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the UUID object if successful.
     */
    public UUID importMethod(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull LuisApp luisApp, String appName) {
        return importMethodAsync(azureRegion, azureCloud, luisApp, appName).block();
    }

    /**
     * Imports an application to LUIS, the application's structure is included in the request body.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param luisApp A LUIS application structure.
     * @param appName The application name to create. If not specified, the application name will be read from the imported object. If the application name already exists, an error is returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<UUID>> importMethodWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull LuisApp luisApp, String appName) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (luisApp == null) {
            throw new IllegalArgumentException("Parameter luisApp is required and cannot be null.");
        }
        Validator.validate(luisApp);
        return service.importMethod(azureRegion, azureCloud, appName, luisApp);
    }

    /**
     * Imports an application to LUIS, the application's structure is included in the request body.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param luisApp A LUIS application structure.
     * @param appName The application name to create. If not specified, the application name will be read from the imported object. If the application name already exists, an error is returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<UUID> importMethodAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull LuisApp luisApp, String appName) {
        return importMethodWithRestResponseAsync(azureRegion, azureCloud, luisApp, appName)
            .flatMap((SimpleResponse<UUID> res) -> Mono.just(res.value()));
    }

    /**
     * Gets the endpoint URLs for the prebuilt Cortana applications.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PersonalAssistantsResponse object if successful.
     */
    public PersonalAssistantsResponse listCortanaEndpoints(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud) {
        return listCortanaEndpointsAsync(azureRegion, azureCloud).block();
    }

    /**
     * Gets the endpoint URLs for the prebuilt Cortana applications.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<PersonalAssistantsResponse>> listCortanaEndpointsWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        return service.listCortanaEndpoints(azureRegion, azureCloud);
    }

    /**
     * Gets the endpoint URLs for the prebuilt Cortana applications.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<PersonalAssistantsResponse> listCortanaEndpointsAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud) {
        return listCortanaEndpointsWithRestResponseAsync(azureRegion, azureCloud)
            .flatMap((SimpleResponse<PersonalAssistantsResponse> res) -> Mono.just(res.value()));
    }

    /**
     * Gets the available application domains.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;String&gt; object if successful.
     */
    public List<String> listDomains(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud) {
        return listDomainsAsync(azureRegion, azureCloud).block();
    }

    /**
     * Gets the available application domains.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<String>>> listDomainsWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        return service.listDomains(azureRegion, azureCloud);
    }

    /**
     * Gets the available application domains.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<String>> listDomainsAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud) {
        return listDomainsWithRestResponseAsync(azureRegion, azureCloud)
            .flatMap((SimpleResponse<List<String>> res) -> Mono.just(res.value()));
    }

    /**
     * Gets the application available usage scenarios.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;String&gt; object if successful.
     */
    public List<String> listUsageScenarios(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud) {
        return listUsageScenariosAsync(azureRegion, azureCloud).block();
    }

    /**
     * Gets the application available usage scenarios.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<String>>> listUsageScenariosWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        return service.listUsageScenarios(azureRegion, azureCloud);
    }

    /**
     * Gets the application available usage scenarios.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<String>> listUsageScenariosAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud) {
        return listUsageScenariosWithRestResponseAsync(azureRegion, azureCloud)
            .flatMap((SimpleResponse<List<String>> res) -> Mono.just(res.value()));
    }

    /**
     * Gets a list of supported cultures. Cultures are equivalent to the written language and locale. For example,"en-us" represents the U.S. variation of English.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;AvailableCulture&gt; object if successful.
     */
    public List<AvailableCulture> listSupportedCultures(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud) {
        return listSupportedCulturesAsync(azureRegion, azureCloud).block();
    }

    /**
     * Gets a list of supported cultures. Cultures are equivalent to the written language and locale. For example,"en-us" represents the U.S. variation of English.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<AvailableCulture>>> listSupportedCulturesWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        return service.listSupportedCultures(azureRegion, azureCloud);
    }

    /**
     * Gets a list of supported cultures. Cultures are equivalent to the written language and locale. For example,"en-us" represents the U.S. variation of English.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<AvailableCulture>> listSupportedCulturesAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud) {
        return listSupportedCulturesWithRestResponseAsync(azureRegion, azureCloud)
            .flatMap((SimpleResponse<List<AvailableCulture>> res) -> Mono.just(res.value()));
    }

    /**
     * Gets the logs of the past month's endpoint queries for the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Flux&lt;ByteBuf&gt; object if successful.
     */
    public Flux<ByteBuf> downloadQueryLogs(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return downloadQueryLogsAsync(azureRegion, azureCloud, appId).block();
    }

    /**
     * Gets the logs of the past month's endpoint queries for the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<StreamResponse> downloadQueryLogsWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        return service.downloadQueryLogs(appId, azureRegion, azureCloud);
    }

    /**
     * Gets the logs of the past month's endpoint queries for the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Flux<ByteBuf>> downloadQueryLogsAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return downloadQueryLogsWithRestResponseAsync(azureRegion, azureCloud, appId)
            .flatMap((StreamResponse res) -> Mono.just(res.value()));
    }

    /**
     * Gets the application info.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ApplicationInfoResponse object if successful.
     */
    public ApplicationInfoResponse get(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return getAsync(azureRegion, azureCloud, appId).block();
    }

    /**
     * Gets the application info.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ApplicationInfoResponse>> getWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        return service.get(appId, azureRegion, azureCloud);
    }

    /**
     * Gets the application info.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ApplicationInfoResponse> getAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return getWithRestResponseAsync(azureRegion, azureCloud, appId)
            .flatMap((SimpleResponse<ApplicationInfoResponse> res) -> Mono.just(res.value()));
    }

    /**
     * Updates the name or description of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param applicationUpdateObject A model containing Name and Description of the application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OperationStatus object if successful.
     */
    public OperationStatus update(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull ApplicationUpdateObject applicationUpdateObject) {
        return updateAsync(azureRegion, azureCloud, appId, applicationUpdateObject).block();
    }

    /**
     * Updates the name or description of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param applicationUpdateObject A model containing Name and Description of the application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OperationStatus>> updateWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull ApplicationUpdateObject applicationUpdateObject) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (applicationUpdateObject == null) {
            throw new IllegalArgumentException("Parameter applicationUpdateObject is required and cannot be null.");
        }
        Validator.validate(applicationUpdateObject);
        return service.update(appId, azureRegion, azureCloud, applicationUpdateObject);
    }

    /**
     * Updates the name or description of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param applicationUpdateObject A model containing Name and Description of the application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OperationStatus> updateAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull ApplicationUpdateObject applicationUpdateObject) {
        return updateWithRestResponseAsync(azureRegion, azureCloud, appId, applicationUpdateObject)
            .flatMap((SimpleResponse<OperationStatus> res) -> Mono.just(res.value()));
    }

    /**
     * Deletes an application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OperationStatus object if successful.
     */
    public OperationStatus delete(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return deleteAsync(azureRegion, azureCloud, appId).block();
    }

    /**
     * Deletes an application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OperationStatus>> deleteWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        final Boolean force = false;
        return service.delete(appId, azureRegion, azureCloud, force);
    }

    /**
     * Deletes an application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OperationStatus> deleteAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return deleteWithRestResponseAsync(azureRegion, azureCloud, appId)
            .flatMap((SimpleResponse<OperationStatus> res) -> Mono.just(res.value()));
    }

    /**
     * Deletes an application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param force A flag to indicate whether to force an operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OperationStatus object if successful.
     */
    public OperationStatus delete(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, Boolean force) {
        return deleteAsync(azureRegion, azureCloud, appId, force).block();
    }

    /**
     * Deletes an application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param force A flag to indicate whether to force an operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OperationStatus>> deleteWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, Boolean force) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        return service.delete(appId, azureRegion, azureCloud, force);
    }

    /**
     * Deletes an application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param force A flag to indicate whether to force an operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OperationStatus> deleteAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, Boolean force) {
        return deleteWithRestResponseAsync(azureRegion, azureCloud, appId, force)
            .flatMap((SimpleResponse<OperationStatus> res) -> Mono.just(res.value()));
    }

    /**
     * Publishes a specific version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param applicationPublishObject The application publish object. The region is the target region that the application is published to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductionOrStagingEndpointInfo object if successful.
     */
    public ProductionOrStagingEndpointInfo publish(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull ApplicationPublishObject applicationPublishObject) {
        return publishAsync(azureRegion, azureCloud, appId, applicationPublishObject).block();
    }

    /**
     * Publishes a specific version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param applicationPublishObject The application publish object. The region is the target region that the application is published to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ProductionOrStagingEndpointInfo>> publishWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull ApplicationPublishObject applicationPublishObject) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (applicationPublishObject == null) {
            throw new IllegalArgumentException("Parameter applicationPublishObject is required and cannot be null.");
        }
        Validator.validate(applicationPublishObject);
        return service.publish(appId, azureRegion, azureCloud, applicationPublishObject);
    }

    /**
     * Publishes a specific version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param applicationPublishObject The application publish object. The region is the target region that the application is published to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ProductionOrStagingEndpointInfo> publishAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull ApplicationPublishObject applicationPublishObject) {
        return publishWithRestResponseAsync(azureRegion, azureCloud, appId, applicationPublishObject)
            .flatMap((SimpleResponse<ProductionOrStagingEndpointInfo> res) -> Mono.just(res.value()));
    }

    /**
     * Get the application settings including 'UseAllTrainingData'.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ApplicationSettings object if successful.
     */
    public ApplicationSettings getSettings(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return getSettingsAsync(azureRegion, azureCloud, appId).block();
    }

    /**
     * Get the application settings including 'UseAllTrainingData'.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ApplicationSettings>> getSettingsWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        return service.getSettings(appId, azureRegion, azureCloud);
    }

    /**
     * Get the application settings including 'UseAllTrainingData'.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ApplicationSettings> getSettingsAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return getSettingsWithRestResponseAsync(azureRegion, azureCloud, appId)
            .flatMap((SimpleResponse<ApplicationSettings> res) -> Mono.just(res.value()));
    }

    /**
     * Updates the application settings including 'UseAllTrainingData'.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OperationStatus object if successful.
     */
    public OperationStatus updateSettings(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return updateSettingsAsync(azureRegion, azureCloud, appId).block();
    }

    /**
     * Updates the application settings including 'UseAllTrainingData'.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OperationStatus>> updateSettingsWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        ApplicationSettingUpdateObject applicationSettingUpdateObject = new ApplicationSettingUpdateObject();
        applicationSettingUpdateObject.withIsPublic(false);
        return service.updateSettings(appId, azureRegion, azureCloud, applicationSettingUpdateObject);
    }

    /**
     * Updates the application settings including 'UseAllTrainingData'.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OperationStatus> updateSettingsAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return updateSettingsWithRestResponseAsync(azureRegion, azureCloud, appId)
            .flatMap((SimpleResponse<OperationStatus> res) -> Mono.just(res.value()));
    }

    /**
     * Updates the application settings including 'UseAllTrainingData'.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param isPublic Setting your application as public allows other people to use your application's endpoint using their own keys.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OperationStatus object if successful.
     */
    public OperationStatus updateSettings(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, boolean isPublic) {
        return updateSettingsAsync(azureRegion, azureCloud, appId, isPublic).block();
    }

    /**
     * Updates the application settings including 'UseAllTrainingData'.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param isPublic Setting your application as public allows other people to use your application's endpoint using their own keys.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OperationStatus>> updateSettingsWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, boolean isPublic) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        ApplicationSettingUpdateObject applicationSettingUpdateObject = new ApplicationSettingUpdateObject();
        applicationSettingUpdateObject.withIsPublic(isPublic);
        return service.updateSettings(appId, azureRegion, azureCloud, applicationSettingUpdateObject);
    }

    /**
     * Updates the application settings including 'UseAllTrainingData'.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param isPublic Setting your application as public allows other people to use your application's endpoint using their own keys.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OperationStatus> updateSettingsAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, boolean isPublic) {
        return updateSettingsWithRestResponseAsync(azureRegion, azureCloud, appId, isPublic)
            .flatMap((SimpleResponse<OperationStatus> res) -> Mono.just(res.value()));
    }

    /**
     * Get the application publish settings including 'UseAllTrainingData'.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PublishSettings object if successful.
     */
    public PublishSettings getPublishSettings(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return getPublishSettingsAsync(azureRegion, azureCloud, appId).block();
    }

    /**
     * Get the application publish settings including 'UseAllTrainingData'.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<PublishSettings>> getPublishSettingsWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        return service.getPublishSettings(appId, azureRegion, azureCloud);
    }

    /**
     * Get the application publish settings including 'UseAllTrainingData'.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<PublishSettings> getPublishSettingsAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return getPublishSettingsWithRestResponseAsync(azureRegion, azureCloud, appId)
            .flatMap((SimpleResponse<PublishSettings> res) -> Mono.just(res.value()));
    }

    /**
     * Updates the application publish settings including 'UseAllTrainingData'.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param publishSettingUpdateObject An object containing the new publish application settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OperationStatus object if successful.
     */
    public OperationStatus updatePublishSettings(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull PublishSettingUpdateObject publishSettingUpdateObject) {
        return updatePublishSettingsAsync(azureRegion, azureCloud, appId, publishSettingUpdateObject).block();
    }

    /**
     * Updates the application publish settings including 'UseAllTrainingData'.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param publishSettingUpdateObject An object containing the new publish application settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OperationStatus>> updatePublishSettingsWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull PublishSettingUpdateObject publishSettingUpdateObject) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (publishSettingUpdateObject == null) {
            throw new IllegalArgumentException("Parameter publishSettingUpdateObject is required and cannot be null.");
        }
        Validator.validate(publishSettingUpdateObject);
        return service.updatePublishSettings(appId, azureRegion, azureCloud, publishSettingUpdateObject);
    }

    /**
     * Updates the application publish settings including 'UseAllTrainingData'.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param publishSettingUpdateObject An object containing the new publish application settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OperationStatus> updatePublishSettingsAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull PublishSettingUpdateObject publishSettingUpdateObject) {
        return updatePublishSettingsWithRestResponseAsync(azureRegion, azureCloud, appId, publishSettingUpdateObject)
            .flatMap((SimpleResponse<OperationStatus> res) -> Mono.just(res.value()));
    }

    /**
     * Returns the available endpoint deployment regions and URLs.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, String&gt; object if successful.
     */
    public Map<String, String> listEndpoints(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return listEndpointsAsync(azureRegion, azureCloud, appId).block();
    }

    /**
     * Returns the available endpoint deployment regions and URLs.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Map<String, String>>> listEndpointsWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        return service.listEndpoints(appId, azureRegion, azureCloud);
    }

    /**
     * Returns the available endpoint deployment regions and URLs.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Map<String, String>> listEndpointsAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return listEndpointsWithRestResponseAsync(azureRegion, azureCloud, appId)
            .flatMap((SimpleResponse<Map<String, String>> res) -> Mono.just(res.value()));
    }

    /**
     * Gets all the available custom prebuilt domains for all cultures.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;PrebuiltDomain&gt; object if successful.
     */
    public List<PrebuiltDomain> listAvailableCustomPrebuiltDomains(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud) {
        return listAvailableCustomPrebuiltDomainsAsync(azureRegion, azureCloud).block();
    }

    /**
     * Gets all the available custom prebuilt domains for all cultures.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<PrebuiltDomain>>> listAvailableCustomPrebuiltDomainsWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        return service.listAvailableCustomPrebuiltDomains(azureRegion, azureCloud);
    }

    /**
     * Gets all the available custom prebuilt domains for all cultures.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<PrebuiltDomain>> listAvailableCustomPrebuiltDomainsAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud) {
        return listAvailableCustomPrebuiltDomainsWithRestResponseAsync(azureRegion, azureCloud)
            .flatMap((SimpleResponse<List<PrebuiltDomain>> res) -> Mono.just(res.value()));
    }

    /**
     * Adds a prebuilt domain along with its intent and entity models as a new application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param prebuiltDomainCreateObject A prebuilt domain create object containing the name and culture of the domain.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the UUID object if successful.
     */
    public UUID addCustomPrebuiltDomain(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull PrebuiltDomainCreateObject prebuiltDomainCreateObject) {
        return addCustomPrebuiltDomainAsync(azureRegion, azureCloud, prebuiltDomainCreateObject).block();
    }

    /**
     * Adds a prebuilt domain along with its intent and entity models as a new application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param prebuiltDomainCreateObject A prebuilt domain create object containing the name and culture of the domain.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<UUID>> addCustomPrebuiltDomainWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull PrebuiltDomainCreateObject prebuiltDomainCreateObject) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (prebuiltDomainCreateObject == null) {
            throw new IllegalArgumentException("Parameter prebuiltDomainCreateObject is required and cannot be null.");
        }
        Validator.validate(prebuiltDomainCreateObject);
        return service.addCustomPrebuiltDomain(azureRegion, azureCloud, prebuiltDomainCreateObject);
    }

    /**
     * Adds a prebuilt domain along with its intent and entity models as a new application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param prebuiltDomainCreateObject A prebuilt domain create object containing the name and culture of the domain.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<UUID> addCustomPrebuiltDomainAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull PrebuiltDomainCreateObject prebuiltDomainCreateObject) {
        return addCustomPrebuiltDomainWithRestResponseAsync(azureRegion, azureCloud, prebuiltDomainCreateObject)
            .flatMap((SimpleResponse<UUID> res) -> Mono.just(res.value()));
    }

    /**
     * Gets all the available prebuilt domains for a specific culture.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param culture Culture.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;PrebuiltDomain&gt; object if successful.
     */
    public List<PrebuiltDomain> listAvailableCustomPrebuiltDomainsForCulture(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull String culture) {
        return listAvailableCustomPrebuiltDomainsForCultureAsync(azureRegion, azureCloud, culture).block();
    }

    /**
     * Gets all the available prebuilt domains for a specific culture.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param culture Culture.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<PrebuiltDomain>>> listAvailableCustomPrebuiltDomainsForCultureWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull String culture) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (culture == null) {
            throw new IllegalArgumentException("Parameter culture is required and cannot be null.");
        }
        return service.listAvailableCustomPrebuiltDomainsForCulture(culture, azureRegion, azureCloud);
    }

    /**
     * Gets all the available prebuilt domains for a specific culture.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param culture Culture.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<PrebuiltDomain>> listAvailableCustomPrebuiltDomainsForCultureAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull String culture) {
        return listAvailableCustomPrebuiltDomainsForCultureWithRestResponseAsync(azureRegion, azureCloud, culture)
            .flatMap((SimpleResponse<List<PrebuiltDomain>> res) -> Mono.just(res.value()));
    }

    /**
     * package - Gets published LUIS application package in binary stream GZip format
     * Packages a published LUIS application as a GZip file to be used in the LUIS container.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param slotName The publishing slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Flux&lt;ByteBuf&gt; object if successful.
     */
    public Flux<ByteBuf> packagePublishedApplicationAsGzip(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String slotName) {
        return packagePublishedApplicationAsGzipAsync(azureRegion, azureCloud, appId, slotName).block();
    }

    /**
     * package - Gets published LUIS application package in binary stream GZip format
     * Packages a published LUIS application as a GZip file to be used in the LUIS container.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param slotName The publishing slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<StreamResponse> packagePublishedApplicationAsGzipWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String slotName) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (slotName == null) {
            throw new IllegalArgumentException("Parameter slotName is required and cannot be null.");
        }
        return service.packagePublishedApplicationAsGzip(appId, slotName, azureRegion, azureCloud);
    }

    /**
     * package - Gets published LUIS application package in binary stream GZip format
     * Packages a published LUIS application as a GZip file to be used in the LUIS container.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param slotName The publishing slot name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Flux<ByteBuf>> packagePublishedApplicationAsGzipAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String slotName) {
        return packagePublishedApplicationAsGzipWithRestResponseAsync(azureRegion, azureCloud, appId, slotName)
            .flatMap((StreamResponse res) -> Mono.just(res.value()));
    }

    /**
     * package - Gets trained LUIS application package in binary stream GZip format
     * Packages trained LUIS application as GZip file to be used in the LUIS container.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Flux&lt;ByteBuf&gt; object if successful.
     */
    public Flux<ByteBuf> packageTrainedApplicationAsGzip(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId) {
        return packageTrainedApplicationAsGzipAsync(azureRegion, azureCloud, appId, versionId).block();
    }

    /**
     * package - Gets trained LUIS application package in binary stream GZip format
     * Packages trained LUIS application as GZip file to be used in the LUIS container.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<StreamResponse> packageTrainedApplicationAsGzipWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        return service.packageTrainedApplicationAsGzip(appId, versionId, azureRegion, azureCloud);
    }

    /**
     * package - Gets trained LUIS application package in binary stream GZip format
     * Packages trained LUIS application as GZip file to be used in the LUIS container.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Flux<ByteBuf>> packageTrainedApplicationAsGzipAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId) {
        return packageTrainedApplicationAsGzipWithRestResponseAsync(azureRegion, azureCloud, appId, versionId)
            .flatMap((StreamResponse res) -> Mono.just(res.value()));
    }
}
