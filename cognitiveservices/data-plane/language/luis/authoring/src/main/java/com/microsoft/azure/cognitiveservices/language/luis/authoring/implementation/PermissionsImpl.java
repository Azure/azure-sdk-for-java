/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.language.luis.authoring.implementation;

import com.azure.common.annotations.BodyParam;
import com.azure.common.annotations.DELETE;
import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.GET;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.PathParam;
import com.azure.common.annotations.POST;
import com.azure.common.annotations.PUT;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.implementation.RestProxy;
import com.azure.common.implementation.Validator;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.Permissions;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AzureClouds;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AzureRegions;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CollaboratorsArray;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UserAccessList;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UserCollaborator;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Permissions.
 */
public final class PermissionsImpl implements Permissions {
    /**
     * The proxy service used to perform REST calls.
     */
    private PermissionsService service;

    /**
     * The service client containing this operation class.
     */
    private LUISAuthoringClientImpl client;

    /**
     * Initializes an instance of PermissionsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public PermissionsImpl(LUISAuthoringClientImpl client) {
        this.service = RestProxy.create(PermissionsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Permissions to be used by
     * the proxy service to perform REST calls.
     */
    @Host("http://{AzureRegion}.api.cognitive.microsoft.{AzureCloud}/luis/api/v2.0")
    private interface PermissionsService {
        @GET("apps/{appId}/permissions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<UserAccessList>> list(@PathParam("appId") UUID appId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud);

        @POST("apps/{appId}/permissions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<OperationStatus>> add(@PathParam("appId") UUID appId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @BodyParam("application/json; charset=utf-8") UserCollaborator userToAdd);

        @DELETE("apps/{appId}/permissions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<OperationStatus>> delete(@PathParam("appId") UUID appId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @BodyParam("application/json; charset=utf-8") UserCollaborator userToDelete);

        @PUT("apps/{appId}/permissions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<OperationStatus>> update(@PathParam("appId") UUID appId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @BodyParam("application/json; charset=utf-8") CollaboratorsArray collaborators);
    }

    /**
     * Gets the list of user emails that have permissions to access your application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the UserAccessList object if successful.
     */
    public UserAccessList list(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return listAsync(azureRegion, azureCloud, appId).block();
    }

    /**
     * Gets the list of user emails that have permissions to access your application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<UserAccessList>> listWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        return service.list(appId, azureRegion, azureCloud);
    }

    /**
     * Gets the list of user emails that have permissions to access your application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<UserAccessList> listAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return listWithRestResponseAsync(azureRegion, azureCloud, appId)
            .flatMap((SimpleResponse<UserAccessList> res) -> Mono.just(res.value()));
    }

    /**
     * Adds a user to the allowed list of users to access this LUIS application. Users are added using their email address.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OperationStatus object if successful.
     */
    public OperationStatus add(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return addAsync(azureRegion, azureCloud, appId).block();
    }

    /**
     * Adds a user to the allowed list of users to access this LUIS application. Users are added using their email address.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OperationStatus>> addWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        UserCollaborator userToAdd = new UserCollaborator();
        userToAdd.withEmail(null);
        return service.add(appId, azureRegion, azureCloud, userToAdd);
    }

    /**
     * Adds a user to the allowed list of users to access this LUIS application. Users are added using their email address.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OperationStatus> addAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return addWithRestResponseAsync(azureRegion, azureCloud, appId)
            .flatMap((SimpleResponse<OperationStatus> res) -> Mono.just(res.value()));
    }

    /**
     * Adds a user to the allowed list of users to access this LUIS application. Users are added using their email address.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param email The email address of the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OperationStatus object if successful.
     */
    public OperationStatus add(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, String email) {
        return addAsync(azureRegion, azureCloud, appId, email).block();
    }

    /**
     * Adds a user to the allowed list of users to access this LUIS application. Users are added using their email address.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param email The email address of the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OperationStatus>> addWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, String email) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        UserCollaborator userToAdd = new UserCollaborator();
        userToAdd.withEmail(email);
        return service.add(appId, azureRegion, azureCloud, userToAdd);
    }

    /**
     * Adds a user to the allowed list of users to access this LUIS application. Users are added using their email address.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param email The email address of the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OperationStatus> addAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, String email) {
        return addWithRestResponseAsync(azureRegion, azureCloud, appId, email)
            .flatMap((SimpleResponse<OperationStatus> res) -> Mono.just(res.value()));
    }

    /**
     * Removes a user from the allowed list of users to access this LUIS application. Users are removed using their email address.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OperationStatus object if successful.
     */
    public OperationStatus delete(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return deleteAsync(azureRegion, azureCloud, appId).block();
    }

    /**
     * Removes a user from the allowed list of users to access this LUIS application. Users are removed using their email address.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OperationStatus>> deleteWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        UserCollaborator userToDelete = new UserCollaborator();
        userToDelete.withEmail(null);
        return service.delete(appId, azureRegion, azureCloud, userToDelete);
    }

    /**
     * Removes a user from the allowed list of users to access this LUIS application. Users are removed using their email address.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OperationStatus> deleteAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return deleteWithRestResponseAsync(azureRegion, azureCloud, appId)
            .flatMap((SimpleResponse<OperationStatus> res) -> Mono.just(res.value()));
    }

    /**
     * Removes a user from the allowed list of users to access this LUIS application. Users are removed using their email address.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param email The email address of the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OperationStatus object if successful.
     */
    public OperationStatus delete(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, String email) {
        return deleteAsync(azureRegion, azureCloud, appId, email).block();
    }

    /**
     * Removes a user from the allowed list of users to access this LUIS application. Users are removed using their email address.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param email The email address of the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OperationStatus>> deleteWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, String email) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        UserCollaborator userToDelete = new UserCollaborator();
        userToDelete.withEmail(email);
        return service.delete(appId, azureRegion, azureCloud, userToDelete);
    }

    /**
     * Removes a user from the allowed list of users to access this LUIS application. Users are removed using their email address.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param email The email address of the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OperationStatus> deleteAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, String email) {
        return deleteWithRestResponseAsync(azureRegion, azureCloud, appId, email)
            .flatMap((SimpleResponse<OperationStatus> res) -> Mono.just(res.value()));
    }

    /**
     * Replaces the current user access list with the new list sent in the body. If an empty list is sent, all access to other users will be removed.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OperationStatus object if successful.
     */
    public OperationStatus update(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return updateAsync(azureRegion, azureCloud, appId).block();
    }

    /**
     * Replaces the current user access list with the new list sent in the body. If an empty list is sent, all access to other users will be removed.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OperationStatus>> updateWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        CollaboratorsArray collaborators = new CollaboratorsArray();
        collaborators.withEmails(null);
        return service.update(appId, azureRegion, azureCloud, collaborators);
    }

    /**
     * Replaces the current user access list with the new list sent in the body. If an empty list is sent, all access to other users will be removed.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OperationStatus> updateAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId) {
        return updateWithRestResponseAsync(azureRegion, azureCloud, appId)
            .flatMap((SimpleResponse<OperationStatus> res) -> Mono.just(res.value()));
    }

    /**
     * Replaces the current user access list with the new list sent in the body. If an empty list is sent, all access to other users will be removed.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param emails The email address of the users.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OperationStatus object if successful.
     */
    public OperationStatus update(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, List<String> emails) {
        return updateAsync(azureRegion, azureCloud, appId, emails).block();
    }

    /**
     * Replaces the current user access list with the new list sent in the body. If an empty list is sent, all access to other users will be removed.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param emails The email address of the users.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OperationStatus>> updateWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, List<String> emails) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        Validator.validate(emails);
        CollaboratorsArray collaborators = new CollaboratorsArray();
        collaborators.withEmails(emails);
        return service.update(appId, azureRegion, azureCloud, collaborators);
    }

    /**
     * Replaces the current user access list with the new list sent in the body. If an empty list is sent, all access to other users will be removed.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param emails The email address of the users.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OperationStatus> updateAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, List<String> emails) {
        return updateWithRestResponseAsync(azureRegion, azureCloud, appId, emails)
            .flatMap((SimpleResponse<OperationStatus> res) -> Mono.just(res.value()));
    }
}
