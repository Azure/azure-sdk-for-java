/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.language.luis.authoring.implementation;

import com.azure.common.annotations.BodyParam;
import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.GET;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.PathParam;
import com.azure.common.annotations.PUT;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.implementation.RestProxy;
import com.azure.common.implementation.Validator;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.Settings;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AppVersionSettingObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AzureClouds;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AzureRegions;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Settings.
 */
public final class SettingsImpl implements Settings {
    /**
     * The proxy service used to perform REST calls.
     */
    private SettingsService service;

    /**
     * The service client containing this operation class.
     */
    private LUISAuthoringClientImpl client;

    /**
     * Initializes an instance of SettingsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public SettingsImpl(LUISAuthoringClientImpl client) {
        this.service = RestProxy.create(SettingsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Settings to be used by the
     * proxy service to perform REST calls.
     */
    @Host("http://{AzureRegion}.api.cognitive.microsoft.{AzureCloud}/luis/api/v2.0")
    private interface SettingsService {
        @GET("apps/{appId}/versions/{versionId}/settings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<List<AppVersionSettingObject>>> list(@PathParam("appId") UUID appId, @PathParam("versionId") String versionId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud);

        @PUT("apps/{appId}/versions/{versionId}/settings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<OperationStatus>> update(@PathParam("appId") UUID appId, @PathParam("versionId") String versionId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @BodyParam("application/json; charset=utf-8") List<AppVersionSettingObject> listOfAppVersionSettingObject);
    }

    /**
     * Gets the settings in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;AppVersionSettingObject&gt; object if successful.
     */
    public List<AppVersionSettingObject> list(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId) {
        return listAsync(azureRegion, azureCloud, appId, versionId).block();
    }

    /**
     * Gets the settings in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<AppVersionSettingObject>>> listWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        return service.list(appId, versionId, azureRegion, azureCloud);
    }

    /**
     * Gets the settings in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<AppVersionSettingObject>> listAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId) {
        return listWithRestResponseAsync(azureRegion, azureCloud, appId, versionId)
            .flatMap((SimpleResponse<List<AppVersionSettingObject>> res) -> Mono.just(res.value()));
    }

    /**
     * Updates the settings in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listOfAppVersionSettingObject A list of the updated application version settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OperationStatus object if successful.
     */
    public OperationStatus update(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull List<AppVersionSettingObject> listOfAppVersionSettingObject) {
        return updateAsync(azureRegion, azureCloud, appId, versionId, listOfAppVersionSettingObject).block();
    }

    /**
     * Updates the settings in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listOfAppVersionSettingObject A list of the updated application version settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OperationStatus>> updateWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull List<AppVersionSettingObject> listOfAppVersionSettingObject) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (listOfAppVersionSettingObject == null) {
            throw new IllegalArgumentException("Parameter listOfAppVersionSettingObject is required and cannot be null.");
        }
        Validator.validate(listOfAppVersionSettingObject);
        List<AppVersionSettingObject> listOfAppVersionSettingObjectConverted = listOfAppVersionSettingObject;
        return service.update(appId, versionId, azureRegion, azureCloud, listOfAppVersionSettingObjectConverted);
    }

    /**
     * Updates the settings in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listOfAppVersionSettingObject A list of the updated application version settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OperationStatus> updateAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull List<AppVersionSettingObject> listOfAppVersionSettingObject) {
        return updateWithRestResponseAsync(azureRegion, azureCloud, appId, versionId, listOfAppVersionSettingObject)
            .flatMap((SimpleResponse<OperationStatus> res) -> Mono.just(res.value()));
    }
}
