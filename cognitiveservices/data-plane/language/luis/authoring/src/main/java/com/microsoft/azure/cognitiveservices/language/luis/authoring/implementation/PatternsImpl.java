/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.language.luis.authoring.implementation;

import com.azure.common.annotations.BodyParam;
import com.azure.common.annotations.DELETE;
import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.GET;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.PathParam;
import com.azure.common.annotations.POST;
import com.azure.common.annotations.PUT;
import com.azure.common.annotations.QueryParam;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.implementation.RestProxy;
import com.azure.common.implementation.Validator;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AzureClouds;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AzureRegions;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleCreateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleUpdateObject;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Patterns.
 */
public final class PatternsImpl implements Patterns {
    /**
     * The proxy service used to perform REST calls.
     */
    private PatternsService service;

    /**
     * The service client containing this operation class.
     */
    private LUISAuthoringClientImpl client;

    /**
     * Initializes an instance of PatternsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public PatternsImpl(LUISAuthoringClientImpl client) {
        this.service = RestProxy.create(PatternsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Patterns to be used by the
     * proxy service to perform REST calls.
     */
    @Host("http://{AzureRegion}.api.cognitive.microsoft.{AzureCloud}/luis/api/v2.0")
    private interface PatternsService {
        @POST("apps/{appId}/versions/{versionId}/patternrule")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PatternRuleInfo>> addPattern(@PathParam("appId") UUID appId, @PathParam("versionId") String versionId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @BodyParam("application/json; charset=utf-8") PatternRuleCreateObject pattern);

        @GET("apps/{appId}/versions/{versionId}/patternrules")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<List<PatternRuleInfo>>> listPatterns(@PathParam("appId") UUID appId, @PathParam("versionId") String versionId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @QueryParam("skip") Integer skip, @QueryParam("take") Integer take);

        @PUT("apps/{appId}/versions/{versionId}/patternrules")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<List<PatternRuleInfo>>> updatePatterns(@PathParam("appId") UUID appId, @PathParam("versionId") String versionId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @BodyParam("application/json; charset=utf-8") List<PatternRuleUpdateObject> patterns);

        @POST("apps/{appId}/versions/{versionId}/patternrules")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<List<PatternRuleInfo>>> batchAddPatterns(@PathParam("appId") UUID appId, @PathParam("versionId") String versionId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @BodyParam("application/json; charset=utf-8") List<PatternRuleCreateObject> patterns);

        @DELETE("apps/{appId}/versions/{versionId}/patternrules")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<OperationStatus>> deletePatterns(@PathParam("appId") UUID appId, @PathParam("versionId") String versionId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @BodyParam("application/json; charset=utf-8") List<UUID> patternIds);

        @PUT("apps/{appId}/versions/{versionId}/patternrules/{patternId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<PatternRuleInfo>> updatePattern(@PathParam("appId") UUID appId, @PathParam("versionId") String versionId, @PathParam("patternId") UUID patternId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @BodyParam("application/json; charset=utf-8") PatternRuleUpdateObject pattern);

        @DELETE("apps/{appId}/versions/{versionId}/patternrules/{patternId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<OperationStatus>> deletePattern(@PathParam("appId") UUID appId, @PathParam("versionId") String versionId, @PathParam("patternId") UUID patternId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud);

        @GET("apps/{appId}/versions/{versionId}/intents/{intentId}/patternrules")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<List<PatternRuleInfo>>> listIntentPatterns(@PathParam("appId") UUID appId, @PathParam("versionId") String versionId, @PathParam("intentId") UUID intentId, @HostParam("AzureRegion") AzureRegions azureRegion, @HostParam("AzureCloud") AzureClouds azureCloud, @QueryParam("skip") Integer skip, @QueryParam("take") Integer take);
    }

    /**
     * Adds a pattern to a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param pattern The input pattern.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PatternRuleInfo object if successful.
     */
    public PatternRuleInfo addPattern(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull PatternRuleCreateObject pattern) {
        return addPatternAsync(azureRegion, azureCloud, appId, versionId, pattern).block();
    }

    /**
     * Adds a pattern to a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param pattern The input pattern.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<PatternRuleInfo>> addPatternWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull PatternRuleCreateObject pattern) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (pattern == null) {
            throw new IllegalArgumentException("Parameter pattern is required and cannot be null.");
        }
        Validator.validate(pattern);
        return service.addPattern(appId, versionId, azureRegion, azureCloud, pattern);
    }

    /**
     * Adds a pattern to a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param pattern The input pattern.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<PatternRuleInfo> addPatternAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull PatternRuleCreateObject pattern) {
        return addPatternWithRestResponseAsync(azureRegion, azureCloud, appId, versionId, pattern)
            .flatMap((SimpleResponse<PatternRuleInfo> res) -> Mono.just(res.value()));
    }

    /**
     * Gets patterns in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;PatternRuleInfo&gt; object if successful.
     */
    public List<PatternRuleInfo> listPatterns(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId) {
        return listPatternsAsync(azureRegion, azureCloud, appId, versionId).block();
    }

    /**
     * Gets patterns in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<PatternRuleInfo>>> listPatternsWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        final Integer skip = 0;
        final Integer take = 100;
        return service.listPatterns(appId, versionId, azureRegion, azureCloud, skip, take);
    }

    /**
     * Gets patterns in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<PatternRuleInfo>> listPatternsAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId) {
        return listPatternsWithRestResponseAsync(azureRegion, azureCloud, appId, versionId)
            .flatMap((SimpleResponse<List<PatternRuleInfo>> res) -> Mono.just(res.value()));
    }

    /**
     * Gets patterns in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;PatternRuleInfo&gt; object if successful.
     */
    public List<PatternRuleInfo> listPatterns(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, Integer skip, Integer take) {
        return listPatternsAsync(azureRegion, azureCloud, appId, versionId, skip, take).block();
    }

    /**
     * Gets patterns in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<PatternRuleInfo>>> listPatternsWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, Integer skip, Integer take) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        return service.listPatterns(appId, versionId, azureRegion, azureCloud, skip, take);
    }

    /**
     * Gets patterns in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<PatternRuleInfo>> listPatternsAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, Integer skip, Integer take) {
        return listPatternsWithRestResponseAsync(azureRegion, azureCloud, appId, versionId, skip, take)
            .flatMap((SimpleResponse<List<PatternRuleInfo>> res) -> Mono.just(res.value()));
    }

    /**
     * Updates patterns in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param patterns An array represents the patterns.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;PatternRuleInfo&gt; object if successful.
     */
    public List<PatternRuleInfo> updatePatterns(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull List<PatternRuleUpdateObject> patterns) {
        return updatePatternsAsync(azureRegion, azureCloud, appId, versionId, patterns).block();
    }

    /**
     * Updates patterns in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param patterns An array represents the patterns.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<PatternRuleInfo>>> updatePatternsWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull List<PatternRuleUpdateObject> patterns) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (patterns == null) {
            throw new IllegalArgumentException("Parameter patterns is required and cannot be null.");
        }
        Validator.validate(patterns);
        List<PatternRuleUpdateObject> patternsConverted = patterns;
        return service.updatePatterns(appId, versionId, azureRegion, azureCloud, patternsConverted);
    }

    /**
     * Updates patterns in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param patterns An array represents the patterns.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<PatternRuleInfo>> updatePatternsAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull List<PatternRuleUpdateObject> patterns) {
        return updatePatternsWithRestResponseAsync(azureRegion, azureCloud, appId, versionId, patterns)
            .flatMap((SimpleResponse<List<PatternRuleInfo>> res) -> Mono.just(res.value()));
    }

    /**
     * Adds a batch of patterns in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param patterns A JSON array containing patterns.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;PatternRuleInfo&gt; object if successful.
     */
    public List<PatternRuleInfo> batchAddPatterns(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull List<PatternRuleCreateObject> patterns) {
        return batchAddPatternsAsync(azureRegion, azureCloud, appId, versionId, patterns).block();
    }

    /**
     * Adds a batch of patterns in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param patterns A JSON array containing patterns.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<PatternRuleInfo>>> batchAddPatternsWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull List<PatternRuleCreateObject> patterns) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (patterns == null) {
            throw new IllegalArgumentException("Parameter patterns is required and cannot be null.");
        }
        Validator.validate(patterns);
        List<PatternRuleCreateObject> patternsConverted = patterns;
        return service.batchAddPatterns(appId, versionId, azureRegion, azureCloud, patternsConverted);
    }

    /**
     * Adds a batch of patterns in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param patterns A JSON array containing patterns.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<PatternRuleInfo>> batchAddPatternsAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull List<PatternRuleCreateObject> patterns) {
        return batchAddPatternsWithRestResponseAsync(azureRegion, azureCloud, appId, versionId, patterns)
            .flatMap((SimpleResponse<List<PatternRuleInfo>> res) -> Mono.just(res.value()));
    }

    /**
     * Deletes a list of patterns in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param patternIds The patterns IDs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OperationStatus object if successful.
     */
    public OperationStatus deletePatterns(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull List<UUID> patternIds) {
        return deletePatternsAsync(azureRegion, azureCloud, appId, versionId, patternIds).block();
    }

    /**
     * Deletes a list of patterns in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param patternIds The patterns IDs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OperationStatus>> deletePatternsWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull List<UUID> patternIds) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (patternIds == null) {
            throw new IllegalArgumentException("Parameter patternIds is required and cannot be null.");
        }
        Validator.validate(patternIds);
        List<UUID> patternIdsConverted = patternIds;
        return service.deletePatterns(appId, versionId, azureRegion, azureCloud, patternIdsConverted);
    }

    /**
     * Deletes a list of patterns in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param patternIds The patterns IDs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OperationStatus> deletePatternsAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull List<UUID> patternIds) {
        return deletePatternsWithRestResponseAsync(azureRegion, azureCloud, appId, versionId, patternIds)
            .flatMap((SimpleResponse<OperationStatus> res) -> Mono.just(res.value()));
    }

    /**
     * Updates a pattern in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param patternId The pattern ID.
     * @param pattern An object representing a pattern.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PatternRuleInfo object if successful.
     */
    public PatternRuleInfo updatePattern(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull UUID patternId, @NonNull PatternRuleUpdateObject pattern) {
        return updatePatternAsync(azureRegion, azureCloud, appId, versionId, patternId, pattern).block();
    }

    /**
     * Updates a pattern in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param patternId The pattern ID.
     * @param pattern An object representing a pattern.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<PatternRuleInfo>> updatePatternWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull UUID patternId, @NonNull PatternRuleUpdateObject pattern) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (patternId == null) {
            throw new IllegalArgumentException("Parameter patternId is required and cannot be null.");
        }
        if (pattern == null) {
            throw new IllegalArgumentException("Parameter pattern is required and cannot be null.");
        }
        Validator.validate(pattern);
        return service.updatePattern(appId, versionId, patternId, azureRegion, azureCloud, pattern);
    }

    /**
     * Updates a pattern in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param patternId The pattern ID.
     * @param pattern An object representing a pattern.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<PatternRuleInfo> updatePatternAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull UUID patternId, @NonNull PatternRuleUpdateObject pattern) {
        return updatePatternWithRestResponseAsync(azureRegion, azureCloud, appId, versionId, patternId, pattern)
            .flatMap((SimpleResponse<PatternRuleInfo> res) -> Mono.just(res.value()));
    }

    /**
     * Deletes the pattern with the specified ID from a version of the application..
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param patternId The pattern ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OperationStatus object if successful.
     */
    public OperationStatus deletePattern(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull UUID patternId) {
        return deletePatternAsync(azureRegion, azureCloud, appId, versionId, patternId).block();
    }

    /**
     * Deletes the pattern with the specified ID from a version of the application..
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param patternId The pattern ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OperationStatus>> deletePatternWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull UUID patternId) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (patternId == null) {
            throw new IllegalArgumentException("Parameter patternId is required and cannot be null.");
        }
        return service.deletePattern(appId, versionId, patternId, azureRegion, azureCloud);
    }

    /**
     * Deletes the pattern with the specified ID from a version of the application..
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param patternId The pattern ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OperationStatus> deletePatternAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull UUID patternId) {
        return deletePatternWithRestResponseAsync(azureRegion, azureCloud, appId, versionId, patternId)
            .flatMap((SimpleResponse<OperationStatus> res) -> Mono.just(res.value()));
    }

    /**
     * Returns patterns for the specific intent in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;PatternRuleInfo&gt; object if successful.
     */
    public List<PatternRuleInfo> listIntentPatterns(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull UUID intentId) {
        return listIntentPatternsAsync(azureRegion, azureCloud, appId, versionId, intentId).block();
    }

    /**
     * Returns patterns for the specific intent in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<PatternRuleInfo>>> listIntentPatternsWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull UUID intentId) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (intentId == null) {
            throw new IllegalArgumentException("Parameter intentId is required and cannot be null.");
        }
        final Integer skip = 0;
        final Integer take = 100;
        return service.listIntentPatterns(appId, versionId, intentId, azureRegion, azureCloud, skip, take);
    }

    /**
     * Returns patterns for the specific intent in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<PatternRuleInfo>> listIntentPatternsAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull UUID intentId) {
        return listIntentPatternsWithRestResponseAsync(azureRegion, azureCloud, appId, versionId, intentId)
            .flatMap((SimpleResponse<List<PatternRuleInfo>> res) -> Mono.just(res.value()));
    }

    /**
     * Returns patterns for the specific intent in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;PatternRuleInfo&gt; object if successful.
     */
    public List<PatternRuleInfo> listIntentPatterns(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull UUID intentId, Integer skip, Integer take) {
        return listIntentPatternsAsync(azureRegion, azureCloud, appId, versionId, intentId, skip, take).block();
    }

    /**
     * Returns patterns for the specific intent in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<PatternRuleInfo>>> listIntentPatternsWithRestResponseAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull UUID intentId, Integer skip, Integer take) {
        if (azureRegion == null) {
            throw new IllegalArgumentException("Parameter azureRegion is required and cannot be null.");
        }
        if (azureCloud == null) {
            throw new IllegalArgumentException("Parameter azureCloud is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (intentId == null) {
            throw new IllegalArgumentException("Parameter intentId is required and cannot be null.");
        }
        return service.listIntentPatterns(appId, versionId, intentId, azureRegion, azureCloud, skip, take);
    }

    /**
     * Returns patterns for the specific intent in a version of the application.
     *
     * @param azureRegion Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth', 'virginia'.
     * @param azureCloud Supported Azure Clouds for Cognitive Services endpoints. Possible values include: 'com', 'us'.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<PatternRuleInfo>> listIntentPatternsAsync(@NonNull AzureRegions azureRegion, @NonNull AzureClouds azureCloud, @NonNull UUID appId, @NonNull String versionId, @NonNull UUID intentId, Integer skip, Integer take) {
        return listIntentPatternsWithRestResponseAsync(azureRegion, azureCloud, appId, versionId, intentId, skip, take)
            .flatMap((SimpleResponse<List<PatternRuleInfo>> res) -> Mono.just(res.value()));
    }
}
