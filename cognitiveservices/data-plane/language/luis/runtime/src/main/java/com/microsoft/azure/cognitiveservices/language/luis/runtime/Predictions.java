/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.language.luis.runtime;

import com.azure.common.http.rest.SimpleResponse;
import com.microsoft.azure.cognitiveservices.language.luis.runtime.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.language.luis.runtime.models.LuisResult;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Predictions.
 */
public interface Predictions {
    /**
     * Gets predictions for a given utterance, in the form of intents and entities. The current maximum query size is 500 characters.
     *
     * @param appId The LUIS application ID (Guid).
     * @param query The utterance to predict.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the LuisResult object if successful.
     */
    LuisResult resolve(@NonNull String appId, @NonNull String query);

    /**
     * Gets predictions for a given utterance, in the form of intents and entities. The current maximum query size is 500 characters.
     *
     * @param appId The LUIS application ID (Guid).
     * @param query The utterance to predict.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<LuisResult>> resolveWithRestResponseAsync(@NonNull String appId, @NonNull String query);

    /**
     * Gets predictions for a given utterance, in the form of intents and entities. The current maximum query size is 500 characters.
     *
     * @param appId The LUIS application ID (Guid).
     * @param query The utterance to predict.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<LuisResult> resolveAsync(@NonNull String appId, @NonNull String query);

    /**
     * Gets predictions for a given utterance, in the form of intents and entities. The current maximum query size is 500 characters.
     *
     * @param appId The LUIS application ID (Guid).
     * @param query The utterance to predict.
     * @param timezoneOffset The timezone offset for the location of the request.
     * @param verbose If true, return all intents instead of just the top scoring intent.
     * @param staging Use the staging endpoint slot.
     * @param spellCheck Enable spell checking.
     * @param bingSpellCheckSubscriptionKey The subscription key to use when enabling bing spell check.
     * @param log Log query (default is true).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the LuisResult object if successful.
     */
    LuisResult resolve(@NonNull String appId, @NonNull String query, Double timezoneOffset, Boolean verbose, Boolean staging, Boolean spellCheck, String bingSpellCheckSubscriptionKey, Boolean log);

    /**
     * Gets predictions for a given utterance, in the form of intents and entities. The current maximum query size is 500 characters.
     *
     * @param appId The LUIS application ID (Guid).
     * @param query The utterance to predict.
     * @param timezoneOffset The timezone offset for the location of the request.
     * @param verbose If true, return all intents instead of just the top scoring intent.
     * @param staging Use the staging endpoint slot.
     * @param spellCheck Enable spell checking.
     * @param bingSpellCheckSubscriptionKey The subscription key to use when enabling bing spell check.
     * @param log Log query (default is true).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<LuisResult>> resolveWithRestResponseAsync(@NonNull String appId, @NonNull String query, Double timezoneOffset, Boolean verbose, Boolean staging, Boolean spellCheck, String bingSpellCheckSubscriptionKey, Boolean log);

    /**
     * Gets predictions for a given utterance, in the form of intents and entities. The current maximum query size is 500 characters.
     *
     * @param appId The LUIS application ID (Guid).
     * @param query The utterance to predict.
     * @param timezoneOffset The timezone offset for the location of the request.
     * @param verbose If true, return all intents instead of just the top scoring intent.
     * @param staging Use the staging endpoint slot.
     * @param spellCheck Enable spell checking.
     * @param bingSpellCheckSubscriptionKey The subscription key to use when enabling bing spell check.
     * @param log Log query (default is true).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<LuisResult> resolveAsync(@NonNull String appId, @NonNull String query, Double timezoneOffset, Boolean verbose, Boolean staging, Boolean spellCheck, String bingSpellCheckSubscriptionKey, Boolean log);
}
