/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.language.spellcheck.implementation;

import com.azure.common.ServiceClient;
import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.FormParam;
import com.azure.common.annotations.HeaderParam;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.POST;
import com.azure.common.annotations.QueryParam;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.http.HttpPipeline;
import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.implementation.RestProxy;
import com.azure.common.implementation.Validator;
import com.microsoft.azure.cognitiveservices.language.spellcheck.SpellCheckClient;
import com.microsoft.azure.cognitiveservices.language.spellcheck.models.ActionType;
import com.microsoft.azure.cognitiveservices.language.spellcheck.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.language.spellcheck.models.SpellCheck;
import com.microsoft.azure.cognitiveservices.language.spellcheck.models.SpellCheckOptionalParameters;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * Initializes a new instance of the SpellCheckClient type.
 */
public final class SpellCheckClientImpl extends ServiceClient implements SpellCheckClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private SpellCheckClientService service;

    /**
     * Supported Cognitive Services endpoints (protocol and hostname, for example: "https://westus.api.cognitive.microsoft.com", "https://api.cognitive.microsoft.com").
     */
    private String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example: "https://westus.api.cognitive.microsoft.com", "https://api.cognitive.microsoft.com").
     *
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Sets Supported Cognitive Services endpoints (protocol and hostname, for example: "https://westus.api.cognitive.microsoft.com", "https://api.cognitive.microsoft.com").
     *
     * @param endpoint the endpoint value.
     * @return the service client itself.
     */
    public SpellCheckClientImpl withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Initializes an instance of SpellCheckClient client.
     */
    public SpellCheckClientImpl() {
        this(RestProxy.createDefaultPipeline());
    }

    /**
     * Initializes an instance of SpellCheckClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     */
    public SpellCheckClientImpl(@NonNull HttpPipeline httpPipeline) {
        super(httpPipeline);
        this.endpoint = "https://api.cognitive.microsoft.com";
        this.service = RestProxy.create(SpellCheckClientService.class, this);
    }

    /**
     * The interface defining all the services for SpellCheckClient to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{Endpoint}/bing/v7.0")
    private interface SpellCheckClientService {
        // @Multipart not supported by RestProxy
        @POST("spellcheck")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<SpellCheck>> spellChecker(@HostParam("Endpoint") String endpoint, @HeaderParam("X-BingApis-SDK") String xBingApisSDK, @FormParam("Mode") String mode, @FormParam("PreContextText") String preContextText, @FormParam("PostContextText") String postContextText, @FormParam("Text") String text, @HeaderParam("Accept-Language") String acceptLanguage, @HeaderParam("Pragma") String pragma, @HeaderParam("User-Agent") String userAgent, @HeaderParam("X-MSEdge-ClientID") String clientId, @HeaderParam("X-MSEdge-ClientIP") String clientIp, @HeaderParam("X-Search-Location") String location, @QueryParam("ActionType") ActionType actionType, @QueryParam("AppName") String appName, @QueryParam("cc") String countryCode, @QueryParam("ClientMachineName") String clientMachineName, @QueryParam("DocId") String docId, @QueryParam("mkt") String market, @QueryParam("SessionId") String sessionId, @QueryParam("SetLang") String setLang, @QueryParam("UserId") String userId);
    }

    /**
     * The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.
     *
     * @param text The text string to check for spelling and grammar errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. Because of the query string length limit, you'll typically use a POST request unless you're checking only short strings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SpellCheck object if successful.
     */
    public SpellCheck spellChecker(@NonNull String text) {
        return spellCheckerAsync(text).block();
    }

    /**
     * The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.
     *
     * @param text The text string to check for spelling and grammar errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. Because of the query string length limit, you'll typically use a POST request unless you're checking only short strings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<SpellCheck>> spellCheckerWithRestResponseAsync(@NonNull String text) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (text == null) {
            throw new IllegalArgumentException("Parameter text is required and cannot be null.");
        }
        final String xBingApisSDK = "true";
        final String mode = null;
        final String preContextText = null;
        final String postContextText = null;
        final String acceptLanguage = null;
        final String pragma = null;
        final String userAgent = null;
        final String clientId = null;
        final String clientIp = null;
        final String location = null;
        final ActionType actionType = null;
        final String appName = null;
        final String countryCode = null;
        final String clientMachineName = null;
        final String docId = null;
        final String market = null;
        final String sessionId = null;
        final String setLang = null;
        final String userId = null;
        return service.spellChecker(this.endpoint(), xBingApisSDK, mode, preContextText, postContextText, text, acceptLanguage, pragma, userAgent, clientId, clientIp, location, actionType, appName, countryCode, clientMachineName, docId, market, sessionId, setLang, userId);
    }

    /**
     * The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.
     *
     * @param text The text string to check for spelling and grammar errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. Because of the query string length limit, you'll typically use a POST request unless you're checking only short strings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SpellCheck> spellCheckerAsync(@NonNull String text) {
        return spellCheckerWithRestResponseAsync(text)
            .flatMap((SimpleResponse<SpellCheck> res) -> Mono.just(res.value()));
    }

    /**
     * The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.
     *
     * @param text The text string to check for spelling and grammar errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. Because of the query string length limit, you'll typically use a POST request unless you're checking only short strings.
     * @param mode The type of spelling and grammar checks to perform. The following are the possible values (the values are case insensitive). The default is Proof. 1) Proof—Finds most spelling and grammar mistakes. 2) Spell—Finds most spelling mistakes but does not find some of the grammar errors that Proof catches (for example, capitalization and repeated words). Possible values include: 'proof', 'spell'.
     * @param preContextText A string that gives context to the text string. For example, the text string petal is valid. However, if you set preContextText to bike, the context changes and the text string becomes not valid. In this case, the API suggests that you change petal to pedal (as in bike pedal). This text is not checked for grammar or spelling errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request.
     * @param postContextText A string that gives context to the text string. For example, the text string read is valid. However, if you set postContextText to carpet, the context changes and the text string becomes not valid. In this case, the API suggests that you change read to red (as in red carpet). This text is not checked for grammar or spelling errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request.
     * @param spellCheckOptionalParameters Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SpellCheck object if successful.
     */
    public SpellCheck spellChecker(@NonNull String text, String mode, String preContextText, String postContextText, SpellCheckOptionalParameters spellCheckOptionalParameters) {
        return spellCheckerAsync(text, mode, preContextText, postContextText, spellCheckOptionalParameters).block();
    }

    /**
     * The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.
     *
     * @param text The text string to check for spelling and grammar errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. Because of the query string length limit, you'll typically use a POST request unless you're checking only short strings.
     * @param mode The type of spelling and grammar checks to perform. The following are the possible values (the values are case insensitive). The default is Proof. 1) Proof—Finds most spelling and grammar mistakes. 2) Spell—Finds most spelling mistakes but does not find some of the grammar errors that Proof catches (for example, capitalization and repeated words). Possible values include: 'proof', 'spell'.
     * @param preContextText A string that gives context to the text string. For example, the text string petal is valid. However, if you set preContextText to bike, the context changes and the text string becomes not valid. In this case, the API suggests that you change petal to pedal (as in bike pedal). This text is not checked for grammar or spelling errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request.
     * @param postContextText A string that gives context to the text string. For example, the text string read is valid. However, if you set postContextText to carpet, the context changes and the text string becomes not valid. In this case, the API suggests that you change read to red (as in red carpet). This text is not checked for grammar or spelling errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request.
     * @param spellCheckOptionalParameters Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<SpellCheck>> spellCheckerWithRestResponseAsync(@NonNull String text, String mode, String preContextText, String postContextText, SpellCheckOptionalParameters spellCheckOptionalParameters) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (text == null) {
            throw new IllegalArgumentException("Parameter text is required and cannot be null.");
        }
        Validator.validate(spellCheckOptionalParameters);
        final String xBingApisSDK = "true";
        String acceptLanguage = null;
        if (spellCheckOptionalParameters != null) {
            acceptLanguage = spellCheckOptionalParameters.acceptLanguage();
        }
        String pragma = null;
        if (spellCheckOptionalParameters != null) {
            pragma = spellCheckOptionalParameters.pragma();
        }
        String userAgent = null;
        if (spellCheckOptionalParameters != null) {
            userAgent = spellCheckOptionalParameters.userAgent();
        }
        String clientId = null;
        if (spellCheckOptionalParameters != null) {
            clientId = spellCheckOptionalParameters.clientId();
        }
        String clientIp = null;
        if (spellCheckOptionalParameters != null) {
            clientIp = spellCheckOptionalParameters.clientIp();
        }
        String location = null;
        if (spellCheckOptionalParameters != null) {
            location = spellCheckOptionalParameters.location();
        }
        ActionType actionType = null;
        if (spellCheckOptionalParameters != null) {
            actionType = spellCheckOptionalParameters.actionType();
        }
        String appName = null;
        if (spellCheckOptionalParameters != null) {
            appName = spellCheckOptionalParameters.appName();
        }
        String countryCode = null;
        if (spellCheckOptionalParameters != null) {
            countryCode = spellCheckOptionalParameters.countryCode();
        }
        String clientMachineName = null;
        if (spellCheckOptionalParameters != null) {
            clientMachineName = spellCheckOptionalParameters.clientMachineName();
        }
        String docId = null;
        if (spellCheckOptionalParameters != null) {
            docId = spellCheckOptionalParameters.docId();
        }
        String market = null;
        if (spellCheckOptionalParameters != null) {
            market = spellCheckOptionalParameters.market();
        }
        String sessionId = null;
        if (spellCheckOptionalParameters != null) {
            sessionId = spellCheckOptionalParameters.sessionId();
        }
        String setLang = null;
        if (spellCheckOptionalParameters != null) {
            setLang = spellCheckOptionalParameters.setLang();
        }
        String userId = null;
        if (spellCheckOptionalParameters != null) {
            userId = spellCheckOptionalParameters.userId();
        }
        return service.spellChecker(this.endpoint(), xBingApisSDK, mode, preContextText, postContextText, text, acceptLanguage, pragma, userAgent, clientId, clientIp, location, actionType, appName, countryCode, clientMachineName, docId, market, sessionId, setLang, userId);
    }

    /**
     * The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.
     *
     * @param text The text string to check for spelling and grammar errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. Because of the query string length limit, you'll typically use a POST request unless you're checking only short strings.
     * @param mode The type of spelling and grammar checks to perform. The following are the possible values (the values are case insensitive). The default is Proof. 1) Proof—Finds most spelling and grammar mistakes. 2) Spell—Finds most spelling mistakes but does not find some of the grammar errors that Proof catches (for example, capitalization and repeated words). Possible values include: 'proof', 'spell'.
     * @param preContextText A string that gives context to the text string. For example, the text string petal is valid. However, if you set preContextText to bike, the context changes and the text string becomes not valid. In this case, the API suggests that you change petal to pedal (as in bike pedal). This text is not checked for grammar or spelling errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request.
     * @param postContextText A string that gives context to the text string. For example, the text string read is valid. However, if you set postContextText to carpet, the context changes and the text string becomes not valid. In this case, the API suggests that you change read to red (as in red carpet). This text is not checked for grammar or spelling errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request.
     * @param spellCheckOptionalParameters Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SpellCheck> spellCheckerAsync(@NonNull String text, String mode, String preContextText, String postContextText, SpellCheckOptionalParameters spellCheckOptionalParameters) {
        return spellCheckerWithRestResponseAsync(text, mode, preContextText, postContextText, spellCheckOptionalParameters)
            .flatMap((SimpleResponse<SpellCheck> res) -> Mono.just(res.value()));
    }
}
