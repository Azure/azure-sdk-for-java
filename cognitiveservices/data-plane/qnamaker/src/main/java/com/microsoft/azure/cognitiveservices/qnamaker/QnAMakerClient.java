/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.qnamaker;

import com.microsoft.azure.AzureClient;
import com.microsoft.azure.cognitiveservices.qnamaker.models.AlterationsDTO;
import com.microsoft.azure.cognitiveservices.qnamaker.models.CreateKbDTO;
import com.microsoft.azure.cognitiveservices.qnamaker.models.EndpointKeysDTO;
import com.microsoft.azure.cognitiveservices.qnamaker.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.qnamaker.models.GetOperationDetailsHeaders;
import com.microsoft.azure.cognitiveservices.qnamaker.models.KnowledgebaseDTO;
import com.microsoft.azure.cognitiveservices.qnamaker.models.KnowledgebasesDTO;
import com.microsoft.azure.cognitiveservices.qnamaker.models.Operation;
import com.microsoft.azure.cognitiveservices.qnamaker.models.QnADocumentsDTO;
import com.microsoft.azure.cognitiveservices.qnamaker.models.QnADTO;
import com.microsoft.azure.cognitiveservices.qnamaker.models.UpdateKbOperationDTO;
import com.microsoft.azure.cognitiveservices.qnamaker.models.UpdateKnowledgebaseHeaders;
import com.microsoft.azure.cognitiveservices.qnamaker.models.WordAlterationsDTO;
import com.microsoft.rest.RestClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import java.io.IOException;
import java.util.List;
import rx.Observable;

/**
 * The interface for QnAMakerClient class.
 */
public interface QnAMakerClient {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * Gets the {@link AzureClient} used for long running operations.
     * @return the azure client;
     */
    AzureClient getAzureClient();

    /**
     * Gets the User-Agent header for the client.
     *
     * @return the user agent string.
     */
    String userAgent();

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com)..
     *
     * @return the endpoint value.
     */
    String endpoint();

    /**
     * Sets Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com)..
     *
     * @param endpoint the endpoint value.
     * @return the service client itself
     */
    QnAMakerClient withEndpoint(String endpoint);

    /**
     * Gets The preferred language for the response..
     *
     * @return the acceptLanguage value.
     */
    String acceptLanguage();

    /**
     * Sets The preferred language for the response..
     *
     * @param acceptLanguage the acceptLanguage value.
     * @return the service client itself
     */
    QnAMakerClient withAcceptLanguage(String acceptLanguage);

    /**
     * Gets The retry timeout in seconds for Long Running Operations. Default value is 30..
     *
     * @return the longRunningOperationRetryTimeout value.
     */
    int longRunningOperationRetryTimeout();

    /**
     * Sets The retry timeout in seconds for Long Running Operations. Default value is 30..
     *
     * @param longRunningOperationRetryTimeout the longRunningOperationRetryTimeout value.
     * @return the service client itself
     */
    QnAMakerClient withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout);

    /**
     * Gets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true..
     *
     * @return the generateClientRequestId value.
     */
    boolean generateClientRequestId();

    /**
     * Sets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true..
     *
     * @param generateClientRequestId the generateClientRequestId value.
     * @return the service client itself
     */
    QnAMakerClient withGenerateClientRequestId(boolean generateClientRequestId);

    /**
     * Gets endpoint keys for an endpoint.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EndpointKeysDTO object if successful.
     */
    EndpointKeysDTO getEndpointKeys();

    /**
     * Gets endpoint keys for an endpoint.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EndpointKeysDTO> getEndpointKeysAsync(final ServiceCallback<EndpointKeysDTO> serviceCallback);

    /**
     * Gets endpoint keys for an endpoint.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointKeysDTO object
     */
    Observable<EndpointKeysDTO> getEndpointKeysAsync();

    /**
     * Gets endpoint keys for an endpoint.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointKeysDTO object
     */
    Observable<ServiceResponse<EndpointKeysDTO>> getEndpointKeysWithServiceResponseAsync();

    /**
     * Re-generates an endpoint key.
     *
     * @param keyType type of Key
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EndpointKeysDTO object if successful.
     */
    EndpointKeysDTO refreshEndpointKeys(String keyType);

    /**
     * Re-generates an endpoint key.
     *
     * @param keyType type of Key
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EndpointKeysDTO> refreshEndpointKeysAsync(String keyType, final ServiceCallback<EndpointKeysDTO> serviceCallback);

    /**
     * Re-generates an endpoint key.
     *
     * @param keyType type of Key
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointKeysDTO object
     */
    Observable<EndpointKeysDTO> refreshEndpointKeysAsync(String keyType);

    /**
     * Re-generates an endpoint key.
     *
     * @param keyType type of Key
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointKeysDTO object
     */
    Observable<ServiceResponse<EndpointKeysDTO>> refreshEndpointKeysWithServiceResponseAsync(String keyType);

    /**
     * Download alterations from runtime.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WordAlterationsDTO object if successful.
     */
    WordAlterationsDTO downloadAlterations();

    /**
     * Download alterations from runtime.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WordAlterationsDTO> downloadAlterationsAsync(final ServiceCallback<WordAlterationsDTO> serviceCallback);

    /**
     * Download alterations from runtime.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WordAlterationsDTO object
     */
    Observable<WordAlterationsDTO> downloadAlterationsAsync();

    /**
     * Download alterations from runtime.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WordAlterationsDTO object
     */
    Observable<ServiceResponse<WordAlterationsDTO>> downloadAlterationsWithServiceResponseAsync();

    /**
     * Replace alterations data.
     *
     * @param wordAlterations Collection of word alterations.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void replaceAlterations(List<AlterationsDTO> wordAlterations);

    /**
     * Replace alterations data.
     *
     * @param wordAlterations Collection of word alterations.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> replaceAlterationsAsync(List<AlterationsDTO> wordAlterations, final ServiceCallback<Void> serviceCallback);

    /**
     * Replace alterations data.
     *
     * @param wordAlterations Collection of word alterations.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> replaceAlterationsAsync(List<AlterationsDTO> wordAlterations);

    /**
     * Replace alterations data.
     *
     * @param wordAlterations Collection of word alterations.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> replaceAlterationsWithServiceResponseAsync(List<AlterationsDTO> wordAlterations);

    /**
     * Gets all knowledgebases for a user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the KnowledgebasesDTO object if successful.
     */
    KnowledgebasesDTO getKnowledgebasesForUser();

    /**
     * Gets all knowledgebases for a user.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<KnowledgebasesDTO> getKnowledgebasesForUserAsync(final ServiceCallback<KnowledgebasesDTO> serviceCallback);

    /**
     * Gets all knowledgebases for a user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the KnowledgebasesDTO object
     */
    Observable<KnowledgebasesDTO> getKnowledgebasesForUserAsync();

    /**
     * Gets all knowledgebases for a user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the KnowledgebasesDTO object
     */
    Observable<ServiceResponse<KnowledgebasesDTO>> getKnowledgebasesForUserWithServiceResponseAsync();

    /**
     * Gets details of a specific long running operation.
     *
     * @param operationId Operation id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Operation object if successful.
     */
    Operation getOperationDetails(String operationId);

    /**
     * Gets details of a specific long running operation.
     *
     * @param operationId Operation id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Operation> getOperationDetailsAsync(String operationId, final ServiceCallback<Operation> serviceCallback);

    /**
     * Gets details of a specific long running operation.
     *
     * @param operationId Operation id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Operation object
     */
    Observable<Operation> getOperationDetailsAsync(String operationId);

    /**
     * Gets details of a specific long running operation.
     *
     * @param operationId Operation id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Operation object
     */
    Observable<ServiceResponseWithHeaders<Operation, GetOperationDetailsHeaders>> getOperationDetailsWithServiceResponseAsync(String operationId);

    /**
     * Gets details of a specific knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the KnowledgebaseDTO object if successful.
     */
    KnowledgebaseDTO getKnowledgebaseDetails(String kbId);

    /**
     * Gets details of a specific knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<KnowledgebaseDTO> getKnowledgebaseDetailsAsync(String kbId, final ServiceCallback<KnowledgebaseDTO> serviceCallback);

    /**
     * Gets details of a specific knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the KnowledgebaseDTO object
     */
    Observable<KnowledgebaseDTO> getKnowledgebaseDetailsAsync(String kbId);

    /**
     * Gets details of a specific knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the KnowledgebaseDTO object
     */
    Observable<ServiceResponse<KnowledgebaseDTO>> getKnowledgebaseDetailsWithServiceResponseAsync(String kbId);

    /**
     * Deletes the knowledgebase and all its data.
     *
     * @param kbId Knowledgebase id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteKnowledgebase(String kbId);

    /**
     * Deletes the knowledgebase and all its data.
     *
     * @param kbId Knowledgebase id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteKnowledgebaseAsync(String kbId, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes the knowledgebase and all its data.
     *
     * @param kbId Knowledgebase id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteKnowledgebaseAsync(String kbId);

    /**
     * Deletes the knowledgebase and all its data.
     *
     * @param kbId Knowledgebase id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteKnowledgebaseWithServiceResponseAsync(String kbId);

    /**
     * Publishes all changes in test index of a knowledgebase to its prod index.
     *
     * @param kbId Knowledgebase id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void publishKnowledgebase(String kbId);

    /**
     * Publishes all changes in test index of a knowledgebase to its prod index.
     *
     * @param kbId Knowledgebase id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> publishKnowledgebaseAsync(String kbId, final ServiceCallback<Void> serviceCallback);

    /**
     * Publishes all changes in test index of a knowledgebase to its prod index.
     *
     * @param kbId Knowledgebase id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> publishKnowledgebaseAsync(String kbId);

    /**
     * Publishes all changes in test index of a knowledgebase to its prod index.
     *
     * @param kbId Knowledgebase id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> publishKnowledgebaseWithServiceResponseAsync(String kbId);

    /**
     * Replace knowledgebase contents.
     *
     * @param kbId Knowledgebase id.
     * @param qnAList List of Q-A (QnADTO) to be added to the knowledgebase. Q-A Ids are assigned by the service and should be omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void replaceKnowledgebase(String kbId, List<QnADTO> qnAList);

    /**
     * Replace knowledgebase contents.
     *
     * @param kbId Knowledgebase id.
     * @param qnAList List of Q-A (QnADTO) to be added to the knowledgebase. Q-A Ids are assigned by the service and should be omitted.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> replaceKnowledgebaseAsync(String kbId, List<QnADTO> qnAList, final ServiceCallback<Void> serviceCallback);

    /**
     * Replace knowledgebase contents.
     *
     * @param kbId Knowledgebase id.
     * @param qnAList List of Q-A (QnADTO) to be added to the knowledgebase. Q-A Ids are assigned by the service and should be omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> replaceKnowledgebaseAsync(String kbId, List<QnADTO> qnAList);

    /**
     * Replace knowledgebase contents.
     *
     * @param kbId Knowledgebase id.
     * @param qnAList List of Q-A (QnADTO) to be added to the knowledgebase. Q-A Ids are assigned by the service and should be omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> replaceKnowledgebaseWithServiceResponseAsync(String kbId, List<QnADTO> qnAList);

    /**
     * Asynchronous operation to modify a knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param updateKb Post body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Operation object if successful.
     */
    Operation updateKnowledgebase(String kbId, UpdateKbOperationDTO updateKb);

    /**
     * Asynchronous operation to modify a knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param updateKb Post body of the request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Operation> updateKnowledgebaseAsync(String kbId, UpdateKbOperationDTO updateKb, final ServiceCallback<Operation> serviceCallback);

    /**
     * Asynchronous operation to modify a knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param updateKb Post body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Operation object
     */
    Observable<Operation> updateKnowledgebaseAsync(String kbId, UpdateKbOperationDTO updateKb);

    /**
     * Asynchronous operation to modify a knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param updateKb Post body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Operation object
     */
    Observable<ServiceResponseWithHeaders<Operation, UpdateKnowledgebaseHeaders>> updateKnowledgebaseWithServiceResponseAsync(String kbId, UpdateKbOperationDTO updateKb);

    /**
     * Asynchronous operation to create a new knowledgebase.
     *
     * @param createKbPayload Post body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Operation object if successful.
     */
    Operation createKnowledgebase(CreateKbDTO createKbPayload);

    /**
     * Asynchronous operation to create a new knowledgebase.
     *
     * @param createKbPayload Post body of the request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Operation> createKnowledgebaseAsync(CreateKbDTO createKbPayload, final ServiceCallback<Operation> serviceCallback);

    /**
     * Asynchronous operation to create a new knowledgebase.
     *
     * @param createKbPayload Post body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Operation object
     */
    Observable<Operation> createKnowledgebaseAsync(CreateKbDTO createKbPayload);

    /**
     * Asynchronous operation to create a new knowledgebase.
     *
     * @param createKbPayload Post body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Operation object
     */
    Observable<ServiceResponse<Operation>> createKnowledgebaseWithServiceResponseAsync(CreateKbDTO createKbPayload);

    /**
     * Download the knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param environment Specifies whether environment is Test or Prod. Possible values include: 'Prod', 'Test'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the QnADocumentsDTO object if successful.
     */
    QnADocumentsDTO downloadKnowledgebase(String kbId, String environment);

    /**
     * Download the knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param environment Specifies whether environment is Test or Prod. Possible values include: 'Prod', 'Test'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<QnADocumentsDTO> downloadKnowledgebaseAsync(String kbId, String environment, final ServiceCallback<QnADocumentsDTO> serviceCallback);

    /**
     * Download the knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param environment Specifies whether environment is Test or Prod. Possible values include: 'Prod', 'Test'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QnADocumentsDTO object
     */
    Observable<QnADocumentsDTO> downloadKnowledgebaseAsync(String kbId, String environment);

    /**
     * Download the knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param environment Specifies whether environment is Test or Prod. Possible values include: 'Prod', 'Test'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QnADocumentsDTO object
     */
    Observable<ServiceResponse<QnADocumentsDTO>> downloadKnowledgebaseWithServiceResponseAsync(String kbId, String environment);

}
