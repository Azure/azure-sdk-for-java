/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.translatortext.implementation;

import retrofit2.Retrofit;
import com.microsoft.azure.cognitiveservices.translatortext.Dictionarys;
import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.cognitiveservices.translatortext.models.DictionaryLookupSuccessItem;
import com.microsoft.azure.cognitiveservices.translatortext.models.DictionaryLookupTextInput;
import com.microsoft.azure.cognitiveservices.translatortext.models.ErrorMessageException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Dictionarys.
 */
public class DictionarysImpl implements Dictionarys {
    /** The Retrofit service to perform REST calls. */
    private DictionarysService service;
    /** The service client containing this operation class. */
    private TranslatorTextClientImpl client;

    /**
     * Initializes an instance of DictionarysImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DictionarysImpl(Retrofit retrofit, TranslatorTextClientImpl client) {
        this.service = retrofit.create(DictionarysService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Dictionarys to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DictionarysService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.translatortext.Dictionarys lookupPost" })
        @POST("Dictionary/Lookup")
        Observable<Response<ResponseBody>> lookupPost(@Query("api-version") String apiVersion, @Query("from") String from, @Query("to") String to, @Header("Ocp-Apim-Subscription-Key") String ocpApimSubscriptionKey, @Header("X-ClientTraceId") String xClientTraceId, @Body List<DictionaryLookupTextInput> text, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

    }

    /**
     * Provides alternative translations for a word and a small number of idiomatic phrases. Each translation has a `part-of-speech` and a list of `back-translations`. The back-translations enable a user to understand the translation in context. The Dictionary Example operation allows further drill down to see example uses of each translation pair.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param from Specifies the language of the input text. The source language must be one of the supported languages included in the `dictionary` scope.
     * @param to Specifies the language of the output text. The target language must be one of the supported languages included in the `dictionary` scope of the Languages resource.
     * @param text # Request Body
     The body of the request is a JSON array. Each array element is a JSON object with a string property named `Text`, which represents the term to lookup.
     The following limitations apply:
     * The array can have at most 10 elements.
     * The text value of an array element cannot exceed 100 characters including spaces.
     # Response Body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * `normalizedSource`- A string giving the normalized form of the source term. For example, if the request is "JOHN", the normalized form will be "john". The content of this field becomes the input to lookup examples.
     * `displaySource`- A string giving the source term in a form best suited for end-user display. For example, if the input is "JOHN", the display form will reflect the usual spelling of the name- "John".
     * `translations`- A list of translations for the source term. Each element of the list is an object with the following properties:
       * `normalizedTarget`- A string giving the normalized form of this term in the target language. This value should be used as input to lookup examples.
       * `displayTarget`- A string giving the term in the target language and in a form best suited for end-user display. Generally, this will only differ from the `normalizedTarget` in terms of capitalization. For example, a proper noun like "Juan" will have `normalizedTarget = "juan"` and `displayTarget = "Juan"`.
       * `posTag`- A string associating this term with a part-of-speech tag.
       | Tag name  | Description       |
       | --------- | ----------------  |
       | ADJ       | Adjectives        |
       | ADV       | Adverbs           |
       | CONJ      | Conjunctions       |
       | DET       | Determiners       |
       | MODAL     | Verbs             |
       | NOUN      | Nouns             |
       | PREP      | Prepositions      |
       | PRON      | Pronouns          |
       | VERB      | Verbs             |
       | OTHER     | Other             |
       As an implementation note, these tags were determined by part-of-speech tagging the English side, and then taking the most frequent tag for each source/target pair. So if people frequently translate a Spanish word to a different part-of-speech tag in English, tags may end up being wrong (with respect to the Spanish word).
         * `confidence`- A value between 0.0 and 1.0 which represents the "confidence" (or perhaps more accurately, "probability in the training data") of that translation pair. The sum of confidence scores for one source word may or may not sum to 1.0.
         * `prefixWord-` A string giving the the word to display as a prefix of the translation. Currently, this is the gendered determiner of nouns, in languages that have gendered determiners. For example, the prefix of the Spanish word "mosca" is "la", since "mosca" is a feminine noun in Spanish. This is only dependent on the translation, and not on the source. If there is no prefix, it will be the empty string.
         * `backTranslations-` A list of "back translations" of the target. For example, source words that the target can translate to. The list is guaranteed to contain the source word that was requested (e.g., if the source word being looked up is "fly", then it is guaranteed that "fly" will be in the `backTranslations` list). However, it is not guaranteed to be in the first position, and often will not be. Each element of the `backTranslations` list is an object described by the following properties-
           * `normalizedText-` A string giving the normalized form of the source term that is a back-translation of the target. This value should be used as input to lookup examples.
           * `displayText-` A string giving the source term that is a back-translation of the target in a form best suited for end-user display.
           * `numExamples-` An integer representing the number of examples that are available for this translation pair. Actual examples must be retrieved with a separate call to lookup examples. The number is mostly intended to facilitate display in a UX. For example, a user interface may add a hyperlink to the back-translation if the number of examples is greater than zero and show the back-translation as plain text if there are no examples. Note that the actual number of examples returned by a call to lookup examples may be less than `numExamples`, because additional filtering may be applied on the fly to remove "bad" examples.
           * `frequencyCount-` An integer representing the frequency of this translation pair in the data. The main purpose of this field is to provide a user interface with a means to sort back-translations so the most frequent terms are first.
     Note - If the term being looked up does not exist in the dictionary, the response is 200 (OK) but the `translations` list is an empty list.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorMessageException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;DictionaryLookupSuccessItem&gt; object if successful.
     */
    public List<DictionaryLookupSuccessItem> lookupPost(String apiVersion, String from, String to, List<DictionaryLookupTextInput> text) {
        return lookupPostWithServiceResponseAsync(apiVersion, from, to, text).toBlocking().single().body();
    }

    /**
     * Provides alternative translations for a word and a small number of idiomatic phrases. Each translation has a `part-of-speech` and a list of `back-translations`. The back-translations enable a user to understand the translation in context. The Dictionary Example operation allows further drill down to see example uses of each translation pair.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param from Specifies the language of the input text. The source language must be one of the supported languages included in the `dictionary` scope.
     * @param to Specifies the language of the output text. The target language must be one of the supported languages included in the `dictionary` scope of the Languages resource.
     * @param text # Request Body
     The body of the request is a JSON array. Each array element is a JSON object with a string property named `Text`, which represents the term to lookup.
     The following limitations apply:
     * The array can have at most 10 elements.
     * The text value of an array element cannot exceed 100 characters including spaces.
     # Response Body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * `normalizedSource`- A string giving the normalized form of the source term. For example, if the request is "JOHN", the normalized form will be "john". The content of this field becomes the input to lookup examples.
     * `displaySource`- A string giving the source term in a form best suited for end-user display. For example, if the input is "JOHN", the display form will reflect the usual spelling of the name- "John".
     * `translations`- A list of translations for the source term. Each element of the list is an object with the following properties:
       * `normalizedTarget`- A string giving the normalized form of this term in the target language. This value should be used as input to lookup examples.
       * `displayTarget`- A string giving the term in the target language and in a form best suited for end-user display. Generally, this will only differ from the `normalizedTarget` in terms of capitalization. For example, a proper noun like "Juan" will have `normalizedTarget = "juan"` and `displayTarget = "Juan"`.
       * `posTag`- A string associating this term with a part-of-speech tag.
       | Tag name  | Description       |
       | --------- | ----------------  |
       | ADJ       | Adjectives        |
       | ADV       | Adverbs           |
       | CONJ      | Conjunctions       |
       | DET       | Determiners       |
       | MODAL     | Verbs             |
       | NOUN      | Nouns             |
       | PREP      | Prepositions      |
       | PRON      | Pronouns          |
       | VERB      | Verbs             |
       | OTHER     | Other             |
       As an implementation note, these tags were determined by part-of-speech tagging the English side, and then taking the most frequent tag for each source/target pair. So if people frequently translate a Spanish word to a different part-of-speech tag in English, tags may end up being wrong (with respect to the Spanish word).
         * `confidence`- A value between 0.0 and 1.0 which represents the "confidence" (or perhaps more accurately, "probability in the training data") of that translation pair. The sum of confidence scores for one source word may or may not sum to 1.0.
         * `prefixWord-` A string giving the the word to display as a prefix of the translation. Currently, this is the gendered determiner of nouns, in languages that have gendered determiners. For example, the prefix of the Spanish word "mosca" is "la", since "mosca" is a feminine noun in Spanish. This is only dependent on the translation, and not on the source. If there is no prefix, it will be the empty string.
         * `backTranslations-` A list of "back translations" of the target. For example, source words that the target can translate to. The list is guaranteed to contain the source word that was requested (e.g., if the source word being looked up is "fly", then it is guaranteed that "fly" will be in the `backTranslations` list). However, it is not guaranteed to be in the first position, and often will not be. Each element of the `backTranslations` list is an object described by the following properties-
           * `normalizedText-` A string giving the normalized form of the source term that is a back-translation of the target. This value should be used as input to lookup examples.
           * `displayText-` A string giving the source term that is a back-translation of the target in a form best suited for end-user display.
           * `numExamples-` An integer representing the number of examples that are available for this translation pair. Actual examples must be retrieved with a separate call to lookup examples. The number is mostly intended to facilitate display in a UX. For example, a user interface may add a hyperlink to the back-translation if the number of examples is greater than zero and show the back-translation as plain text if there are no examples. Note that the actual number of examples returned by a call to lookup examples may be less than `numExamples`, because additional filtering may be applied on the fly to remove "bad" examples.
           * `frequencyCount-` An integer representing the frequency of this translation pair in the data. The main purpose of this field is to provide a user interface with a means to sort back-translations so the most frequent terms are first.
     Note - If the term being looked up does not exist in the dictionary, the response is 200 (OK) but the `translations` list is an empty list.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DictionaryLookupSuccessItem>> lookupPostAsync(String apiVersion, String from, String to, List<DictionaryLookupTextInput> text, final ServiceCallback<List<DictionaryLookupSuccessItem>> serviceCallback) {
        return ServiceFuture.fromResponse(lookupPostWithServiceResponseAsync(apiVersion, from, to, text), serviceCallback);
    }

    /**
     * Provides alternative translations for a word and a small number of idiomatic phrases. Each translation has a `part-of-speech` and a list of `back-translations`. The back-translations enable a user to understand the translation in context. The Dictionary Example operation allows further drill down to see example uses of each translation pair.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param from Specifies the language of the input text. The source language must be one of the supported languages included in the `dictionary` scope.
     * @param to Specifies the language of the output text. The target language must be one of the supported languages included in the `dictionary` scope of the Languages resource.
     * @param text # Request Body
     The body of the request is a JSON array. Each array element is a JSON object with a string property named `Text`, which represents the term to lookup.
     The following limitations apply:
     * The array can have at most 10 elements.
     * The text value of an array element cannot exceed 100 characters including spaces.
     # Response Body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * `normalizedSource`- A string giving the normalized form of the source term. For example, if the request is "JOHN", the normalized form will be "john". The content of this field becomes the input to lookup examples.
     * `displaySource`- A string giving the source term in a form best suited for end-user display. For example, if the input is "JOHN", the display form will reflect the usual spelling of the name- "John".
     * `translations`- A list of translations for the source term. Each element of the list is an object with the following properties:
       * `normalizedTarget`- A string giving the normalized form of this term in the target language. This value should be used as input to lookup examples.
       * `displayTarget`- A string giving the term in the target language and in a form best suited for end-user display. Generally, this will only differ from the `normalizedTarget` in terms of capitalization. For example, a proper noun like "Juan" will have `normalizedTarget = "juan"` and `displayTarget = "Juan"`.
       * `posTag`- A string associating this term with a part-of-speech tag.
       | Tag name  | Description       |
       | --------- | ----------------  |
       | ADJ       | Adjectives        |
       | ADV       | Adverbs           |
       | CONJ      | Conjunctions       |
       | DET       | Determiners       |
       | MODAL     | Verbs             |
       | NOUN      | Nouns             |
       | PREP      | Prepositions      |
       | PRON      | Pronouns          |
       | VERB      | Verbs             |
       | OTHER     | Other             |
       As an implementation note, these tags were determined by part-of-speech tagging the English side, and then taking the most frequent tag for each source/target pair. So if people frequently translate a Spanish word to a different part-of-speech tag in English, tags may end up being wrong (with respect to the Spanish word).
         * `confidence`- A value between 0.0 and 1.0 which represents the "confidence" (or perhaps more accurately, "probability in the training data") of that translation pair. The sum of confidence scores for one source word may or may not sum to 1.0.
         * `prefixWord-` A string giving the the word to display as a prefix of the translation. Currently, this is the gendered determiner of nouns, in languages that have gendered determiners. For example, the prefix of the Spanish word "mosca" is "la", since "mosca" is a feminine noun in Spanish. This is only dependent on the translation, and not on the source. If there is no prefix, it will be the empty string.
         * `backTranslations-` A list of "back translations" of the target. For example, source words that the target can translate to. The list is guaranteed to contain the source word that was requested (e.g., if the source word being looked up is "fly", then it is guaranteed that "fly" will be in the `backTranslations` list). However, it is not guaranteed to be in the first position, and often will not be. Each element of the `backTranslations` list is an object described by the following properties-
           * `normalizedText-` A string giving the normalized form of the source term that is a back-translation of the target. This value should be used as input to lookup examples.
           * `displayText-` A string giving the source term that is a back-translation of the target in a form best suited for end-user display.
           * `numExamples-` An integer representing the number of examples that are available for this translation pair. Actual examples must be retrieved with a separate call to lookup examples. The number is mostly intended to facilitate display in a UX. For example, a user interface may add a hyperlink to the back-translation if the number of examples is greater than zero and show the back-translation as plain text if there are no examples. Note that the actual number of examples returned by a call to lookup examples may be less than `numExamples`, because additional filtering may be applied on the fly to remove "bad" examples.
           * `frequencyCount-` An integer representing the frequency of this translation pair in the data. The main purpose of this field is to provide a user interface with a means to sort back-translations so the most frequent terms are first.
     Note - If the term being looked up does not exist in the dictionary, the response is 200 (OK) but the `translations` list is an empty list.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DictionaryLookupSuccessItem&gt; object
     */
    public Observable<List<DictionaryLookupSuccessItem>> lookupPostAsync(String apiVersion, String from, String to, List<DictionaryLookupTextInput> text) {
        return lookupPostWithServiceResponseAsync(apiVersion, from, to, text).map(new Func1<ServiceResponse<List<DictionaryLookupSuccessItem>>, List<DictionaryLookupSuccessItem>>() {
            @Override
            public List<DictionaryLookupSuccessItem> call(ServiceResponse<List<DictionaryLookupSuccessItem>> response) {
                return response.body();
            }
        });
    }

    /**
     * Provides alternative translations for a word and a small number of idiomatic phrases. Each translation has a `part-of-speech` and a list of `back-translations`. The back-translations enable a user to understand the translation in context. The Dictionary Example operation allows further drill down to see example uses of each translation pair.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param from Specifies the language of the input text. The source language must be one of the supported languages included in the `dictionary` scope.
     * @param to Specifies the language of the output text. The target language must be one of the supported languages included in the `dictionary` scope of the Languages resource.
     * @param text # Request Body
     The body of the request is a JSON array. Each array element is a JSON object with a string property named `Text`, which represents the term to lookup.
     The following limitations apply:
     * The array can have at most 10 elements.
     * The text value of an array element cannot exceed 100 characters including spaces.
     # Response Body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * `normalizedSource`- A string giving the normalized form of the source term. For example, if the request is "JOHN", the normalized form will be "john". The content of this field becomes the input to lookup examples.
     * `displaySource`- A string giving the source term in a form best suited for end-user display. For example, if the input is "JOHN", the display form will reflect the usual spelling of the name- "John".
     * `translations`- A list of translations for the source term. Each element of the list is an object with the following properties:
       * `normalizedTarget`- A string giving the normalized form of this term in the target language. This value should be used as input to lookup examples.
       * `displayTarget`- A string giving the term in the target language and in a form best suited for end-user display. Generally, this will only differ from the `normalizedTarget` in terms of capitalization. For example, a proper noun like "Juan" will have `normalizedTarget = "juan"` and `displayTarget = "Juan"`.
       * `posTag`- A string associating this term with a part-of-speech tag.
       | Tag name  | Description       |
       | --------- | ----------------  |
       | ADJ       | Adjectives        |
       | ADV       | Adverbs           |
       | CONJ      | Conjunctions       |
       | DET       | Determiners       |
       | MODAL     | Verbs             |
       | NOUN      | Nouns             |
       | PREP      | Prepositions      |
       | PRON      | Pronouns          |
       | VERB      | Verbs             |
       | OTHER     | Other             |
       As an implementation note, these tags were determined by part-of-speech tagging the English side, and then taking the most frequent tag for each source/target pair. So if people frequently translate a Spanish word to a different part-of-speech tag in English, tags may end up being wrong (with respect to the Spanish word).
         * `confidence`- A value between 0.0 and 1.0 which represents the "confidence" (or perhaps more accurately, "probability in the training data") of that translation pair. The sum of confidence scores for one source word may or may not sum to 1.0.
         * `prefixWord-` A string giving the the word to display as a prefix of the translation. Currently, this is the gendered determiner of nouns, in languages that have gendered determiners. For example, the prefix of the Spanish word "mosca" is "la", since "mosca" is a feminine noun in Spanish. This is only dependent on the translation, and not on the source. If there is no prefix, it will be the empty string.
         * `backTranslations-` A list of "back translations" of the target. For example, source words that the target can translate to. The list is guaranteed to contain the source word that was requested (e.g., if the source word being looked up is "fly", then it is guaranteed that "fly" will be in the `backTranslations` list). However, it is not guaranteed to be in the first position, and often will not be. Each element of the `backTranslations` list is an object described by the following properties-
           * `normalizedText-` A string giving the normalized form of the source term that is a back-translation of the target. This value should be used as input to lookup examples.
           * `displayText-` A string giving the source term that is a back-translation of the target in a form best suited for end-user display.
           * `numExamples-` An integer representing the number of examples that are available for this translation pair. Actual examples must be retrieved with a separate call to lookup examples. The number is mostly intended to facilitate display in a UX. For example, a user interface may add a hyperlink to the back-translation if the number of examples is greater than zero and show the back-translation as plain text if there are no examples. Note that the actual number of examples returned by a call to lookup examples may be less than `numExamples`, because additional filtering may be applied on the fly to remove "bad" examples.
           * `frequencyCount-` An integer representing the frequency of this translation pair in the data. The main purpose of this field is to provide a user interface with a means to sort back-translations so the most frequent terms are first.
     Note - If the term being looked up does not exist in the dictionary, the response is 200 (OK) but the `translations` list is an empty list.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DictionaryLookupSuccessItem&gt; object
     */
    public Observable<ServiceResponse<List<DictionaryLookupSuccessItem>>> lookupPostWithServiceResponseAsync(String apiVersion, String from, String to, List<DictionaryLookupTextInput> text) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        if (from == null) {
            throw new IllegalArgumentException("Parameter from is required and cannot be null.");
        }
        if (to == null) {
            throw new IllegalArgumentException("Parameter to is required and cannot be null.");
        }
        if (text == null) {
            throw new IllegalArgumentException("Parameter text is required and cannot be null.");
        }
        Validator.validate(text);
        final String ocpApimSubscriptionKey = null;
        final String xClientTraceId = null;
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.lookupPost(apiVersion, from, to, ocpApimSubscriptionKey, xClientTraceId, text, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<DictionaryLookupSuccessItem>>>>() {
                @Override
                public Observable<ServiceResponse<List<DictionaryLookupSuccessItem>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<DictionaryLookupSuccessItem>> clientResponse = lookupPostDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Provides alternative translations for a word and a small number of idiomatic phrases. Each translation has a `part-of-speech` and a list of `back-translations`. The back-translations enable a user to understand the translation in context. The Dictionary Example operation allows further drill down to see example uses of each translation pair.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param from Specifies the language of the input text. The source language must be one of the supported languages included in the `dictionary` scope.
     * @param to Specifies the language of the output text. The target language must be one of the supported languages included in the `dictionary` scope of the Languages resource.
     * @param text # Request Body
     The body of the request is a JSON array. Each array element is a JSON object with a string property named `Text`, which represents the term to lookup.
     The following limitations apply:
     * The array can have at most 10 elements.
     * The text value of an array element cannot exceed 100 characters including spaces.
     # Response Body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * `normalizedSource`- A string giving the normalized form of the source term. For example, if the request is "JOHN", the normalized form will be "john". The content of this field becomes the input to lookup examples.
     * `displaySource`- A string giving the source term in a form best suited for end-user display. For example, if the input is "JOHN", the display form will reflect the usual spelling of the name- "John".
     * `translations`- A list of translations for the source term. Each element of the list is an object with the following properties:
       * `normalizedTarget`- A string giving the normalized form of this term in the target language. This value should be used as input to lookup examples.
       * `displayTarget`- A string giving the term in the target language and in a form best suited for end-user display. Generally, this will only differ from the `normalizedTarget` in terms of capitalization. For example, a proper noun like "Juan" will have `normalizedTarget = "juan"` and `displayTarget = "Juan"`.
       * `posTag`- A string associating this term with a part-of-speech tag.
       | Tag name  | Description       |
       | --------- | ----------------  |
       | ADJ       | Adjectives        |
       | ADV       | Adverbs           |
       | CONJ      | Conjunctions       |
       | DET       | Determiners       |
       | MODAL     | Verbs             |
       | NOUN      | Nouns             |
       | PREP      | Prepositions      |
       | PRON      | Pronouns          |
       | VERB      | Verbs             |
       | OTHER     | Other             |
       As an implementation note, these tags were determined by part-of-speech tagging the English side, and then taking the most frequent tag for each source/target pair. So if people frequently translate a Spanish word to a different part-of-speech tag in English, tags may end up being wrong (with respect to the Spanish word).
         * `confidence`- A value between 0.0 and 1.0 which represents the "confidence" (or perhaps more accurately, "probability in the training data") of that translation pair. The sum of confidence scores for one source word may or may not sum to 1.0.
         * `prefixWord-` A string giving the the word to display as a prefix of the translation. Currently, this is the gendered determiner of nouns, in languages that have gendered determiners. For example, the prefix of the Spanish word "mosca" is "la", since "mosca" is a feminine noun in Spanish. This is only dependent on the translation, and not on the source. If there is no prefix, it will be the empty string.
         * `backTranslations-` A list of "back translations" of the target. For example, source words that the target can translate to. The list is guaranteed to contain the source word that was requested (e.g., if the source word being looked up is "fly", then it is guaranteed that "fly" will be in the `backTranslations` list). However, it is not guaranteed to be in the first position, and often will not be. Each element of the `backTranslations` list is an object described by the following properties-
           * `normalizedText-` A string giving the normalized form of the source term that is a back-translation of the target. This value should be used as input to lookup examples.
           * `displayText-` A string giving the source term that is a back-translation of the target in a form best suited for end-user display.
           * `numExamples-` An integer representing the number of examples that are available for this translation pair. Actual examples must be retrieved with a separate call to lookup examples. The number is mostly intended to facilitate display in a UX. For example, a user interface may add a hyperlink to the back-translation if the number of examples is greater than zero and show the back-translation as plain text if there are no examples. Note that the actual number of examples returned by a call to lookup examples may be less than `numExamples`, because additional filtering may be applied on the fly to remove "bad" examples.
           * `frequencyCount-` An integer representing the frequency of this translation pair in the data. The main purpose of this field is to provide a user interface with a means to sort back-translations so the most frequent terms are first.
     Note - If the term being looked up does not exist in the dictionary, the response is 200 (OK) but the `translations` list is an empty list.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     * @param ocpApimSubscriptionKey This is used to pass a key for auth. If you are passing a token for auth then use the previous header auth option. **ONE OF THESE METHODS MUST BE USED.**
     * @param xClientTraceId A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorMessageException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;DictionaryLookupSuccessItem&gt; object if successful.
     */
    public List<DictionaryLookupSuccessItem> lookupPost(String apiVersion, String from, String to, List<DictionaryLookupTextInput> text, String ocpApimSubscriptionKey, String xClientTraceId) {
        return lookupPostWithServiceResponseAsync(apiVersion, from, to, text, ocpApimSubscriptionKey, xClientTraceId).toBlocking().single().body();
    }

    /**
     * Provides alternative translations for a word and a small number of idiomatic phrases. Each translation has a `part-of-speech` and a list of `back-translations`. The back-translations enable a user to understand the translation in context. The Dictionary Example operation allows further drill down to see example uses of each translation pair.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param from Specifies the language of the input text. The source language must be one of the supported languages included in the `dictionary` scope.
     * @param to Specifies the language of the output text. The target language must be one of the supported languages included in the `dictionary` scope of the Languages resource.
     * @param text # Request Body
     The body of the request is a JSON array. Each array element is a JSON object with a string property named `Text`, which represents the term to lookup.
     The following limitations apply:
     * The array can have at most 10 elements.
     * The text value of an array element cannot exceed 100 characters including spaces.
     # Response Body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * `normalizedSource`- A string giving the normalized form of the source term. For example, if the request is "JOHN", the normalized form will be "john". The content of this field becomes the input to lookup examples.
     * `displaySource`- A string giving the source term in a form best suited for end-user display. For example, if the input is "JOHN", the display form will reflect the usual spelling of the name- "John".
     * `translations`- A list of translations for the source term. Each element of the list is an object with the following properties:
       * `normalizedTarget`- A string giving the normalized form of this term in the target language. This value should be used as input to lookup examples.
       * `displayTarget`- A string giving the term in the target language and in a form best suited for end-user display. Generally, this will only differ from the `normalizedTarget` in terms of capitalization. For example, a proper noun like "Juan" will have `normalizedTarget = "juan"` and `displayTarget = "Juan"`.
       * `posTag`- A string associating this term with a part-of-speech tag.
       | Tag name  | Description       |
       | --------- | ----------------  |
       | ADJ       | Adjectives        |
       | ADV       | Adverbs           |
       | CONJ      | Conjunctions       |
       | DET       | Determiners       |
       | MODAL     | Verbs             |
       | NOUN      | Nouns             |
       | PREP      | Prepositions      |
       | PRON      | Pronouns          |
       | VERB      | Verbs             |
       | OTHER     | Other             |
       As an implementation note, these tags were determined by part-of-speech tagging the English side, and then taking the most frequent tag for each source/target pair. So if people frequently translate a Spanish word to a different part-of-speech tag in English, tags may end up being wrong (with respect to the Spanish word).
         * `confidence`- A value between 0.0 and 1.0 which represents the "confidence" (or perhaps more accurately, "probability in the training data") of that translation pair. The sum of confidence scores for one source word may or may not sum to 1.0.
         * `prefixWord-` A string giving the the word to display as a prefix of the translation. Currently, this is the gendered determiner of nouns, in languages that have gendered determiners. For example, the prefix of the Spanish word "mosca" is "la", since "mosca" is a feminine noun in Spanish. This is only dependent on the translation, and not on the source. If there is no prefix, it will be the empty string.
         * `backTranslations-` A list of "back translations" of the target. For example, source words that the target can translate to. The list is guaranteed to contain the source word that was requested (e.g., if the source word being looked up is "fly", then it is guaranteed that "fly" will be in the `backTranslations` list). However, it is not guaranteed to be in the first position, and often will not be. Each element of the `backTranslations` list is an object described by the following properties-
           * `normalizedText-` A string giving the normalized form of the source term that is a back-translation of the target. This value should be used as input to lookup examples.
           * `displayText-` A string giving the source term that is a back-translation of the target in a form best suited for end-user display.
           * `numExamples-` An integer representing the number of examples that are available for this translation pair. Actual examples must be retrieved with a separate call to lookup examples. The number is mostly intended to facilitate display in a UX. For example, a user interface may add a hyperlink to the back-translation if the number of examples is greater than zero and show the back-translation as plain text if there are no examples. Note that the actual number of examples returned by a call to lookup examples may be less than `numExamples`, because additional filtering may be applied on the fly to remove "bad" examples.
           * `frequencyCount-` An integer representing the frequency of this translation pair in the data. The main purpose of this field is to provide a user interface with a means to sort back-translations so the most frequent terms are first.
     Note - If the term being looked up does not exist in the dictionary, the response is 200 (OK) but the `translations` list is an empty list.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     * @param ocpApimSubscriptionKey This is used to pass a key for auth. If you are passing a token for auth then use the previous header auth option. **ONE OF THESE METHODS MUST BE USED.**
     * @param xClientTraceId A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DictionaryLookupSuccessItem>> lookupPostAsync(String apiVersion, String from, String to, List<DictionaryLookupTextInput> text, String ocpApimSubscriptionKey, String xClientTraceId, final ServiceCallback<List<DictionaryLookupSuccessItem>> serviceCallback) {
        return ServiceFuture.fromResponse(lookupPostWithServiceResponseAsync(apiVersion, from, to, text, ocpApimSubscriptionKey, xClientTraceId), serviceCallback);
    }

    /**
     * Provides alternative translations for a word and a small number of idiomatic phrases. Each translation has a `part-of-speech` and a list of `back-translations`. The back-translations enable a user to understand the translation in context. The Dictionary Example operation allows further drill down to see example uses of each translation pair.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param from Specifies the language of the input text. The source language must be one of the supported languages included in the `dictionary` scope.
     * @param to Specifies the language of the output text. The target language must be one of the supported languages included in the `dictionary` scope of the Languages resource.
     * @param text # Request Body
     The body of the request is a JSON array. Each array element is a JSON object with a string property named `Text`, which represents the term to lookup.
     The following limitations apply:
     * The array can have at most 10 elements.
     * The text value of an array element cannot exceed 100 characters including spaces.
     # Response Body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * `normalizedSource`- A string giving the normalized form of the source term. For example, if the request is "JOHN", the normalized form will be "john". The content of this field becomes the input to lookup examples.
     * `displaySource`- A string giving the source term in a form best suited for end-user display. For example, if the input is "JOHN", the display form will reflect the usual spelling of the name- "John".
     * `translations`- A list of translations for the source term. Each element of the list is an object with the following properties:
       * `normalizedTarget`- A string giving the normalized form of this term in the target language. This value should be used as input to lookup examples.
       * `displayTarget`- A string giving the term in the target language and in a form best suited for end-user display. Generally, this will only differ from the `normalizedTarget` in terms of capitalization. For example, a proper noun like "Juan" will have `normalizedTarget = "juan"` and `displayTarget = "Juan"`.
       * `posTag`- A string associating this term with a part-of-speech tag.
       | Tag name  | Description       |
       | --------- | ----------------  |
       | ADJ       | Adjectives        |
       | ADV       | Adverbs           |
       | CONJ      | Conjunctions       |
       | DET       | Determiners       |
       | MODAL     | Verbs             |
       | NOUN      | Nouns             |
       | PREP      | Prepositions      |
       | PRON      | Pronouns          |
       | VERB      | Verbs             |
       | OTHER     | Other             |
       As an implementation note, these tags were determined by part-of-speech tagging the English side, and then taking the most frequent tag for each source/target pair. So if people frequently translate a Spanish word to a different part-of-speech tag in English, tags may end up being wrong (with respect to the Spanish word).
         * `confidence`- A value between 0.0 and 1.0 which represents the "confidence" (or perhaps more accurately, "probability in the training data") of that translation pair. The sum of confidence scores for one source word may or may not sum to 1.0.
         * `prefixWord-` A string giving the the word to display as a prefix of the translation. Currently, this is the gendered determiner of nouns, in languages that have gendered determiners. For example, the prefix of the Spanish word "mosca" is "la", since "mosca" is a feminine noun in Spanish. This is only dependent on the translation, and not on the source. If there is no prefix, it will be the empty string.
         * `backTranslations-` A list of "back translations" of the target. For example, source words that the target can translate to. The list is guaranteed to contain the source word that was requested (e.g., if the source word being looked up is "fly", then it is guaranteed that "fly" will be in the `backTranslations` list). However, it is not guaranteed to be in the first position, and often will not be. Each element of the `backTranslations` list is an object described by the following properties-
           * `normalizedText-` A string giving the normalized form of the source term that is a back-translation of the target. This value should be used as input to lookup examples.
           * `displayText-` A string giving the source term that is a back-translation of the target in a form best suited for end-user display.
           * `numExamples-` An integer representing the number of examples that are available for this translation pair. Actual examples must be retrieved with a separate call to lookup examples. The number is mostly intended to facilitate display in a UX. For example, a user interface may add a hyperlink to the back-translation if the number of examples is greater than zero and show the back-translation as plain text if there are no examples. Note that the actual number of examples returned by a call to lookup examples may be less than `numExamples`, because additional filtering may be applied on the fly to remove "bad" examples.
           * `frequencyCount-` An integer representing the frequency of this translation pair in the data. The main purpose of this field is to provide a user interface with a means to sort back-translations so the most frequent terms are first.
     Note - If the term being looked up does not exist in the dictionary, the response is 200 (OK) but the `translations` list is an empty list.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     * @param ocpApimSubscriptionKey This is used to pass a key for auth. If you are passing a token for auth then use the previous header auth option. **ONE OF THESE METHODS MUST BE USED.**
     * @param xClientTraceId A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DictionaryLookupSuccessItem&gt; object
     */
    public Observable<List<DictionaryLookupSuccessItem>> lookupPostAsync(String apiVersion, String from, String to, List<DictionaryLookupTextInput> text, String ocpApimSubscriptionKey, String xClientTraceId) {
        return lookupPostWithServiceResponseAsync(apiVersion, from, to, text, ocpApimSubscriptionKey, xClientTraceId).map(new Func1<ServiceResponse<List<DictionaryLookupSuccessItem>>, List<DictionaryLookupSuccessItem>>() {
            @Override
            public List<DictionaryLookupSuccessItem> call(ServiceResponse<List<DictionaryLookupSuccessItem>> response) {
                return response.body();
            }
        });
    }

    /**
     * Provides alternative translations for a word and a small number of idiomatic phrases. Each translation has a `part-of-speech` and a list of `back-translations`. The back-translations enable a user to understand the translation in context. The Dictionary Example operation allows further drill down to see example uses of each translation pair.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param from Specifies the language of the input text. The source language must be one of the supported languages included in the `dictionary` scope.
     * @param to Specifies the language of the output text. The target language must be one of the supported languages included in the `dictionary` scope of the Languages resource.
     * @param text # Request Body
     The body of the request is a JSON array. Each array element is a JSON object with a string property named `Text`, which represents the term to lookup.
     The following limitations apply:
     * The array can have at most 10 elements.
     * The text value of an array element cannot exceed 100 characters including spaces.
     # Response Body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * `normalizedSource`- A string giving the normalized form of the source term. For example, if the request is "JOHN", the normalized form will be "john". The content of this field becomes the input to lookup examples.
     * `displaySource`- A string giving the source term in a form best suited for end-user display. For example, if the input is "JOHN", the display form will reflect the usual spelling of the name- "John".
     * `translations`- A list of translations for the source term. Each element of the list is an object with the following properties:
       * `normalizedTarget`- A string giving the normalized form of this term in the target language. This value should be used as input to lookup examples.
       * `displayTarget`- A string giving the term in the target language and in a form best suited for end-user display. Generally, this will only differ from the `normalizedTarget` in terms of capitalization. For example, a proper noun like "Juan" will have `normalizedTarget = "juan"` and `displayTarget = "Juan"`.
       * `posTag`- A string associating this term with a part-of-speech tag.
       | Tag name  | Description       |
       | --------- | ----------------  |
       | ADJ       | Adjectives        |
       | ADV       | Adverbs           |
       | CONJ      | Conjunctions       |
       | DET       | Determiners       |
       | MODAL     | Verbs             |
       | NOUN      | Nouns             |
       | PREP      | Prepositions      |
       | PRON      | Pronouns          |
       | VERB      | Verbs             |
       | OTHER     | Other             |
       As an implementation note, these tags were determined by part-of-speech tagging the English side, and then taking the most frequent tag for each source/target pair. So if people frequently translate a Spanish word to a different part-of-speech tag in English, tags may end up being wrong (with respect to the Spanish word).
         * `confidence`- A value between 0.0 and 1.0 which represents the "confidence" (or perhaps more accurately, "probability in the training data") of that translation pair. The sum of confidence scores for one source word may or may not sum to 1.0.
         * `prefixWord-` A string giving the the word to display as a prefix of the translation. Currently, this is the gendered determiner of nouns, in languages that have gendered determiners. For example, the prefix of the Spanish word "mosca" is "la", since "mosca" is a feminine noun in Spanish. This is only dependent on the translation, and not on the source. If there is no prefix, it will be the empty string.
         * `backTranslations-` A list of "back translations" of the target. For example, source words that the target can translate to. The list is guaranteed to contain the source word that was requested (e.g., if the source word being looked up is "fly", then it is guaranteed that "fly" will be in the `backTranslations` list). However, it is not guaranteed to be in the first position, and often will not be. Each element of the `backTranslations` list is an object described by the following properties-
           * `normalizedText-` A string giving the normalized form of the source term that is a back-translation of the target. This value should be used as input to lookup examples.
           * `displayText-` A string giving the source term that is a back-translation of the target in a form best suited for end-user display.
           * `numExamples-` An integer representing the number of examples that are available for this translation pair. Actual examples must be retrieved with a separate call to lookup examples. The number is mostly intended to facilitate display in a UX. For example, a user interface may add a hyperlink to the back-translation if the number of examples is greater than zero and show the back-translation as plain text if there are no examples. Note that the actual number of examples returned by a call to lookup examples may be less than `numExamples`, because additional filtering may be applied on the fly to remove "bad" examples.
           * `frequencyCount-` An integer representing the frequency of this translation pair in the data. The main purpose of this field is to provide a user interface with a means to sort back-translations so the most frequent terms are first.
     Note - If the term being looked up does not exist in the dictionary, the response is 200 (OK) but the `translations` list is an empty list.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     * @param ocpApimSubscriptionKey This is used to pass a key for auth. If you are passing a token for auth then use the previous header auth option. **ONE OF THESE METHODS MUST BE USED.**
     * @param xClientTraceId A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DictionaryLookupSuccessItem&gt; object
     */
    public Observable<ServiceResponse<List<DictionaryLookupSuccessItem>>> lookupPostWithServiceResponseAsync(String apiVersion, String from, String to, List<DictionaryLookupTextInput> text, String ocpApimSubscriptionKey, String xClientTraceId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        if (from == null) {
            throw new IllegalArgumentException("Parameter from is required and cannot be null.");
        }
        if (to == null) {
            throw new IllegalArgumentException("Parameter to is required and cannot be null.");
        }
        if (text == null) {
            throw new IllegalArgumentException("Parameter text is required and cannot be null.");
        }
        Validator.validate(text);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.lookupPost(apiVersion, from, to, ocpApimSubscriptionKey, xClientTraceId, text, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<DictionaryLookupSuccessItem>>>>() {
                @Override
                public Observable<ServiceResponse<List<DictionaryLookupSuccessItem>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<DictionaryLookupSuccessItem>> clientResponse = lookupPostDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<DictionaryLookupSuccessItem>> lookupPostDelegate(Response<ResponseBody> response) throws ErrorMessageException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<DictionaryLookupSuccessItem>, ErrorMessageException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<DictionaryLookupSuccessItem>>() { }.getType())
                .registerError(ErrorMessageException.class)
                .build(response);
    }

}
