/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.translatortext.implementation;

import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureClient;
import com.microsoft.azure.AzureServiceClient;
import com.microsoft.azure.cognitiveservices.translatortext.BreakSentences;
import com.microsoft.azure.cognitiveservices.translatortext.Detects;
import com.microsoft.azure.cognitiveservices.translatortext.DictionaryExamples;
import com.microsoft.azure.cognitiveservices.translatortext.Dictionarys;
import com.microsoft.azure.cognitiveservices.translatortext.models.ErrorMessageException;
import com.microsoft.azure.cognitiveservices.translatortext.models.LanguageExampleSuccess;
import com.microsoft.azure.cognitiveservices.translatortext.Translates;
import com.microsoft.azure.cognitiveservices.translatortext.TranslatorTextClient;
import com.microsoft.azure.cognitiveservices.translatortext.Transliterates;
import com.microsoft.rest.credentials.ServiceClientCredentials;
import com.microsoft.rest.RestClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * Initializes a new instance of the TranslatorTextClientImpl class.
 */
public class TranslatorTextClientImpl extends AzureServiceClient implements TranslatorTextClient {
    /** The Retrofit service to perform REST calls. */
    private TranslatorTextClientService service;
    /** the {@link AzureClient} used for long running operations. */
    private AzureClient azureClient;

    /**
     * Gets the {@link AzureClient} used for long running operations.
     * @return the azure client;
     */
    public AzureClient getAzureClient() {
        return this.azureClient;
    }

    /** Supported Cognitive Services endpoints. */
    private String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints.
     *
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Sets Supported Cognitive Services endpoints.
     *
     * @param endpoint the endpoint value.
     * @return the service client itself
     */
    public TranslatorTextClientImpl withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /** The preferred language for the response. */
    private String acceptLanguage;

    /**
     * Gets The preferred language for the response.
     *
     * @return the acceptLanguage value.
     */
    public String acceptLanguage() {
        return this.acceptLanguage;
    }

    /**
     * Sets The preferred language for the response.
     *
     * @param acceptLanguage the acceptLanguage value.
     * @return the service client itself
     */
    public TranslatorTextClientImpl withAcceptLanguage(String acceptLanguage) {
        this.acceptLanguage = acceptLanguage;
        return this;
    }

    /** The retry timeout in seconds for Long Running Operations. Default value is 30. */
    private int longRunningOperationRetryTimeout;

    /**
     * Gets The retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @return the longRunningOperationRetryTimeout value.
     */
    public int longRunningOperationRetryTimeout() {
        return this.longRunningOperationRetryTimeout;
    }

    /**
     * Sets The retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @param longRunningOperationRetryTimeout the longRunningOperationRetryTimeout value.
     * @return the service client itself
     */
    public TranslatorTextClientImpl withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout) {
        this.longRunningOperationRetryTimeout = longRunningOperationRetryTimeout;
        return this;
    }

    /** Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true. */
    private boolean generateClientRequestId;

    /**
     * Gets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @return the generateClientRequestId value.
     */
    public boolean generateClientRequestId() {
        return this.generateClientRequestId;
    }

    /**
     * Sets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @param generateClientRequestId the generateClientRequestId value.
     * @return the service client itself
     */
    public TranslatorTextClientImpl withGenerateClientRequestId(boolean generateClientRequestId) {
        this.generateClientRequestId = generateClientRequestId;
        return this;
    }

    /**
     * The BreakSentences object to access its operations.
     */
    private BreakSentences breakSentences;

    /**
     * Gets the BreakSentences object to access its operations.
     * @return the BreakSentences object.
     */
    public BreakSentences breakSentences() {
        return this.breakSentences;
    }

    /**
     * The Detects object to access its operations.
     */
    private Detects detects;

    /**
     * Gets the Detects object to access its operations.
     * @return the Detects object.
     */
    public Detects detects() {
        return this.detects;
    }

    /**
     * The Dictionarys object to access its operations.
     */
    private Dictionarys dictionarys;

    /**
     * Gets the Dictionarys object to access its operations.
     * @return the Dictionarys object.
     */
    public Dictionarys dictionarys() {
        return this.dictionarys;
    }

    /**
     * The DictionaryExamples object to access its operations.
     */
    private DictionaryExamples dictionaryExamples;

    /**
     * Gets the DictionaryExamples object to access its operations.
     * @return the DictionaryExamples object.
     */
    public DictionaryExamples dictionaryExamples() {
        return this.dictionaryExamples;
    }

    /**
     * The Translates object to access its operations.
     */
    private Translates translates;

    /**
     * Gets the Translates object to access its operations.
     * @return the Translates object.
     */
    public Translates translates() {
        return this.translates;
    }

    /**
     * The Transliterates object to access its operations.
     */
    private Transliterates transliterates;

    /**
     * Gets the Transliterates object to access its operations.
     * @return the Transliterates object.
     */
    public Transliterates transliterates() {
        return this.transliterates;
    }

    /**
     * Initializes an instance of TranslatorTextClient client.
     *
     * @param credentials the management credentials for Azure
     */
    public TranslatorTextClientImpl(ServiceClientCredentials credentials) {
        this("https://{Endpoint}", credentials);
    }

    /**
     * Initializes an instance of TranslatorTextClient client.
     *
     * @param baseUrl the base URL of the host
     * @param credentials the management credentials for Azure
     */
    private TranslatorTextClientImpl(String baseUrl, ServiceClientCredentials credentials) {
        super(baseUrl, credentials);
        initialize();
    }

    /**
     * Initializes an instance of TranslatorTextClient client.
     *
     * @param restClient the REST client to connect to Azure.
     */
    public TranslatorTextClientImpl(RestClient restClient) {
        super(restClient);
        initialize();
    }

    protected void initialize() {
        this.acceptLanguage = "en-US";
        this.longRunningOperationRetryTimeout = 30;
        this.generateClientRequestId = true;
        this.breakSentences = new BreakSentencesImpl(restClient().retrofit(), this);
        this.detects = new DetectsImpl(restClient().retrofit(), this);
        this.dictionarys = new DictionarysImpl(restClient().retrofit(), this);
        this.dictionaryExamples = new DictionaryExamplesImpl(restClient().retrofit(), this);
        this.translates = new TranslatesImpl(restClient().retrofit(), this);
        this.transliterates = new TransliteratesImpl(restClient().retrofit(), this);
        this.azureClient = new AzureClient(this);
        initializeService();
    }

    /**
     * Gets the User-Agent header for the client.
     *
     * @return the user agent string.
     */
    @Override
    public String userAgent() {
        return String.format("%s (%s, %s)", super.userAgent(), "TranslatorTextClient", "3.0");
    }

    private void initializeService() {
        service = restClient().retrofit().create(TranslatorTextClientService.class);
    }

    /**
     * The interface defining all the services for TranslatorTextClient to be
     * used by Retrofit to perform actually REST calls.
     */
    interface TranslatorTextClientService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.translatortext.TranslatorTextClient languagesTextTranslationV3" })
        @GET("Languages")
        Observable<Response<ResponseBody>> languagesTextTranslationV3(@Query("api-version") String apiVersion, @Query("scope") String scope, @Header("Accept-Language") String acceptLanguage, @Header("X-ClientTraceId") String xClientTraceId, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the set of languages currently supported by other operations of the Translator Text API.
     **Authentication is not required to get language resources.**
     # Response Body
     A client uses the `scope` query parameter to define which groups of languages it is interested in.
     * `scope=translation` provides languages supported to translate text from one language to another language.
     * `scope=transliteration` provides capabilities for converting text in one language from one script to another script.
     * `scope=dictionary` provides language pairs for which `Dictionary` operations return data.
     A client may retrieve several groups simultaneously by specifying a comma-separated list of names. For example, `scope=translation,transliteration,dictionary` would return supported languages for all groups.
     A successful response is a JSON object with one property for each requested group.
     The value for each property is as follows.
     * `translation` property
       The value of the `translation` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. A key identifies a language for which text can be translated to or translated from. The value associated with the key is a JSON object with properties that describe the language
       * `name-` Display name of the language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
     ```json
     {
       "translation": {
       ...
       "fr": {
       "name": "French",
       "nativeName": "Français",
       "dir": "ltr"
       },
     ...
      }
     }
     ```
     * `transliteration` property
       The value of the `transliteration` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. A key identifies a language for which text can be converted from one script to another script. The value associated with the key is a JSON object with properties that describe the language and its supported scripts
       * `name-` Display name of the language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `scripts-` List of scripts to convert from. Each element of the `scripts` list has properties-
         * `code-` Code identifying the script.
         * `name-` Display name of the script in the locale requested via `Accept-Language` header.
         * `nativeName-` Display name of the language in the locale native for the language.
         * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
         * `toScripts-` List of scripts available to convert text to. Each element of the `toScripts` list has properties `code`, `name`, `nativeName`, and `dir` as described earlier.
     ```json
     {
       "transliteration": {
         ...
         "ja": {
           "name": "Japanese",
           "nativeName": "日本語",
           "scripts": [
             {
               "code": "Jpan",
               "name": "Japanese",
               "nativeName": "日本語",
               "dir": "ltr",
               "toScripts": [
                 {
                   "code": "Latn",
                   "name": "Latin",
                   "nativeName": "ラテン語",
                   "dir": "ltr"
                 }
               ]
             },
             {
               "code": "Latn",
               "name": "Latin",
               "nativeName": "ラテン語",
               "dir": "ltr",
               "toScripts": [
               {
                 "code": "Jpan",
                 "name": "Japanese",
                 "nativeName": "日本語",
                 "dir": "ltr"
               }
               ]
             }
           ]
         },
       ...
       }
     }
     ```
     * `dictionary` property
     The value of the `dictionary` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. The key identifies a language for which alternative translations and back-translations are available. The value is a JSON object that describes the source language and the target languages with available translations.
       * `name-` Display name of the source language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
       * `translations-` List of languages with alterative translations and examples for the query expressed in the source language. Each element of the `translations` list has properties
         * `name-` Display name of the target language in the locale requested via `Accept-Language` header.
         * `nativeName-` Display name of the target language in the locale native for the target language.
         * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
         * `code-` Language code identifying the target language.
     ```json
     "es": {
       "name": "Spanish",
       "nativeName": "Español",
       "dir": "ltr",
       "translations": [
         {
           "name": "English",
           "nativeName": "English",
           "dir": "ltr",
           "code": "en"
         }
       ]
     },
     ```
     The structure of the response object will not change without a change in the version of the API. For the same version of the API, the list of available languages may change over time because Microsoft Translator continually extends the list of languages supported by its services.
     The list of supported languages will not change frequently. To save network bandwidth and improve responsiveness, a client application should consider caching language resources and the corresponding entity tag (`ETag`). Then, the client application can periodically (for example, once every 24 hours) query the service to fetch the latest set of supported languages. Passing the current `ETag` value in an `If-None-Match` header field will allow the service to optimize the response. If the resource has not been modified, the service will return status code 304 and an empty response body.
     # Response Header
     ETag - Current value of the entity tag for the requested groups of supported languages. To make subsequent requests more efficient, the client may send the `ETag` value in an `If-None-Match` header field.
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorMessageException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LanguageExampleSuccess object if successful.
     */
    public LanguageExampleSuccess languagesTextTranslationV3(String apiVersion) {
        return languagesTextTranslationV3WithServiceResponseAsync(apiVersion).toBlocking().single().body();
    }

    /**
     * Gets the set of languages currently supported by other operations of the Translator Text API.
     **Authentication is not required to get language resources.**
     # Response Body
     A client uses the `scope` query parameter to define which groups of languages it is interested in.
     * `scope=translation` provides languages supported to translate text from one language to another language.
     * `scope=transliteration` provides capabilities for converting text in one language from one script to another script.
     * `scope=dictionary` provides language pairs for which `Dictionary` operations return data.
     A client may retrieve several groups simultaneously by specifying a comma-separated list of names. For example, `scope=translation,transliteration,dictionary` would return supported languages for all groups.
     A successful response is a JSON object with one property for each requested group.
     The value for each property is as follows.
     * `translation` property
       The value of the `translation` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. A key identifies a language for which text can be translated to or translated from. The value associated with the key is a JSON object with properties that describe the language
       * `name-` Display name of the language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
     ```json
     {
       "translation": {
       ...
       "fr": {
       "name": "French",
       "nativeName": "Français",
       "dir": "ltr"
       },
     ...
      }
     }
     ```
     * `transliteration` property
       The value of the `transliteration` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. A key identifies a language for which text can be converted from one script to another script. The value associated with the key is a JSON object with properties that describe the language and its supported scripts
       * `name-` Display name of the language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `scripts-` List of scripts to convert from. Each element of the `scripts` list has properties-
         * `code-` Code identifying the script.
         * `name-` Display name of the script in the locale requested via `Accept-Language` header.
         * `nativeName-` Display name of the language in the locale native for the language.
         * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
         * `toScripts-` List of scripts available to convert text to. Each element of the `toScripts` list has properties `code`, `name`, `nativeName`, and `dir` as described earlier.
     ```json
     {
       "transliteration": {
         ...
         "ja": {
           "name": "Japanese",
           "nativeName": "日本語",
           "scripts": [
             {
               "code": "Jpan",
               "name": "Japanese",
               "nativeName": "日本語",
               "dir": "ltr",
               "toScripts": [
                 {
                   "code": "Latn",
                   "name": "Latin",
                   "nativeName": "ラテン語",
                   "dir": "ltr"
                 }
               ]
             },
             {
               "code": "Latn",
               "name": "Latin",
               "nativeName": "ラテン語",
               "dir": "ltr",
               "toScripts": [
               {
                 "code": "Jpan",
                 "name": "Japanese",
                 "nativeName": "日本語",
                 "dir": "ltr"
               }
               ]
             }
           ]
         },
       ...
       }
     }
     ```
     * `dictionary` property
     The value of the `dictionary` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. The key identifies a language for which alternative translations and back-translations are available. The value is a JSON object that describes the source language and the target languages with available translations.
       * `name-` Display name of the source language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
       * `translations-` List of languages with alterative translations and examples for the query expressed in the source language. Each element of the `translations` list has properties
         * `name-` Display name of the target language in the locale requested via `Accept-Language` header.
         * `nativeName-` Display name of the target language in the locale native for the target language.
         * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
         * `code-` Language code identifying the target language.
     ```json
     "es": {
       "name": "Spanish",
       "nativeName": "Español",
       "dir": "ltr",
       "translations": [
         {
           "name": "English",
           "nativeName": "English",
           "dir": "ltr",
           "code": "en"
         }
       ]
     },
     ```
     The structure of the response object will not change without a change in the version of the API. For the same version of the API, the list of available languages may change over time because Microsoft Translator continually extends the list of languages supported by its services.
     The list of supported languages will not change frequently. To save network bandwidth and improve responsiveness, a client application should consider caching language resources and the corresponding entity tag (`ETag`). Then, the client application can periodically (for example, once every 24 hours) query the service to fetch the latest set of supported languages. Passing the current `ETag` value in an `If-None-Match` header field will allow the service to optimize the response. If the resource has not been modified, the service will return status code 304 and an empty response body.
     # Response Header
     ETag - Current value of the entity tag for the requested groups of supported languages. To make subsequent requests more efficient, the client may send the `ETag` value in an `If-None-Match` header field.
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LanguageExampleSuccess> languagesTextTranslationV3Async(String apiVersion, final ServiceCallback<LanguageExampleSuccess> serviceCallback) {
        return ServiceFuture.fromResponse(languagesTextTranslationV3WithServiceResponseAsync(apiVersion), serviceCallback);
    }

    /**
     * Gets the set of languages currently supported by other operations of the Translator Text API.
     **Authentication is not required to get language resources.**
     # Response Body
     A client uses the `scope` query parameter to define which groups of languages it is interested in.
     * `scope=translation` provides languages supported to translate text from one language to another language.
     * `scope=transliteration` provides capabilities for converting text in one language from one script to another script.
     * `scope=dictionary` provides language pairs for which `Dictionary` operations return data.
     A client may retrieve several groups simultaneously by specifying a comma-separated list of names. For example, `scope=translation,transliteration,dictionary` would return supported languages for all groups.
     A successful response is a JSON object with one property for each requested group.
     The value for each property is as follows.
     * `translation` property
       The value of the `translation` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. A key identifies a language for which text can be translated to or translated from. The value associated with the key is a JSON object with properties that describe the language
       * `name-` Display name of the language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
     ```json
     {
       "translation": {
       ...
       "fr": {
       "name": "French",
       "nativeName": "Français",
       "dir": "ltr"
       },
     ...
      }
     }
     ```
     * `transliteration` property
       The value of the `transliteration` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. A key identifies a language for which text can be converted from one script to another script. The value associated with the key is a JSON object with properties that describe the language and its supported scripts
       * `name-` Display name of the language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `scripts-` List of scripts to convert from. Each element of the `scripts` list has properties-
         * `code-` Code identifying the script.
         * `name-` Display name of the script in the locale requested via `Accept-Language` header.
         * `nativeName-` Display name of the language in the locale native for the language.
         * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
         * `toScripts-` List of scripts available to convert text to. Each element of the `toScripts` list has properties `code`, `name`, `nativeName`, and `dir` as described earlier.
     ```json
     {
       "transliteration": {
         ...
         "ja": {
           "name": "Japanese",
           "nativeName": "日本語",
           "scripts": [
             {
               "code": "Jpan",
               "name": "Japanese",
               "nativeName": "日本語",
               "dir": "ltr",
               "toScripts": [
                 {
                   "code": "Latn",
                   "name": "Latin",
                   "nativeName": "ラテン語",
                   "dir": "ltr"
                 }
               ]
             },
             {
               "code": "Latn",
               "name": "Latin",
               "nativeName": "ラテン語",
               "dir": "ltr",
               "toScripts": [
               {
                 "code": "Jpan",
                 "name": "Japanese",
                 "nativeName": "日本語",
                 "dir": "ltr"
               }
               ]
             }
           ]
         },
       ...
       }
     }
     ```
     * `dictionary` property
     The value of the `dictionary` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. The key identifies a language for which alternative translations and back-translations are available. The value is a JSON object that describes the source language and the target languages with available translations.
       * `name-` Display name of the source language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
       * `translations-` List of languages with alterative translations and examples for the query expressed in the source language. Each element of the `translations` list has properties
         * `name-` Display name of the target language in the locale requested via `Accept-Language` header.
         * `nativeName-` Display name of the target language in the locale native for the target language.
         * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
         * `code-` Language code identifying the target language.
     ```json
     "es": {
       "name": "Spanish",
       "nativeName": "Español",
       "dir": "ltr",
       "translations": [
         {
           "name": "English",
           "nativeName": "English",
           "dir": "ltr",
           "code": "en"
         }
       ]
     },
     ```
     The structure of the response object will not change without a change in the version of the API. For the same version of the API, the list of available languages may change over time because Microsoft Translator continually extends the list of languages supported by its services.
     The list of supported languages will not change frequently. To save network bandwidth and improve responsiveness, a client application should consider caching language resources and the corresponding entity tag (`ETag`). Then, the client application can periodically (for example, once every 24 hours) query the service to fetch the latest set of supported languages. Passing the current `ETag` value in an `If-None-Match` header field will allow the service to optimize the response. If the resource has not been modified, the service will return status code 304 and an empty response body.
     # Response Header
     ETag - Current value of the entity tag for the requested groups of supported languages. To make subsequent requests more efficient, the client may send the `ETag` value in an `If-None-Match` header field.
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LanguageExampleSuccess object
     */
    public Observable<LanguageExampleSuccess> languagesTextTranslationV3Async(String apiVersion) {
        return languagesTextTranslationV3WithServiceResponseAsync(apiVersion).map(new Func1<ServiceResponse<LanguageExampleSuccess>, LanguageExampleSuccess>() {
            @Override
            public LanguageExampleSuccess call(ServiceResponse<LanguageExampleSuccess> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the set of languages currently supported by other operations of the Translator Text API.
     **Authentication is not required to get language resources.**
     # Response Body
     A client uses the `scope` query parameter to define which groups of languages it is interested in.
     * `scope=translation` provides languages supported to translate text from one language to another language.
     * `scope=transliteration` provides capabilities for converting text in one language from one script to another script.
     * `scope=dictionary` provides language pairs for which `Dictionary` operations return data.
     A client may retrieve several groups simultaneously by specifying a comma-separated list of names. For example, `scope=translation,transliteration,dictionary` would return supported languages for all groups.
     A successful response is a JSON object with one property for each requested group.
     The value for each property is as follows.
     * `translation` property
       The value of the `translation` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. A key identifies a language for which text can be translated to or translated from. The value associated with the key is a JSON object with properties that describe the language
       * `name-` Display name of the language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
     ```json
     {
       "translation": {
       ...
       "fr": {
       "name": "French",
       "nativeName": "Français",
       "dir": "ltr"
       },
     ...
      }
     }
     ```
     * `transliteration` property
       The value of the `transliteration` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. A key identifies a language for which text can be converted from one script to another script. The value associated with the key is a JSON object with properties that describe the language and its supported scripts
       * `name-` Display name of the language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `scripts-` List of scripts to convert from. Each element of the `scripts` list has properties-
         * `code-` Code identifying the script.
         * `name-` Display name of the script in the locale requested via `Accept-Language` header.
         * `nativeName-` Display name of the language in the locale native for the language.
         * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
         * `toScripts-` List of scripts available to convert text to. Each element of the `toScripts` list has properties `code`, `name`, `nativeName`, and `dir` as described earlier.
     ```json
     {
       "transliteration": {
         ...
         "ja": {
           "name": "Japanese",
           "nativeName": "日本語",
           "scripts": [
             {
               "code": "Jpan",
               "name": "Japanese",
               "nativeName": "日本語",
               "dir": "ltr",
               "toScripts": [
                 {
                   "code": "Latn",
                   "name": "Latin",
                   "nativeName": "ラテン語",
                   "dir": "ltr"
                 }
               ]
             },
             {
               "code": "Latn",
               "name": "Latin",
               "nativeName": "ラテン語",
               "dir": "ltr",
               "toScripts": [
               {
                 "code": "Jpan",
                 "name": "Japanese",
                 "nativeName": "日本語",
                 "dir": "ltr"
               }
               ]
             }
           ]
         },
       ...
       }
     }
     ```
     * `dictionary` property
     The value of the `dictionary` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. The key identifies a language for which alternative translations and back-translations are available. The value is a JSON object that describes the source language and the target languages with available translations.
       * `name-` Display name of the source language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
       * `translations-` List of languages with alterative translations and examples for the query expressed in the source language. Each element of the `translations` list has properties
         * `name-` Display name of the target language in the locale requested via `Accept-Language` header.
         * `nativeName-` Display name of the target language in the locale native for the target language.
         * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
         * `code-` Language code identifying the target language.
     ```json
     "es": {
       "name": "Spanish",
       "nativeName": "Español",
       "dir": "ltr",
       "translations": [
         {
           "name": "English",
           "nativeName": "English",
           "dir": "ltr",
           "code": "en"
         }
       ]
     },
     ```
     The structure of the response object will not change without a change in the version of the API. For the same version of the API, the list of available languages may change over time because Microsoft Translator continually extends the list of languages supported by its services.
     The list of supported languages will not change frequently. To save network bandwidth and improve responsiveness, a client application should consider caching language resources and the corresponding entity tag (`ETag`). Then, the client application can periodically (for example, once every 24 hours) query the service to fetch the latest set of supported languages. Passing the current `ETag` value in an `If-None-Match` header field will allow the service to optimize the response. If the resource has not been modified, the service will return status code 304 and an empty response body.
     # Response Header
     ETag - Current value of the entity tag for the requested groups of supported languages. To make subsequent requests more efficient, the client may send the `ETag` value in an `If-None-Match` header field.
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LanguageExampleSuccess object
     */
    public Observable<ServiceResponse<LanguageExampleSuccess>> languagesTextTranslationV3WithServiceResponseAsync(String apiVersion) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        final String scope = null;
        final String acceptLanguage = null;
        final String xClientTraceId = null;
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.languagesTextTranslationV3(apiVersion, scope, acceptLanguage, xClientTraceId, parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LanguageExampleSuccess>>>() {
                @Override
                public Observable<ServiceResponse<LanguageExampleSuccess>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LanguageExampleSuccess> clientResponse = languagesTextTranslationV3Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets the set of languages currently supported by other operations of the Translator Text API.
     **Authentication is not required to get language resources.**
     # Response Body
     A client uses the `scope` query parameter to define which groups of languages it is interested in.
     * `scope=translation` provides languages supported to translate text from one language to another language.
     * `scope=transliteration` provides capabilities for converting text in one language from one script to another script.
     * `scope=dictionary` provides language pairs for which `Dictionary` operations return data.
     A client may retrieve several groups simultaneously by specifying a comma-separated list of names. For example, `scope=translation,transliteration,dictionary` would return supported languages for all groups.
     A successful response is a JSON object with one property for each requested group.
     The value for each property is as follows.
     * `translation` property
       The value of the `translation` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. A key identifies a language for which text can be translated to or translated from. The value associated with the key is a JSON object with properties that describe the language
       * `name-` Display name of the language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
     ```json
     {
       "translation": {
       ...
       "fr": {
       "name": "French",
       "nativeName": "Français",
       "dir": "ltr"
       },
     ...
      }
     }
     ```
     * `transliteration` property
       The value of the `transliteration` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. A key identifies a language for which text can be converted from one script to another script. The value associated with the key is a JSON object with properties that describe the language and its supported scripts
       * `name-` Display name of the language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `scripts-` List of scripts to convert from. Each element of the `scripts` list has properties-
         * `code-` Code identifying the script.
         * `name-` Display name of the script in the locale requested via `Accept-Language` header.
         * `nativeName-` Display name of the language in the locale native for the language.
         * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
         * `toScripts-` List of scripts available to convert text to. Each element of the `toScripts` list has properties `code`, `name`, `nativeName`, and `dir` as described earlier.
     ```json
     {
       "transliteration": {
         ...
         "ja": {
           "name": "Japanese",
           "nativeName": "日本語",
           "scripts": [
             {
               "code": "Jpan",
               "name": "Japanese",
               "nativeName": "日本語",
               "dir": "ltr",
               "toScripts": [
                 {
                   "code": "Latn",
                   "name": "Latin",
                   "nativeName": "ラテン語",
                   "dir": "ltr"
                 }
               ]
             },
             {
               "code": "Latn",
               "name": "Latin",
               "nativeName": "ラテン語",
               "dir": "ltr",
               "toScripts": [
               {
                 "code": "Jpan",
                 "name": "Japanese",
                 "nativeName": "日本語",
                 "dir": "ltr"
               }
               ]
             }
           ]
         },
       ...
       }
     }
     ```
     * `dictionary` property
     The value of the `dictionary` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. The key identifies a language for which alternative translations and back-translations are available. The value is a JSON object that describes the source language and the target languages with available translations.
       * `name-` Display name of the source language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
       * `translations-` List of languages with alterative translations and examples for the query expressed in the source language. Each element of the `translations` list has properties
         * `name-` Display name of the target language in the locale requested via `Accept-Language` header.
         * `nativeName-` Display name of the target language in the locale native for the target language.
         * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
         * `code-` Language code identifying the target language.
     ```json
     "es": {
       "name": "Spanish",
       "nativeName": "Español",
       "dir": "ltr",
       "translations": [
         {
           "name": "English",
           "nativeName": "English",
           "dir": "ltr",
           "code": "en"
         }
       ]
     },
     ```
     The structure of the response object will not change without a change in the version of the API. For the same version of the API, the list of available languages may change over time because Microsoft Translator continually extends the list of languages supported by its services.
     The list of supported languages will not change frequently. To save network bandwidth and improve responsiveness, a client application should consider caching language resources and the corresponding entity tag (`ETag`). Then, the client application can periodically (for example, once every 24 hours) query the service to fetch the latest set of supported languages. Passing the current `ETag` value in an `If-None-Match` header field will allow the service to optimize the response. If the resource has not been modified, the service will return status code 304 and an empty response body.
     # Response Header
     ETag - Current value of the entity tag for the requested groups of supported languages. To make subsequent requests more efficient, the client may send the `ETag` value in an `If-None-Match` header field.
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param scope A comma-separated list of names defining the group of languages to return. Allowed group names are- `translation`, `transliteration` and `dictionary`. If no scope is given, then all groups are returned, which is equivalent to passing `scope=translation,transliteration,dictionary`. To decide which set of supported languages is appropriate for your scenario, see the description of the response object.
     * @param acceptLanguage The language to use for user interface strings. Some of the fields in the response are names of languages or names of regions. Use this parameter to define the language in which these names are returned. The language is specified by providing a well-formed BCP 47 language tag. For instance, use the value `fr` to request names in French or use the value `zh-Hant` to request names in Chinese Traditional. Names are provided in the English language when a target language is not specified or when localization is not available.
     * @param xClientTraceId A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorMessageException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LanguageExampleSuccess object if successful.
     */
    public LanguageExampleSuccess languagesTextTranslationV3(String apiVersion, String scope, String acceptLanguage, String xClientTraceId) {
        return languagesTextTranslationV3WithServiceResponseAsync(apiVersion, scope, acceptLanguage, xClientTraceId).toBlocking().single().body();
    }

    /**
     * Gets the set of languages currently supported by other operations of the Translator Text API.
     **Authentication is not required to get language resources.**
     # Response Body
     A client uses the `scope` query parameter to define which groups of languages it is interested in.
     * `scope=translation` provides languages supported to translate text from one language to another language.
     * `scope=transliteration` provides capabilities for converting text in one language from one script to another script.
     * `scope=dictionary` provides language pairs for which `Dictionary` operations return data.
     A client may retrieve several groups simultaneously by specifying a comma-separated list of names. For example, `scope=translation,transliteration,dictionary` would return supported languages for all groups.
     A successful response is a JSON object with one property for each requested group.
     The value for each property is as follows.
     * `translation` property
       The value of the `translation` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. A key identifies a language for which text can be translated to or translated from. The value associated with the key is a JSON object with properties that describe the language
       * `name-` Display name of the language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
     ```json
     {
       "translation": {
       ...
       "fr": {
       "name": "French",
       "nativeName": "Français",
       "dir": "ltr"
       },
     ...
      }
     }
     ```
     * `transliteration` property
       The value of the `transliteration` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. A key identifies a language for which text can be converted from one script to another script. The value associated with the key is a JSON object with properties that describe the language and its supported scripts
       * `name-` Display name of the language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `scripts-` List of scripts to convert from. Each element of the `scripts` list has properties-
         * `code-` Code identifying the script.
         * `name-` Display name of the script in the locale requested via `Accept-Language` header.
         * `nativeName-` Display name of the language in the locale native for the language.
         * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
         * `toScripts-` List of scripts available to convert text to. Each element of the `toScripts` list has properties `code`, `name`, `nativeName`, and `dir` as described earlier.
     ```json
     {
       "transliteration": {
         ...
         "ja": {
           "name": "Japanese",
           "nativeName": "日本語",
           "scripts": [
             {
               "code": "Jpan",
               "name": "Japanese",
               "nativeName": "日本語",
               "dir": "ltr",
               "toScripts": [
                 {
                   "code": "Latn",
                   "name": "Latin",
                   "nativeName": "ラテン語",
                   "dir": "ltr"
                 }
               ]
             },
             {
               "code": "Latn",
               "name": "Latin",
               "nativeName": "ラテン語",
               "dir": "ltr",
               "toScripts": [
               {
                 "code": "Jpan",
                 "name": "Japanese",
                 "nativeName": "日本語",
                 "dir": "ltr"
               }
               ]
             }
           ]
         },
       ...
       }
     }
     ```
     * `dictionary` property
     The value of the `dictionary` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. The key identifies a language for which alternative translations and back-translations are available. The value is a JSON object that describes the source language and the target languages with available translations.
       * `name-` Display name of the source language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
       * `translations-` List of languages with alterative translations and examples for the query expressed in the source language. Each element of the `translations` list has properties
         * `name-` Display name of the target language in the locale requested via `Accept-Language` header.
         * `nativeName-` Display name of the target language in the locale native for the target language.
         * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
         * `code-` Language code identifying the target language.
     ```json
     "es": {
       "name": "Spanish",
       "nativeName": "Español",
       "dir": "ltr",
       "translations": [
         {
           "name": "English",
           "nativeName": "English",
           "dir": "ltr",
           "code": "en"
         }
       ]
     },
     ```
     The structure of the response object will not change without a change in the version of the API. For the same version of the API, the list of available languages may change over time because Microsoft Translator continually extends the list of languages supported by its services.
     The list of supported languages will not change frequently. To save network bandwidth and improve responsiveness, a client application should consider caching language resources and the corresponding entity tag (`ETag`). Then, the client application can periodically (for example, once every 24 hours) query the service to fetch the latest set of supported languages. Passing the current `ETag` value in an `If-None-Match` header field will allow the service to optimize the response. If the resource has not been modified, the service will return status code 304 and an empty response body.
     # Response Header
     ETag - Current value of the entity tag for the requested groups of supported languages. To make subsequent requests more efficient, the client may send the `ETag` value in an `If-None-Match` header field.
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param scope A comma-separated list of names defining the group of languages to return. Allowed group names are- `translation`, `transliteration` and `dictionary`. If no scope is given, then all groups are returned, which is equivalent to passing `scope=translation,transliteration,dictionary`. To decide which set of supported languages is appropriate for your scenario, see the description of the response object.
     * @param acceptLanguage The language to use for user interface strings. Some of the fields in the response are names of languages or names of regions. Use this parameter to define the language in which these names are returned. The language is specified by providing a well-formed BCP 47 language tag. For instance, use the value `fr` to request names in French or use the value `zh-Hant` to request names in Chinese Traditional. Names are provided in the English language when a target language is not specified or when localization is not available.
     * @param xClientTraceId A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LanguageExampleSuccess> languagesTextTranslationV3Async(String apiVersion, String scope, String acceptLanguage, String xClientTraceId, final ServiceCallback<LanguageExampleSuccess> serviceCallback) {
        return ServiceFuture.fromResponse(languagesTextTranslationV3WithServiceResponseAsync(apiVersion, scope, acceptLanguage, xClientTraceId), serviceCallback);
    }

    /**
     * Gets the set of languages currently supported by other operations of the Translator Text API.
     **Authentication is not required to get language resources.**
     # Response Body
     A client uses the `scope` query parameter to define which groups of languages it is interested in.
     * `scope=translation` provides languages supported to translate text from one language to another language.
     * `scope=transliteration` provides capabilities for converting text in one language from one script to another script.
     * `scope=dictionary` provides language pairs for which `Dictionary` operations return data.
     A client may retrieve several groups simultaneously by specifying a comma-separated list of names. For example, `scope=translation,transliteration,dictionary` would return supported languages for all groups.
     A successful response is a JSON object with one property for each requested group.
     The value for each property is as follows.
     * `translation` property
       The value of the `translation` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. A key identifies a language for which text can be translated to or translated from. The value associated with the key is a JSON object with properties that describe the language
       * `name-` Display name of the language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
     ```json
     {
       "translation": {
       ...
       "fr": {
       "name": "French",
       "nativeName": "Français",
       "dir": "ltr"
       },
     ...
      }
     }
     ```
     * `transliteration` property
       The value of the `transliteration` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. A key identifies a language for which text can be converted from one script to another script. The value associated with the key is a JSON object with properties that describe the language and its supported scripts
       * `name-` Display name of the language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `scripts-` List of scripts to convert from. Each element of the `scripts` list has properties-
         * `code-` Code identifying the script.
         * `name-` Display name of the script in the locale requested via `Accept-Language` header.
         * `nativeName-` Display name of the language in the locale native for the language.
         * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
         * `toScripts-` List of scripts available to convert text to. Each element of the `toScripts` list has properties `code`, `name`, `nativeName`, and `dir` as described earlier.
     ```json
     {
       "transliteration": {
         ...
         "ja": {
           "name": "Japanese",
           "nativeName": "日本語",
           "scripts": [
             {
               "code": "Jpan",
               "name": "Japanese",
               "nativeName": "日本語",
               "dir": "ltr",
               "toScripts": [
                 {
                   "code": "Latn",
                   "name": "Latin",
                   "nativeName": "ラテン語",
                   "dir": "ltr"
                 }
               ]
             },
             {
               "code": "Latn",
               "name": "Latin",
               "nativeName": "ラテン語",
               "dir": "ltr",
               "toScripts": [
               {
                 "code": "Jpan",
                 "name": "Japanese",
                 "nativeName": "日本語",
                 "dir": "ltr"
               }
               ]
             }
           ]
         },
       ...
       }
     }
     ```
     * `dictionary` property
     The value of the `dictionary` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. The key identifies a language for which alternative translations and back-translations are available. The value is a JSON object that describes the source language and the target languages with available translations.
       * `name-` Display name of the source language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
       * `translations-` List of languages with alterative translations and examples for the query expressed in the source language. Each element of the `translations` list has properties
         * `name-` Display name of the target language in the locale requested via `Accept-Language` header.
         * `nativeName-` Display name of the target language in the locale native for the target language.
         * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
         * `code-` Language code identifying the target language.
     ```json
     "es": {
       "name": "Spanish",
       "nativeName": "Español",
       "dir": "ltr",
       "translations": [
         {
           "name": "English",
           "nativeName": "English",
           "dir": "ltr",
           "code": "en"
         }
       ]
     },
     ```
     The structure of the response object will not change without a change in the version of the API. For the same version of the API, the list of available languages may change over time because Microsoft Translator continually extends the list of languages supported by its services.
     The list of supported languages will not change frequently. To save network bandwidth and improve responsiveness, a client application should consider caching language resources and the corresponding entity tag (`ETag`). Then, the client application can periodically (for example, once every 24 hours) query the service to fetch the latest set of supported languages. Passing the current `ETag` value in an `If-None-Match` header field will allow the service to optimize the response. If the resource has not been modified, the service will return status code 304 and an empty response body.
     # Response Header
     ETag - Current value of the entity tag for the requested groups of supported languages. To make subsequent requests more efficient, the client may send the `ETag` value in an `If-None-Match` header field.
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param scope A comma-separated list of names defining the group of languages to return. Allowed group names are- `translation`, `transliteration` and `dictionary`. If no scope is given, then all groups are returned, which is equivalent to passing `scope=translation,transliteration,dictionary`. To decide which set of supported languages is appropriate for your scenario, see the description of the response object.
     * @param acceptLanguage The language to use for user interface strings. Some of the fields in the response are names of languages or names of regions. Use this parameter to define the language in which these names are returned. The language is specified by providing a well-formed BCP 47 language tag. For instance, use the value `fr` to request names in French or use the value `zh-Hant` to request names in Chinese Traditional. Names are provided in the English language when a target language is not specified or when localization is not available.
     * @param xClientTraceId A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LanguageExampleSuccess object
     */
    public Observable<LanguageExampleSuccess> languagesTextTranslationV3Async(String apiVersion, String scope, String acceptLanguage, String xClientTraceId) {
        return languagesTextTranslationV3WithServiceResponseAsync(apiVersion, scope, acceptLanguage, xClientTraceId).map(new Func1<ServiceResponse<LanguageExampleSuccess>, LanguageExampleSuccess>() {
            @Override
            public LanguageExampleSuccess call(ServiceResponse<LanguageExampleSuccess> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the set of languages currently supported by other operations of the Translator Text API.
     **Authentication is not required to get language resources.**
     # Response Body
     A client uses the `scope` query parameter to define which groups of languages it is interested in.
     * `scope=translation` provides languages supported to translate text from one language to another language.
     * `scope=transliteration` provides capabilities for converting text in one language from one script to another script.
     * `scope=dictionary` provides language pairs for which `Dictionary` operations return data.
     A client may retrieve several groups simultaneously by specifying a comma-separated list of names. For example, `scope=translation,transliteration,dictionary` would return supported languages for all groups.
     A successful response is a JSON object with one property for each requested group.
     The value for each property is as follows.
     * `translation` property
       The value of the `translation` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. A key identifies a language for which text can be translated to or translated from. The value associated with the key is a JSON object with properties that describe the language
       * `name-` Display name of the language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
     ```json
     {
       "translation": {
       ...
       "fr": {
       "name": "French",
       "nativeName": "Français",
       "dir": "ltr"
       },
     ...
      }
     }
     ```
     * `transliteration` property
       The value of the `transliteration` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. A key identifies a language for which text can be converted from one script to another script. The value associated with the key is a JSON object with properties that describe the language and its supported scripts
       * `name-` Display name of the language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `scripts-` List of scripts to convert from. Each element of the `scripts` list has properties-
         * `code-` Code identifying the script.
         * `name-` Display name of the script in the locale requested via `Accept-Language` header.
         * `nativeName-` Display name of the language in the locale native for the language.
         * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
         * `toScripts-` List of scripts available to convert text to. Each element of the `toScripts` list has properties `code`, `name`, `nativeName`, and `dir` as described earlier.
     ```json
     {
       "transliteration": {
         ...
         "ja": {
           "name": "Japanese",
           "nativeName": "日本語",
           "scripts": [
             {
               "code": "Jpan",
               "name": "Japanese",
               "nativeName": "日本語",
               "dir": "ltr",
               "toScripts": [
                 {
                   "code": "Latn",
                   "name": "Latin",
                   "nativeName": "ラテン語",
                   "dir": "ltr"
                 }
               ]
             },
             {
               "code": "Latn",
               "name": "Latin",
               "nativeName": "ラテン語",
               "dir": "ltr",
               "toScripts": [
               {
                 "code": "Jpan",
                 "name": "Japanese",
                 "nativeName": "日本語",
                 "dir": "ltr"
               }
               ]
             }
           ]
         },
       ...
       }
     }
     ```
     * `dictionary` property
     The value of the `dictionary` property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag. The key identifies a language for which alternative translations and back-translations are available. The value is a JSON object that describes the source language and the target languages with available translations.
       * `name-` Display name of the source language in the locale requested via `Accept-Language` header.
       * `nativeName-` Display name of the language in the locale native for this language.
       * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
       * `translations-` List of languages with alterative translations and examples for the query expressed in the source language. Each element of the `translations` list has properties
         * `name-` Display name of the target language in the locale requested via `Accept-Language` header.
         * `nativeName-` Display name of the target language in the locale native for the target language.
         * `dir-` Directionality, which is `rtl` for right-to-left languages or `ltr` for left-to-right languages.
         * `code-` Language code identifying the target language.
     ```json
     "es": {
       "name": "Spanish",
       "nativeName": "Español",
       "dir": "ltr",
       "translations": [
         {
           "name": "English",
           "nativeName": "English",
           "dir": "ltr",
           "code": "en"
         }
       ]
     },
     ```
     The structure of the response object will not change without a change in the version of the API. For the same version of the API, the list of available languages may change over time because Microsoft Translator continually extends the list of languages supported by its services.
     The list of supported languages will not change frequently. To save network bandwidth and improve responsiveness, a client application should consider caching language resources and the corresponding entity tag (`ETag`). Then, the client application can periodically (for example, once every 24 hours) query the service to fetch the latest set of supported languages. Passing the current `ETag` value in an `If-None-Match` header field will allow the service to optimize the response. If the resource has not been modified, the service will return status code 304 and an empty response body.
     # Response Header
     ETag - Current value of the entity tag for the requested groups of supported languages. To make subsequent requests more efficient, the client may send the `ETag` value in an `If-None-Match` header field.
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param scope A comma-separated list of names defining the group of languages to return. Allowed group names are- `translation`, `transliteration` and `dictionary`. If no scope is given, then all groups are returned, which is equivalent to passing `scope=translation,transliteration,dictionary`. To decide which set of supported languages is appropriate for your scenario, see the description of the response object.
     * @param acceptLanguage The language to use for user interface strings. Some of the fields in the response are names of languages or names of regions. Use this parameter to define the language in which these names are returned. The language is specified by providing a well-formed BCP 47 language tag. For instance, use the value `fr` to request names in French or use the value `zh-Hant` to request names in Chinese Traditional. Names are provided in the English language when a target language is not specified or when localization is not available.
     * @param xClientTraceId A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LanguageExampleSuccess object
     */
    public Observable<ServiceResponse<LanguageExampleSuccess>> languagesTextTranslationV3WithServiceResponseAsync(String apiVersion, String scope, String acceptLanguage, String xClientTraceId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.languagesTextTranslationV3(apiVersion, scope, acceptLanguage, xClientTraceId, parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LanguageExampleSuccess>>>() {
                @Override
                public Observable<ServiceResponse<LanguageExampleSuccess>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LanguageExampleSuccess> clientResponse = languagesTextTranslationV3Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LanguageExampleSuccess> languagesTextTranslationV3Delegate(Response<ResponseBody> response) throws ErrorMessageException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<LanguageExampleSuccess, ErrorMessageException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<LanguageExampleSuccess>() { }.getType())
                .registerError(ErrorMessageException.class)
                .build(response);
    }

}
