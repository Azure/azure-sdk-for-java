/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.translatortext.implementation;

import retrofit2.Retrofit;
import com.microsoft.azure.cognitiveservices.translatortext.DictionaryExamples;
import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.cognitiveservices.translatortext.models.DictionaryExampleSuccessItem;
import com.microsoft.azure.cognitiveservices.translatortext.models.DictionaryExampleTextInput;
import com.microsoft.azure.cognitiveservices.translatortext.models.ErrorMessageException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in DictionaryExamples.
 */
public class DictionaryExamplesImpl implements DictionaryExamples {
    /** The Retrofit service to perform REST calls. */
    private DictionaryExamplesService service;
    /** The service client containing this operation class. */
    private TranslatorTextClientImpl client;

    /**
     * Initializes an instance of DictionaryExamplesImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DictionaryExamplesImpl(Retrofit retrofit, TranslatorTextClientImpl client) {
        this.service = retrofit.create(DictionaryExamplesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for DictionaryExamples to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DictionaryExamplesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.translatortext.DictionaryExamples examplesPost" })
        @POST("Dictionary/Examples")
        Observable<Response<ResponseBody>> examplesPost(@Query("api-version") String apiVersion, @Query("from") String from, @Query("to") String to, @Header("X-ClientTraceId") String xClientTraceId, @Body List<DictionaryExampleTextInput> text, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

    }

    /**
     * Provides examples that show how terms in the dictionary are used in context. This operation is used in tandem with `Dictionary lookup`.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param from Specifies the language of the input text. The source language must be one of the supported languages included in the `dictionary` scope.
     * @param to Specifies the language of the output text. The target language must be one of the supported languages included in the `dictionary` scope.
     * @param text # Request body
     The body of the request is a JSON array. Each array element is a JSON object with the following properties:
     * `Text-` A string specifying the term to lookup. This should be the value of a `normalizedText` field from the back-translations of a previous Dictionary lookup request. It can also be the value of the `normalizedSource` field.
     * `Translation-` A string specifying the translated text previously returned by the Dictionary lookup operation. This should be the value from the `normalizedTarget` field in the `translations` list of the Dictionary lookup response. The service will return examples for the specific source-target word-pair.
     The following limitations apply:
     * The array can have at most 10 elements.
     * The text value of an array element cannot exceed 100 characters including spaces.
     # Response body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * `normalizedSource-` A string giving the normalized form of the source term. Generally, this should be identical to the value of the `Text` field at the matching list index in the body of the request.
     * `normalizedTarget-` A string giving the normalized form of the target term. Generally, this should be identical to the value of the `Translation` field at the matching list index in the body of the request.
     * `examples-` A list of examples for the (source term, target term) pair. Each element of the list is an object with the following properties:
       * `sourcePrefix-` The string to concatenate before the value of `sourceTerm` to form a complete example. Do not add a space character, since it is already there when it should be. This value may be an empty string.
       * `sourceTerm-` A string equal to the actual term looked up. The string is added with `sourcePrefix` and `sourceSuffix` to form the complete example. Its value is separated so it can be marked in a user interface, e.g., by bolding it.
       * `sourceSuffix-` The string to concatenate after the value of `sourceTerm` to form a complete example. Do not add a space character, since it is already there when it should be. This value may be an empty string.
       * `targetPrefix-` A string similar to `sourcePrefix` but for the target.
       * `targetTerm-` A string similar to `sourceTerm` but for the target.
       * `targetSuffix-` A string similar to `sourceSuffix` but for the target.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     NOTE - If there are no examples in the dictionary, the response is 200 (OK) but the `examples` list is an empty list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorMessageException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;DictionaryExampleSuccessItem&gt; object if successful.
     */
    public List<DictionaryExampleSuccessItem> examplesPost(String apiVersion, String from, String to, List<DictionaryExampleTextInput> text) {
        return examplesPostWithServiceResponseAsync(apiVersion, from, to, text).toBlocking().single().body();
    }

    /**
     * Provides examples that show how terms in the dictionary are used in context. This operation is used in tandem with `Dictionary lookup`.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param from Specifies the language of the input text. The source language must be one of the supported languages included in the `dictionary` scope.
     * @param to Specifies the language of the output text. The target language must be one of the supported languages included in the `dictionary` scope.
     * @param text # Request body
     The body of the request is a JSON array. Each array element is a JSON object with the following properties:
     * `Text-` A string specifying the term to lookup. This should be the value of a `normalizedText` field from the back-translations of a previous Dictionary lookup request. It can also be the value of the `normalizedSource` field.
     * `Translation-` A string specifying the translated text previously returned by the Dictionary lookup operation. This should be the value from the `normalizedTarget` field in the `translations` list of the Dictionary lookup response. The service will return examples for the specific source-target word-pair.
     The following limitations apply:
     * The array can have at most 10 elements.
     * The text value of an array element cannot exceed 100 characters including spaces.
     # Response body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * `normalizedSource-` A string giving the normalized form of the source term. Generally, this should be identical to the value of the `Text` field at the matching list index in the body of the request.
     * `normalizedTarget-` A string giving the normalized form of the target term. Generally, this should be identical to the value of the `Translation` field at the matching list index in the body of the request.
     * `examples-` A list of examples for the (source term, target term) pair. Each element of the list is an object with the following properties:
       * `sourcePrefix-` The string to concatenate before the value of `sourceTerm` to form a complete example. Do not add a space character, since it is already there when it should be. This value may be an empty string.
       * `sourceTerm-` A string equal to the actual term looked up. The string is added with `sourcePrefix` and `sourceSuffix` to form the complete example. Its value is separated so it can be marked in a user interface, e.g., by bolding it.
       * `sourceSuffix-` The string to concatenate after the value of `sourceTerm` to form a complete example. Do not add a space character, since it is already there when it should be. This value may be an empty string.
       * `targetPrefix-` A string similar to `sourcePrefix` but for the target.
       * `targetTerm-` A string similar to `sourceTerm` but for the target.
       * `targetSuffix-` A string similar to `sourceSuffix` but for the target.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     NOTE - If there are no examples in the dictionary, the response is 200 (OK) but the `examples` list is an empty list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DictionaryExampleSuccessItem>> examplesPostAsync(String apiVersion, String from, String to, List<DictionaryExampleTextInput> text, final ServiceCallback<List<DictionaryExampleSuccessItem>> serviceCallback) {
        return ServiceFuture.fromResponse(examplesPostWithServiceResponseAsync(apiVersion, from, to, text), serviceCallback);
    }

    /**
     * Provides examples that show how terms in the dictionary are used in context. This operation is used in tandem with `Dictionary lookup`.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param from Specifies the language of the input text. The source language must be one of the supported languages included in the `dictionary` scope.
     * @param to Specifies the language of the output text. The target language must be one of the supported languages included in the `dictionary` scope.
     * @param text # Request body
     The body of the request is a JSON array. Each array element is a JSON object with the following properties:
     * `Text-` A string specifying the term to lookup. This should be the value of a `normalizedText` field from the back-translations of a previous Dictionary lookup request. It can also be the value of the `normalizedSource` field.
     * `Translation-` A string specifying the translated text previously returned by the Dictionary lookup operation. This should be the value from the `normalizedTarget` field in the `translations` list of the Dictionary lookup response. The service will return examples for the specific source-target word-pair.
     The following limitations apply:
     * The array can have at most 10 elements.
     * The text value of an array element cannot exceed 100 characters including spaces.
     # Response body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * `normalizedSource-` A string giving the normalized form of the source term. Generally, this should be identical to the value of the `Text` field at the matching list index in the body of the request.
     * `normalizedTarget-` A string giving the normalized form of the target term. Generally, this should be identical to the value of the `Translation` field at the matching list index in the body of the request.
     * `examples-` A list of examples for the (source term, target term) pair. Each element of the list is an object with the following properties:
       * `sourcePrefix-` The string to concatenate before the value of `sourceTerm` to form a complete example. Do not add a space character, since it is already there when it should be. This value may be an empty string.
       * `sourceTerm-` A string equal to the actual term looked up. The string is added with `sourcePrefix` and `sourceSuffix` to form the complete example. Its value is separated so it can be marked in a user interface, e.g., by bolding it.
       * `sourceSuffix-` The string to concatenate after the value of `sourceTerm` to form a complete example. Do not add a space character, since it is already there when it should be. This value may be an empty string.
       * `targetPrefix-` A string similar to `sourcePrefix` but for the target.
       * `targetTerm-` A string similar to `sourceTerm` but for the target.
       * `targetSuffix-` A string similar to `sourceSuffix` but for the target.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     NOTE - If there are no examples in the dictionary, the response is 200 (OK) but the `examples` list is an empty list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DictionaryExampleSuccessItem&gt; object
     */
    public Observable<List<DictionaryExampleSuccessItem>> examplesPostAsync(String apiVersion, String from, String to, List<DictionaryExampleTextInput> text) {
        return examplesPostWithServiceResponseAsync(apiVersion, from, to, text).map(new Func1<ServiceResponse<List<DictionaryExampleSuccessItem>>, List<DictionaryExampleSuccessItem>>() {
            @Override
            public List<DictionaryExampleSuccessItem> call(ServiceResponse<List<DictionaryExampleSuccessItem>> response) {
                return response.body();
            }
        });
    }

    /**
     * Provides examples that show how terms in the dictionary are used in context. This operation is used in tandem with `Dictionary lookup`.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param from Specifies the language of the input text. The source language must be one of the supported languages included in the `dictionary` scope.
     * @param to Specifies the language of the output text. The target language must be one of the supported languages included in the `dictionary` scope.
     * @param text # Request body
     The body of the request is a JSON array. Each array element is a JSON object with the following properties:
     * `Text-` A string specifying the term to lookup. This should be the value of a `normalizedText` field from the back-translations of a previous Dictionary lookup request. It can also be the value of the `normalizedSource` field.
     * `Translation-` A string specifying the translated text previously returned by the Dictionary lookup operation. This should be the value from the `normalizedTarget` field in the `translations` list of the Dictionary lookup response. The service will return examples for the specific source-target word-pair.
     The following limitations apply:
     * The array can have at most 10 elements.
     * The text value of an array element cannot exceed 100 characters including spaces.
     # Response body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * `normalizedSource-` A string giving the normalized form of the source term. Generally, this should be identical to the value of the `Text` field at the matching list index in the body of the request.
     * `normalizedTarget-` A string giving the normalized form of the target term. Generally, this should be identical to the value of the `Translation` field at the matching list index in the body of the request.
     * `examples-` A list of examples for the (source term, target term) pair. Each element of the list is an object with the following properties:
       * `sourcePrefix-` The string to concatenate before the value of `sourceTerm` to form a complete example. Do not add a space character, since it is already there when it should be. This value may be an empty string.
       * `sourceTerm-` A string equal to the actual term looked up. The string is added with `sourcePrefix` and `sourceSuffix` to form the complete example. Its value is separated so it can be marked in a user interface, e.g., by bolding it.
       * `sourceSuffix-` The string to concatenate after the value of `sourceTerm` to form a complete example. Do not add a space character, since it is already there when it should be. This value may be an empty string.
       * `targetPrefix-` A string similar to `sourcePrefix` but for the target.
       * `targetTerm-` A string similar to `sourceTerm` but for the target.
       * `targetSuffix-` A string similar to `sourceSuffix` but for the target.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     NOTE - If there are no examples in the dictionary, the response is 200 (OK) but the `examples` list is an empty list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DictionaryExampleSuccessItem&gt; object
     */
    public Observable<ServiceResponse<List<DictionaryExampleSuccessItem>>> examplesPostWithServiceResponseAsync(String apiVersion, String from, String to, List<DictionaryExampleTextInput> text) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        if (from == null) {
            throw new IllegalArgumentException("Parameter from is required and cannot be null.");
        }
        if (to == null) {
            throw new IllegalArgumentException("Parameter to is required and cannot be null.");
        }
        if (text == null) {
            throw new IllegalArgumentException("Parameter text is required and cannot be null.");
        }
        Validator.validate(text);
        final String xClientTraceId = null;
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.examplesPost(apiVersion, from, to, xClientTraceId, text, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<DictionaryExampleSuccessItem>>>>() {
                @Override
                public Observable<ServiceResponse<List<DictionaryExampleSuccessItem>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<DictionaryExampleSuccessItem>> clientResponse = examplesPostDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Provides examples that show how terms in the dictionary are used in context. This operation is used in tandem with `Dictionary lookup`.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param from Specifies the language of the input text. The source language must be one of the supported languages included in the `dictionary` scope.
     * @param to Specifies the language of the output text. The target language must be one of the supported languages included in the `dictionary` scope.
     * @param text # Request body
     The body of the request is a JSON array. Each array element is a JSON object with the following properties:
     * `Text-` A string specifying the term to lookup. This should be the value of a `normalizedText` field from the back-translations of a previous Dictionary lookup request. It can also be the value of the `normalizedSource` field.
     * `Translation-` A string specifying the translated text previously returned by the Dictionary lookup operation. This should be the value from the `normalizedTarget` field in the `translations` list of the Dictionary lookup response. The service will return examples for the specific source-target word-pair.
     The following limitations apply:
     * The array can have at most 10 elements.
     * The text value of an array element cannot exceed 100 characters including spaces.
     # Response body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * `normalizedSource-` A string giving the normalized form of the source term. Generally, this should be identical to the value of the `Text` field at the matching list index in the body of the request.
     * `normalizedTarget-` A string giving the normalized form of the target term. Generally, this should be identical to the value of the `Translation` field at the matching list index in the body of the request.
     * `examples-` A list of examples for the (source term, target term) pair. Each element of the list is an object with the following properties:
       * `sourcePrefix-` The string to concatenate before the value of `sourceTerm` to form a complete example. Do not add a space character, since it is already there when it should be. This value may be an empty string.
       * `sourceTerm-` A string equal to the actual term looked up. The string is added with `sourcePrefix` and `sourceSuffix` to form the complete example. Its value is separated so it can be marked in a user interface, e.g., by bolding it.
       * `sourceSuffix-` The string to concatenate after the value of `sourceTerm` to form a complete example. Do not add a space character, since it is already there when it should be. This value may be an empty string.
       * `targetPrefix-` A string similar to `sourcePrefix` but for the target.
       * `targetTerm-` A string similar to `sourceTerm` but for the target.
       * `targetSuffix-` A string similar to `sourceSuffix` but for the target.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     NOTE - If there are no examples in the dictionary, the response is 200 (OK) but the `examples` list is an empty list.
     * @param xClientTraceId A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorMessageException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;DictionaryExampleSuccessItem&gt; object if successful.
     */
    public List<DictionaryExampleSuccessItem> examplesPost(String apiVersion, String from, String to, List<DictionaryExampleTextInput> text, String xClientTraceId) {
        return examplesPostWithServiceResponseAsync(apiVersion, from, to, text, xClientTraceId).toBlocking().single().body();
    }

    /**
     * Provides examples that show how terms in the dictionary are used in context. This operation is used in tandem with `Dictionary lookup`.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param from Specifies the language of the input text. The source language must be one of the supported languages included in the `dictionary` scope.
     * @param to Specifies the language of the output text. The target language must be one of the supported languages included in the `dictionary` scope.
     * @param text # Request body
     The body of the request is a JSON array. Each array element is a JSON object with the following properties:
     * `Text-` A string specifying the term to lookup. This should be the value of a `normalizedText` field from the back-translations of a previous Dictionary lookup request. It can also be the value of the `normalizedSource` field.
     * `Translation-` A string specifying the translated text previously returned by the Dictionary lookup operation. This should be the value from the `normalizedTarget` field in the `translations` list of the Dictionary lookup response. The service will return examples for the specific source-target word-pair.
     The following limitations apply:
     * The array can have at most 10 elements.
     * The text value of an array element cannot exceed 100 characters including spaces.
     # Response body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * `normalizedSource-` A string giving the normalized form of the source term. Generally, this should be identical to the value of the `Text` field at the matching list index in the body of the request.
     * `normalizedTarget-` A string giving the normalized form of the target term. Generally, this should be identical to the value of the `Translation` field at the matching list index in the body of the request.
     * `examples-` A list of examples for the (source term, target term) pair. Each element of the list is an object with the following properties:
       * `sourcePrefix-` The string to concatenate before the value of `sourceTerm` to form a complete example. Do not add a space character, since it is already there when it should be. This value may be an empty string.
       * `sourceTerm-` A string equal to the actual term looked up. The string is added with `sourcePrefix` and `sourceSuffix` to form the complete example. Its value is separated so it can be marked in a user interface, e.g., by bolding it.
       * `sourceSuffix-` The string to concatenate after the value of `sourceTerm` to form a complete example. Do not add a space character, since it is already there when it should be. This value may be an empty string.
       * `targetPrefix-` A string similar to `sourcePrefix` but for the target.
       * `targetTerm-` A string similar to `sourceTerm` but for the target.
       * `targetSuffix-` A string similar to `sourceSuffix` but for the target.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     NOTE - If there are no examples in the dictionary, the response is 200 (OK) but the `examples` list is an empty list.
     * @param xClientTraceId A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DictionaryExampleSuccessItem>> examplesPostAsync(String apiVersion, String from, String to, List<DictionaryExampleTextInput> text, String xClientTraceId, final ServiceCallback<List<DictionaryExampleSuccessItem>> serviceCallback) {
        return ServiceFuture.fromResponse(examplesPostWithServiceResponseAsync(apiVersion, from, to, text, xClientTraceId), serviceCallback);
    }

    /**
     * Provides examples that show how terms in the dictionary are used in context. This operation is used in tandem with `Dictionary lookup`.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param from Specifies the language of the input text. The source language must be one of the supported languages included in the `dictionary` scope.
     * @param to Specifies the language of the output text. The target language must be one of the supported languages included in the `dictionary` scope.
     * @param text # Request body
     The body of the request is a JSON array. Each array element is a JSON object with the following properties:
     * `Text-` A string specifying the term to lookup. This should be the value of a `normalizedText` field from the back-translations of a previous Dictionary lookup request. It can also be the value of the `normalizedSource` field.
     * `Translation-` A string specifying the translated text previously returned by the Dictionary lookup operation. This should be the value from the `normalizedTarget` field in the `translations` list of the Dictionary lookup response. The service will return examples for the specific source-target word-pair.
     The following limitations apply:
     * The array can have at most 10 elements.
     * The text value of an array element cannot exceed 100 characters including spaces.
     # Response body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * `normalizedSource-` A string giving the normalized form of the source term. Generally, this should be identical to the value of the `Text` field at the matching list index in the body of the request.
     * `normalizedTarget-` A string giving the normalized form of the target term. Generally, this should be identical to the value of the `Translation` field at the matching list index in the body of the request.
     * `examples-` A list of examples for the (source term, target term) pair. Each element of the list is an object with the following properties:
       * `sourcePrefix-` The string to concatenate before the value of `sourceTerm` to form a complete example. Do not add a space character, since it is already there when it should be. This value may be an empty string.
       * `sourceTerm-` A string equal to the actual term looked up. The string is added with `sourcePrefix` and `sourceSuffix` to form the complete example. Its value is separated so it can be marked in a user interface, e.g., by bolding it.
       * `sourceSuffix-` The string to concatenate after the value of `sourceTerm` to form a complete example. Do not add a space character, since it is already there when it should be. This value may be an empty string.
       * `targetPrefix-` A string similar to `sourcePrefix` but for the target.
       * `targetTerm-` A string similar to `sourceTerm` but for the target.
       * `targetSuffix-` A string similar to `sourceSuffix` but for the target.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     NOTE - If there are no examples in the dictionary, the response is 200 (OK) but the `examples` list is an empty list.
     * @param xClientTraceId A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DictionaryExampleSuccessItem&gt; object
     */
    public Observable<List<DictionaryExampleSuccessItem>> examplesPostAsync(String apiVersion, String from, String to, List<DictionaryExampleTextInput> text, String xClientTraceId) {
        return examplesPostWithServiceResponseAsync(apiVersion, from, to, text, xClientTraceId).map(new Func1<ServiceResponse<List<DictionaryExampleSuccessItem>>, List<DictionaryExampleSuccessItem>>() {
            @Override
            public List<DictionaryExampleSuccessItem> call(ServiceResponse<List<DictionaryExampleSuccessItem>> response) {
                return response.body();
            }
        });
    }

    /**
     * Provides examples that show how terms in the dictionary are used in context. This operation is used in tandem with `Dictionary lookup`.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param from Specifies the language of the input text. The source language must be one of the supported languages included in the `dictionary` scope.
     * @param to Specifies the language of the output text. The target language must be one of the supported languages included in the `dictionary` scope.
     * @param text # Request body
     The body of the request is a JSON array. Each array element is a JSON object with the following properties:
     * `Text-` A string specifying the term to lookup. This should be the value of a `normalizedText` field from the back-translations of a previous Dictionary lookup request. It can also be the value of the `normalizedSource` field.
     * `Translation-` A string specifying the translated text previously returned by the Dictionary lookup operation. This should be the value from the `normalizedTarget` field in the `translations` list of the Dictionary lookup response. The service will return examples for the specific source-target word-pair.
     The following limitations apply:
     * The array can have at most 10 elements.
     * The text value of an array element cannot exceed 100 characters including spaces.
     # Response body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * `normalizedSource-` A string giving the normalized form of the source term. Generally, this should be identical to the value of the `Text` field at the matching list index in the body of the request.
     * `normalizedTarget-` A string giving the normalized form of the target term. Generally, this should be identical to the value of the `Translation` field at the matching list index in the body of the request.
     * `examples-` A list of examples for the (source term, target term) pair. Each element of the list is an object with the following properties:
       * `sourcePrefix-` The string to concatenate before the value of `sourceTerm` to form a complete example. Do not add a space character, since it is already there when it should be. This value may be an empty string.
       * `sourceTerm-` A string equal to the actual term looked up. The string is added with `sourcePrefix` and `sourceSuffix` to form the complete example. Its value is separated so it can be marked in a user interface, e.g., by bolding it.
       * `sourceSuffix-` The string to concatenate after the value of `sourceTerm` to form a complete example. Do not add a space character, since it is already there when it should be. This value may be an empty string.
       * `targetPrefix-` A string similar to `sourcePrefix` but for the target.
       * `targetTerm-` A string similar to `sourceTerm` but for the target.
       * `targetSuffix-` A string similar to `sourceSuffix` but for the target.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     NOTE - If there are no examples in the dictionary, the response is 200 (OK) but the `examples` list is an empty list.
     * @param xClientTraceId A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DictionaryExampleSuccessItem&gt; object
     */
    public Observable<ServiceResponse<List<DictionaryExampleSuccessItem>>> examplesPostWithServiceResponseAsync(String apiVersion, String from, String to, List<DictionaryExampleTextInput> text, String xClientTraceId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        if (from == null) {
            throw new IllegalArgumentException("Parameter from is required and cannot be null.");
        }
        if (to == null) {
            throw new IllegalArgumentException("Parameter to is required and cannot be null.");
        }
        if (text == null) {
            throw new IllegalArgumentException("Parameter text is required and cannot be null.");
        }
        Validator.validate(text);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.examplesPost(apiVersion, from, to, xClientTraceId, text, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<DictionaryExampleSuccessItem>>>>() {
                @Override
                public Observable<ServiceResponse<List<DictionaryExampleSuccessItem>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<DictionaryExampleSuccessItem>> clientResponse = examplesPostDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<DictionaryExampleSuccessItem>> examplesPostDelegate(Response<ResponseBody> response) throws ErrorMessageException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<DictionaryExampleSuccessItem>, ErrorMessageException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<DictionaryExampleSuccessItem>>() { }.getType())
                .registerError(ErrorMessageException.class)
                .build(response);
    }

}
