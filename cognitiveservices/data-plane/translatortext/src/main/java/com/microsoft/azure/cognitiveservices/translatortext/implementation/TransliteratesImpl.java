/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.translatortext.implementation;

import retrofit2.Retrofit;
import com.microsoft.azure.cognitiveservices.translatortext.Transliterates;
import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.cognitiveservices.translatortext.models.ErrorMessageException;
import com.microsoft.azure.cognitiveservices.translatortext.models.TransliterateSuccessItem;
import com.microsoft.azure.cognitiveservices.translatortext.models.TransliterateTextInput;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Transliterates.
 */
public class TransliteratesImpl implements Transliterates {
    /** The Retrofit service to perform REST calls. */
    private TransliteratesService service;
    /** The service client containing this operation class. */
    private TranslatorTextClientImpl client;

    /**
     * Initializes an instance of TransliteratesImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public TransliteratesImpl(Retrofit retrofit, TranslatorTextClientImpl client) {
        this.service = retrofit.create(TransliteratesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Transliterates to be
     * used by Retrofit to perform actually REST calls.
     */
    interface TransliteratesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.translatortext.Transliterates post" })
        @POST("transliterate")
        Observable<Response<ResponseBody>> post(@Query("api-version") String apiVersion, @Query("language") String language, @Query("fromScript") String fromScript, @Query("toScript") String toScript, @Header("X-ClientTraceId") String xClientTraceId, @Body List<TransliterateTextInput> texts, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

    }

    /**
     * Converts the text of a language in one script into another type of script. Example-
     Japanese script "こんにちは"
     Same word in Latin script "konnichiha".
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param language Specifies the language of the text to convert from one script to another. Possible languages are listed in the `transliteration` scope obtained by querying the service for its supported languages.
     * @param fromScript Specifies the script used by the input text. Lookup supported languages using the `transliteration` scope, to find input scripts available for the selected language.
     * @param toScript Specifies the output script. Lookup supported languages using the `transliteration` scope, to find output scripts available for the selected combination of input language and input script.
     * @param texts # Request body
       The body of the request is a JSON array. Each array element is a JSON object with a string property named `Text`, which represents the string to convert.
       The following limitations apply:
       * The array can have at most 10 elements.
       * The text value of an array element cannot exceed 1,000 characters including spaces.
       * The entire text included in the request cannot exceed 5,000 characters including spaces.
     # Response body
       A successful response is a JSON array with one result for each element in the input array. A result object includes the following properties:
       * `text`- A string which is the result of converting the input string to the output script.
       * `script`- A string specifying the script used in the output.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorMessageException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;TransliterateSuccessItem&gt; object if successful.
     */
    public List<TransliterateSuccessItem> post(String apiVersion, String language, String fromScript, String toScript, List<TransliterateTextInput> texts) {
        return postWithServiceResponseAsync(apiVersion, language, fromScript, toScript, texts).toBlocking().single().body();
    }

    /**
     * Converts the text of a language in one script into another type of script. Example-
     Japanese script "こんにちは"
     Same word in Latin script "konnichiha".
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param language Specifies the language of the text to convert from one script to another. Possible languages are listed in the `transliteration` scope obtained by querying the service for its supported languages.
     * @param fromScript Specifies the script used by the input text. Lookup supported languages using the `transliteration` scope, to find input scripts available for the selected language.
     * @param toScript Specifies the output script. Lookup supported languages using the `transliteration` scope, to find output scripts available for the selected combination of input language and input script.
     * @param texts # Request body
       The body of the request is a JSON array. Each array element is a JSON object with a string property named `Text`, which represents the string to convert.
       The following limitations apply:
       * The array can have at most 10 elements.
       * The text value of an array element cannot exceed 1,000 characters including spaces.
       * The entire text included in the request cannot exceed 5,000 characters including spaces.
     # Response body
       A successful response is a JSON array with one result for each element in the input array. A result object includes the following properties:
       * `text`- A string which is the result of converting the input string to the output script.
       * `script`- A string specifying the script used in the output.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TransliterateSuccessItem>> postAsync(String apiVersion, String language, String fromScript, String toScript, List<TransliterateTextInput> texts, final ServiceCallback<List<TransliterateSuccessItem>> serviceCallback) {
        return ServiceFuture.fromResponse(postWithServiceResponseAsync(apiVersion, language, fromScript, toScript, texts), serviceCallback);
    }

    /**
     * Converts the text of a language in one script into another type of script. Example-
     Japanese script "こんにちは"
     Same word in Latin script "konnichiha".
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param language Specifies the language of the text to convert from one script to another. Possible languages are listed in the `transliteration` scope obtained by querying the service for its supported languages.
     * @param fromScript Specifies the script used by the input text. Lookup supported languages using the `transliteration` scope, to find input scripts available for the selected language.
     * @param toScript Specifies the output script. Lookup supported languages using the `transliteration` scope, to find output scripts available for the selected combination of input language and input script.
     * @param texts # Request body
       The body of the request is a JSON array. Each array element is a JSON object with a string property named `Text`, which represents the string to convert.
       The following limitations apply:
       * The array can have at most 10 elements.
       * The text value of an array element cannot exceed 1,000 characters including spaces.
       * The entire text included in the request cannot exceed 5,000 characters including spaces.
     # Response body
       A successful response is a JSON array with one result for each element in the input array. A result object includes the following properties:
       * `text`- A string which is the result of converting the input string to the output script.
       * `script`- A string specifying the script used in the output.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;TransliterateSuccessItem&gt; object
     */
    public Observable<List<TransliterateSuccessItem>> postAsync(String apiVersion, String language, String fromScript, String toScript, List<TransliterateTextInput> texts) {
        return postWithServiceResponseAsync(apiVersion, language, fromScript, toScript, texts).map(new Func1<ServiceResponse<List<TransliterateSuccessItem>>, List<TransliterateSuccessItem>>() {
            @Override
            public List<TransliterateSuccessItem> call(ServiceResponse<List<TransliterateSuccessItem>> response) {
                return response.body();
            }
        });
    }

    /**
     * Converts the text of a language in one script into another type of script. Example-
     Japanese script "こんにちは"
     Same word in Latin script "konnichiha".
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param language Specifies the language of the text to convert from one script to another. Possible languages are listed in the `transliteration` scope obtained by querying the service for its supported languages.
     * @param fromScript Specifies the script used by the input text. Lookup supported languages using the `transliteration` scope, to find input scripts available for the selected language.
     * @param toScript Specifies the output script. Lookup supported languages using the `transliteration` scope, to find output scripts available for the selected combination of input language and input script.
     * @param texts # Request body
       The body of the request is a JSON array. Each array element is a JSON object with a string property named `Text`, which represents the string to convert.
       The following limitations apply:
       * The array can have at most 10 elements.
       * The text value of an array element cannot exceed 1,000 characters including spaces.
       * The entire text included in the request cannot exceed 5,000 characters including spaces.
     # Response body
       A successful response is a JSON array with one result for each element in the input array. A result object includes the following properties:
       * `text`- A string which is the result of converting the input string to the output script.
       * `script`- A string specifying the script used in the output.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;TransliterateSuccessItem&gt; object
     */
    public Observable<ServiceResponse<List<TransliterateSuccessItem>>> postWithServiceResponseAsync(String apiVersion, String language, String fromScript, String toScript, List<TransliterateTextInput> texts) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        if (language == null) {
            throw new IllegalArgumentException("Parameter language is required and cannot be null.");
        }
        if (fromScript == null) {
            throw new IllegalArgumentException("Parameter fromScript is required and cannot be null.");
        }
        if (toScript == null) {
            throw new IllegalArgumentException("Parameter toScript is required and cannot be null.");
        }
        if (texts == null) {
            throw new IllegalArgumentException("Parameter texts is required and cannot be null.");
        }
        Validator.validate(texts);
        final String xClientTraceId = null;
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.post(apiVersion, language, fromScript, toScript, xClientTraceId, texts, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<TransliterateSuccessItem>>>>() {
                @Override
                public Observable<ServiceResponse<List<TransliterateSuccessItem>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<TransliterateSuccessItem>> clientResponse = postDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Converts the text of a language in one script into another type of script. Example-
     Japanese script "こんにちは"
     Same word in Latin script "konnichiha".
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param language Specifies the language of the text to convert from one script to another. Possible languages are listed in the `transliteration` scope obtained by querying the service for its supported languages.
     * @param fromScript Specifies the script used by the input text. Lookup supported languages using the `transliteration` scope, to find input scripts available for the selected language.
     * @param toScript Specifies the output script. Lookup supported languages using the `transliteration` scope, to find output scripts available for the selected combination of input language and input script.
     * @param texts # Request body
       The body of the request is a JSON array. Each array element is a JSON object with a string property named `Text`, which represents the string to convert.
       The following limitations apply:
       * The array can have at most 10 elements.
       * The text value of an array element cannot exceed 1,000 characters including spaces.
       * The entire text included in the request cannot exceed 5,000 characters including spaces.
     # Response body
       A successful response is a JSON array with one result for each element in the input array. A result object includes the following properties:
       * `text`- A string which is the result of converting the input string to the output script.
       * `script`- A string specifying the script used in the output.
     * @param xClientTraceId A client-generated GUID to uniquely identify the request. You can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorMessageException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;TransliterateSuccessItem&gt; object if successful.
     */
    public List<TransliterateSuccessItem> post(String apiVersion, String language, String fromScript, String toScript, List<TransliterateTextInput> texts, String xClientTraceId) {
        return postWithServiceResponseAsync(apiVersion, language, fromScript, toScript, texts, xClientTraceId).toBlocking().single().body();
    }

    /**
     * Converts the text of a language in one script into another type of script. Example-
     Japanese script "こんにちは"
     Same word in Latin script "konnichiha".
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param language Specifies the language of the text to convert from one script to another. Possible languages are listed in the `transliteration` scope obtained by querying the service for its supported languages.
     * @param fromScript Specifies the script used by the input text. Lookup supported languages using the `transliteration` scope, to find input scripts available for the selected language.
     * @param toScript Specifies the output script. Lookup supported languages using the `transliteration` scope, to find output scripts available for the selected combination of input language and input script.
     * @param texts # Request body
       The body of the request is a JSON array. Each array element is a JSON object with a string property named `Text`, which represents the string to convert.
       The following limitations apply:
       * The array can have at most 10 elements.
       * The text value of an array element cannot exceed 1,000 characters including spaces.
       * The entire text included in the request cannot exceed 5,000 characters including spaces.
     # Response body
       A successful response is a JSON array with one result for each element in the input array. A result object includes the following properties:
       * `text`- A string which is the result of converting the input string to the output script.
       * `script`- A string specifying the script used in the output.
     * @param xClientTraceId A client-generated GUID to uniquely identify the request. You can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TransliterateSuccessItem>> postAsync(String apiVersion, String language, String fromScript, String toScript, List<TransliterateTextInput> texts, String xClientTraceId, final ServiceCallback<List<TransliterateSuccessItem>> serviceCallback) {
        return ServiceFuture.fromResponse(postWithServiceResponseAsync(apiVersion, language, fromScript, toScript, texts, xClientTraceId), serviceCallback);
    }

    /**
     * Converts the text of a language in one script into another type of script. Example-
     Japanese script "こんにちは"
     Same word in Latin script "konnichiha".
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param language Specifies the language of the text to convert from one script to another. Possible languages are listed in the `transliteration` scope obtained by querying the service for its supported languages.
     * @param fromScript Specifies the script used by the input text. Lookup supported languages using the `transliteration` scope, to find input scripts available for the selected language.
     * @param toScript Specifies the output script. Lookup supported languages using the `transliteration` scope, to find output scripts available for the selected combination of input language and input script.
     * @param texts # Request body
       The body of the request is a JSON array. Each array element is a JSON object with a string property named `Text`, which represents the string to convert.
       The following limitations apply:
       * The array can have at most 10 elements.
       * The text value of an array element cannot exceed 1,000 characters including spaces.
       * The entire text included in the request cannot exceed 5,000 characters including spaces.
     # Response body
       A successful response is a JSON array with one result for each element in the input array. A result object includes the following properties:
       * `text`- A string which is the result of converting the input string to the output script.
       * `script`- A string specifying the script used in the output.
     * @param xClientTraceId A client-generated GUID to uniquely identify the request. You can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;TransliterateSuccessItem&gt; object
     */
    public Observable<List<TransliterateSuccessItem>> postAsync(String apiVersion, String language, String fromScript, String toScript, List<TransliterateTextInput> texts, String xClientTraceId) {
        return postWithServiceResponseAsync(apiVersion, language, fromScript, toScript, texts, xClientTraceId).map(new Func1<ServiceResponse<List<TransliterateSuccessItem>>, List<TransliterateSuccessItem>>() {
            @Override
            public List<TransliterateSuccessItem> call(ServiceResponse<List<TransliterateSuccessItem>> response) {
                return response.body();
            }
        });
    }

    /**
     * Converts the text of a language in one script into another type of script. Example-
     Japanese script "こんにちは"
     Same word in Latin script "konnichiha".
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param language Specifies the language of the text to convert from one script to another. Possible languages are listed in the `transliteration` scope obtained by querying the service for its supported languages.
     * @param fromScript Specifies the script used by the input text. Lookup supported languages using the `transliteration` scope, to find input scripts available for the selected language.
     * @param toScript Specifies the output script. Lookup supported languages using the `transliteration` scope, to find output scripts available for the selected combination of input language and input script.
     * @param texts # Request body
       The body of the request is a JSON array. Each array element is a JSON object with a string property named `Text`, which represents the string to convert.
       The following limitations apply:
       * The array can have at most 10 elements.
       * The text value of an array element cannot exceed 1,000 characters including spaces.
       * The entire text included in the request cannot exceed 5,000 characters including spaces.
     # Response body
       A successful response is a JSON array with one result for each element in the input array. A result object includes the following properties:
       * `text`- A string which is the result of converting the input string to the output script.
       * `script`- A string specifying the script used in the output.
     * @param xClientTraceId A client-generated GUID to uniquely identify the request. You can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;TransliterateSuccessItem&gt; object
     */
    public Observable<ServiceResponse<List<TransliterateSuccessItem>>> postWithServiceResponseAsync(String apiVersion, String language, String fromScript, String toScript, List<TransliterateTextInput> texts, String xClientTraceId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        if (language == null) {
            throw new IllegalArgumentException("Parameter language is required and cannot be null.");
        }
        if (fromScript == null) {
            throw new IllegalArgumentException("Parameter fromScript is required and cannot be null.");
        }
        if (toScript == null) {
            throw new IllegalArgumentException("Parameter toScript is required and cannot be null.");
        }
        if (texts == null) {
            throw new IllegalArgumentException("Parameter texts is required and cannot be null.");
        }
        Validator.validate(texts);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.post(apiVersion, language, fromScript, toScript, xClientTraceId, texts, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<TransliterateSuccessItem>>>>() {
                @Override
                public Observable<ServiceResponse<List<TransliterateSuccessItem>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<TransliterateSuccessItem>> clientResponse = postDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<TransliterateSuccessItem>> postDelegate(Response<ResponseBody> response) throws ErrorMessageException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<TransliterateSuccessItem>, ErrorMessageException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<TransliterateSuccessItem>>() { }.getType())
                .registerError(ErrorMessageException.class)
                .build(response);
    }

}
