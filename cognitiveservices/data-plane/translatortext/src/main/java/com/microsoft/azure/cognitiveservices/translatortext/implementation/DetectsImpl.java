/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.translatortext.implementation;

import retrofit2.Retrofit;
import com.microsoft.azure.cognitiveservices.translatortext.Detects;
import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.cognitiveservices.translatortext.models.DetectSuccessItem;
import com.microsoft.azure.cognitiveservices.translatortext.models.DetectTextInput;
import com.microsoft.azure.cognitiveservices.translatortext.models.ErrorMessageException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Detects.
 */
public class DetectsImpl implements Detects {
    /** The Retrofit service to perform REST calls. */
    private DetectsService service;
    /** The service client containing this operation class. */
    private TranslatorTextClientImpl client;

    /**
     * Initializes an instance of DetectsImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DetectsImpl(Retrofit retrofit, TranslatorTextClientImpl client) {
        this.service = retrofit.create(DetectsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Detects to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DetectsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.translatortext.Detects detectPost" })
        @POST("Detect")
        Observable<Response<ResponseBody>> detectPost(@Query("api-version") String apiVersion, @Header("ClientTraceId") String clientTraceId, @Body List<DetectTextInput> text, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

    }

    /**
     * Identifies the language of a string of text.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param text # Request Body
     The body of the request is a JSON array. Each array element is a JSON object with a string property named Text. Language detection is applied to the value of the Text property.
     The following limitations apply:
     * The array can have at most 100 elements.
     * The text value of an array element cannot exceed 10,000 characters including spaces.
     * The entire text included in the request cannot exceed 50,000 characters including spaces.
     # Response Body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * language- Code of the detected language.
     * score- A float value indicating the confidence in the result. The score is between zero and one and a low score indicates a low confidence.
     * isTranslationSupported- A boolean value which is true if the detected language is one of the languages supported for text translation. Not all detected languages can be translated by the API.
     * isTransliterationSupported- A boolean value which is true if the detected language is one of the languages supported for transliteration.
     * alternatives- An array of other possible languages. Each element of the array is another object with the same properties listed above- language, score, isTranslationSupported and isTransliterationSupported.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorMessageException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;DetectSuccessItem&gt; object if successful.
     */
    public List<DetectSuccessItem> detectPost(String apiVersion, List<DetectTextInput> text) {
        return detectPostWithServiceResponseAsync(apiVersion, text).toBlocking().single().body();
    }

    /**
     * Identifies the language of a string of text.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param text # Request Body
     The body of the request is a JSON array. Each array element is a JSON object with a string property named Text. Language detection is applied to the value of the Text property.
     The following limitations apply:
     * The array can have at most 100 elements.
     * The text value of an array element cannot exceed 10,000 characters including spaces.
     * The entire text included in the request cannot exceed 50,000 characters including spaces.
     # Response Body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * language- Code of the detected language.
     * score- A float value indicating the confidence in the result. The score is between zero and one and a low score indicates a low confidence.
     * isTranslationSupported- A boolean value which is true if the detected language is one of the languages supported for text translation. Not all detected languages can be translated by the API.
     * isTransliterationSupported- A boolean value which is true if the detected language is one of the languages supported for transliteration.
     * alternatives- An array of other possible languages. Each element of the array is another object with the same properties listed above- language, score, isTranslationSupported and isTransliterationSupported.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DetectSuccessItem>> detectPostAsync(String apiVersion, List<DetectTextInput> text, final ServiceCallback<List<DetectSuccessItem>> serviceCallback) {
        return ServiceFuture.fromResponse(detectPostWithServiceResponseAsync(apiVersion, text), serviceCallback);
    }

    /**
     * Identifies the language of a string of text.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param text # Request Body
     The body of the request is a JSON array. Each array element is a JSON object with a string property named Text. Language detection is applied to the value of the Text property.
     The following limitations apply:
     * The array can have at most 100 elements.
     * The text value of an array element cannot exceed 10,000 characters including spaces.
     * The entire text included in the request cannot exceed 50,000 characters including spaces.
     # Response Body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * language- Code of the detected language.
     * score- A float value indicating the confidence in the result. The score is between zero and one and a low score indicates a low confidence.
     * isTranslationSupported- A boolean value which is true if the detected language is one of the languages supported for text translation. Not all detected languages can be translated by the API.
     * isTransliterationSupported- A boolean value which is true if the detected language is one of the languages supported for transliteration.
     * alternatives- An array of other possible languages. Each element of the array is another object with the same properties listed above- language, score, isTranslationSupported and isTransliterationSupported.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DetectSuccessItem&gt; object
     */
    public Observable<List<DetectSuccessItem>> detectPostAsync(String apiVersion, List<DetectTextInput> text) {
        return detectPostWithServiceResponseAsync(apiVersion, text).map(new Func1<ServiceResponse<List<DetectSuccessItem>>, List<DetectSuccessItem>>() {
            @Override
            public List<DetectSuccessItem> call(ServiceResponse<List<DetectSuccessItem>> response) {
                return response.body();
            }
        });
    }

    /**
     * Identifies the language of a string of text.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param text # Request Body
     The body of the request is a JSON array. Each array element is a JSON object with a string property named Text. Language detection is applied to the value of the Text property.
     The following limitations apply:
     * The array can have at most 100 elements.
     * The text value of an array element cannot exceed 10,000 characters including spaces.
     * The entire text included in the request cannot exceed 50,000 characters including spaces.
     # Response Body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * language- Code of the detected language.
     * score- A float value indicating the confidence in the result. The score is between zero and one and a low score indicates a low confidence.
     * isTranslationSupported- A boolean value which is true if the detected language is one of the languages supported for text translation. Not all detected languages can be translated by the API.
     * isTransliterationSupported- A boolean value which is true if the detected language is one of the languages supported for transliteration.
     * alternatives- An array of other possible languages. Each element of the array is another object with the same properties listed above- language, score, isTranslationSupported and isTransliterationSupported.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DetectSuccessItem&gt; object
     */
    public Observable<ServiceResponse<List<DetectSuccessItem>>> detectPostWithServiceResponseAsync(String apiVersion, List<DetectTextInput> text) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        if (text == null) {
            throw new IllegalArgumentException("Parameter text is required and cannot be null.");
        }
        Validator.validate(text);
        final String clientTraceId = null;
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.detectPost(apiVersion, clientTraceId, text, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<DetectSuccessItem>>>>() {
                @Override
                public Observable<ServiceResponse<List<DetectSuccessItem>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<DetectSuccessItem>> clientResponse = detectPostDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Identifies the language of a string of text.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param text # Request Body
     The body of the request is a JSON array. Each array element is a JSON object with a string property named Text. Language detection is applied to the value of the Text property.
     The following limitations apply:
     * The array can have at most 100 elements.
     * The text value of an array element cannot exceed 10,000 characters including spaces.
     * The entire text included in the request cannot exceed 50,000 characters including spaces.
     # Response Body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * language- Code of the detected language.
     * score- A float value indicating the confidence in the result. The score is between zero and one and a low score indicates a low confidence.
     * isTranslationSupported- A boolean value which is true if the detected language is one of the languages supported for text translation. Not all detected languages can be translated by the API.
     * isTransliterationSupported- A boolean value which is true if the detected language is one of the languages supported for transliteration.
     * alternatives- An array of other possible languages. Each element of the array is another object with the same properties listed above- language, score, isTranslationSupported and isTransliterationSupported.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     * @param clientTraceId A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorMessageException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;DetectSuccessItem&gt; object if successful.
     */
    public List<DetectSuccessItem> detectPost(String apiVersion, List<DetectTextInput> text, String clientTraceId) {
        return detectPostWithServiceResponseAsync(apiVersion, text, clientTraceId).toBlocking().single().body();
    }

    /**
     * Identifies the language of a string of text.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param text # Request Body
     The body of the request is a JSON array. Each array element is a JSON object with a string property named Text. Language detection is applied to the value of the Text property.
     The following limitations apply:
     * The array can have at most 100 elements.
     * The text value of an array element cannot exceed 10,000 characters including spaces.
     * The entire text included in the request cannot exceed 50,000 characters including spaces.
     # Response Body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * language- Code of the detected language.
     * score- A float value indicating the confidence in the result. The score is between zero and one and a low score indicates a low confidence.
     * isTranslationSupported- A boolean value which is true if the detected language is one of the languages supported for text translation. Not all detected languages can be translated by the API.
     * isTransliterationSupported- A boolean value which is true if the detected language is one of the languages supported for transliteration.
     * alternatives- An array of other possible languages. Each element of the array is another object with the same properties listed above- language, score, isTranslationSupported and isTransliterationSupported.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     * @param clientTraceId A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DetectSuccessItem>> detectPostAsync(String apiVersion, List<DetectTextInput> text, String clientTraceId, final ServiceCallback<List<DetectSuccessItem>> serviceCallback) {
        return ServiceFuture.fromResponse(detectPostWithServiceResponseAsync(apiVersion, text, clientTraceId), serviceCallback);
    }

    /**
     * Identifies the language of a string of text.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param text # Request Body
     The body of the request is a JSON array. Each array element is a JSON object with a string property named Text. Language detection is applied to the value of the Text property.
     The following limitations apply:
     * The array can have at most 100 elements.
     * The text value of an array element cannot exceed 10,000 characters including spaces.
     * The entire text included in the request cannot exceed 50,000 characters including spaces.
     # Response Body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * language- Code of the detected language.
     * score- A float value indicating the confidence in the result. The score is between zero and one and a low score indicates a low confidence.
     * isTranslationSupported- A boolean value which is true if the detected language is one of the languages supported for text translation. Not all detected languages can be translated by the API.
     * isTransliterationSupported- A boolean value which is true if the detected language is one of the languages supported for transliteration.
     * alternatives- An array of other possible languages. Each element of the array is another object with the same properties listed above- language, score, isTranslationSupported and isTransliterationSupported.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     * @param clientTraceId A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DetectSuccessItem&gt; object
     */
    public Observable<List<DetectSuccessItem>> detectPostAsync(String apiVersion, List<DetectTextInput> text, String clientTraceId) {
        return detectPostWithServiceResponseAsync(apiVersion, text, clientTraceId).map(new Func1<ServiceResponse<List<DetectSuccessItem>>, List<DetectSuccessItem>>() {
            @Override
            public List<DetectSuccessItem> call(ServiceResponse<List<DetectSuccessItem>> response) {
                return response.body();
            }
        });
    }

    /**
     * Identifies the language of a string of text.
     *
     * @param apiVersion Version of the API requested by the client. Value must be **3.0**.
     * @param text # Request Body
     The body of the request is a JSON array. Each array element is a JSON object with a string property named Text. Language detection is applied to the value of the Text property.
     The following limitations apply:
     * The array can have at most 100 elements.
     * The text value of an array element cannot exceed 10,000 characters including spaces.
     * The entire text included in the request cannot exceed 50,000 characters including spaces.
     # Response Body
     A successful response is a JSON array with one result for each string in the input array. A result object includes the following properties:
     * language- Code of the detected language.
     * score- A float value indicating the confidence in the result. The score is between zero and one and a low score indicates a low confidence.
     * isTranslationSupported- A boolean value which is true if the detected language is one of the languages supported for text translation. Not all detected languages can be translated by the API.
     * isTransliterationSupported- A boolean value which is true if the detected language is one of the languages supported for transliteration.
     * alternatives- An array of other possible languages. Each element of the array is another object with the same properties listed above- language, score, isTranslationSupported and isTransliterationSupported.
     # Response Header
     X-RequestId - Value generated by the service to identify the request. It is used for troubleshooting purposes.
     * @param clientTraceId A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DetectSuccessItem&gt; object
     */
    public Observable<ServiceResponse<List<DetectSuccessItem>>> detectPostWithServiceResponseAsync(String apiVersion, List<DetectTextInput> text, String clientTraceId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        if (text == null) {
            throw new IllegalArgumentException("Parameter text is required and cannot be null.");
        }
        Validator.validate(text);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.detectPost(apiVersion, clientTraceId, text, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<DetectSuccessItem>>>>() {
                @Override
                public Observable<ServiceResponse<List<DetectSuccessItem>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<DetectSuccessItem>> clientResponse = detectPostDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<DetectSuccessItem>> detectPostDelegate(Response<ResponseBody> response) throws ErrorMessageException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<DetectSuccessItem>, ErrorMessageException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<DetectSuccessItem>>() { }.getType())
                .registerError(ErrorMessageException.class)
                .build(response);
    }

}
