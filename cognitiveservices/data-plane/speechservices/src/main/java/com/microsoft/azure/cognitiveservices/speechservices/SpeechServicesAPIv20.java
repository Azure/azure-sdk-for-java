/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.speechservices;

import com.microsoft.azure.AzureClient;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.cognitiveservices.speechservices.models.CreateAccuracyTestHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.CreateEndpointDataExportHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.CreateEndpointHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.CreateLanguageGenerationEndpointHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.CreateLanguageGenerationModelHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.CreateModelHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.CreateTranscriptionHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.CreateVoiceDeploymentHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.CreateVoiceModelHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.CreateVoiceTestHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.DatasetUpdate;
import com.microsoft.azure.cognitiveservices.speechservices.models.DeleteAccuracyTestHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.DeleteDatasetHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.DeleteDeploymentHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.DeleteEndpointDataExportHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.DeleteEndpointDataHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.DeleteEndpointHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.DeleteLanguageGenerationEndpointHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.DeleteLanguageGenerationModelHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.DeleteModelHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.DeleteTranscriptionHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.DeleteVoiceDatasetHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.DeleteVoiceModelHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.DeleteVoiceTestHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.EndpointDataDefinition;
import com.microsoft.azure.cognitiveservices.speechservices.models.EndpointDefinition;
import com.microsoft.azure.cognitiveservices.speechservices.models.EndpointUpdate;
import com.microsoft.azure.cognitiveservices.speechservices.models.ErrorContent;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetAccuracyTestHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetAccuracyTestsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetDatasetHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetDatasetsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetEndpointDataExportHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetEndpointDataExportsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetEndpointHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetEndpointsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetHealthStatusHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetLanguageGenerationEndpointHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetLanguageGenerationEndpointsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetLanguageGenerationModelHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetLanguageGenerationModelsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetModelHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetModelsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetSupportedLocalesForDatasetsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetSupportedLocalesForEndpointsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetSupportedLocalesForLanguageGenerationEndpointsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetSupportedLocalesForLanguageGenerationModelsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetSupportedLocalesForModelsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetSupportedLocalesForTranscriptionsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetSupportedLocalesForVoiceDatasetsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetSupportedLocalesForVoiceEndpointsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetSupportedLocalesForVoiceModelsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetTranscriptionHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetTranscriptionsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetVoiceDatasetsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetVoiceDeploymentHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetVoiceDeploymentsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetVoiceModelHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetVoiceModelsHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.GetVoiceTestHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.HealthStatusResponse;
import com.microsoft.azure.cognitiveservices.speechservices.models.ModelDefinition;
import com.microsoft.azure.cognitiveservices.speechservices.models.ModelUpdate;
import com.microsoft.azure.cognitiveservices.speechservices.models.SpeechEndpointDefinition;
import com.microsoft.azure.cognitiveservices.speechservices.models.SpeechModelDefinition;
import com.microsoft.azure.cognitiveservices.speechservices.models.TestDefinition;
import com.microsoft.azure.cognitiveservices.speechservices.models.TestUpdate;
import com.microsoft.azure.cognitiveservices.speechservices.models.TranscriptionDefinition;
import com.microsoft.azure.cognitiveservices.speechservices.models.TranscriptionUpdate;
import com.microsoft.azure.cognitiveservices.speechservices.models.UpdateAccuracyTestHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.UpdateDatasetHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.UpdateEndpointHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.UpdateLanguageGenerationEndpointHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.UpdateLanguageGenerationModelHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.UpdateModelHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.UpdateTranscriptionHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.UpdateVoiceDatasetHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.UpdateVoiceEndpointHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.UpdateVoiceModelHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.UploadDatasetHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.UploadVoiceDatasetHeaders;
import com.microsoft.azure.cognitiveservices.speechservices.models.VoiceTestDefinition;
import com.microsoft.rest.RestClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponseWithHeaders;
import java.io.IOException;
import java.util.UUID;
import rx.Observable;

/**
 * The interface for SpeechServicesAPIv20 class.
 */
public interface SpeechServicesAPIv20 {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * Gets the {@link AzureClient} used for long running operations.
     * @return the azure client;
     */
    AzureClient getAzureClient();

    /**
     * Gets the User-Agent header for the client.
     *
     * @return the user agent string.
     */
    String userAgent();

    /**
     * Gets The preferred language for the response..
     *
     * @return the acceptLanguage value.
     */
    String acceptLanguage();

    /**
     * Sets The preferred language for the response..
     *
     * @param acceptLanguage the acceptLanguage value.
     * @return the service client itself
     */
    SpeechServicesAPIv20 withAcceptLanguage(String acceptLanguage);

    /**
     * Gets The retry timeout in seconds for Long Running Operations. Default value is 30..
     *
     * @return the longRunningOperationRetryTimeout value.
     */
    int longRunningOperationRetryTimeout();

    /**
     * Sets The retry timeout in seconds for Long Running Operations. Default value is 30..
     *
     * @param longRunningOperationRetryTimeout the longRunningOperationRetryTimeout value.
     * @return the service client itself
     */
    SpeechServicesAPIv20 withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout);

    /**
     * Gets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true..
     *
     * @return the generateClientRequestId value.
     */
    boolean generateClientRequestId();

    /**
     * Sets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true..
     *
     * @param generateClientRequestId the generateClientRequestId value.
     * @return the service client itself
     */
    SpeechServicesAPIv20 withGenerateClientRequestId(boolean generateClientRequestId);

    /**
     * Gets the list of accuracy tests for the authenticated subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAccuracyTests();

    /**
     * Gets the list of accuracy tests for the authenticated subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAccuracyTestsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Gets the list of accuracy tests for the authenticated subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAccuracyTestsAsync();

    /**
     * Gets the list of accuracy tests for the authenticated subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetAccuracyTestsHeaders>> getAccuracyTestsWithServiceResponseAsync();

    /**
     * Creates a new accuracy test.
     *
     * @param testDefinition The details of the new accuracy test.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent createAccuracyTest(TestDefinition testDefinition);

    /**
     * Creates a new accuracy test.
     *
     * @param testDefinition The details of the new accuracy test.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> createAccuracyTestAsync(TestDefinition testDefinition, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Creates a new accuracy test.
     *
     * @param testDefinition The details of the new accuracy test.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> createAccuracyTestAsync(TestDefinition testDefinition);

    /**
     * Creates a new accuracy test.
     *
     * @param testDefinition The details of the new accuracy test.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, CreateAccuracyTestHeaders>> createAccuracyTestWithServiceResponseAsync(TestDefinition testDefinition);

    /**
     * Gets the accuracy test identified by the given ID.
     *
     * @param id The identifier of the accuracy test.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAccuracyTest(UUID id);

    /**
     * Gets the accuracy test identified by the given ID.
     *
     * @param id The identifier of the accuracy test.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAccuracyTestAsync(UUID id, final ServiceCallback<Object> serviceCallback);

    /**
     * Gets the accuracy test identified by the given ID.
     *
     * @param id The identifier of the accuracy test.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAccuracyTestAsync(UUID id);

    /**
     * Gets the accuracy test identified by the given ID.
     *
     * @param id The identifier of the accuracy test.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetAccuracyTestHeaders>> getAccuracyTestWithServiceResponseAsync(UUID id);

    /**
     * Deletes the accuracy test identified by the given ID.
     *
     * @param id The identifier of the accuracy test.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent deleteAccuracyTest(UUID id);

    /**
     * Deletes the accuracy test identified by the given ID.
     *
     * @param id The identifier of the accuracy test.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> deleteAccuracyTestAsync(UUID id, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Deletes the accuracy test identified by the given ID.
     *
     * @param id The identifier of the accuracy test.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> deleteAccuracyTestAsync(UUID id);

    /**
     * Deletes the accuracy test identified by the given ID.
     *
     * @param id The identifier of the accuracy test.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, DeleteAccuracyTestHeaders>> deleteAccuracyTestWithServiceResponseAsync(UUID id);

    /**
     * Updates the mutable details of the test identified by its id.
     *
     * @param id The identifier of the accuracy test.
     * @param testUpdate The object containing the updated fields of the test.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateAccuracyTest(UUID id, TestUpdate testUpdate);

    /**
     * Updates the mutable details of the test identified by its id.
     *
     * @param id The identifier of the accuracy test.
     * @param testUpdate The object containing the updated fields of the test.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateAccuracyTestAsync(UUID id, TestUpdate testUpdate, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates the mutable details of the test identified by its id.
     *
     * @param id The identifier of the accuracy test.
     * @param testUpdate The object containing the updated fields of the test.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateAccuracyTestAsync(UUID id, TestUpdate testUpdate);

    /**
     * Updates the mutable details of the test identified by its id.
     *
     * @param id The identifier of the accuracy test.
     * @param testUpdate The object containing the updated fields of the test.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateAccuracyTestHeaders>> updateAccuracyTestWithServiceResponseAsync(UUID id, TestUpdate testUpdate);

    /**
     * Gets a list of datasets for the authenticated subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getDatasets();

    /**
     * Gets a list of datasets for the authenticated subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getDatasetsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Gets a list of datasets for the authenticated subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getDatasetsAsync();

    /**
     * Gets a list of datasets for the authenticated subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetDatasetsHeaders>> getDatasetsWithServiceResponseAsync();

    /**
     * Gets the dataset identified by the given ID.
     *
     * @param id The identifier of the dataset.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getDataset(UUID id);

    /**
     * Gets the dataset identified by the given ID.
     *
     * @param id The identifier of the dataset.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getDatasetAsync(UUID id, final ServiceCallback<Object> serviceCallback);

    /**
     * Gets the dataset identified by the given ID.
     *
     * @param id The identifier of the dataset.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getDatasetAsync(UUID id);

    /**
     * Gets the dataset identified by the given ID.
     *
     * @param id The identifier of the dataset.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetDatasetHeaders>> getDatasetWithServiceResponseAsync(UUID id);

    /**
     * Deletes the specified dataset.
     *
     * @param id The identifier of the dataset.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent deleteDataset(UUID id);

    /**
     * Deletes the specified dataset.
     *
     * @param id The identifier of the dataset.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> deleteDatasetAsync(UUID id, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Deletes the specified dataset.
     *
     * @param id The identifier of the dataset.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> deleteDatasetAsync(UUID id);

    /**
     * Deletes the specified dataset.
     *
     * @param id The identifier of the dataset.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, DeleteDatasetHeaders>> deleteDatasetWithServiceResponseAsync(UUID id);

    /**
     * Updates the mutable details of the dataset identified by its ID.
     *
     * @param id The identifier of the dataset.
     * @param datasetUpdate The updated values for the dataset.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateDataset(UUID id, DatasetUpdate datasetUpdate);

    /**
     * Updates the mutable details of the dataset identified by its ID.
     *
     * @param id The identifier of the dataset.
     * @param datasetUpdate The updated values for the dataset.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateDatasetAsync(UUID id, DatasetUpdate datasetUpdate, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates the mutable details of the dataset identified by its ID.
     *
     * @param id The identifier of the dataset.
     * @param datasetUpdate The updated values for the dataset.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateDatasetAsync(UUID id, DatasetUpdate datasetUpdate);

    /**
     * Updates the mutable details of the dataset identified by its ID.
     *
     * @param id The identifier of the dataset.
     * @param datasetUpdate The updated values for the dataset.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateDatasetHeaders>> updateDatasetWithServiceResponseAsync(UUID id, DatasetUpdate datasetUpdate);

    /**
     * Gets a list of supported locales for data imports.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getSupportedLocalesForDatasets();

    /**
     * Gets a list of supported locales for data imports.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getSupportedLocalesForDatasetsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Gets a list of supported locales for data imports.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getSupportedLocalesForDatasetsAsync();

    /**
     * Gets a list of supported locales for data imports.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetSupportedLocalesForDatasetsHeaders>> getSupportedLocalesForDatasetsWithServiceResponseAsync();

    /**
     * Uploads data and creates a new dataset.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent uploadDataset();

    /**
     * Uploads data and creates a new dataset.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> uploadDatasetAsync(final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Uploads data and creates a new dataset.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> uploadDatasetAsync();

    /**
     * Uploads data and creates a new dataset.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, UploadDatasetHeaders>> uploadDatasetWithServiceResponseAsync();
    /**
     * Uploads data and creates a new dataset.
     *
     * @param name The name of this data import (always add this string for any import).
     * @param description Optional description of this data import.
     * @param locale The locale of this data import (always add this string for any import).
     * @param dataImportKind The kind of the data import (always add this string for any import). Possible values include: 'None', 'Language', 'Acoustic', 'Pronunciation', 'CustomVoice', 'LanguageGeneration'
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings)
     * @param audiodata A zip file containing the audio data (this and the audio archive file for acoustic data imports).
     * @param transcriptions A text file containing the transcriptions for the audio data (this and the transcriptions file for acoustic data imports).
     * @param languagedata A text file containing the language or pronunciation data (only this file for language data imports).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent uploadDataset(String name, String description, String locale, String dataImportKind, String properties, byte[] audiodata, byte[] transcriptions, byte[] languagedata);

    /**
     * Uploads data and creates a new dataset.
     *
     * @param name The name of this data import (always add this string for any import).
     * @param description Optional description of this data import.
     * @param locale The locale of this data import (always add this string for any import).
     * @param dataImportKind The kind of the data import (always add this string for any import). Possible values include: 'None', 'Language', 'Acoustic', 'Pronunciation', 'CustomVoice', 'LanguageGeneration'
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings)
     * @param audiodata A zip file containing the audio data (this and the audio archive file for acoustic data imports).
     * @param transcriptions A text file containing the transcriptions for the audio data (this and the transcriptions file for acoustic data imports).
     * @param languagedata A text file containing the language or pronunciation data (only this file for language data imports).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> uploadDatasetAsync(String name, String description, String locale, String dataImportKind, String properties, byte[] audiodata, byte[] transcriptions, byte[] languagedata, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Uploads data and creates a new dataset.
     *
     * @param name The name of this data import (always add this string for any import).
     * @param description Optional description of this data import.
     * @param locale The locale of this data import (always add this string for any import).
     * @param dataImportKind The kind of the data import (always add this string for any import). Possible values include: 'None', 'Language', 'Acoustic', 'Pronunciation', 'CustomVoice', 'LanguageGeneration'
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings)
     * @param audiodata A zip file containing the audio data (this and the audio archive file for acoustic data imports).
     * @param transcriptions A text file containing the transcriptions for the audio data (this and the transcriptions file for acoustic data imports).
     * @param languagedata A text file containing the language or pronunciation data (only this file for language data imports).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> uploadDatasetAsync(String name, String description, String locale, String dataImportKind, String properties, byte[] audiodata, byte[] transcriptions, byte[] languagedata);

    /**
     * Uploads data and creates a new dataset.
     *
     * @param name The name of this data import (always add this string for any import).
     * @param description Optional description of this data import.
     * @param locale The locale of this data import (always add this string for any import).
     * @param dataImportKind The kind of the data import (always add this string for any import). Possible values include: 'None', 'Language', 'Acoustic', 'Pronunciation', 'CustomVoice', 'LanguageGeneration'
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings)
     * @param audiodata A zip file containing the audio data (this and the audio archive file for acoustic data imports).
     * @param transcriptions A text file containing the transcriptions for the audio data (this and the transcriptions file for acoustic data imports).
     * @param languagedata A text file containing the language or pronunciation data (only this file for language data imports).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, UploadDatasetHeaders>> uploadDatasetWithServiceResponseAsync(String name, String description, String locale, String dataImportKind, String properties, byte[] audiodata, byte[] transcriptions, byte[] languagedata);

    /**
     * Gets the list of endpoints for the authenticated subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getEndpoints();

    /**
     * Gets the list of endpoints for the authenticated subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getEndpointsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Gets the list of endpoints for the authenticated subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getEndpointsAsync();

    /**
     * Gets the list of endpoints for the authenticated subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetEndpointsHeaders>> getEndpointsWithServiceResponseAsync();

    /**
     * Creates a new endpoint.
     *
     * @param endpointDefinition The details of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent createEndpoint(SpeechEndpointDefinition endpointDefinition);

    /**
     * Creates a new endpoint.
     *
     * @param endpointDefinition The details of the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> createEndpointAsync(SpeechEndpointDefinition endpointDefinition, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Creates a new endpoint.
     *
     * @param endpointDefinition The details of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> createEndpointAsync(SpeechEndpointDefinition endpointDefinition);

    /**
     * Creates a new endpoint.
     *
     * @param endpointDefinition The details of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, CreateEndpointHeaders>> createEndpointWithServiceResponseAsync(SpeechEndpointDefinition endpointDefinition);

    /**
     * Gets the endpoint identified by the given ID.
     *
     * @param id The identifier of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getEndpoint(UUID id);

    /**
     * Gets the endpoint identified by the given ID.
     *
     * @param id The identifier of the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getEndpointAsync(UUID id, final ServiceCallback<Object> serviceCallback);

    /**
     * Gets the endpoint identified by the given ID.
     *
     * @param id The identifier of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getEndpointAsync(UUID id);

    /**
     * Gets the endpoint identified by the given ID.
     *
     * @param id The identifier of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetEndpointHeaders>> getEndpointWithServiceResponseAsync(UUID id);

    /**
     * Deletes the endpoint identified by the given ID.
     *
     * @param id The identifier of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent deleteEndpoint(UUID id);

    /**
     * Deletes the endpoint identified by the given ID.
     *
     * @param id The identifier of the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> deleteEndpointAsync(UUID id, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Deletes the endpoint identified by the given ID.
     *
     * @param id The identifier of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> deleteEndpointAsync(UUID id);

    /**
     * Deletes the endpoint identified by the given ID.
     *
     * @param id The identifier of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, DeleteEndpointHeaders>> deleteEndpointWithServiceResponseAsync(UUID id);

    /**
     * Updates the metadata of the endpoint identified by the given ID.
     *
     * @param id The identifier of the endpoint.
     * @param endpointUpdate The updated values for the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateEndpoint(UUID id, EndpointUpdate endpointUpdate);

    /**
     * Updates the metadata of the endpoint identified by the given ID.
     *
     * @param id The identifier of the endpoint.
     * @param endpointUpdate The updated values for the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateEndpointAsync(UUID id, EndpointUpdate endpointUpdate, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates the metadata of the endpoint identified by the given ID.
     *
     * @param id The identifier of the endpoint.
     * @param endpointUpdate The updated values for the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateEndpointAsync(UUID id, EndpointUpdate endpointUpdate);

    /**
     * Updates the metadata of the endpoint identified by the given ID.
     *
     * @param id The identifier of the endpoint.
     * @param endpointUpdate The updated values for the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateEndpointHeaders>> updateEndpointWithServiceResponseAsync(UUID id, EndpointUpdate endpointUpdate);

    /**
     * Gets a list of supported locales for endpoint creations.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getSupportedLocalesForEndpoints();

    /**
     * Gets a list of supported locales for endpoint creations.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getSupportedLocalesForEndpointsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Gets a list of supported locales for endpoint creations.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getSupportedLocalesForEndpointsAsync();

    /**
     * Gets a list of supported locales for endpoint creations.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetSupportedLocalesForEndpointsHeaders>> getSupportedLocalesForEndpointsWithServiceResponseAsync();

    /**
     * Gets the list of endpoint data export tasks for the authenticated user.
     *
     * @param endpointId The identifier of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getEndpointDataExports(UUID endpointId);

    /**
     * Gets the list of endpoint data export tasks for the authenticated user.
     *
     * @param endpointId The identifier of the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getEndpointDataExportsAsync(UUID endpointId, final ServiceCallback<Object> serviceCallback);

    /**
     * Gets the list of endpoint data export tasks for the authenticated user.
     *
     * @param endpointId The identifier of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getEndpointDataExportsAsync(UUID endpointId);

    /**
     * Gets the list of endpoint data export tasks for the authenticated user.
     *
     * @param endpointId The identifier of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetEndpointDataExportsHeaders>> getEndpointDataExportsWithServiceResponseAsync(UUID endpointId);

    /**
     * Create a new endpoint data export task.
     *
     * @param endpointId The identifier of the endpoint.
     * @param endpointDataDefinition The details of the new endpoint data export.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent createEndpointDataExport(UUID endpointId, EndpointDataDefinition endpointDataDefinition);

    /**
     * Create a new endpoint data export task.
     *
     * @param endpointId The identifier of the endpoint.
     * @param endpointDataDefinition The details of the new endpoint data export.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> createEndpointDataExportAsync(UUID endpointId, EndpointDataDefinition endpointDataDefinition, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Create a new endpoint data export task.
     *
     * @param endpointId The identifier of the endpoint.
     * @param endpointDataDefinition The details of the new endpoint data export.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> createEndpointDataExportAsync(UUID endpointId, EndpointDataDefinition endpointDataDefinition);

    /**
     * Create a new endpoint data export task.
     *
     * @param endpointId The identifier of the endpoint.
     * @param endpointDataDefinition The details of the new endpoint data export.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, CreateEndpointDataExportHeaders>> createEndpointDataExportWithServiceResponseAsync(UUID endpointId, EndpointDataDefinition endpointDataDefinition);

    /**
     * Deletes the transcriptions and captured audio files associated with the endpoint identified by the given ID.
     * Deletion will happen in the background and can take up to a day.
     *
     * @param endpointId The identifier of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent deleteEndpointData(UUID endpointId);

    /**
     * Deletes the transcriptions and captured audio files associated with the endpoint identified by the given ID.
     * Deletion will happen in the background and can take up to a day.
     *
     * @param endpointId The identifier of the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> deleteEndpointDataAsync(UUID endpointId, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Deletes the transcriptions and captured audio files associated with the endpoint identified by the given ID.
     * Deletion will happen in the background and can take up to a day.
     *
     * @param endpointId The identifier of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> deleteEndpointDataAsync(UUID endpointId);

    /**
     * Deletes the transcriptions and captured audio files associated with the endpoint identified by the given ID.
     * Deletion will happen in the background and can take up to a day.
     *
     * @param endpointId The identifier of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, DeleteEndpointDataHeaders>> deleteEndpointDataWithServiceResponseAsync(UUID endpointId);

    /**
     * Gets the specified endpoint data export task for the authenticated user.
     *
     * @param endpointId The identifier of the endpoint.
     * @param id The identifier of the data export.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getEndpointDataExport(UUID endpointId, UUID id);

    /**
     * Gets the specified endpoint data export task for the authenticated user.
     *
     * @param endpointId The identifier of the endpoint.
     * @param id The identifier of the data export.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getEndpointDataExportAsync(UUID endpointId, UUID id, final ServiceCallback<Object> serviceCallback);

    /**
     * Gets the specified endpoint data export task for the authenticated user.
     *
     * @param endpointId The identifier of the endpoint.
     * @param id The identifier of the data export.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getEndpointDataExportAsync(UUID endpointId, UUID id);

    /**
     * Gets the specified endpoint data export task for the authenticated user.
     *
     * @param endpointId The identifier of the endpoint.
     * @param id The identifier of the data export.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetEndpointDataExportHeaders>> getEndpointDataExportWithServiceResponseAsync(UUID endpointId, UUID id);

    /**
     * Deletes the endpoint data export task identified by the given ID.
     *
     * @param endpointId The identifier of the endpoint.
     * @param id The identifier of the endpoint data export.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent deleteEndpointDataExport(UUID endpointId, UUID id);

    /**
     * Deletes the endpoint data export task identified by the given ID.
     *
     * @param endpointId The identifier of the endpoint.
     * @param id The identifier of the endpoint data export.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> deleteEndpointDataExportAsync(UUID endpointId, UUID id, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Deletes the endpoint data export task identified by the given ID.
     *
     * @param endpointId The identifier of the endpoint.
     * @param id The identifier of the endpoint data export.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> deleteEndpointDataExportAsync(UUID endpointId, UUID id);

    /**
     * Deletes the endpoint data export task identified by the given ID.
     *
     * @param endpointId The identifier of the endpoint.
     * @param id The identifier of the endpoint data export.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, DeleteEndpointDataExportHeaders>> deleteEndpointDataExportWithServiceResponseAsync(UUID endpointId, UUID id);

    /**
     * Gets the list of models for the authenticated subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getModels();

    /**
     * Gets the list of models for the authenticated subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getModelsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Gets the list of models for the authenticated subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getModelsAsync();

    /**
     * Gets the list of models for the authenticated subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetModelsHeaders>> getModelsWithServiceResponseAsync();

    /**
     * Creates a new model.
     *
     * @param modelDefinition The details of the new model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent createModel(SpeechModelDefinition modelDefinition);

    /**
     * Creates a new model.
     *
     * @param modelDefinition The details of the new model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> createModelAsync(SpeechModelDefinition modelDefinition, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Creates a new model.
     *
     * @param modelDefinition The details of the new model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> createModelAsync(SpeechModelDefinition modelDefinition);

    /**
     * Creates a new model.
     *
     * @param modelDefinition The details of the new model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, CreateModelHeaders>> createModelWithServiceResponseAsync(SpeechModelDefinition modelDefinition);

    /**
     * Gets the model identified by the given ID.
     *
     * @param id The identifier of the model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getModel(UUID id);

    /**
     * Gets the model identified by the given ID.
     *
     * @param id The identifier of the model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getModelAsync(UUID id, final ServiceCallback<Object> serviceCallback);

    /**
     * Gets the model identified by the given ID.
     *
     * @param id The identifier of the model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getModelAsync(UUID id);

    /**
     * Gets the model identified by the given ID.
     *
     * @param id The identifier of the model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetModelHeaders>> getModelWithServiceResponseAsync(UUID id);

    /**
     * Deletes the model identified by the given ID.
     *
     * @param id The identifier of the model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent deleteModel(UUID id);

    /**
     * Deletes the model identified by the given ID.
     *
     * @param id The identifier of the model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> deleteModelAsync(UUID id, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Deletes the model identified by the given ID.
     *
     * @param id The identifier of the model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> deleteModelAsync(UUID id);

    /**
     * Deletes the model identified by the given ID.
     *
     * @param id The identifier of the model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, DeleteModelHeaders>> deleteModelWithServiceResponseAsync(UUID id);

    /**
     * Updates the metadata of the model identified by the given ID.
     *
     * @param id The identifier of the model.
     * @param modelUpdate The updated values for the model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateModel(UUID id, ModelUpdate modelUpdate);

    /**
     * Updates the metadata of the model identified by the given ID.
     *
     * @param id The identifier of the model.
     * @param modelUpdate The updated values for the model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateModelAsync(UUID id, ModelUpdate modelUpdate, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates the metadata of the model identified by the given ID.
     *
     * @param id The identifier of the model.
     * @param modelUpdate The updated values for the model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateModelAsync(UUID id, ModelUpdate modelUpdate);

    /**
     * Updates the metadata of the model identified by the given ID.
     *
     * @param id The identifier of the model.
     * @param modelUpdate The updated values for the model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateModelHeaders>> updateModelWithServiceResponseAsync(UUID id, ModelUpdate modelUpdate);

    /**
     * Gets a list of supported locales for model adaptation.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getSupportedLocalesForModels();

    /**
     * Gets a list of supported locales for model adaptation.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getSupportedLocalesForModelsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Gets a list of supported locales for model adaptation.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getSupportedLocalesForModelsAsync();

    /**
     * Gets a list of supported locales for model adaptation.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetSupportedLocalesForModelsHeaders>> getSupportedLocalesForModelsWithServiceResponseAsync();

    /**
     * Gets a list of transcriptions for the authenticated subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getTranscriptions();

    /**
     * Gets a list of transcriptions for the authenticated subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getTranscriptionsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Gets a list of transcriptions for the authenticated subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getTranscriptionsAsync();

    /**
     * Gets a list of transcriptions for the authenticated subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetTranscriptionsHeaders>> getTranscriptionsWithServiceResponseAsync();

    /**
     * Creates a new transcription.
     *
     * @param transcription The details of the new transcription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent createTranscription(TranscriptionDefinition transcription);

    /**
     * Creates a new transcription.
     *
     * @param transcription The details of the new transcription.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> createTranscriptionAsync(TranscriptionDefinition transcription, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Creates a new transcription.
     *
     * @param transcription The details of the new transcription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> createTranscriptionAsync(TranscriptionDefinition transcription);

    /**
     * Creates a new transcription.
     *
     * @param transcription The details of the new transcription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, CreateTranscriptionHeaders>> createTranscriptionWithServiceResponseAsync(TranscriptionDefinition transcription);

    /**
     * Gets the transcription identified by the given ID.
     *
     * @param id The identifier of the transcription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getTranscription(UUID id);

    /**
     * Gets the transcription identified by the given ID.
     *
     * @param id The identifier of the transcription.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getTranscriptionAsync(UUID id, final ServiceCallback<Object> serviceCallback);

    /**
     * Gets the transcription identified by the given ID.
     *
     * @param id The identifier of the transcription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getTranscriptionAsync(UUID id);

    /**
     * Gets the transcription identified by the given ID.
     *
     * @param id The identifier of the transcription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetTranscriptionHeaders>> getTranscriptionWithServiceResponseAsync(UUID id);

    /**
     * Deletes the specified transcription task.
     *
     * @param id The identifier of the transcription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent deleteTranscription(UUID id);

    /**
     * Deletes the specified transcription task.
     *
     * @param id The identifier of the transcription.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> deleteTranscriptionAsync(UUID id, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Deletes the specified transcription task.
     *
     * @param id The identifier of the transcription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> deleteTranscriptionAsync(UUID id);

    /**
     * Deletes the specified transcription task.
     *
     * @param id The identifier of the transcription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, DeleteTranscriptionHeaders>> deleteTranscriptionWithServiceResponseAsync(UUID id);

    /**
     * Updates the mutable details of the transcription identified by its ID.
     *
     * @param id The identifier of the transcription.
     * @param transcriptionUpdate The updated values for the transcription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateTranscription(UUID id, TranscriptionUpdate transcriptionUpdate);

    /**
     * Updates the mutable details of the transcription identified by its ID.
     *
     * @param id The identifier of the transcription.
     * @param transcriptionUpdate The updated values for the transcription.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateTranscriptionAsync(UUID id, TranscriptionUpdate transcriptionUpdate, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates the mutable details of the transcription identified by its ID.
     *
     * @param id The identifier of the transcription.
     * @param transcriptionUpdate The updated values for the transcription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateTranscriptionAsync(UUID id, TranscriptionUpdate transcriptionUpdate);

    /**
     * Updates the mutable details of the transcription identified by its ID.
     *
     * @param id The identifier of the transcription.
     * @param transcriptionUpdate The updated values for the transcription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateTranscriptionHeaders>> updateTranscriptionWithServiceResponseAsync(UUID id, TranscriptionUpdate transcriptionUpdate);

    /**
     * Gets a list of supported locales for offline transcriptions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getSupportedLocalesForTranscriptions();

    /**
     * Gets a list of supported locales for offline transcriptions.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getSupportedLocalesForTranscriptionsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Gets a list of supported locales for offline transcriptions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getSupportedLocalesForTranscriptionsAsync();

    /**
     * Gets a list of supported locales for offline transcriptions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetSupportedLocalesForTranscriptionsHeaders>> getSupportedLocalesForTranscriptionsWithServiceResponseAsync();

    /**
     * Gets all language generation endpoint of a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getLanguageGenerationEndpoints();

    /**
     * Gets all language generation endpoint of a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getLanguageGenerationEndpointsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Gets all language generation endpoint of a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getLanguageGenerationEndpointsAsync();

    /**
     * Gets all language generation endpoint of a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetLanguageGenerationEndpointsHeaders>> getLanguageGenerationEndpointsWithServiceResponseAsync();

    /**
     * Creates a new language generation endpoint.
     *
     * @param endpointDefinition the EndpointDefinition value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent createLanguageGenerationEndpoint(EndpointDefinition endpointDefinition);

    /**
     * Creates a new language generation endpoint.
     *
     * @param endpointDefinition the EndpointDefinition value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> createLanguageGenerationEndpointAsync(EndpointDefinition endpointDefinition, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Creates a new language generation endpoint.
     *
     * @param endpointDefinition the EndpointDefinition value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> createLanguageGenerationEndpointAsync(EndpointDefinition endpointDefinition);

    /**
     * Creates a new language generation endpoint.
     *
     * @param endpointDefinition the EndpointDefinition value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, CreateLanguageGenerationEndpointHeaders>> createLanguageGenerationEndpointWithServiceResponseAsync(EndpointDefinition endpointDefinition);

    /**
     * Gets the specified deployed language generation endpoint.
     *
     * @param id the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getLanguageGenerationEndpoint(UUID id);

    /**
     * Gets the specified deployed language generation endpoint.
     *
     * @param id the UUID value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getLanguageGenerationEndpointAsync(UUID id, final ServiceCallback<Object> serviceCallback);

    /**
     * Gets the specified deployed language generation endpoint.
     *
     * @param id the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getLanguageGenerationEndpointAsync(UUID id);

    /**
     * Gets the specified deployed language generation endpoint.
     *
     * @param id the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetLanguageGenerationEndpointHeaders>> getLanguageGenerationEndpointWithServiceResponseAsync(UUID id);

    /**
     * Deletes the language generation model endpoint with the given id.
     *
     * @param id The identifier of the language generation model endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent deleteLanguageGenerationEndpoint(UUID id);

    /**
     * Deletes the language generation model endpoint with the given id.
     *
     * @param id The identifier of the language generation model endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> deleteLanguageGenerationEndpointAsync(UUID id, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Deletes the language generation model endpoint with the given id.
     *
     * @param id The identifier of the language generation model endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> deleteLanguageGenerationEndpointAsync(UUID id);

    /**
     * Deletes the language generation model endpoint with the given id.
     *
     * @param id The identifier of the language generation model endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, DeleteLanguageGenerationEndpointHeaders>> deleteLanguageGenerationEndpointWithServiceResponseAsync(UUID id);

    /**
     * Updates the mutable details of the language generation endpoint identified by its id.
     *
     * @param id The identifier of the language generation model endpoint.
     * @param endpointUpdate The object contains the updated fields of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateLanguageGenerationEndpoint(UUID id, EndpointUpdate endpointUpdate);

    /**
     * Updates the mutable details of the language generation endpoint identified by its id.
     *
     * @param id The identifier of the language generation model endpoint.
     * @param endpointUpdate The object contains the updated fields of the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateLanguageGenerationEndpointAsync(UUID id, EndpointUpdate endpointUpdate, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates the mutable details of the language generation endpoint identified by its id.
     *
     * @param id The identifier of the language generation model endpoint.
     * @param endpointUpdate The object contains the updated fields of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateLanguageGenerationEndpointAsync(UUID id, EndpointUpdate endpointUpdate);

    /**
     * Updates the mutable details of the language generation endpoint identified by its id.
     *
     * @param id The identifier of the language generation model endpoint.
     * @param endpointUpdate The object contains the updated fields of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateLanguageGenerationEndpointHeaders>> updateLanguageGenerationEndpointWithServiceResponseAsync(UUID id, EndpointUpdate endpointUpdate);

    /**
     * Gets a list of supported locales for language generation endpoint creation.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getSupportedLocalesForLanguageGenerationEndpoints();

    /**
     * Gets a list of supported locales for language generation endpoint creation.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getSupportedLocalesForLanguageGenerationEndpointsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Gets a list of supported locales for language generation endpoint creation.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getSupportedLocalesForLanguageGenerationEndpointsAsync();

    /**
     * Gets a list of supported locales for language generation endpoint creation.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetSupportedLocalesForLanguageGenerationEndpointsHeaders>> getSupportedLocalesForLanguageGenerationEndpointsWithServiceResponseAsync();

    /**
     * Gets all language generation model of a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getLanguageGenerationModels();

    /**
     * Gets all language generation model of a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getLanguageGenerationModelsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Gets all language generation model of a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getLanguageGenerationModelsAsync();

    /**
     * Gets all language generation model of a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetLanguageGenerationModelsHeaders>> getLanguageGenerationModelsWithServiceResponseAsync();

    /**
     * Creates a new language generation model.
     *
     * @param modelDefinition the ModelDefinition value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent createLanguageGenerationModel(ModelDefinition modelDefinition);

    /**
     * Creates a new language generation model.
     *
     * @param modelDefinition the ModelDefinition value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> createLanguageGenerationModelAsync(ModelDefinition modelDefinition, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Creates a new language generation model.
     *
     * @param modelDefinition the ModelDefinition value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> createLanguageGenerationModelAsync(ModelDefinition modelDefinition);

    /**
     * Creates a new language generation model.
     *
     * @param modelDefinition the ModelDefinition value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, CreateLanguageGenerationModelHeaders>> createLanguageGenerationModelWithServiceResponseAsync(ModelDefinition modelDefinition);

    /**
     * Gets the specified language generation model.
     *
     * @param id the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getLanguageGenerationModel(UUID id);

    /**
     * Gets the specified language generation model.
     *
     * @param id the UUID value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getLanguageGenerationModelAsync(UUID id, final ServiceCallback<Object> serviceCallback);

    /**
     * Gets the specified language generation model.
     *
     * @param id the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getLanguageGenerationModelAsync(UUID id);

    /**
     * Gets the specified language generation model.
     *
     * @param id the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetLanguageGenerationModelHeaders>> getLanguageGenerationModelWithServiceResponseAsync(UUID id);

    /**
     * Deletes the language generation model with the given id.
     *
     * @param id The identifier of the language generation model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent deleteLanguageGenerationModel(UUID id);

    /**
     * Deletes the language generation model with the given id.
     *
     * @param id The identifier of the language generation model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> deleteLanguageGenerationModelAsync(UUID id, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Deletes the language generation model with the given id.
     *
     * @param id The identifier of the language generation model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> deleteLanguageGenerationModelAsync(UUID id);

    /**
     * Deletes the language generation model with the given id.
     *
     * @param id The identifier of the language generation model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, DeleteLanguageGenerationModelHeaders>> deleteLanguageGenerationModelWithServiceResponseAsync(UUID id);

    /**
     * Updates the mutable details of the language generation model identified by its id.
     *
     * @param id The route parameter identifies the language generation model to change.
     * @param modelUpdate The object contains the updated fields of the model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateLanguageGenerationModel(UUID id, ModelUpdate modelUpdate);

    /**
     * Updates the mutable details of the language generation model identified by its id.
     *
     * @param id The route parameter identifies the language generation model to change.
     * @param modelUpdate The object contains the updated fields of the model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateLanguageGenerationModelAsync(UUID id, ModelUpdate modelUpdate, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates the mutable details of the language generation model identified by its id.
     *
     * @param id The route parameter identifies the language generation model to change.
     * @param modelUpdate The object contains the updated fields of the model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateLanguageGenerationModelAsync(UUID id, ModelUpdate modelUpdate);

    /**
     * Updates the mutable details of the language generation model identified by its id.
     *
     * @param id The route parameter identifies the language generation model to change.
     * @param modelUpdate The object contains the updated fields of the model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateLanguageGenerationModelHeaders>> updateLanguageGenerationModelWithServiceResponseAsync(UUID id, ModelUpdate modelUpdate);

    /**
     * Gets a list of supported locales for language generation model creation.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getSupportedLocalesForLanguageGenerationModels();

    /**
     * Gets a list of supported locales for language generation model creation.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getSupportedLocalesForLanguageGenerationModelsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Gets a list of supported locales for language generation model creation.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getSupportedLocalesForLanguageGenerationModelsAsync();

    /**
     * Gets a list of supported locales for language generation model creation.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetSupportedLocalesForLanguageGenerationModelsHeaders>> getSupportedLocalesForLanguageGenerationModelsWithServiceResponseAsync();

    /**
     * The action returns the health of the different components of the serivce.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HealthStatusResponse object if successful.
     */
    HealthStatusResponse getHealthStatus();

    /**
     * The action returns the health of the different components of the serivce.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HealthStatusResponse> getHealthStatusAsync(final ServiceCallback<HealthStatusResponse> serviceCallback);

    /**
     * The action returns the health of the different components of the serivce.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HealthStatusResponse object
     */
    Observable<HealthStatusResponse> getHealthStatusAsync();

    /**
     * The action returns the health of the different components of the serivce.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HealthStatusResponse object
     */
    Observable<ServiceResponseWithHeaders<HealthStatusResponse, GetHealthStatusHeaders>> getHealthStatusWithServiceResponseAsync();

    /**
     * Gets all voice datasets of a user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getVoiceDatasets();

    /**
     * Gets all voice datasets of a user.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getVoiceDatasetsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Gets all voice datasets of a user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getVoiceDatasetsAsync();

    /**
     * Gets all voice datasets of a user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetVoiceDatasetsHeaders>> getVoiceDatasetsWithServiceResponseAsync();

    /**
     * Gets a list of supported locales for custom voice data imports.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getSupportedLocalesForVoiceDatasets();

    /**
     * Gets a list of supported locales for custom voice data imports.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getSupportedLocalesForVoiceDatasetsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Gets a list of supported locales for custom voice data imports.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getSupportedLocalesForVoiceDatasetsAsync();

    /**
     * Gets a list of supported locales for custom voice data imports.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetSupportedLocalesForVoiceDatasetsHeaders>> getSupportedLocalesForVoiceDatasetsWithServiceResponseAsync();

    /**
     * Uploads data and creates a new voice data object.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent uploadVoiceDataset();

    /**
     * Uploads data and creates a new voice data object.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> uploadVoiceDatasetAsync(final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Uploads data and creates a new voice data object.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> uploadVoiceDatasetAsync();

    /**
     * Uploads data and creates a new voice data object.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, UploadVoiceDatasetHeaders>> uploadVoiceDatasetWithServiceResponseAsync();
    /**
     * Uploads data and creates a new voice data object.
     *
     * @param name The name of this data import (always add this string for any import).
     * @param description Optional description of this data import.
     * @param locale The locale of this data import (always add this string for any import).
     * @param dataImportKind The kind of the data import (always add this string for any import). Possible values include: 'None', 'Language', 'Acoustic', 'Pronunciation', 'CustomVoice', 'LanguageGeneration'
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings)
     * @param audiodata A zip file containing the audio data.
     * @param transcriptions The transcriptions text file of the audio data.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent uploadVoiceDataset(String name, String description, String locale, String dataImportKind, String properties, byte[] audiodata, byte[] transcriptions);

    /**
     * Uploads data and creates a new voice data object.
     *
     * @param name The name of this data import (always add this string for any import).
     * @param description Optional description of this data import.
     * @param locale The locale of this data import (always add this string for any import).
     * @param dataImportKind The kind of the data import (always add this string for any import). Possible values include: 'None', 'Language', 'Acoustic', 'Pronunciation', 'CustomVoice', 'LanguageGeneration'
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings)
     * @param audiodata A zip file containing the audio data.
     * @param transcriptions The transcriptions text file of the audio data.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> uploadVoiceDatasetAsync(String name, String description, String locale, String dataImportKind, String properties, byte[] audiodata, byte[] transcriptions, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Uploads data and creates a new voice data object.
     *
     * @param name The name of this data import (always add this string for any import).
     * @param description Optional description of this data import.
     * @param locale The locale of this data import (always add this string for any import).
     * @param dataImportKind The kind of the data import (always add this string for any import). Possible values include: 'None', 'Language', 'Acoustic', 'Pronunciation', 'CustomVoice', 'LanguageGeneration'
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings)
     * @param audiodata A zip file containing the audio data.
     * @param transcriptions The transcriptions text file of the audio data.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> uploadVoiceDatasetAsync(String name, String description, String locale, String dataImportKind, String properties, byte[] audiodata, byte[] transcriptions);

    /**
     * Uploads data and creates a new voice data object.
     *
     * @param name The name of this data import (always add this string for any import).
     * @param description Optional description of this data import.
     * @param locale The locale of this data import (always add this string for any import).
     * @param dataImportKind The kind of the data import (always add this string for any import). Possible values include: 'None', 'Language', 'Acoustic', 'Pronunciation', 'CustomVoice', 'LanguageGeneration'
     * @param properties Optional properties of this data import (json serialized object with key/values, where all values must be strings)
     * @param audiodata A zip file containing the audio data.
     * @param transcriptions The transcriptions text file of the audio data.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, UploadVoiceDatasetHeaders>> uploadVoiceDatasetWithServiceResponseAsync(String name, String description, String locale, String dataImportKind, String properties, byte[] audiodata, byte[] transcriptions);

    /**
     * Deletes the voice dataset with the given id.
     *
     * @param id The identifier of the voice dataset
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent deleteVoiceDataset(UUID id);

    /**
     * Deletes the voice dataset with the given id.
     *
     * @param id The identifier of the voice dataset
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> deleteVoiceDatasetAsync(UUID id, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Deletes the voice dataset with the given id.
     *
     * @param id The identifier of the voice dataset
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> deleteVoiceDatasetAsync(UUID id);

    /**
     * Deletes the voice dataset with the given id.
     *
     * @param id The identifier of the voice dataset
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, DeleteVoiceDatasetHeaders>> deleteVoiceDatasetWithServiceResponseAsync(UUID id);

    /**
     * Updates the mutable details of the voice dataset identified by its ID.
     *
     * @param id The identifier of the voice dataset.
     * @param datasetUpdate The updated values for the voice dataset.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateVoiceDataset(UUID id, DatasetUpdate datasetUpdate);

    /**
     * Updates the mutable details of the voice dataset identified by its ID.
     *
     * @param id The identifier of the voice dataset.
     * @param datasetUpdate The updated values for the voice dataset.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateVoiceDatasetAsync(UUID id, DatasetUpdate datasetUpdate, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates the mutable details of the voice dataset identified by its ID.
     *
     * @param id The identifier of the voice dataset.
     * @param datasetUpdate The updated values for the voice dataset.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateVoiceDatasetAsync(UUID id, DatasetUpdate datasetUpdate);

    /**
     * Updates the mutable details of the voice dataset identified by its ID.
     *
     * @param id The identifier of the voice dataset.
     * @param datasetUpdate The updated values for the voice dataset.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateVoiceDatasetHeaders>> updateVoiceDatasetWithServiceResponseAsync(UUID id, DatasetUpdate datasetUpdate);

    /**
     * Gets a list of voice endpoint details.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getVoiceDeployments();

    /**
     * Gets a list of voice endpoint details.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getVoiceDeploymentsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Gets a list of voice endpoint details.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getVoiceDeploymentsAsync();

    /**
     * Gets a list of voice endpoint details.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetVoiceDeploymentsHeaders>> getVoiceDeploymentsWithServiceResponseAsync();

    /**
     * Creates a new voice endpoint object.
     *
     * @param endpoint the EndpointDefinition value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent createVoiceDeployment(EndpointDefinition endpoint);

    /**
     * Creates a new voice endpoint object.
     *
     * @param endpoint the EndpointDefinition value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> createVoiceDeploymentAsync(EndpointDefinition endpoint, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Creates a new voice endpoint object.
     *
     * @param endpoint the EndpointDefinition value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> createVoiceDeploymentAsync(EndpointDefinition endpoint);

    /**
     * Creates a new voice endpoint object.
     *
     * @param endpoint the EndpointDefinition value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, CreateVoiceDeploymentHeaders>> createVoiceDeploymentWithServiceResponseAsync(EndpointDefinition endpoint);

    /**
     * Gets the details of a Custom Voice endpoint.
     *
     * @param id the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getVoiceDeployment(UUID id);

    /**
     * Gets the details of a Custom Voice endpoint.
     *
     * @param id the UUID value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getVoiceDeploymentAsync(UUID id, final ServiceCallback<Object> serviceCallback);

    /**
     * Gets the details of a Custom Voice endpoint.
     *
     * @param id the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getVoiceDeploymentAsync(UUID id);

    /**
     * Gets the details of a Custom Voice endpoint.
     *
     * @param id the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetVoiceDeploymentHeaders>> getVoiceDeploymentWithServiceResponseAsync(UUID id);

    /**
     * Delete the specified voice endpoint.
     *
     * @param id The id of voice endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent deleteDeployment(UUID id);

    /**
     * Delete the specified voice endpoint.
     *
     * @param id The id of voice endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> deleteDeploymentAsync(UUID id, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Delete the specified voice endpoint.
     *
     * @param id The id of voice endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> deleteDeploymentAsync(UUID id);

    /**
     * Delete the specified voice endpoint.
     *
     * @param id The id of voice endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, DeleteDeploymentHeaders>> deleteDeploymentWithServiceResponseAsync(UUID id);

    /**
     * Updates the name and description of the endpoint identified by the given ID.
     *
     * @param id The identifier of the endpoint.
     * @param endpointUpdate The updated values for the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateVoiceEndpoint(UUID id, EndpointUpdate endpointUpdate);

    /**
     * Updates the name and description of the endpoint identified by the given ID.
     *
     * @param id The identifier of the endpoint.
     * @param endpointUpdate The updated values for the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateVoiceEndpointAsync(UUID id, EndpointUpdate endpointUpdate, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates the name and description of the endpoint identified by the given ID.
     *
     * @param id The identifier of the endpoint.
     * @param endpointUpdate The updated values for the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateVoiceEndpointAsync(UUID id, EndpointUpdate endpointUpdate);

    /**
     * Updates the name and description of the endpoint identified by the given ID.
     *
     * @param id The identifier of the endpoint.
     * @param endpointUpdate The updated values for the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateVoiceEndpointHeaders>> updateVoiceEndpointWithServiceResponseAsync(UUID id, EndpointUpdate endpointUpdate);

    /**
     * Gets a list of supported locales for custom voice Endpoints.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getSupportedLocalesForVoiceEndpoints();

    /**
     * Gets a list of supported locales for custom voice Endpoints.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getSupportedLocalesForVoiceEndpointsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Gets a list of supported locales for custom voice Endpoints.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getSupportedLocalesForVoiceEndpointsAsync();

    /**
     * Gets a list of supported locales for custom voice Endpoints.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetSupportedLocalesForVoiceEndpointsHeaders>> getSupportedLocalesForVoiceEndpointsWithServiceResponseAsync();

    /**
     * Gets a list of voice model details.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getVoiceModels();

    /**
     * Gets a list of voice model details.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getVoiceModelsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Gets a list of voice model details.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getVoiceModelsAsync();

    /**
     * Gets a list of voice model details.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetVoiceModelsHeaders>> getVoiceModelsWithServiceResponseAsync();

    /**
     * Creates a new voice model object.
     *
     * @param modelDefinition the ModelDefinition value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent createVoiceModel(ModelDefinition modelDefinition);

    /**
     * Creates a new voice model object.
     *
     * @param modelDefinition the ModelDefinition value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> createVoiceModelAsync(ModelDefinition modelDefinition, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Creates a new voice model object.
     *
     * @param modelDefinition the ModelDefinition value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> createVoiceModelAsync(ModelDefinition modelDefinition);

    /**
     * Creates a new voice model object.
     *
     * @param modelDefinition the ModelDefinition value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, CreateVoiceModelHeaders>> createVoiceModelWithServiceResponseAsync(ModelDefinition modelDefinition);

    /**
     * Gets specified voice model details.
     *
     * @param id the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getVoiceModel(UUID id);

    /**
     * Gets specified voice model details.
     *
     * @param id the UUID value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getVoiceModelAsync(UUID id, final ServiceCallback<Object> serviceCallback);

    /**
     * Gets specified voice model details.
     *
     * @param id the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getVoiceModelAsync(UUID id);

    /**
     * Gets specified voice model details.
     *
     * @param id the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetVoiceModelHeaders>> getVoiceModelWithServiceResponseAsync(UUID id);

    /**
     * Deletes the voice model with the given id.
     *
     * @param id The identifier of the voice model
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent deleteVoiceModel(UUID id);

    /**
     * Deletes the voice model with the given id.
     *
     * @param id The identifier of the voice model
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> deleteVoiceModelAsync(UUID id, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Deletes the voice model with the given id.
     *
     * @param id The identifier of the voice model
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> deleteVoiceModelAsync(UUID id);

    /**
     * Deletes the voice model with the given id.
     *
     * @param id The identifier of the voice model
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, DeleteVoiceModelHeaders>> deleteVoiceModelWithServiceResponseAsync(UUID id);

    /**
     * Updates the metadata of the voice model identified by the given ID.
     *
     * @param id The identifier of the voice model.
     * @param modelUpdate The updated values for the voice model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateVoiceModel(UUID id, ModelUpdate modelUpdate);

    /**
     * Updates the metadata of the voice model identified by the given ID.
     *
     * @param id The identifier of the voice model.
     * @param modelUpdate The updated values for the voice model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateVoiceModelAsync(UUID id, ModelUpdate modelUpdate, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates the metadata of the voice model identified by the given ID.
     *
     * @param id The identifier of the voice model.
     * @param modelUpdate The updated values for the voice model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateVoiceModelAsync(UUID id, ModelUpdate modelUpdate);

    /**
     * Updates the metadata of the voice model identified by the given ID.
     *
     * @param id The identifier of the voice model.
     * @param modelUpdate The updated values for the voice model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateVoiceModelHeaders>> updateVoiceModelWithServiceResponseAsync(UUID id, ModelUpdate modelUpdate);

    /**
     * Gets a list of supported locales for custom voice Models.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getSupportedLocalesForVoiceModels();

    /**
     * Gets a list of supported locales for custom voice Models.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getSupportedLocalesForVoiceModelsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Gets a list of supported locales for custom voice Models.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getSupportedLocalesForVoiceModelsAsync();

    /**
     * Gets a list of supported locales for custom voice Models.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetSupportedLocalesForVoiceModelsHeaders>> getSupportedLocalesForVoiceModelsWithServiceResponseAsync();

    /**
     * Gets detail of the specified voice test.
     *
     * @param id The identifier of the voice test.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getVoiceTest(UUID id);

    /**
     * Gets detail of the specified voice test.
     *
     * @param id The identifier of the voice test.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getVoiceTestAsync(UUID id, final ServiceCallback<Object> serviceCallback);

    /**
     * Gets detail of the specified voice test.
     *
     * @param id The identifier of the voice test.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getVoiceTestAsync(UUID id);

    /**
     * Gets detail of the specified voice test.
     *
     * @param id The identifier of the voice test.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetVoiceTestHeaders>> getVoiceTestWithServiceResponseAsync(UUID id);

    /**
     * Deletes the specified voice test.
     *
     * @param id The identifier of the voice test.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent deleteVoiceTest(UUID id);

    /**
     * Deletes the specified voice test.
     *
     * @param id The identifier of the voice test.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> deleteVoiceTestAsync(UUID id, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Deletes the specified voice test.
     *
     * @param id The identifier of the voice test.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> deleteVoiceTestAsync(UUID id);

    /**
     * Deletes the specified voice test.
     *
     * @param id The identifier of the voice test.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, DeleteVoiceTestHeaders>> deleteVoiceTestWithServiceResponseAsync(UUID id);

    /**
     * Creates a new voice test.
     *
     * @param voiceTestDefinition the VoiceTestDefinition value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErrorContent object if successful.
     */
    ErrorContent createVoiceTest(VoiceTestDefinition voiceTestDefinition);

    /**
     * Creates a new voice test.
     *
     * @param voiceTestDefinition the VoiceTestDefinition value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErrorContent> createVoiceTestAsync(VoiceTestDefinition voiceTestDefinition, final ServiceCallback<ErrorContent> serviceCallback);

    /**
     * Creates a new voice test.
     *
     * @param voiceTestDefinition the VoiceTestDefinition value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ErrorContent> createVoiceTestAsync(VoiceTestDefinition voiceTestDefinition);

    /**
     * Creates a new voice test.
     *
     * @param voiceTestDefinition the VoiceTestDefinition value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErrorContent object
     */
    Observable<ServiceResponseWithHeaders<ErrorContent, CreateVoiceTestHeaders>> createVoiceTestWithServiceResponseAsync(VoiceTestDefinition voiceTestDefinition);

}
