/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.knowledge.qnamaker.implementation;

import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.GET;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.PATCH;
import com.azure.common.annotations.PathParam;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.implementation.RestProxy;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.EndpointKeys;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.EndpointKeysDTO;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.ErrorResponseException;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * EndpointKeys.
 */
public final class EndpointKeysImpl implements EndpointKeys {
    /**
     * The proxy service used to perform REST calls.
     */
    private EndpointKeysService service;

    /**
     * The service client containing this operation class.
     */
    private QnAMakerClientImpl client;

    /**
     * Initializes an instance of EndpointKeysImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public EndpointKeysImpl(QnAMakerClientImpl client) {
        this.service = RestProxy.create(EndpointKeysService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for EndpointKeys to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{Endpoint}/qnamaker/v4.0")
    private interface EndpointKeysService {
        @GET("endpointkeys")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<EndpointKeysDTO>> getKeys(@HostParam("Endpoint") String endpoint);

        @PATCH("endpointkeys/{keyType}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<EndpointKeysDTO>> refreshKeys(@PathParam("keyType") String keyType, @HostParam("Endpoint") String endpoint);
    }

    /**
     * Gets endpoint keys for an endpoint.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the EndpointKeysDTO object if successful.
     */
    public EndpointKeysDTO getKeys() {
        return getKeysAsync().block();
    }

    /**
     * Gets endpoint keys for an endpoint.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<EndpointKeysDTO>> getKeysWithRestResponseAsync() {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        return service.getKeys(this.client.endpoint());
    }

    /**
     * Gets endpoint keys for an endpoint.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<EndpointKeysDTO> getKeysAsync() {
        return getKeysWithRestResponseAsync()
            .flatMap((SimpleResponse<EndpointKeysDTO> res) -> Mono.just(res.value()));
    }

    /**
     * Re-generates an endpoint key.
     *
     * @param keyType Type of Key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the EndpointKeysDTO object if successful.
     */
    public EndpointKeysDTO refreshKeys(@NonNull String keyType) {
        return refreshKeysAsync(keyType).block();
    }

    /**
     * Re-generates an endpoint key.
     *
     * @param keyType Type of Key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<EndpointKeysDTO>> refreshKeysWithRestResponseAsync(@NonNull String keyType) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (keyType == null) {
            throw new IllegalArgumentException("Parameter keyType is required and cannot be null.");
        }
        return service.refreshKeys(keyType, this.client.endpoint());
    }

    /**
     * Re-generates an endpoint key.
     *
     * @param keyType Type of Key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<EndpointKeysDTO> refreshKeysAsync(@NonNull String keyType) {
        return refreshKeysWithRestResponseAsync(keyType)
            .flatMap((SimpleResponse<EndpointKeysDTO> res) -> Mono.just(res.value()));
    }
}
