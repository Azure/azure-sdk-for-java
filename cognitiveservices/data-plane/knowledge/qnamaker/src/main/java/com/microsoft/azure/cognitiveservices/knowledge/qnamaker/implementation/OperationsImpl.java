/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.knowledge.qnamaker.implementation;

import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.GET;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.PathParam;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.implementation.RestProxy;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Operations;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.Operation;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.OperationsGetDetailsResponse;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Operations.
 */
public final class OperationsImpl implements Operations {
    /**
     * The proxy service used to perform REST calls.
     */
    private OperationsService service;

    /**
     * The service client containing this operation class.
     */
    private QnAMakerClientImpl client;

    /**
     * Initializes an instance of OperationsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public OperationsImpl(QnAMakerClientImpl client) {
        this.service = RestProxy.create(OperationsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Operations to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{Endpoint}/qnamaker/v4.0")
    private interface OperationsService {
        @GET("operations/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<OperationsGetDetailsResponse> getDetails(@PathParam("operationId") String operationId, @HostParam("Endpoint") String endpoint);
    }

    /**
     * Gets details of a specific long running operation.
     *
     * @param operationId Operation id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Operation object if successful.
     */
    public Operation getDetails(@NonNull String operationId) {
        return getDetailsAsync(operationId).block();
    }

    /**
     * Gets details of a specific long running operation.
     *
     * @param operationId Operation id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OperationsGetDetailsResponse> getDetailsWithRestResponseAsync(@NonNull String operationId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (operationId == null) {
            throw new IllegalArgumentException("Parameter operationId is required and cannot be null.");
        }
        return service.getDetails(operationId, this.client.endpoint());
    }

    /**
     * Gets details of a specific long running operation.
     *
     * @param operationId Operation id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Operation> getDetailsAsync(@NonNull String operationId) {
        return getDetailsWithRestResponseAsync(operationId)
            .flatMap((OperationsGetDetailsResponse res) -> Mono.just(res.value()));
    }
}
