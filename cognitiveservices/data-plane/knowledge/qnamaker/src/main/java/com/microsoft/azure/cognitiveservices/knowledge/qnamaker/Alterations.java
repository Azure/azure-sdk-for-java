/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.knowledge.qnamaker;

import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.http.rest.VoidResponse;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.AlterationsDTO;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.WordAlterationsDTO;
import java.util.List;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Alterations.
 */
public interface Alterations {
    /**
     * Download alterations from runtime.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the WordAlterationsDTO object if successful.
     */
    WordAlterationsDTO get();

    /**
     * Download alterations from runtime.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<WordAlterationsDTO>> getWithRestResponseAsync();

    /**
     * Download alterations from runtime.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<WordAlterationsDTO> getAsync();

    /**
     * Replace alterations data.
     *
     * @param wordAlterations Collection of word alterations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void replace(@NonNull List<AlterationsDTO> wordAlterations);

    /**
     * Replace alterations data.
     *
     * @param wordAlterations Collection of word alterations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<VoidResponse> replaceWithRestResponseAsync(@NonNull List<AlterationsDTO> wordAlterations);

    /**
     * Replace alterations data.
     *
     * @param wordAlterations Collection of word alterations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> replaceAsync(@NonNull List<AlterationsDTO> wordAlterations);
}
