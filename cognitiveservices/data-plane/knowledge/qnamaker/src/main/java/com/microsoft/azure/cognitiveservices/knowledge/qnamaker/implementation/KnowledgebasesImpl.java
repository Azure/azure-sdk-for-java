/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.knowledge.qnamaker.implementation;

import com.azure.common.annotations.BodyParam;
import com.azure.common.annotations.DELETE;
import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.GET;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.PATCH;
import com.azure.common.annotations.PathParam;
import com.azure.common.annotations.POST;
import com.azure.common.annotations.PUT;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.http.rest.RestVoidResponse;
import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.implementation.RestProxy;
import com.azure.common.implementation.Validator;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.CreateKbDTO;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.EnvironmentType;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.KnowledgebaseDTO;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.KnowledgebasesDTO;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.KnowledgebasesUpdateResponse;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.Operation;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnADocumentsDTO;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnADTO;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.ReplaceKbDTO;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.UpdateKbOperationDTO;
import java.util.ArrayList;
import java.util.List;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Knowledgebases.
 */
public final class KnowledgebasesImpl implements Knowledgebases {
    /**
     * The proxy service used to perform REST calls.
     */
    private KnowledgebasesService service;

    /**
     * The service client containing this operation class.
     */
    private QnAMakerClientImpl client;

    /**
     * Initializes an instance of KnowledgebasesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public KnowledgebasesImpl(QnAMakerClientImpl client) {
        this.service = RestProxy.create(KnowledgebasesService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Knowledgebases to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{Endpoint}/qnamaker/v4.0")
    private interface KnowledgebasesService {
        @GET("knowledgebases")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<KnowledgebasesDTO>> listAll(@HostParam("Endpoint") String endpoint);

        @GET("knowledgebases/{kbId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<KnowledgebaseDTO>> getDetails(@PathParam("kbId") String kbId, @HostParam("Endpoint") String endpoint);

        @DELETE("knowledgebases/{kbId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<RestVoidResponse> delete(@PathParam("kbId") String kbId, @HostParam("Endpoint") String endpoint);

        @POST("knowledgebases/{kbId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<RestVoidResponse> publish(@PathParam("kbId") String kbId, @HostParam("Endpoint") String endpoint);

        @PUT("knowledgebases/{kbId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<RestVoidResponse> replace(@PathParam("kbId") String kbId, @HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") ReplaceKbDTO replaceKb);

        @PATCH("knowledgebases/{kbId}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<KnowledgebasesUpdateResponse> update(@PathParam("kbId") String kbId, @HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") UpdateKbOperationDTO updateKb);

        @POST("knowledgebases/create")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<Operation>> create(@HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") CreateKbDTO createKbPayload);

        @GET("knowledgebases/{kbId}/{environment}/qna")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<QnADocumentsDTO>> download(@PathParam("kbId") String kbId, @PathParam("environment") EnvironmentType environment, @HostParam("Endpoint") String endpoint);
    }

    /**
     * Gets all knowledgebases for a user.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KnowledgebasesDTO object if successful.
     */
    public KnowledgebasesDTO listAll() {
        return listAllAsync().block();
    }

    /**
     * Gets all knowledgebases for a user.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<KnowledgebasesDTO>> listAllWithRestResponseAsync() {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        return service.listAll(this.client.endpoint());
    }

    /**
     * Gets all knowledgebases for a user.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KnowledgebasesDTO> listAllAsync() {
        return listAllWithRestResponseAsync()
            .flatMap((SimpleResponse<KnowledgebasesDTO> res) -> Mono.just(res.value()));
    }

    /**
     * Gets details of a specific knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KnowledgebaseDTO object if successful.
     */
    public KnowledgebaseDTO getDetails(@NonNull String kbId) {
        return getDetailsAsync(kbId).block();
    }

    /**
     * Gets details of a specific knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<KnowledgebaseDTO>> getDetailsWithRestResponseAsync(@NonNull String kbId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (kbId == null) {
            throw new IllegalArgumentException("Parameter kbId is required and cannot be null.");
        }
        return service.getDetails(kbId, this.client.endpoint());
    }

    /**
     * Gets details of a specific knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KnowledgebaseDTO> getDetailsAsync(@NonNull String kbId) {
        return getDetailsWithRestResponseAsync(kbId)
            .flatMap((SimpleResponse<KnowledgebaseDTO> res) -> Mono.just(res.value()));
    }

    /**
     * Deletes the knowledgebase and all its data.
     *
     * @param kbId Knowledgebase id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void delete(@NonNull String kbId) {
        deleteAsync(kbId).block();
    }

    /**
     * Deletes the knowledgebase and all its data.
     *
     * @param kbId Knowledgebase id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> deleteWithRestResponseAsync(@NonNull String kbId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (kbId == null) {
            throw new IllegalArgumentException("Parameter kbId is required and cannot be null.");
        }
        return service.delete(kbId, this.client.endpoint());
    }

    /**
     * Deletes the knowledgebase and all its data.
     *
     * @param kbId Knowledgebase id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> deleteAsync(@NonNull String kbId) {
        return deleteWithRestResponseAsync(kbId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Publishes all changes in test index of a knowledgebase to its prod index.
     *
     * @param kbId Knowledgebase id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void publish(@NonNull String kbId) {
        publishAsync(kbId).block();
    }

    /**
     * Publishes all changes in test index of a knowledgebase to its prod index.
     *
     * @param kbId Knowledgebase id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> publishWithRestResponseAsync(@NonNull String kbId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (kbId == null) {
            throw new IllegalArgumentException("Parameter kbId is required and cannot be null.");
        }
        return service.publish(kbId, this.client.endpoint());
    }

    /**
     * Publishes all changes in test index of a knowledgebase to its prod index.
     *
     * @param kbId Knowledgebase id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> publishAsync(@NonNull String kbId) {
        return publishWithRestResponseAsync(kbId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Replace knowledgebase contents.
     *
     * @param kbId Knowledgebase id.
     * @param qnAList List of Q-A (QnADTO) to be added to the knowledgebase. Q-A Ids are assigned by the service and should be omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void replace(@NonNull String kbId, @NonNull List<QnADTO> qnAList) {
        replaceAsync(kbId, qnAList).block();
    }

    /**
     * Replace knowledgebase contents.
     *
     * @param kbId Knowledgebase id.
     * @param qnAList List of Q-A (QnADTO) to be added to the knowledgebase. Q-A Ids are assigned by the service and should be omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> replaceWithRestResponseAsync(@NonNull String kbId, @NonNull List<QnADTO> qnAList) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (kbId == null) {
            throw new IllegalArgumentException("Parameter kbId is required and cannot be null.");
        }
        if (qnAList == null) {
            throw new IllegalArgumentException("Parameter qnAList is required and cannot be null.");
        }
        Validator.validate(qnAList);
        ReplaceKbDTO replaceKb = new ReplaceKbDTO();
        replaceKb.withQnAList(qnAList);
        return service.replace(kbId, this.client.endpoint(), replaceKb);
    }

    /**
     * Replace knowledgebase contents.
     *
     * @param kbId Knowledgebase id.
     * @param qnAList List of Q-A (QnADTO) to be added to the knowledgebase. Q-A Ids are assigned by the service and should be omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> replaceAsync(@NonNull String kbId, @NonNull List<QnADTO> qnAList) {
        return replaceWithRestResponseAsync(kbId, qnAList)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Asynchronous operation to modify a knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param updateKb Post body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Operation object if successful.
     */
    public Operation update(@NonNull String kbId, @NonNull UpdateKbOperationDTO updateKb) {
        return updateAsync(kbId, updateKb).block();
    }

    /**
     * Asynchronous operation to modify a knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param updateKb Post body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KnowledgebasesUpdateResponse> updateWithRestResponseAsync(@NonNull String kbId, @NonNull UpdateKbOperationDTO updateKb) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (kbId == null) {
            throw new IllegalArgumentException("Parameter kbId is required and cannot be null.");
        }
        if (updateKb == null) {
            throw new IllegalArgumentException("Parameter updateKb is required and cannot be null.");
        }
        Validator.validate(updateKb);
        return service.update(kbId, this.client.endpoint(), updateKb);
    }

    /**
     * Asynchronous operation to modify a knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param updateKb Post body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Operation> updateAsync(@NonNull String kbId, @NonNull UpdateKbOperationDTO updateKb) {
        return updateWithRestResponseAsync(kbId, updateKb)
            .flatMap((KnowledgebasesUpdateResponse res) -> Mono.just(res.value()));
    }

    /**
     * Asynchronous operation to create a new knowledgebase.
     *
     * @param createKbPayload Post body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Operation object if successful.
     */
    public Operation create(@NonNull CreateKbDTO createKbPayload) {
        return createAsync(createKbPayload).block();
    }

    /**
     * Asynchronous operation to create a new knowledgebase.
     *
     * @param createKbPayload Post body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Operation>> createWithRestResponseAsync(@NonNull CreateKbDTO createKbPayload) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (createKbPayload == null) {
            throw new IllegalArgumentException("Parameter createKbPayload is required and cannot be null.");
        }
        Validator.validate(createKbPayload);
        return service.create(this.client.endpoint(), createKbPayload);
    }

    /**
     * Asynchronous operation to create a new knowledgebase.
     *
     * @param createKbPayload Post body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Operation> createAsync(@NonNull CreateKbDTO createKbPayload) {
        return createWithRestResponseAsync(createKbPayload)
            .flatMap((SimpleResponse<Operation> res) -> Mono.just(res.value()));
    }

    /**
     * Download the knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param environment Specifies whether environment is Test or Prod. Possible values include: 'Prod', 'Test'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the QnADocumentsDTO object if successful.
     */
    public QnADocumentsDTO download(@NonNull String kbId, @NonNull EnvironmentType environment) {
        return downloadAsync(kbId, environment).block();
    }

    /**
     * Download the knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param environment Specifies whether environment is Test or Prod. Possible values include: 'Prod', 'Test'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<QnADocumentsDTO>> downloadWithRestResponseAsync(@NonNull String kbId, @NonNull EnvironmentType environment) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (kbId == null) {
            throw new IllegalArgumentException("Parameter kbId is required and cannot be null.");
        }
        if (environment == null) {
            throw new IllegalArgumentException("Parameter environment is required and cannot be null.");
        }
        return service.download(kbId, environment, this.client.endpoint());
    }

    /**
     * Download the knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param environment Specifies whether environment is Test or Prod. Possible values include: 'Prod', 'Test'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<QnADocumentsDTO> downloadAsync(@NonNull String kbId, @NonNull EnvironmentType environment) {
        return downloadWithRestResponseAsync(kbId, environment)
            .flatMap((SimpleResponse<QnADocumentsDTO> res) -> Mono.just(res.value()));
    }
}
