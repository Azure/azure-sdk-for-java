/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.knowledge.qnamaker.implementation;

import com.azure.common.annotations.BodyParam;
import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.GET;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.PUT;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.http.rest.RestVoidResponse;
import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.implementation.RestProxy;
import com.azure.common.implementation.Validator;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Alterations;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.AlterationsDTO;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.WordAlterationsDTO;
import java.util.ArrayList;
import java.util.List;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Alterations.
 */
public final class AlterationsImpl implements Alterations {
    /**
     * The proxy service used to perform REST calls.
     */
    private AlterationsService service;

    /**
     * The service client containing this operation class.
     */
    private QnAMakerClientImpl client;

    /**
     * Initializes an instance of AlterationsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public AlterationsImpl(QnAMakerClientImpl client) {
        this.service = RestProxy.create(AlterationsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Alterations to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{Endpoint}/qnamaker/v4.0")
    private interface AlterationsService {
        @GET("alterations")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<WordAlterationsDTO>> get(@HostParam("Endpoint") String endpoint);

        @PUT("alterations")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<RestVoidResponse> replace(@HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") WordAlterationsDTO wordAlterations);
    }

    /**
     * Download alterations from runtime.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the WordAlterationsDTO object if successful.
     */
    public WordAlterationsDTO get() {
        return getAsync().block();
    }

    /**
     * Download alterations from runtime.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<WordAlterationsDTO>> getWithRestResponseAsync() {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        return service.get(this.client.endpoint());
    }

    /**
     * Download alterations from runtime.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<WordAlterationsDTO> getAsync() {
        return getWithRestResponseAsync()
            .flatMap((SimpleResponse<WordAlterationsDTO> res) -> Mono.just(res.value()));
    }

    /**
     * Replace alterations data.
     *
     * @param wordAlterations Collection of word alterations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void replace(@NonNull List<AlterationsDTO> wordAlterations) {
        replaceAsync(wordAlterations).block();
    }

    /**
     * Replace alterations data.
     *
     * @param wordAlterations Collection of word alterations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> replaceWithRestResponseAsync(@NonNull List<AlterationsDTO> wordAlterations) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (wordAlterations == null) {
            throw new IllegalArgumentException("Parameter wordAlterations is required and cannot be null.");
        }
        Validator.validate(wordAlterations);
        WordAlterationsDTO wordAlterations1 = new WordAlterationsDTO();
        wordAlterations1.withWordAlterations(wordAlterations);
        return service.replace(this.client.endpoint(), wordAlterations1);
    }

    /**
     * Replace alterations data.
     *
     * @param wordAlterations Collection of word alterations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> replaceAsync(@NonNull List<AlterationsDTO> wordAlterations) {
        return replaceWithRestResponseAsync(wordAlterations)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }
}
