/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.knowledge.qnamaker;

import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.EndpointSettingsDTO;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.EndpointSettingsDTOActiveLearning;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in EndpointSettings.
 */
public interface EndpointSettings {
    /**
     * Gets endpoint settings for an endpoint.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EndpointSettingsDTO object if successful.
     */
    EndpointSettingsDTO getSettings();

    /**
     * Gets endpoint settings for an endpoint.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EndpointSettingsDTO> getSettingsAsync(final ServiceCallback<EndpointSettingsDTO> serviceCallback);

    /**
     * Gets endpoint settings for an endpoint.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointSettingsDTO object
     */
    Observable<EndpointSettingsDTO> getSettingsAsync();

    /**
     * Gets endpoint settings for an endpoint.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointSettingsDTO object
     */
    Observable<ServiceResponse<EndpointSettingsDTO>> getSettingsWithServiceResponseAsync();

    /**
     * Updates endpoint settings for an endpoint.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String updateSettings();

    /**
     * Updates endpoint settings for an endpoint.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> updateSettingsAsync(final ServiceCallback<String> serviceCallback);

    /**
     * Updates endpoint settings for an endpoint.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> updateSettingsAsync();

    /**
     * Updates endpoint settings for an endpoint.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> updateSettingsWithServiceResponseAsync();
    /**
     * Updates endpoint settings for an endpoint.
     *
     * @param activeLearning Active Learning settings of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String updateSettings(EndpointSettingsDTOActiveLearning activeLearning);

    /**
     * Updates endpoint settings for an endpoint.
     *
     * @param activeLearning Active Learning settings of the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> updateSettingsAsync(EndpointSettingsDTOActiveLearning activeLearning, final ServiceCallback<String> serviceCallback);

    /**
     * Updates endpoint settings for an endpoint.
     *
     * @param activeLearning Active Learning settings of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> updateSettingsAsync(EndpointSettingsDTOActiveLearning activeLearning);

    /**
     * Updates endpoint settings for an endpoint.
     *
     * @param activeLearning Active Learning settings of the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> updateSettingsWithServiceResponseAsync(EndpointSettingsDTOActiveLearning activeLearning);

}
