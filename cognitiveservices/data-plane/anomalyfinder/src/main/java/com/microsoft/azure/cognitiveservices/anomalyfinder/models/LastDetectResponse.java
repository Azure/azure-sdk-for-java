/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.anomalyfinder.models;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The LastDetectResponse model.
 */
public class LastDetectResponse {
    /**
     * Frequency extracted from the series, zero means no recurrent pattern has
     * been found.
     */
    @JsonProperty(value = "period")
    private Integer periodProperty;

    /**
     * Suggested input series points needed for detecting the latest point.
     */
    @JsonProperty(value = "suggestedWindow")
    private Integer suggestedWindow;

    /**
     * Expected value of the latest point.
     */
    @JsonProperty(value = "expectedValue")
    private Double expectedValue;

    /**
     * Upper margin of the latest point. UpperMargin is used to calculate
     * upperBoundary, which equals to expectedValue + (100 -
     * sensitivity)*upperMargin. If the value of latest point is between
     * upperBoundary and lowerBoundary, it should be treated as normal value.
     * By adjusting sensitivity value, anomaly status of latest point can be
     * changed.
     */
    @JsonProperty(value = "upperMargin")
    private Double upperMargin;

    /**
     * Lower margin of the latest point. LowerMargin is used to calculate
     * lowerBoundary, which equals to expectedValue - (100 -
     * sensitivity)*lowerMargin.
     */
    @JsonProperty(value = "lowerMargin")
    private Double lowerMargin;

    /**
     * Anomaly status of the latest point, true means the latest point is an
     * anomaly either in negative direction or positive direction.
     */
    @JsonProperty(value = "isAnomaly")
    private Boolean isAnomaly;

    /**
     * Anomaly status in negative direction of the latest point. True means the
     * latest point is an anomaly and its real value is smaller than the
     * expected one.
     */
    @JsonProperty(value = "isNegativeAnomaly")
    private Boolean isNegativeAnomaly;

    /**
     * Anomaly status in positive direction of the latest point. True means the
     * latest point is an anomaly and its real value is larger than the
     * expected one.
     */
    @JsonProperty(value = "isPositiveAnomaly")
    private Boolean isPositiveAnomaly;

    /**
     * Get frequency extracted from the series, zero means no recurrent pattern has been found.
     *
     * @return the periodProperty value
     */
    public Integer periodProperty() {
        return this.periodProperty;
    }

    /**
     * Set frequency extracted from the series, zero means no recurrent pattern has been found.
     *
     * @param periodProperty the periodProperty value to set
     * @return the LastDetectResponse object itself.
     */
    public LastDetectResponse withPeriodProperty(Integer periodProperty) {
        this.periodProperty = periodProperty;
        return this;
    }

    /**
     * Get suggested input series points needed for detecting the latest point.
     *
     * @return the suggestedWindow value
     */
    public Integer suggestedWindow() {
        return this.suggestedWindow;
    }

    /**
     * Set suggested input series points needed for detecting the latest point.
     *
     * @param suggestedWindow the suggestedWindow value to set
     * @return the LastDetectResponse object itself.
     */
    public LastDetectResponse withSuggestedWindow(Integer suggestedWindow) {
        this.suggestedWindow = suggestedWindow;
        return this;
    }

    /**
     * Get expected value of the latest point.
     *
     * @return the expectedValue value
     */
    public Double expectedValue() {
        return this.expectedValue;
    }

    /**
     * Set expected value of the latest point.
     *
     * @param expectedValue the expectedValue value to set
     * @return the LastDetectResponse object itself.
     */
    public LastDetectResponse withExpectedValue(Double expectedValue) {
        this.expectedValue = expectedValue;
        return this;
    }

    /**
     * Get upper margin of the latest point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - sensitivity)*upperMargin. If the value of latest point is between upperBoundary and lowerBoundary, it should be treated as normal value. By adjusting sensitivity value, anomaly status of latest point can be changed.
     *
     * @return the upperMargin value
     */
    public Double upperMargin() {
        return this.upperMargin;
    }

    /**
     * Set upper margin of the latest point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - sensitivity)*upperMargin. If the value of latest point is between upperBoundary and lowerBoundary, it should be treated as normal value. By adjusting sensitivity value, anomaly status of latest point can be changed.
     *
     * @param upperMargin the upperMargin value to set
     * @return the LastDetectResponse object itself.
     */
    public LastDetectResponse withUpperMargin(Double upperMargin) {
        this.upperMargin = upperMargin;
        return this;
    }

    /**
     * Get lower margin of the latest point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - sensitivity)*lowerMargin.
     *
     * @return the lowerMargin value
     */
    public Double lowerMargin() {
        return this.lowerMargin;
    }

    /**
     * Set lower margin of the latest point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - sensitivity)*lowerMargin.
     *
     * @param lowerMargin the lowerMargin value to set
     * @return the LastDetectResponse object itself.
     */
    public LastDetectResponse withLowerMargin(Double lowerMargin) {
        this.lowerMargin = lowerMargin;
        return this;
    }

    /**
     * Get anomaly status of the latest point, true means the latest point is an anomaly either in negative direction or positive direction.
     *
     * @return the isAnomaly value
     */
    public Boolean isAnomaly() {
        return this.isAnomaly;
    }

    /**
     * Set anomaly status of the latest point, true means the latest point is an anomaly either in negative direction or positive direction.
     *
     * @param isAnomaly the isAnomaly value to set
     * @return the LastDetectResponse object itself.
     */
    public LastDetectResponse withIsAnomaly(Boolean isAnomaly) {
        this.isAnomaly = isAnomaly;
        return this;
    }

    /**
     * Get anomaly status in negative direction of the latest point. True means the latest point is an anomaly and its real value is smaller than the expected one.
     *
     * @return the isNegativeAnomaly value
     */
    public Boolean isNegativeAnomaly() {
        return this.isNegativeAnomaly;
    }

    /**
     * Set anomaly status in negative direction of the latest point. True means the latest point is an anomaly and its real value is smaller than the expected one.
     *
     * @param isNegativeAnomaly the isNegativeAnomaly value to set
     * @return the LastDetectResponse object itself.
     */
    public LastDetectResponse withIsNegativeAnomaly(Boolean isNegativeAnomaly) {
        this.isNegativeAnomaly = isNegativeAnomaly;
        return this;
    }

    /**
     * Get anomaly status in positive direction of the latest point. True means the latest point is an anomaly and its real value is larger than the expected one.
     *
     * @return the isPositiveAnomaly value
     */
    public Boolean isPositiveAnomaly() {
        return this.isPositiveAnomaly;
    }

    /**
     * Set anomaly status in positive direction of the latest point. True means the latest point is an anomaly and its real value is larger than the expected one.
     *
     * @param isPositiveAnomaly the isPositiveAnomaly value to set
     * @return the LastDetectResponse object itself.
     */
    public LastDetectResponse withIsPositiveAnomaly(Boolean isPositiveAnomaly) {
        this.isPositiveAnomaly = isPositiveAnomaly;
        return this;
    }

}
