/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.search.imagesearch.models;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Defines an image answer.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "_type")
@JsonTypeName("Images")
public class Images extends SearchResultsAnswer {
    /**
     * Used as part of deduping. Tells client the next offset that client
     * should use in the next pagination request.
     */
    @JsonProperty(value = "nextOffset", access = JsonProperty.Access.WRITE_ONLY)
    private Integer nextOffset;

    /**
     * A list of image objects that are relevant to the query. If there are no
     * results, the List is empty.
     */
    @JsonProperty(value = "value", required = true)
    private List<ImageObject> value;

    /**
     * A list of expanded queries that narrows the original query. For example,
     * if the query was Microsoft Surface, the expanded queries might be:
     * Microsoft Surface Pro 3, Microsoft Surface RT, Microsoft Surface Phone,
     * and Microsoft Surface Hub.
     */
    @JsonProperty(value = "queryExpansions", access = JsonProperty.Access.WRITE_ONLY)
    private List<Query> queryExpansions;

    /**
     * A list of segments in the original query. For example, if the query was
     * Red Flowers, Bing might segment the query into Red and Flowers. The
     * Flowers pivot may contain query suggestions such as Red Peonies and Red
     * Daisies, and the Red pivot may contain query suggestions such as Green
     * Flowers and Yellow Flowers.
     */
    @JsonProperty(value = "pivotSuggestions", access = JsonProperty.Access.WRITE_ONLY)
    private List<PivotSuggestions> pivotSuggestions;

    /**
     * A list of terms that are similar in meaning to the user's query term.
     */
    @JsonProperty(value = "similarTerms", access = JsonProperty.Access.WRITE_ONLY)
    private List<Query> similarTerms;

    /**
     * Get used as part of deduping. Tells client the next offset that client should use in the next pagination request.
     *
     * @return the nextOffset value
     */
    public Integer nextOffset() {
        return this.nextOffset;
    }

    /**
     * Get a list of image objects that are relevant to the query. If there are no results, the List is empty.
     *
     * @return the value value
     */
    public List<ImageObject> value() {
        return this.value;
    }

    /**
     * Set a list of image objects that are relevant to the query. If there are no results, the List is empty.
     *
     * @param value the value value to set
     * @return the Images object itself.
     */
    public Images withValue(List<ImageObject> value) {
        this.value = value;
        return this;
    }

    /**
     * Get a list of expanded queries that narrows the original query. For example, if the query was Microsoft Surface, the expanded queries might be: Microsoft Surface Pro 3, Microsoft Surface RT, Microsoft Surface Phone, and Microsoft Surface Hub.
     *
     * @return the queryExpansions value
     */
    public List<Query> queryExpansions() {
        return this.queryExpansions;
    }

    /**
     * Get a list of segments in the original query. For example, if the query was Red Flowers, Bing might segment the query into Red and Flowers. The Flowers pivot may contain query suggestions such as Red Peonies and Red Daisies, and the Red pivot may contain query suggestions such as Green Flowers and Yellow Flowers.
     *
     * @return the pivotSuggestions value
     */
    public List<PivotSuggestions> pivotSuggestions() {
        return this.pivotSuggestions;
    }

    /**
     * Get a list of terms that are similar in meaning to the user's query term.
     *
     * @return the similarTerms value
     */
    public List<Query> similarTerms() {
        return this.similarTerms;
    }

}
