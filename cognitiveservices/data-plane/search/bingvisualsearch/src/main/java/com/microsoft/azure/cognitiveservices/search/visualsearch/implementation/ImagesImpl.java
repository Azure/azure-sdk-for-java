/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.search.visualsearch.implementation;

import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.FormParam;
import com.azure.common.annotations.HeaderParam;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.POST;
import com.azure.common.annotations.QueryParam;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.implementation.RestProxy;
import com.azure.common.implementation.Validator;
import com.microsoft.azure.cognitiveservices.search.visualsearch.Images;
import com.microsoft.azure.cognitiveservices.search.visualsearch.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.search.visualsearch.models.ImageKnowledge;
import com.microsoft.azure.cognitiveservices.search.visualsearch.models.SafeSearch;
import com.microsoft.azure.cognitiveservices.search.visualsearch.models.VisualSearchOptionalParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Images.
 */
public final class ImagesImpl implements Images {
    /**
     * The proxy service used to perform REST calls.
     */
    private ImagesService service;

    /**
     * The service client containing this operation class.
     */
    private VisualSearchClientImpl client;

    /**
     * Initializes an instance of ImagesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public ImagesImpl(VisualSearchClientImpl client) {
        this.service = RestProxy.create(ImagesService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Images to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{Endpoint}/bing/v7.0")
    private interface ImagesService {
        // @Multipart not supported by RestProxy
        @POST("images/visualsearch")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<ImageKnowledge>> visualSearch(@HostParam("Endpoint") String endpoint, @HeaderParam("X-BingApis-SDK") String xBingApisSDK, @FormParam("knowledgeRequest") String knowledgeRequest, @FormParam("image") Flux<ByteBuffer> image, @HeaderParam("Accept-Language") String acceptLanguage, @HeaderParam("Content-Type") String contentType, @HeaderParam("User-Agent") String userAgent, @HeaderParam("X-MSEdge-ClientID") String clientId, @HeaderParam("X-MSEdge-ClientIP") String clientIp, @HeaderParam("X-Search-Location") String location, @QueryParam("mkt") String market, @QueryParam("safeSearch") SafeSearch safeSearch, @QueryParam("setLang") String setLang);
    }

    /**
     * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageKnowledge object if successful.
     */
    public ImageKnowledge visualSearch() {
        return visualSearchAsync().block();
    }

    /**
     * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImageKnowledge>> visualSearchWithRestResponseAsync() {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        final String xBingApisSDK = "true";
        final String knowledgeRequest = null;
        final Flux<ByteBuffer> image = null;
        final String acceptLanguage = null;
        final String contentType = null;
        final String userAgent = null;
        final String clientId = null;
        final String clientIp = null;
        final String location = null;
        final String market = null;
        final SafeSearch safeSearch = null;
        final String setLang = null;
        return service.visualSearch(this.client.endpoint(), xBingApisSDK, knowledgeRequest, image, acceptLanguage, contentType, userAgent, clientId, clientIp, location, market, safeSearch, setLang);
    }

    /**
     * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImageKnowledge> visualSearchAsync() {
        return visualSearchWithRestResponseAsync()
            .flatMap((SimpleResponse<ImageKnowledge> res) -> Mono.just(res.value()));
    }

    /**
     * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).
     *
     * @param knowledgeRequest The form data is a JSON object that identifies the image using an insights token or URL to the image. The object may also include an optional crop area that identifies an area of interest in the image. The insights token and URL are mutually exclusive – do not specify both. You may specify knowledgeRequest form data and image form data in the same request only if knowledgeRequest form data specifies the cropArea field only (it must not include an insights token or URL).
     * @param image The form data is an image binary. The Content-Disposition header's name parameter must be set to "image". You must specify an image binary if you do not use knowledgeRequest form data to specify the image; you may not use both forms to specify an image. You may specify knowledgeRequest form data and image form data in the same request only if knowledgeRequest form data specifies the cropArea field only  (it must not include an insights token or URL).
     * @param visualSearchOptionalParameters Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageKnowledge object if successful.
     */
    public ImageKnowledge visualSearch(String knowledgeRequest, Flux<ByteBuffer> image, VisualSearchOptionalParameters visualSearchOptionalParameters) {
        return visualSearchAsync(knowledgeRequest, image, visualSearchOptionalParameters).block();
    }

    /**
     * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).
     *
     * @param knowledgeRequest The form data is a JSON object that identifies the image using an insights token or URL to the image. The object may also include an optional crop area that identifies an area of interest in the image. The insights token and URL are mutually exclusive – do not specify both. You may specify knowledgeRequest form data and image form data in the same request only if knowledgeRequest form data specifies the cropArea field only (it must not include an insights token or URL).
     * @param image The form data is an image binary. The Content-Disposition header's name parameter must be set to "image". You must specify an image binary if you do not use knowledgeRequest form data to specify the image; you may not use both forms to specify an image. You may specify knowledgeRequest form data and image form data in the same request only if knowledgeRequest form data specifies the cropArea field only  (it must not include an insights token or URL).
     * @param visualSearchOptionalParameters Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImageKnowledge>> visualSearchWithRestResponseAsync(String knowledgeRequest, Flux<ByteBuffer> image, VisualSearchOptionalParameters visualSearchOptionalParameters) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        Validator.validate(visualSearchOptionalParameters);
        final String xBingApisSDK = "true";
        String acceptLanguage = null;
        if (visualSearchOptionalParameters != null) {
            acceptLanguage = visualSearchOptionalParameters.acceptLanguage();
        }
        String contentType = null;
        if (visualSearchOptionalParameters != null) {
            contentType = visualSearchOptionalParameters.contentType();
        }
        String userAgent = null;
        if (visualSearchOptionalParameters != null) {
            userAgent = visualSearchOptionalParameters.userAgent();
        }
        String clientId = null;
        if (visualSearchOptionalParameters != null) {
            clientId = visualSearchOptionalParameters.clientId();
        }
        String clientIp = null;
        if (visualSearchOptionalParameters != null) {
            clientIp = visualSearchOptionalParameters.clientIp();
        }
        String location = null;
        if (visualSearchOptionalParameters != null) {
            location = visualSearchOptionalParameters.location();
        }
        String market = null;
        if (visualSearchOptionalParameters != null) {
            market = visualSearchOptionalParameters.market();
        }
        SafeSearch safeSearch = null;
        if (visualSearchOptionalParameters != null) {
            safeSearch = visualSearchOptionalParameters.safeSearch();
        }
        String setLang = null;
        if (visualSearchOptionalParameters != null) {
            setLang = visualSearchOptionalParameters.setLang();
        }
        return service.visualSearch(this.client.endpoint(), xBingApisSDK, knowledgeRequest, image, acceptLanguage, contentType, userAgent, clientId, clientIp, location, market, safeSearch, setLang);
    }

    /**
     * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).
     *
     * @param knowledgeRequest The form data is a JSON object that identifies the image using an insights token or URL to the image. The object may also include an optional crop area that identifies an area of interest in the image. The insights token and URL are mutually exclusive – do not specify both. You may specify knowledgeRequest form data and image form data in the same request only if knowledgeRequest form data specifies the cropArea field only (it must not include an insights token or URL).
     * @param image The form data is an image binary. The Content-Disposition header's name parameter must be set to "image". You must specify an image binary if you do not use knowledgeRequest form data to specify the image; you may not use both forms to specify an image. You may specify knowledgeRequest form data and image form data in the same request only if knowledgeRequest form data specifies the cropArea field only  (it must not include an insights token or URL).
     * @param visualSearchOptionalParameters Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImageKnowledge> visualSearchAsync(String knowledgeRequest, Flux<ByteBuffer> image, VisualSearchOptionalParameters visualSearchOptionalParameters) {
        return visualSearchWithRestResponseAsync(knowledgeRequest, image, visualSearchOptionalParameters)
            .flatMap((SimpleResponse<ImageKnowledge> res) -> Mono.just(res.value()));
    }
}
