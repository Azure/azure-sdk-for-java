/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.faceapi.implementation;

import com.azure.common.annotations.BodyParam;
import com.azure.common.annotations.DELETE;
import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.GET;
import com.azure.common.annotations.HeaderParam;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.PATCH;
import com.azure.common.annotations.PathParam;
import com.azure.common.annotations.POST;
import com.azure.common.annotations.PUT;
import com.azure.common.annotations.QueryParam;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.http.rest.RestVoidResponse;
import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.implementation.CollectionFormat;
import com.azure.common.implementation.RestProxy;
import com.azure.common.implementation.Validator;
import com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ImageUrl;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.LargeFaceList;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.MetaDataContract;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.NameAndUserDataContract;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.RecognitionModel;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.TrainingStatus;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFaceRequest;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * LargeFaceLists.
 */
public final class LargeFaceListsImpl implements LargeFaceLists {
    /**
     * The proxy service used to perform REST calls.
     */
    private LargeFaceListsService service;

    /**
     * The service client containing this operation class.
     */
    private FaceClientImpl client;

    /**
     * Initializes an instance of LargeFaceListsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public LargeFaceListsImpl(FaceClientImpl client) {
        this.service = RestProxy.create(LargeFaceListsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for LargeFaceLists to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{Endpoint}/face/v1.0")
    private interface LargeFaceListsService {
        @PUT("largefacelists/{largeFaceListId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<RestVoidResponse> create(@PathParam("largeFaceListId") String largeFaceListId, @HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") MetaDataContract body);

        @GET("largefacelists/{largeFaceListId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<LargeFaceList>> get(@PathParam("largeFaceListId") String largeFaceListId, @HostParam("Endpoint") String endpoint, @QueryParam("returnRecognitionModel") Boolean returnRecognitionModel);

        @PATCH("largefacelists/{largeFaceListId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<RestVoidResponse> update(@PathParam("largeFaceListId") String largeFaceListId, @HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") NameAndUserDataContract body);

        @DELETE("largefacelists/{largeFaceListId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<RestVoidResponse> delete(@PathParam("largeFaceListId") String largeFaceListId, @HostParam("Endpoint") String endpoint);

        @GET("largefacelists/{largeFaceListId}/training")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<TrainingStatus>> getTrainingStatus(@PathParam("largeFaceListId") String largeFaceListId, @HostParam("Endpoint") String endpoint);

        @GET("largefacelists")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<List<LargeFaceList>>> list(@HostParam("Endpoint") String endpoint, @QueryParam("returnRecognitionModel") Boolean returnRecognitionModel);

        @POST("largefacelists/{largeFaceListId}/train")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<RestVoidResponse> train(@PathParam("largeFaceListId") String largeFaceListId, @HostParam("Endpoint") String endpoint);

        @DELETE("largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<RestVoidResponse> deleteFace(@PathParam("largeFaceListId") String largeFaceListId, @PathParam("persistedFaceId") UUID persistedFaceId, @HostParam("Endpoint") String endpoint);

        @GET("largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<PersistedFace>> getFace(@PathParam("largeFaceListId") String largeFaceListId, @PathParam("persistedFaceId") UUID persistedFaceId, @HostParam("Endpoint") String endpoint);

        @PATCH("largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<RestVoidResponse> updateFace(@PathParam("largeFaceListId") String largeFaceListId, @PathParam("persistedFaceId") UUID persistedFaceId, @HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") UpdateFaceRequest body);

        @POST("largefacelists/{largeFaceListId}/persistedfaces")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<PersistedFace>> addFaceFromUrl(@PathParam("largeFaceListId") String largeFaceListId, @HostParam("Endpoint") String endpoint, @QueryParam("userData") String userData, @QueryParam("targetFace") String targetFace, @BodyParam("application/json; charset=utf-8") ImageUrl imageUrl);

        @GET("largefacelists/{largeFaceListId}/persistedfaces")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<List<PersistedFace>>> listFaces(@PathParam("largeFaceListId") String largeFaceListId, @HostParam("Endpoint") String endpoint, @QueryParam("start") String start, @QueryParam("top") Integer top);

        @POST("largefacelists/{largeFaceListId}/persistedfaces")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<PersistedFace>> addFaceFromStream(@PathParam("largeFaceListId") String largeFaceListId, @HostParam("Endpoint") String endpoint, @QueryParam("userData") String userData, @QueryParam("targetFace") String targetFace, @HeaderParam("Content-Length") long contentLength, @BodyParam("application/octet-stream") Flux<ByteBuffer> image);
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     * &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     * &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make it ready for [Face - FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). Faces are stored on server until [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     * &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     * &lt;br /&gt;
     * * Free-tier subscription quota: 64 large face lists.
     * * S0-tier subscription quota: 1,000,000 large face lists.
     * &lt;br /&gt;
     * 'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void create(@NonNull String largeFaceListId) {
        createAsync(largeFaceListId).block();
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     * &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     * &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make it ready for [Face - FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). Faces are stored on server until [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     * &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     * &lt;br /&gt;
     * * Free-tier subscription quota: 64 large face lists.
     * * S0-tier subscription quota: 1,000,000 large face lists.
     * &lt;br /&gt;
     * 'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> createWithRestResponseAsync(@NonNull String largeFaceListId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        MetaDataContract body = new MetaDataContract();
        body.withName(null);
        body.withUserData(null);
        body.withRecognitionModel(null);
        return service.create(largeFaceListId, this.client.endpoint(), body);
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     * &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     * &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make it ready for [Face - FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). Faces are stored on server until [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     * &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     * &lt;br /&gt;
     * * Free-tier subscription quota: 64 large face lists.
     * * S0-tier subscription quota: 1,000,000 large face lists.
     * &lt;br /&gt;
     * 'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> createAsync(@NonNull String largeFaceListId) {
        return createWithRestResponseAsync(largeFaceListId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     * &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     * &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make it ready for [Face - FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). Faces are stored on server until [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     * &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     * &lt;br /&gt;
     * * Free-tier subscription quota: 64 large face lists.
     * * S0-tier subscription quota: 1,000,000 large face lists.
     * &lt;br /&gt;
     * 'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Possible values include: 'recognition_01', 'recognition_02'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void create(@NonNull String largeFaceListId, String name, String userData, RecognitionModel recognitionModel) {
        createAsync(largeFaceListId, name, userData, recognitionModel).block();
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     * &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     * &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make it ready for [Face - FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). Faces are stored on server until [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     * &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     * &lt;br /&gt;
     * * Free-tier subscription quota: 64 large face lists.
     * * S0-tier subscription quota: 1,000,000 large face lists.
     * &lt;br /&gt;
     * 'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Possible values include: 'recognition_01', 'recognition_02'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> createWithRestResponseAsync(@NonNull String largeFaceListId, String name, String userData, RecognitionModel recognitionModel) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        MetaDataContract body = new MetaDataContract();
        body.withName(name);
        body.withUserData(userData);
        body.withRecognitionModel(recognitionModel);
        return service.create(largeFaceListId, this.client.endpoint(), body);
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     * &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     * &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make it ready for [Face - FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). Faces are stored on server until [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     * &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     * &lt;br /&gt;
     * * Free-tier subscription quota: 64 large face lists.
     * * S0-tier subscription quota: 1,000,000 large face lists.
     * &lt;br /&gt;
     * 'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Possible values include: 'recognition_01', 'recognition_02'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> createAsync(@NonNull String largeFaceListId, String name, String userData, RecognitionModel recognitionModel) {
        return createWithRestResponseAsync(largeFaceListId, name, userData, recognitionModel)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the LargeFaceList object if successful.
     */
    public LargeFaceList get(@NonNull String largeFaceListId) {
        return getAsync(largeFaceListId).block();
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<LargeFaceList>> getWithRestResponseAsync(@NonNull String largeFaceListId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        final Boolean returnRecognitionModel = false;
        return service.get(largeFaceListId, this.client.endpoint(), returnRecognitionModel);
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<LargeFaceList> getAsync(@NonNull String largeFaceListId) {
        return getWithRestResponseAsync(largeFaceListId)
            .flatMap((SimpleResponse<LargeFaceList> res) -> Mono.just(res.value()));
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the LargeFaceList object if successful.
     */
    public LargeFaceList get(@NonNull String largeFaceListId, Boolean returnRecognitionModel) {
        return getAsync(largeFaceListId, returnRecognitionModel).block();
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<LargeFaceList>> getWithRestResponseAsync(@NonNull String largeFaceListId, Boolean returnRecognitionModel) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        return service.get(largeFaceListId, this.client.endpoint(), returnRecognitionModel);
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<LargeFaceList> getAsync(@NonNull String largeFaceListId, Boolean returnRecognitionModel) {
        return getWithRestResponseAsync(largeFaceListId, returnRecognitionModel)
            .flatMap((SimpleResponse<LargeFaceList> res) -> Mono.just(res.value()));
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void update(@NonNull String largeFaceListId) {
        updateAsync(largeFaceListId).block();
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> updateWithRestResponseAsync(@NonNull String largeFaceListId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        NameAndUserDataContract body = new NameAndUserDataContract();
        body.withName(null);
        body.withUserData(null);
        return service.update(largeFaceListId, this.client.endpoint(), body);
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> updateAsync(@NonNull String largeFaceListId) {
        return updateWithRestResponseAsync(largeFaceListId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void update(@NonNull String largeFaceListId, String name, String userData) {
        updateAsync(largeFaceListId, name, userData).block();
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> updateWithRestResponseAsync(@NonNull String largeFaceListId, String name, String userData) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        NameAndUserDataContract body = new NameAndUserDataContract();
        body.withName(name);
        body.withUserData(userData);
        return service.update(largeFaceListId, this.client.endpoint(), body);
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> updateAsync(@NonNull String largeFaceListId, String name, String userData) {
        return updateWithRestResponseAsync(largeFaceListId, name, userData)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Delete an existing large face list according to faceListId. Persisted face images in the large face list will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void delete(@NonNull String largeFaceListId) {
        deleteAsync(largeFaceListId).block();
    }

    /**
     * Delete an existing large face list according to faceListId. Persisted face images in the large face list will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> deleteWithRestResponseAsync(@NonNull String largeFaceListId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        return service.delete(largeFaceListId, this.client.endpoint());
    }

    /**
     * Delete an existing large face list according to faceListId. Persisted face images in the large face list will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> deleteAsync(@NonNull String largeFaceListId) {
        return deleteWithRestResponseAsync(largeFaceListId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the TrainingStatus object if successful.
     */
    public TrainingStatus getTrainingStatus(@NonNull String largeFaceListId) {
        return getTrainingStatusAsync(largeFaceListId).block();
    }

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<TrainingStatus>> getTrainingStatusWithRestResponseAsync(@NonNull String largeFaceListId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        return service.getTrainingStatus(largeFaceListId, this.client.endpoint());
    }

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<TrainingStatus> getTrainingStatusAsync(@NonNull String largeFaceListId) {
        return getTrainingStatusWithRestResponseAsync(largeFaceListId)
            .flatMap((SimpleResponse<TrainingStatus> res) -> Mono.just(res.value()));
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     * To get face information inside largeFaceList use [LargeFaceList Face - Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br /&gt;
     * * Large face lists are stored in alphabetical order of largeFaceListId.
     * * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last retuned entry’s Id of the current call.
     * &lt;br /&gt;
     * For example, total 5 large person lists: "list1", ..., "list5".
     * &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     * &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     * &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;LargeFaceList&gt; object if successful.
     */
    public List<LargeFaceList> list() {
        return listAsync().block();
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     * To get face information inside largeFaceList use [LargeFaceList Face - Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br /&gt;
     * * Large face lists are stored in alphabetical order of largeFaceListId.
     * * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last retuned entry’s Id of the current call.
     * &lt;br /&gt;
     * For example, total 5 large person lists: "list1", ..., "list5".
     * &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     * &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     * &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<LargeFaceList>>> listWithRestResponseAsync() {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        final Boolean returnRecognitionModel = false;
        return service.list(this.client.endpoint(), returnRecognitionModel);
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     * To get face information inside largeFaceList use [LargeFaceList Face - Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br /&gt;
     * * Large face lists are stored in alphabetical order of largeFaceListId.
     * * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last retuned entry’s Id of the current call.
     * &lt;br /&gt;
     * For example, total 5 large person lists: "list1", ..., "list5".
     * &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     * &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     * &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<LargeFaceList>> listAsync() {
        return listWithRestResponseAsync()
            .flatMap((SimpleResponse<List<LargeFaceList>> res) -> Mono.just(res.value()));
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     * To get face information inside largeFaceList use [LargeFaceList Face - Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br /&gt;
     * * Large face lists are stored in alphabetical order of largeFaceListId.
     * * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last retuned entry’s Id of the current call.
     * &lt;br /&gt;
     * For example, total 5 large person lists: "list1", ..., "list5".
     * &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     * &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     * &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;LargeFaceList&gt; object if successful.
     */
    public List<LargeFaceList> list(Boolean returnRecognitionModel) {
        return listAsync(returnRecognitionModel).block();
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     * To get face information inside largeFaceList use [LargeFaceList Face - Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br /&gt;
     * * Large face lists are stored in alphabetical order of largeFaceListId.
     * * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last retuned entry’s Id of the current call.
     * &lt;br /&gt;
     * For example, total 5 large person lists: "list1", ..., "list5".
     * &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     * &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     * &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<LargeFaceList>>> listWithRestResponseAsync(Boolean returnRecognitionModel) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        return service.list(this.client.endpoint(), returnRecognitionModel);
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     * To get face information inside largeFaceList use [LargeFaceList Face - Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br /&gt;
     * * Large face lists are stored in alphabetical order of largeFaceListId.
     * * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last retuned entry’s Id of the current call.
     * &lt;br /&gt;
     * For example, total 5 large person lists: "list1", ..., "list5".
     * &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     * &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     * &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<LargeFaceList>> listAsync(Boolean returnRecognitionModel) {
        return listWithRestResponseAsync(returnRecognitionModel)
            .flatMap((SimpleResponse<List<LargeFaceList>> res) -> Mono.just(res.value()));
    }

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void train(@NonNull String largeFaceListId) {
        trainAsync(largeFaceListId).block();
    }

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> trainWithRestResponseAsync(@NonNull String largeFaceListId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        return service.train(largeFaceListId, this.client.endpoint());
    }

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> trainAsync(@NonNull String largeFaceListId) {
        return trainWithRestResponseAsync(largeFaceListId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Delete an existing face from a large face list (given by a persistedFaceId and a largeFaceListId). Persisted image related to the face will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void deleteFace(@NonNull String largeFaceListId, @NonNull UUID persistedFaceId) {
        deleteFaceAsync(largeFaceListId, persistedFaceId).block();
    }

    /**
     * Delete an existing face from a large face list (given by a persistedFaceId and a largeFaceListId). Persisted image related to the face will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> deleteFaceWithRestResponseAsync(@NonNull String largeFaceListId, @NonNull UUID persistedFaceId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        return service.deleteFace(largeFaceListId, persistedFaceId, this.client.endpoint());
    }

    /**
     * Delete an existing face from a large face list (given by a persistedFaceId and a largeFaceListId). Persisted image related to the face will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> deleteFaceAsync(@NonNull String largeFaceListId, @NonNull UUID persistedFaceId) {
        return deleteFaceWithRestResponseAsync(largeFaceListId, persistedFaceId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PersistedFace object if successful.
     */
    public PersistedFace getFace(@NonNull String largeFaceListId, @NonNull UUID persistedFaceId) {
        return getFaceAsync(largeFaceListId, persistedFaceId).block();
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<PersistedFace>> getFaceWithRestResponseAsync(@NonNull String largeFaceListId, @NonNull UUID persistedFaceId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        return service.getFace(largeFaceListId, persistedFaceId, this.client.endpoint());
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<PersistedFace> getFaceAsync(@NonNull String largeFaceListId, @NonNull UUID persistedFaceId) {
        return getFaceWithRestResponseAsync(largeFaceListId, persistedFaceId)
            .flatMap((SimpleResponse<PersistedFace> res) -> Mono.just(res.value()));
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void updateFace(@NonNull String largeFaceListId, @NonNull UUID persistedFaceId) {
        updateFaceAsync(largeFaceListId, persistedFaceId).block();
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> updateFaceWithRestResponseAsync(@NonNull String largeFaceListId, @NonNull UUID persistedFaceId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        UpdateFaceRequest body = new UpdateFaceRequest();
        body.withUserData(null);
        return service.updateFace(largeFaceListId, persistedFaceId, this.client.endpoint(), body);
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> updateFaceAsync(@NonNull String largeFaceListId, @NonNull UUID persistedFaceId) {
        return updateFaceWithRestResponseAsync(largeFaceListId, persistedFaceId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void updateFace(@NonNull String largeFaceListId, @NonNull UUID persistedFaceId, String userData) {
        updateFaceAsync(largeFaceListId, persistedFaceId, userData).block();
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> updateFaceWithRestResponseAsync(@NonNull String largeFaceListId, @NonNull UUID persistedFaceId, String userData) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        UpdateFaceRequest body = new UpdateFaceRequest();
        body.withUserData(userData);
        return service.updateFace(largeFaceListId, persistedFaceId, this.client.endpoint(), body);
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> updateFaceAsync(@NonNull String largeFaceListId, @NonNull UUID persistedFaceId, String userData) {
        return updateFaceWithRestResponseAsync(largeFaceListId, persistedFaceId, userData)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PersistedFace object if successful.
     */
    public PersistedFace addFaceFromUrl(@NonNull String largeFaceListId, @NonNull String url) {
        return addFaceFromUrlAsync(largeFaceListId, url).block();
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<PersistedFace>> addFaceFromUrlWithRestResponseAsync(@NonNull String largeFaceListId, @NonNull String url) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        final String userData = null;
        final List<Integer> targetFace = null;
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        String targetFaceConverted = this.client.serializerAdapter().serializeList(targetFace, CollectionFormat.CSV);
        return service.addFaceFromUrl(largeFaceListId, this.client.endpoint(), userData, targetFaceConverted, imageUrl);
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<PersistedFace> addFaceFromUrlAsync(@NonNull String largeFaceListId, @NonNull String url) {
        return addFaceFromUrlWithRestResponseAsync(largeFaceListId, url)
            .flatMap((SimpleResponse<PersistedFace> res) -> Mono.just(res.value()));
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PersistedFace object if successful.
     */
    public PersistedFace addFaceFromUrl(@NonNull String largeFaceListId, @NonNull String url, String userData, List<Integer> targetFace) {
        return addFaceFromUrlAsync(largeFaceListId, url, userData, targetFace).block();
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<PersistedFace>> addFaceFromUrlWithRestResponseAsync(@NonNull String largeFaceListId, @NonNull String url, String userData, List<Integer> targetFace) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        Validator.validate(targetFace);
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        String targetFaceConverted = this.client.serializerAdapter().serializeList(targetFace, CollectionFormat.CSV);
        return service.addFaceFromUrl(largeFaceListId, this.client.endpoint(), userData, targetFaceConverted, imageUrl);
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<PersistedFace> addFaceFromUrlAsync(@NonNull String largeFaceListId, @NonNull String url, String userData, List<Integer> targetFace) {
        return addFaceFromUrlWithRestResponseAsync(largeFaceListId, url, userData, targetFace)
            .flatMap((SimpleResponse<PersistedFace> res) -> Mono.just(res.value()));
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;PersistedFace&gt; object if successful.
     */
    public List<PersistedFace> listFaces(@NonNull String largeFaceListId) {
        return listFacesAsync(largeFaceListId).block();
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<PersistedFace>>> listFacesWithRestResponseAsync(@NonNull String largeFaceListId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        final String start = null;
        final Integer top = null;
        return service.listFaces(largeFaceListId, this.client.endpoint(), start, top);
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<PersistedFace>> listFacesAsync(@NonNull String largeFaceListId) {
        return listFacesWithRestResponseAsync(largeFaceListId)
            .flatMap((SimpleResponse<List<PersistedFace>> res) -> Mono.just(res.value()));
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param start Starting face id to return (used to list a range of faces).
     * @param top Number of faces to return starting with the face id indicated by the 'start' parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;PersistedFace&gt; object if successful.
     */
    public List<PersistedFace> listFaces(@NonNull String largeFaceListId, String start, Integer top) {
        return listFacesAsync(largeFaceListId, start, top).block();
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param start Starting face id to return (used to list a range of faces).
     * @param top Number of faces to return starting with the face id indicated by the 'start' parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<PersistedFace>>> listFacesWithRestResponseAsync(@NonNull String largeFaceListId, String start, Integer top) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        return service.listFaces(largeFaceListId, this.client.endpoint(), start, top);
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param start Starting face id to return (used to list a range of faces).
     * @param top Number of faces to return starting with the face id indicated by the 'start' parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<PersistedFace>> listFacesAsync(@NonNull String largeFaceListId, String start, Integer top) {
        return listFacesWithRestResponseAsync(largeFaceListId, start, top)
            .flatMap((SimpleResponse<List<PersistedFace>> res) -> Mono.just(res.value()));
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PersistedFace object if successful.
     */
    public PersistedFace addFaceFromStream(@NonNull String largeFaceListId, @NonNull long contentLength, @NonNull Flux<ByteBuffer> image) {
        return addFaceFromStreamAsync(largeFaceListId, contentLength, image).block();
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<PersistedFace>> addFaceFromStreamWithRestResponseAsync(@NonNull String largeFaceListId, @NonNull long contentLength, @NonNull Flux<ByteBuffer> image) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (image == null) {
            throw new IllegalArgumentException("Parameter image is required and cannot be null.");
        }
        final String userData = null;
        final List<Integer> targetFace = null;
        String targetFaceConverted = this.client.serializerAdapter().serializeList(targetFace, CollectionFormat.CSV);
        return service.addFaceFromStream(largeFaceListId, this.client.endpoint(), userData, targetFaceConverted, contentLength, image);
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<PersistedFace> addFaceFromStreamAsync(@NonNull String largeFaceListId, @NonNull long contentLength, @NonNull Flux<ByteBuffer> image) {
        return addFaceFromStreamWithRestResponseAsync(largeFaceListId, contentLength, image)
            .flatMap((SimpleResponse<PersistedFace> res) -> Mono.just(res.value()));
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param contentLength The content length.
     * @param image An image stream.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PersistedFace object if successful.
     */
    public PersistedFace addFaceFromStream(@NonNull String largeFaceListId, @NonNull long contentLength, @NonNull Flux<ByteBuffer> image, String userData, List<Integer> targetFace) {
        return addFaceFromStreamAsync(largeFaceListId, contentLength, image, userData, targetFace).block();
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param contentLength The content length.
     * @param image An image stream.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<PersistedFace>> addFaceFromStreamWithRestResponseAsync(@NonNull String largeFaceListId, @NonNull long contentLength, @NonNull Flux<ByteBuffer> image, String userData, List<Integer> targetFace) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (image == null) {
            throw new IllegalArgumentException("Parameter image is required and cannot be null.");
        }
        Validator.validate(targetFace);
        String targetFaceConverted = this.client.serializerAdapter().serializeList(targetFace, CollectionFormat.CSV);
        return service.addFaceFromStream(largeFaceListId, this.client.endpoint(), userData, targetFaceConverted, contentLength, image);
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param contentLength The content length.
     * @param image An image stream.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<PersistedFace> addFaceFromStreamAsync(@NonNull String largeFaceListId, @NonNull long contentLength, @NonNull Flux<ByteBuffer> image, String userData, List<Integer> targetFace) {
        return addFaceFromStreamWithRestResponseAsync(largeFaceListId, contentLength, image, userData, targetFace)
            .flatMap((SimpleResponse<PersistedFace> res) -> Mono.just(res.value()));
    }
}
