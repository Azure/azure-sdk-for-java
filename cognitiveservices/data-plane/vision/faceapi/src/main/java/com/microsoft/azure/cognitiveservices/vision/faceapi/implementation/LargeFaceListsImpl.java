/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.faceapi.implementation;

import retrofit2.Retrofit;
import com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists;
import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ImageUrl;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.LargeFaceList;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.MetaDataContract;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.NameAndUserDataContract;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.RecognitionModel;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.TrainingStatus;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFaceRequest;
import com.microsoft.rest.CollectionFormat;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.InputStream;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import okhttp3.MediaType;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in LargeFaceLists.
 */
public class LargeFaceListsImpl implements LargeFaceLists {
    /** The Retrofit service to perform REST calls. */
    private LargeFaceListsService service;
    /** The service client containing this operation class. */
    private FaceClientImpl client;

    /**
     * Initializes an instance of LargeFaceListsImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public LargeFaceListsImpl(Retrofit retrofit, FaceClientImpl client) {
        this.service = retrofit.create(LargeFaceListsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for LargeFaceLists to be
     * used by Retrofit to perform actually REST calls.
     */
    interface LargeFaceListsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists create" })
        @PUT("largefacelists/{largeFaceListId}")
        Observable<Response<ResponseBody>> create(@Path("largeFaceListId") String largeFaceListId, @Header("accept-language") String acceptLanguage, @Body MetaDataContract body, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists get" })
        @GET("largefacelists/{largeFaceListId}")
        Observable<Response<ResponseBody>> get(@Path("largeFaceListId") String largeFaceListId, @Query("returnRecognitionModel") Boolean returnRecognitionModel, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists update" })
        @PATCH("largefacelists/{largeFaceListId}")
        Observable<Response<ResponseBody>> update(@Path("largeFaceListId") String largeFaceListId, @Header("accept-language") String acceptLanguage, @Body NameAndUserDataContract body, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists delete" })
        @HTTP(path = "largefacelists/{largeFaceListId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("largeFaceListId") String largeFaceListId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists getTrainingStatus" })
        @GET("largefacelists/{largeFaceListId}/training")
        Observable<Response<ResponseBody>> getTrainingStatus(@Path("largeFaceListId") String largeFaceListId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists list" })
        @GET("largefacelists")
        Observable<Response<ResponseBody>> list(@Query("returnRecognitionModel") Boolean returnRecognitionModel, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists train" })
        @POST("largefacelists/{largeFaceListId}/train")
        Observable<Response<ResponseBody>> train(@Path("largeFaceListId") String largeFaceListId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists deleteFace" })
        @HTTP(path = "largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteFace(@Path("largeFaceListId") String largeFaceListId, @Path("persistedFaceId") UUID persistedFaceId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists getFace" })
        @GET("largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}")
        Observable<Response<ResponseBody>> getFace(@Path("largeFaceListId") String largeFaceListId, @Path("persistedFaceId") UUID persistedFaceId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists updateFace" })
        @PATCH("largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}")
        Observable<Response<ResponseBody>> updateFace(@Path("largeFaceListId") String largeFaceListId, @Path("persistedFaceId") UUID persistedFaceId, @Header("accept-language") String acceptLanguage, @Body UpdateFaceRequest body, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists addFaceFromUrl" })
        @POST("largefacelists/{largeFaceListId}/persistedfaces")
        Observable<Response<ResponseBody>> addFaceFromUrl(@Path("largeFaceListId") String largeFaceListId, @Query("userData") String userData, @Query("targetFace") String targetFace, @Header("accept-language") String acceptLanguage, @Body ImageUrl imageUrl, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists listFaces" })
        @GET("largefacelists/{largeFaceListId}/persistedfaces")
        Observable<Response<ResponseBody>> listFaces(@Path("largeFaceListId") String largeFaceListId, @Query("start") String start, @Query("top") Integer top, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/octet-stream", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists addFaceFromStream" })
        @POST("largefacelists/{largeFaceListId}/persistedfaces")
        Observable<Response<ResponseBody>> addFaceFromStream(@Path("largeFaceListId") String largeFaceListId, @Query("userData") String userData, @Query("targetFace") String targetFace, @Body RequestBody image, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make it ready for [Face - FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). Faces are stored on server until [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     &lt;br /&gt;
     * Free-tier subscription quota: 64 large face lists.
     * S0-tier subscription quota: 1,000,000 large face lists.
     &lt;br /&gt;
     'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void create(String largeFaceListId) {
        createWithServiceResponseAsync(largeFaceListId).toBlocking().single().body();
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make it ready for [Face - FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). Faces are stored on server until [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     &lt;br /&gt;
     * Free-tier subscription quota: 64 large face lists.
     * S0-tier subscription quota: 1,000,000 large face lists.
     &lt;br /&gt;
     'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> createAsync(String largeFaceListId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(largeFaceListId), serviceCallback);
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make it ready for [Face - FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). Faces are stored on server until [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     &lt;br /&gt;
     * Free-tier subscription quota: 64 large face lists.
     * S0-tier subscription quota: 1,000,000 large face lists.
     &lt;br /&gt;
     'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> createAsync(String largeFaceListId) {
        return createWithServiceResponseAsync(largeFaceListId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make it ready for [Face - FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). Faces are stored on server until [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     &lt;br /&gt;
     * Free-tier subscription quota: 64 large face lists.
     * S0-tier subscription quota: 1,000,000 large face lists.
     &lt;br /&gt;
     'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> createWithServiceResponseAsync(String largeFaceListId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        final String name = null;
        final String userData = null;
        final RecognitionModel recognitionModel = null;
        MetaDataContract body = new MetaDataContract();
        body.withName(null);
        body.withUserData(null);
        body.withRecognitionModel(null);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.create(largeFaceListId, this.client.acceptLanguage(), body, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make it ready for [Face - FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). Faces are stored on server until [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     &lt;br /&gt;
     * Free-tier subscription quota: 64 large face lists.
     * S0-tier subscription quota: 1,000,000 large face lists.
     &lt;br /&gt;
     'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Possible values include: 'recognition_01', 'recognition_02'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void create(String largeFaceListId, String name, String userData, RecognitionModel recognitionModel) {
        createWithServiceResponseAsync(largeFaceListId, name, userData, recognitionModel).toBlocking().single().body();
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make it ready for [Face - FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). Faces are stored on server until [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     &lt;br /&gt;
     * Free-tier subscription quota: 64 large face lists.
     * S0-tier subscription quota: 1,000,000 large face lists.
     &lt;br /&gt;
     'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Possible values include: 'recognition_01', 'recognition_02'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> createAsync(String largeFaceListId, String name, String userData, RecognitionModel recognitionModel, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(largeFaceListId, name, userData, recognitionModel), serviceCallback);
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make it ready for [Face - FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). Faces are stored on server until [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     &lt;br /&gt;
     * Free-tier subscription quota: 64 large face lists.
     * S0-tier subscription quota: 1,000,000 large face lists.
     &lt;br /&gt;
     'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Possible values include: 'recognition_01', 'recognition_02'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> createAsync(String largeFaceListId, String name, String userData, RecognitionModel recognitionModel) {
        return createWithServiceResponseAsync(largeFaceListId, name, userData, recognitionModel).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make it ready for [Face - FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). Faces are stored on server until [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     &lt;br /&gt;
     * Free-tier subscription quota: 64 large face lists.
     * S0-tier subscription quota: 1,000,000 large face lists.
     &lt;br /&gt;
     'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Possible values include: 'recognition_01', 'recognition_02'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> createWithServiceResponseAsync(String largeFaceListId, String name, String userData, RecognitionModel recognitionModel) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        MetaDataContract body = new MetaDataContract();
        body.withName(name);
        body.withUserData(userData);
        body.withRecognitionModel(recognitionModel);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.create(largeFaceListId, this.client.acceptLanguage(), body, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> createDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LargeFaceList object if successful.
     */
    public LargeFaceList get(String largeFaceListId) {
        return getWithServiceResponseAsync(largeFaceListId).toBlocking().single().body();
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LargeFaceList> getAsync(String largeFaceListId, final ServiceCallback<LargeFaceList> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(largeFaceListId), serviceCallback);
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LargeFaceList object
     */
    public Observable<LargeFaceList> getAsync(String largeFaceListId) {
        return getWithServiceResponseAsync(largeFaceListId).map(new Func1<ServiceResponse<LargeFaceList>, LargeFaceList>() {
            @Override
            public LargeFaceList call(ServiceResponse<LargeFaceList> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LargeFaceList object
     */
    public Observable<ServiceResponse<LargeFaceList>> getWithServiceResponseAsync(String largeFaceListId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        final Boolean returnRecognitionModel = null;
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.get(largeFaceListId, returnRecognitionModel, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LargeFaceList>>>() {
                @Override
                public Observable<ServiceResponse<LargeFaceList>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LargeFaceList> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LargeFaceList object if successful.
     */
    public LargeFaceList get(String largeFaceListId, Boolean returnRecognitionModel) {
        return getWithServiceResponseAsync(largeFaceListId, returnRecognitionModel).toBlocking().single().body();
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LargeFaceList> getAsync(String largeFaceListId, Boolean returnRecognitionModel, final ServiceCallback<LargeFaceList> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(largeFaceListId, returnRecognitionModel), serviceCallback);
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LargeFaceList object
     */
    public Observable<LargeFaceList> getAsync(String largeFaceListId, Boolean returnRecognitionModel) {
        return getWithServiceResponseAsync(largeFaceListId, returnRecognitionModel).map(new Func1<ServiceResponse<LargeFaceList>, LargeFaceList>() {
            @Override
            public LargeFaceList call(ServiceResponse<LargeFaceList> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LargeFaceList object
     */
    public Observable<ServiceResponse<LargeFaceList>> getWithServiceResponseAsync(String largeFaceListId, Boolean returnRecognitionModel) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.get(largeFaceListId, returnRecognitionModel, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LargeFaceList>>>() {
                @Override
                public Observable<ServiceResponse<LargeFaceList>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LargeFaceList> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LargeFaceList> getDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<LargeFaceList, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<LargeFaceList>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void update(String largeFaceListId) {
        updateWithServiceResponseAsync(largeFaceListId).toBlocking().single().body();
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> updateAsync(String largeFaceListId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(largeFaceListId), serviceCallback);
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> updateAsync(String largeFaceListId) {
        return updateWithServiceResponseAsync(largeFaceListId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String largeFaceListId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        final String name = null;
        final String userData = null;
        NameAndUserDataContract body = new NameAndUserDataContract();
        body.withName(null);
        body.withUserData(null);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.update(largeFaceListId, this.client.acceptLanguage(), body, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void update(String largeFaceListId, String name, String userData) {
        updateWithServiceResponseAsync(largeFaceListId, name, userData).toBlocking().single().body();
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> updateAsync(String largeFaceListId, String name, String userData, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(largeFaceListId, name, userData), serviceCallback);
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> updateAsync(String largeFaceListId, String name, String userData) {
        return updateWithServiceResponseAsync(largeFaceListId, name, userData).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String largeFaceListId, String name, String userData) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        NameAndUserDataContract body = new NameAndUserDataContract();
        body.withName(name);
        body.withUserData(userData);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.update(largeFaceListId, this.client.acceptLanguage(), body, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> updateDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    /**
     * Delete an existing large face list according to faceListId. Persisted face images in the large face list will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String largeFaceListId) {
        deleteWithServiceResponseAsync(largeFaceListId).toBlocking().single().body();
    }

    /**
     * Delete an existing large face list according to faceListId. Persisted face images in the large face list will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String largeFaceListId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(largeFaceListId), serviceCallback);
    }

    /**
     * Delete an existing large face list according to faceListId. Persisted face images in the large face list will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String largeFaceListId) {
        return deleteWithServiceResponseAsync(largeFaceListId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete an existing large face list according to faceListId. Persisted face images in the large face list will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String largeFaceListId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.delete(largeFaceListId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrainingStatus object if successful.
     */
    public TrainingStatus getTrainingStatus(String largeFaceListId) {
        return getTrainingStatusWithServiceResponseAsync(largeFaceListId).toBlocking().single().body();
    }

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TrainingStatus> getTrainingStatusAsync(String largeFaceListId, final ServiceCallback<TrainingStatus> serviceCallback) {
        return ServiceFuture.fromResponse(getTrainingStatusWithServiceResponseAsync(largeFaceListId), serviceCallback);
    }

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrainingStatus object
     */
    public Observable<TrainingStatus> getTrainingStatusAsync(String largeFaceListId) {
        return getTrainingStatusWithServiceResponseAsync(largeFaceListId).map(new Func1<ServiceResponse<TrainingStatus>, TrainingStatus>() {
            @Override
            public TrainingStatus call(ServiceResponse<TrainingStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrainingStatus object
     */
    public Observable<ServiceResponse<TrainingStatus>> getTrainingStatusWithServiceResponseAsync(String largeFaceListId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.getTrainingStatus(largeFaceListId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TrainingStatus>>>() {
                @Override
                public Observable<ServiceResponse<TrainingStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TrainingStatus> clientResponse = getTrainingStatusDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TrainingStatus> getTrainingStatusDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TrainingStatus, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TrainingStatus>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     To get face information inside largeFaceList use [LargeFaceList Face - Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br /&gt;
     * Large face lists are stored in alphabetical order of largeFaceListId.
     * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.
     &lt;br /&gt;
     For example, total 5 large person lists: "list1", ..., "list5".
     &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;LargeFaceList&gt; object if successful.
     */
    public List<LargeFaceList> list() {
        return listWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     To get face information inside largeFaceList use [LargeFaceList Face - Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br /&gt;
     * Large face lists are stored in alphabetical order of largeFaceListId.
     * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.
     &lt;br /&gt;
     For example, total 5 large person lists: "list1", ..., "list5".
     &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LargeFaceList>> listAsync(final ServiceCallback<List<LargeFaceList>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     To get face information inside largeFaceList use [LargeFaceList Face - Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br /&gt;
     * Large face lists are stored in alphabetical order of largeFaceListId.
     * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.
     &lt;br /&gt;
     For example, total 5 large person lists: "list1", ..., "list5".
     &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LargeFaceList&gt; object
     */
    public Observable<List<LargeFaceList>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<List<LargeFaceList>>, List<LargeFaceList>>() {
            @Override
            public List<LargeFaceList> call(ServiceResponse<List<LargeFaceList>> response) {
                return response.body();
            }
        });
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     To get face information inside largeFaceList use [LargeFaceList Face - Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br /&gt;
     * Large face lists are stored in alphabetical order of largeFaceListId.
     * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.
     &lt;br /&gt;
     For example, total 5 large person lists: "list1", ..., "list5".
     &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LargeFaceList&gt; object
     */
    public Observable<ServiceResponse<List<LargeFaceList>>> listWithServiceResponseAsync() {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        final Boolean returnRecognitionModel = null;
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.list(returnRecognitionModel, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<LargeFaceList>>>>() {
                @Override
                public Observable<ServiceResponse<List<LargeFaceList>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<LargeFaceList>> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     To get face information inside largeFaceList use [LargeFaceList Face - Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br /&gt;
     * Large face lists are stored in alphabetical order of largeFaceListId.
     * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.
     &lt;br /&gt;
     For example, total 5 large person lists: "list1", ..., "list5".
     &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;LargeFaceList&gt; object if successful.
     */
    public List<LargeFaceList> list(Boolean returnRecognitionModel) {
        return listWithServiceResponseAsync(returnRecognitionModel).toBlocking().single().body();
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     To get face information inside largeFaceList use [LargeFaceList Face - Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br /&gt;
     * Large face lists are stored in alphabetical order of largeFaceListId.
     * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.
     &lt;br /&gt;
     For example, total 5 large person lists: "list1", ..., "list5".
     &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LargeFaceList>> listAsync(Boolean returnRecognitionModel, final ServiceCallback<List<LargeFaceList>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(returnRecognitionModel), serviceCallback);
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     To get face information inside largeFaceList use [LargeFaceList Face - Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br /&gt;
     * Large face lists are stored in alphabetical order of largeFaceListId.
     * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.
     &lt;br /&gt;
     For example, total 5 large person lists: "list1", ..., "list5".
     &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LargeFaceList&gt; object
     */
    public Observable<List<LargeFaceList>> listAsync(Boolean returnRecognitionModel) {
        return listWithServiceResponseAsync(returnRecognitionModel).map(new Func1<ServiceResponse<List<LargeFaceList>>, List<LargeFaceList>>() {
            @Override
            public List<LargeFaceList> call(ServiceResponse<List<LargeFaceList>> response) {
                return response.body();
            }
        });
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     To get face information inside largeFaceList use [LargeFaceList Face - Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br /&gt;
     * Large face lists are stored in alphabetical order of largeFaceListId.
     * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.
     &lt;br /&gt;
     For example, total 5 large person lists: "list1", ..., "list5".
     &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LargeFaceList&gt; object
     */
    public Observable<ServiceResponse<List<LargeFaceList>>> listWithServiceResponseAsync(Boolean returnRecognitionModel) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.list(returnRecognitionModel, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<LargeFaceList>>>>() {
                @Override
                public Observable<ServiceResponse<List<LargeFaceList>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<LargeFaceList>> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<LargeFaceList>> listDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<LargeFaceList>, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<LargeFaceList>>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void train(String largeFaceListId) {
        trainWithServiceResponseAsync(largeFaceListId).toBlocking().single().body();
    }

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> trainAsync(String largeFaceListId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(trainWithServiceResponseAsync(largeFaceListId), serviceCallback);
    }

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> trainAsync(String largeFaceListId) {
        return trainWithServiceResponseAsync(largeFaceListId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> trainWithServiceResponseAsync(String largeFaceListId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.train(largeFaceListId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = trainDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> trainDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    /**
     * Delete an existing face from a large face list (given by a persistedFaceId and a largeFaceListId). Persisted image related to the face will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteFace(String largeFaceListId, UUID persistedFaceId) {
        deleteFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId).toBlocking().single().body();
    }

    /**
     * Delete an existing face from a large face list (given by a persistedFaceId and a largeFaceListId). Persisted image related to the face will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteFaceAsync(String largeFaceListId, UUID persistedFaceId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId), serviceCallback);
    }

    /**
     * Delete an existing face from a large face list (given by a persistedFaceId and a largeFaceListId). Persisted image related to the face will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteFaceAsync(String largeFaceListId, UUID persistedFaceId) {
        return deleteFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete an existing face from a large face list (given by a persistedFaceId and a largeFaceListId). Persisted image related to the face will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteFaceWithServiceResponseAsync(String largeFaceListId, UUID persistedFaceId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.deleteFace(largeFaceListId, persistedFaceId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteFaceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteFaceDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    public PersistedFace getFace(String largeFaceListId, UUID persistedFaceId) {
        return getFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId).toBlocking().single().body();
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PersistedFace> getFaceAsync(String largeFaceListId, UUID persistedFaceId, final ServiceCallback<PersistedFace> serviceCallback) {
        return ServiceFuture.fromResponse(getFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId), serviceCallback);
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<PersistedFace> getFaceAsync(String largeFaceListId, UUID persistedFaceId) {
        return getFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId).map(new Func1<ServiceResponse<PersistedFace>, PersistedFace>() {
            @Override
            public PersistedFace call(ServiceResponse<PersistedFace> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<ServiceResponse<PersistedFace>> getFaceWithServiceResponseAsync(String largeFaceListId, UUID persistedFaceId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.getFace(largeFaceListId, persistedFaceId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PersistedFace>>>() {
                @Override
                public Observable<ServiceResponse<PersistedFace>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PersistedFace> clientResponse = getFaceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PersistedFace> getFaceDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PersistedFace, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PersistedFace>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void updateFace(String largeFaceListId, UUID persistedFaceId) {
        updateFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId).toBlocking().single().body();
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> updateFaceAsync(String largeFaceListId, UUID persistedFaceId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(updateFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId), serviceCallback);
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> updateFaceAsync(String largeFaceListId, UUID persistedFaceId) {
        return updateFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> updateFaceWithServiceResponseAsync(String largeFaceListId, UUID persistedFaceId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        final String userData = null;
        UpdateFaceRequest body = new UpdateFaceRequest();
        body.withUserData(null);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.updateFace(largeFaceListId, persistedFaceId, this.client.acceptLanguage(), body, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = updateFaceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void updateFace(String largeFaceListId, UUID persistedFaceId, String userData) {
        updateFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId, userData).toBlocking().single().body();
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> updateFaceAsync(String largeFaceListId, UUID persistedFaceId, String userData, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(updateFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId, userData), serviceCallback);
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> updateFaceAsync(String largeFaceListId, UUID persistedFaceId, String userData) {
        return updateFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId, userData).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> updateFaceWithServiceResponseAsync(String largeFaceListId, UUID persistedFaceId, String userData) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        UpdateFaceRequest body = new UpdateFaceRequest();
        body.withUserData(userData);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.updateFace(largeFaceListId, persistedFaceId, this.client.acceptLanguage(), body, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = updateFaceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> updateFaceDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    public PersistedFace addFaceFromUrl(String largeFaceListId, String url) {
        return addFaceFromUrlWithServiceResponseAsync(largeFaceListId, url).toBlocking().single().body();
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PersistedFace> addFaceFromUrlAsync(String largeFaceListId, String url, final ServiceCallback<PersistedFace> serviceCallback) {
        return ServiceFuture.fromResponse(addFaceFromUrlWithServiceResponseAsync(largeFaceListId, url), serviceCallback);
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<PersistedFace> addFaceFromUrlAsync(String largeFaceListId, String url) {
        return addFaceFromUrlWithServiceResponseAsync(largeFaceListId, url).map(new Func1<ServiceResponse<PersistedFace>, PersistedFace>() {
            @Override
            public PersistedFace call(ServiceResponse<PersistedFace> response) {
                return response.body();
            }
        });
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<ServiceResponse<PersistedFace>> addFaceFromUrlWithServiceResponseAsync(String largeFaceListId, String url) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        final String userData = null;
        final List<Integer> targetFace = null;
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        String targetFaceConverted = this.client.serializerAdapter().serializeList(targetFace, CollectionFormat.CSV);
        return service.addFaceFromUrl(largeFaceListId, userData, targetFaceConverted, this.client.acceptLanguage(), imageUrl, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PersistedFace>>>() {
                @Override
                public Observable<ServiceResponse<PersistedFace>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PersistedFace> clientResponse = addFaceFromUrlDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    public PersistedFace addFaceFromUrl(String largeFaceListId, String url, String userData, List<Integer> targetFace) {
        return addFaceFromUrlWithServiceResponseAsync(largeFaceListId, url, userData, targetFace).toBlocking().single().body();
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PersistedFace> addFaceFromUrlAsync(String largeFaceListId, String url, String userData, List<Integer> targetFace, final ServiceCallback<PersistedFace> serviceCallback) {
        return ServiceFuture.fromResponse(addFaceFromUrlWithServiceResponseAsync(largeFaceListId, url, userData, targetFace), serviceCallback);
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<PersistedFace> addFaceFromUrlAsync(String largeFaceListId, String url, String userData, List<Integer> targetFace) {
        return addFaceFromUrlWithServiceResponseAsync(largeFaceListId, url, userData, targetFace).map(new Func1<ServiceResponse<PersistedFace>, PersistedFace>() {
            @Override
            public PersistedFace call(ServiceResponse<PersistedFace> response) {
                return response.body();
            }
        });
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<ServiceResponse<PersistedFace>> addFaceFromUrlWithServiceResponseAsync(String largeFaceListId, String url, String userData, List<Integer> targetFace) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        Validator.validate(targetFace);
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        String targetFaceConverted = this.client.serializerAdapter().serializeList(targetFace, CollectionFormat.CSV);
        return service.addFaceFromUrl(largeFaceListId, userData, targetFaceConverted, this.client.acceptLanguage(), imageUrl, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PersistedFace>>>() {
                @Override
                public Observable<ServiceResponse<PersistedFace>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PersistedFace> clientResponse = addFaceFromUrlDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PersistedFace> addFaceFromUrlDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PersistedFace, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PersistedFace>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PersistedFace&gt; object if successful.
     */
    public List<PersistedFace> listFaces(String largeFaceListId) {
        return listFacesWithServiceResponseAsync(largeFaceListId).toBlocking().single().body();
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PersistedFace>> listFacesAsync(String largeFaceListId, final ServiceCallback<List<PersistedFace>> serviceCallback) {
        return ServiceFuture.fromResponse(listFacesWithServiceResponseAsync(largeFaceListId), serviceCallback);
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PersistedFace&gt; object
     */
    public Observable<List<PersistedFace>> listFacesAsync(String largeFaceListId) {
        return listFacesWithServiceResponseAsync(largeFaceListId).map(new Func1<ServiceResponse<List<PersistedFace>>, List<PersistedFace>>() {
            @Override
            public List<PersistedFace> call(ServiceResponse<List<PersistedFace>> response) {
                return response.body();
            }
        });
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PersistedFace&gt; object
     */
    public Observable<ServiceResponse<List<PersistedFace>>> listFacesWithServiceResponseAsync(String largeFaceListId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        final String start = null;
        final Integer top = null;
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.listFaces(largeFaceListId, start, top, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<PersistedFace>>>>() {
                @Override
                public Observable<ServiceResponse<List<PersistedFace>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<PersistedFace>> clientResponse = listFacesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param start Starting face id to return (used to list a range of faces).
     * @param top Number of faces to return starting with the face id indicated by the 'start' parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PersistedFace&gt; object if successful.
     */
    public List<PersistedFace> listFaces(String largeFaceListId, String start, Integer top) {
        return listFacesWithServiceResponseAsync(largeFaceListId, start, top).toBlocking().single().body();
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param start Starting face id to return (used to list a range of faces).
     * @param top Number of faces to return starting with the face id indicated by the 'start' parameter.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PersistedFace>> listFacesAsync(String largeFaceListId, String start, Integer top, final ServiceCallback<List<PersistedFace>> serviceCallback) {
        return ServiceFuture.fromResponse(listFacesWithServiceResponseAsync(largeFaceListId, start, top), serviceCallback);
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param start Starting face id to return (used to list a range of faces).
     * @param top Number of faces to return starting with the face id indicated by the 'start' parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PersistedFace&gt; object
     */
    public Observable<List<PersistedFace>> listFacesAsync(String largeFaceListId, String start, Integer top) {
        return listFacesWithServiceResponseAsync(largeFaceListId, start, top).map(new Func1<ServiceResponse<List<PersistedFace>>, List<PersistedFace>>() {
            @Override
            public List<PersistedFace> call(ServiceResponse<List<PersistedFace>> response) {
                return response.body();
            }
        });
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param start Starting face id to return (used to list a range of faces).
     * @param top Number of faces to return starting with the face id indicated by the 'start' parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PersistedFace&gt; object
     */
    public Observable<ServiceResponse<List<PersistedFace>>> listFacesWithServiceResponseAsync(String largeFaceListId, String start, Integer top) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.listFaces(largeFaceListId, start, top, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<PersistedFace>>>>() {
                @Override
                public Observable<ServiceResponse<List<PersistedFace>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<PersistedFace>> clientResponse = listFacesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<PersistedFace>> listFacesDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<PersistedFace>, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<PersistedFace>>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    public PersistedFace addFaceFromStream(String largeFaceListId, byte[] image) {
        return addFaceFromStreamWithServiceResponseAsync(largeFaceListId, image).toBlocking().single().body();
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PersistedFace> addFaceFromStreamAsync(String largeFaceListId, byte[] image, final ServiceCallback<PersistedFace> serviceCallback) {
        return ServiceFuture.fromResponse(addFaceFromStreamWithServiceResponseAsync(largeFaceListId, image), serviceCallback);
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<PersistedFace> addFaceFromStreamAsync(String largeFaceListId, byte[] image) {
        return addFaceFromStreamWithServiceResponseAsync(largeFaceListId, image).map(new Func1<ServiceResponse<PersistedFace>, PersistedFace>() {
            @Override
            public PersistedFace call(ServiceResponse<PersistedFace> response) {
                return response.body();
            }
        });
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<ServiceResponse<PersistedFace>> addFaceFromStreamWithServiceResponseAsync(String largeFaceListId, byte[] image) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (image == null) {
            throw new IllegalArgumentException("Parameter image is required and cannot be null.");
        }
        final String userData = null;
        final List<Integer> targetFace = null;
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        String targetFaceConverted = this.client.serializerAdapter().serializeList(targetFace, CollectionFormat.CSV);RequestBody imageConverted = RequestBody.create(MediaType.parse("application/octet-stream"), image);
        return service.addFaceFromStream(largeFaceListId, userData, targetFaceConverted, imageConverted, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PersistedFace>>>() {
                @Override
                public Observable<ServiceResponse<PersistedFace>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PersistedFace> clientResponse = addFaceFromStreamDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    public PersistedFace addFaceFromStream(String largeFaceListId, byte[] image, String userData, List<Integer> targetFace) {
        return addFaceFromStreamWithServiceResponseAsync(largeFaceListId, image, userData, targetFace).toBlocking().single().body();
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PersistedFace> addFaceFromStreamAsync(String largeFaceListId, byte[] image, String userData, List<Integer> targetFace, final ServiceCallback<PersistedFace> serviceCallback) {
        return ServiceFuture.fromResponse(addFaceFromStreamWithServiceResponseAsync(largeFaceListId, image, userData, targetFace), serviceCallback);
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<PersistedFace> addFaceFromStreamAsync(String largeFaceListId, byte[] image, String userData, List<Integer> targetFace) {
        return addFaceFromStreamWithServiceResponseAsync(largeFaceListId, image, userData, targetFace).map(new Func1<ServiceResponse<PersistedFace>, PersistedFace>() {
            @Override
            public PersistedFace call(ServiceResponse<PersistedFace> response) {
                return response.body();
            }
        });
    }

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<ServiceResponse<PersistedFace>> addFaceFromStreamWithServiceResponseAsync(String largeFaceListId, byte[] image, String userData, List<Integer> targetFace) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (image == null) {
            throw new IllegalArgumentException("Parameter image is required and cannot be null.");
        }
        Validator.validate(targetFace);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        String targetFaceConverted = this.client.serializerAdapter().serializeList(targetFace, CollectionFormat.CSV);RequestBody imageConverted = RequestBody.create(MediaType.parse("application/octet-stream"), image);
        return service.addFaceFromStream(largeFaceListId, userData, targetFaceConverted, imageConverted, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PersistedFace>>>() {
                @Override
                public Observable<ServiceResponse<PersistedFace>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PersistedFace> clientResponse = addFaceFromStreamDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PersistedFace> addFaceFromStreamDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PersistedFace, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PersistedFace>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

}
