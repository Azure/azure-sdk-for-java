/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.faceapi.implementation;

import com.azure.common.annotations.BodyParam;
import com.azure.common.annotations.DELETE;
import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.GET;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.PATCH;
import com.azure.common.annotations.PathParam;
import com.azure.common.annotations.POST;
import com.azure.common.annotations.QueryParam;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.http.rest.RestVoidResponse;
import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.implementation.CollectionFormat;
import com.azure.common.implementation.RestProxy;
import com.azure.common.implementation.Validator;
import com.microsoft.azure.cognitiveservices.vision.faceapi.Snapshots;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ApplySnapshotRequest;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.OperationStatus;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.Snapshot;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.SnapshotApplyMode;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.SnapshotObjectType;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.SnapshotsApplyResponse;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.SnapshotsTakeResponse;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.TakeSnapshotRequest;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateSnapshotRequest;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Snapshots.
 */
public final class SnapshotsImpl implements Snapshots {
    /**
     * The proxy service used to perform REST calls.
     */
    private SnapshotsService service;

    /**
     * The service client containing this operation class.
     */
    private FaceClientImpl client;

    /**
     * Initializes an instance of SnapshotsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public SnapshotsImpl(FaceClientImpl client) {
        this.service = RestProxy.create(SnapshotsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Snapshots to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{Endpoint}/face/v1.0")
    private interface SnapshotsService {
        @POST("snapshots")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SnapshotsTakeResponse> take(@HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") TakeSnapshotRequest body);

        @GET("snapshots")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<List<Snapshot>>> list(@HostParam("Endpoint") String endpoint, @QueryParam("type") SnapshotObjectType type, @QueryParam("applyScope") String applyScope);

        @GET("snapshots/{snapshotId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<Snapshot>> get(@PathParam("snapshotId") UUID snapshotId, @HostParam("Endpoint") String endpoint);

        @PATCH("snapshots/{snapshotId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<RestVoidResponse> update(@PathParam("snapshotId") UUID snapshotId, @HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") UpdateSnapshotRequest body);

        @DELETE("snapshots/{snapshotId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<RestVoidResponse> delete(@PathParam("snapshotId") UUID snapshotId, @HostParam("Endpoint") String endpoint);

        @POST("snapshots/{snapshotId}/apply")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SnapshotsApplyResponse> apply(@PathParam("snapshotId") UUID snapshotId, @HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") ApplySnapshotRequest body);

        @GET("operations/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<OperationStatus>> getOperationStatus(@PathParam("operationId") UUID operationId, @HostParam("Endpoint") String endpoint);
    }

    /**
     * Submit an operation to take a snapshot of face list, large face list, person group or large person group, with user-specified snapshot type, source object id, apply scope and an optional user data.&lt;br /&gt;
     * The snapshot interfaces are for users to backup and restore their face data from one face subscription to another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot - Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure instance), so that they can be applied cross accounts and regions.&lt;br /&gt;
     * Taking snapshot is an asynchronous operation. An operation id can be obtained from the "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the progress of creating the snapshot. The snapshot id will be included in the "resourceLocation" field in OperationStatus - Get response when the operation status is "succeeded".&lt;br /&gt;
     * Snapshot taking time depends on the number of person and face entries in the source object. It could be in seconds, or up to several hours for 1,000,000 persons with multiple faces.&lt;br /&gt;
     * Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. User can delete the snapshot using Snapshot - Delete by themselves any time before expiration.&lt;br /&gt;
     * Taking snapshot for a certain object will not block any other operations against the object. All read-only operations (Get/List and Identify/FindSimilar/Verify) can be conducted as usual. For all writable operations, including Add/Update/Delete the source object or its persons/faces and Train, they are not blocked but not recommended because writable updates may not be reflected on the snapshot during its taking. After snapshot taking is completed, all readable and writable operations can work as normal. Snapshot will also include the training results of the source object, which means target subscription the snapshot applied to does not need re-train the target object before calling Identify/FindSimilar.&lt;br /&gt;
     * * Free-tier subscription quota: 100 take operations per month.
     * * S0-tier subscription quota: 100 take operations per day.
     *
     * @param type User specified type for the source object to take snapshot from. Currently FaceList, PersonGroup, LargeFaceList and LargePersonGroup are supported. Possible values include: 'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'.
     * @param objectId User specified source object id to take snapshot from.
     * @param applyScope User specified array of target Face subscription ids for the snapshot. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void take(@NonNull SnapshotObjectType type, @NonNull String objectId, @NonNull List<UUID> applyScope) {
        takeAsync(type, objectId, applyScope).block();
    }

    /**
     * Submit an operation to take a snapshot of face list, large face list, person group or large person group, with user-specified snapshot type, source object id, apply scope and an optional user data.&lt;br /&gt;
     * The snapshot interfaces are for users to backup and restore their face data from one face subscription to another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot - Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure instance), so that they can be applied cross accounts and regions.&lt;br /&gt;
     * Taking snapshot is an asynchronous operation. An operation id can be obtained from the "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the progress of creating the snapshot. The snapshot id will be included in the "resourceLocation" field in OperationStatus - Get response when the operation status is "succeeded".&lt;br /&gt;
     * Snapshot taking time depends on the number of person and face entries in the source object. It could be in seconds, or up to several hours for 1,000,000 persons with multiple faces.&lt;br /&gt;
     * Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. User can delete the snapshot using Snapshot - Delete by themselves any time before expiration.&lt;br /&gt;
     * Taking snapshot for a certain object will not block any other operations against the object. All read-only operations (Get/List and Identify/FindSimilar/Verify) can be conducted as usual. For all writable operations, including Add/Update/Delete the source object or its persons/faces and Train, they are not blocked but not recommended because writable updates may not be reflected on the snapshot during its taking. After snapshot taking is completed, all readable and writable operations can work as normal. Snapshot will also include the training results of the source object, which means target subscription the snapshot applied to does not need re-train the target object before calling Identify/FindSimilar.&lt;br /&gt;
     * * Free-tier subscription quota: 100 take operations per month.
     * * S0-tier subscription quota: 100 take operations per day.
     *
     * @param type User specified type for the source object to take snapshot from. Currently FaceList, PersonGroup, LargeFaceList and LargePersonGroup are supported. Possible values include: 'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'.
     * @param objectId User specified source object id to take snapshot from.
     * @param applyScope User specified array of target Face subscription ids for the snapshot. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SnapshotsTakeResponse> takeWithRestResponseAsync(@NonNull SnapshotObjectType type, @NonNull String objectId, @NonNull List<UUID> applyScope) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (type == null) {
            throw new IllegalArgumentException("Parameter type is required and cannot be null.");
        }
        if (objectId == null) {
            throw new IllegalArgumentException("Parameter objectId is required and cannot be null.");
        }
        if (applyScope == null) {
            throw new IllegalArgumentException("Parameter applyScope is required and cannot be null.");
        }
        Validator.validate(applyScope);
        TakeSnapshotRequest body = new TakeSnapshotRequest();
        body.withType(type);
        body.withObjectId(objectId);
        body.withApplyScope(applyScope);
        body.withUserData(null);
        return service.take(this.client.endpoint(), body);
    }

    /**
     * Submit an operation to take a snapshot of face list, large face list, person group or large person group, with user-specified snapshot type, source object id, apply scope and an optional user data.&lt;br /&gt;
     * The snapshot interfaces are for users to backup and restore their face data from one face subscription to another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot - Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure instance), so that they can be applied cross accounts and regions.&lt;br /&gt;
     * Taking snapshot is an asynchronous operation. An operation id can be obtained from the "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the progress of creating the snapshot. The snapshot id will be included in the "resourceLocation" field in OperationStatus - Get response when the operation status is "succeeded".&lt;br /&gt;
     * Snapshot taking time depends on the number of person and face entries in the source object. It could be in seconds, or up to several hours for 1,000,000 persons with multiple faces.&lt;br /&gt;
     * Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. User can delete the snapshot using Snapshot - Delete by themselves any time before expiration.&lt;br /&gt;
     * Taking snapshot for a certain object will not block any other operations against the object. All read-only operations (Get/List and Identify/FindSimilar/Verify) can be conducted as usual. For all writable operations, including Add/Update/Delete the source object or its persons/faces and Train, they are not blocked but not recommended because writable updates may not be reflected on the snapshot during its taking. After snapshot taking is completed, all readable and writable operations can work as normal. Snapshot will also include the training results of the source object, which means target subscription the snapshot applied to does not need re-train the target object before calling Identify/FindSimilar.&lt;br /&gt;
     * * Free-tier subscription quota: 100 take operations per month.
     * * S0-tier subscription quota: 100 take operations per day.
     *
     * @param type User specified type for the source object to take snapshot from. Currently FaceList, PersonGroup, LargeFaceList and LargePersonGroup are supported. Possible values include: 'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'.
     * @param objectId User specified source object id to take snapshot from.
     * @param applyScope User specified array of target Face subscription ids for the snapshot. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> takeAsync(@NonNull SnapshotObjectType type, @NonNull String objectId, @NonNull List<UUID> applyScope) {
        return takeWithRestResponseAsync(type, objectId, applyScope)
            .flatMap((SnapshotsTakeResponse res) -> Mono.just(res.value()));
    }

    /**
     * Submit an operation to take a snapshot of face list, large face list, person group or large person group, with user-specified snapshot type, source object id, apply scope and an optional user data.&lt;br /&gt;
     * The snapshot interfaces are for users to backup and restore their face data from one face subscription to another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot - Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure instance), so that they can be applied cross accounts and regions.&lt;br /&gt;
     * Taking snapshot is an asynchronous operation. An operation id can be obtained from the "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the progress of creating the snapshot. The snapshot id will be included in the "resourceLocation" field in OperationStatus - Get response when the operation status is "succeeded".&lt;br /&gt;
     * Snapshot taking time depends on the number of person and face entries in the source object. It could be in seconds, or up to several hours for 1,000,000 persons with multiple faces.&lt;br /&gt;
     * Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. User can delete the snapshot using Snapshot - Delete by themselves any time before expiration.&lt;br /&gt;
     * Taking snapshot for a certain object will not block any other operations against the object. All read-only operations (Get/List and Identify/FindSimilar/Verify) can be conducted as usual. For all writable operations, including Add/Update/Delete the source object or its persons/faces and Train, they are not blocked but not recommended because writable updates may not be reflected on the snapshot during its taking. After snapshot taking is completed, all readable and writable operations can work as normal. Snapshot will also include the training results of the source object, which means target subscription the snapshot applied to does not need re-train the target object before calling Identify/FindSimilar.&lt;br /&gt;
     * * Free-tier subscription quota: 100 take operations per month.
     * * S0-tier subscription quota: 100 take operations per day.
     *
     * @param type User specified type for the source object to take snapshot from. Currently FaceList, PersonGroup, LargeFaceList and LargePersonGroup are supported. Possible values include: 'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'.
     * @param objectId User specified source object id to take snapshot from.
     * @param applyScope User specified array of target Face subscription ids for the snapshot. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.
     * @param userData User specified data about the snapshot for any purpose. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void take(@NonNull SnapshotObjectType type, @NonNull String objectId, @NonNull List<UUID> applyScope, String userData) {
        takeAsync(type, objectId, applyScope, userData).block();
    }

    /**
     * Submit an operation to take a snapshot of face list, large face list, person group or large person group, with user-specified snapshot type, source object id, apply scope and an optional user data.&lt;br /&gt;
     * The snapshot interfaces are for users to backup and restore their face data from one face subscription to another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot - Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure instance), so that they can be applied cross accounts and regions.&lt;br /&gt;
     * Taking snapshot is an asynchronous operation. An operation id can be obtained from the "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the progress of creating the snapshot. The snapshot id will be included in the "resourceLocation" field in OperationStatus - Get response when the operation status is "succeeded".&lt;br /&gt;
     * Snapshot taking time depends on the number of person and face entries in the source object. It could be in seconds, or up to several hours for 1,000,000 persons with multiple faces.&lt;br /&gt;
     * Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. User can delete the snapshot using Snapshot - Delete by themselves any time before expiration.&lt;br /&gt;
     * Taking snapshot for a certain object will not block any other operations against the object. All read-only operations (Get/List and Identify/FindSimilar/Verify) can be conducted as usual. For all writable operations, including Add/Update/Delete the source object or its persons/faces and Train, they are not blocked but not recommended because writable updates may not be reflected on the snapshot during its taking. After snapshot taking is completed, all readable and writable operations can work as normal. Snapshot will also include the training results of the source object, which means target subscription the snapshot applied to does not need re-train the target object before calling Identify/FindSimilar.&lt;br /&gt;
     * * Free-tier subscription quota: 100 take operations per month.
     * * S0-tier subscription quota: 100 take operations per day.
     *
     * @param type User specified type for the source object to take snapshot from. Currently FaceList, PersonGroup, LargeFaceList and LargePersonGroup are supported. Possible values include: 'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'.
     * @param objectId User specified source object id to take snapshot from.
     * @param applyScope User specified array of target Face subscription ids for the snapshot. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.
     * @param userData User specified data about the snapshot for any purpose. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SnapshotsTakeResponse> takeWithRestResponseAsync(@NonNull SnapshotObjectType type, @NonNull String objectId, @NonNull List<UUID> applyScope, String userData) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (type == null) {
            throw new IllegalArgumentException("Parameter type is required and cannot be null.");
        }
        if (objectId == null) {
            throw new IllegalArgumentException("Parameter objectId is required and cannot be null.");
        }
        if (applyScope == null) {
            throw new IllegalArgumentException("Parameter applyScope is required and cannot be null.");
        }
        Validator.validate(applyScope);
        TakeSnapshotRequest body = new TakeSnapshotRequest();
        body.withType(type);
        body.withObjectId(objectId);
        body.withApplyScope(applyScope);
        body.withUserData(userData);
        return service.take(this.client.endpoint(), body);
    }

    /**
     * Submit an operation to take a snapshot of face list, large face list, person group or large person group, with user-specified snapshot type, source object id, apply scope and an optional user data.&lt;br /&gt;
     * The snapshot interfaces are for users to backup and restore their face data from one face subscription to another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot - Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure instance), so that they can be applied cross accounts and regions.&lt;br /&gt;
     * Taking snapshot is an asynchronous operation. An operation id can be obtained from the "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the progress of creating the snapshot. The snapshot id will be included in the "resourceLocation" field in OperationStatus - Get response when the operation status is "succeeded".&lt;br /&gt;
     * Snapshot taking time depends on the number of person and face entries in the source object. It could be in seconds, or up to several hours for 1,000,000 persons with multiple faces.&lt;br /&gt;
     * Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. User can delete the snapshot using Snapshot - Delete by themselves any time before expiration.&lt;br /&gt;
     * Taking snapshot for a certain object will not block any other operations against the object. All read-only operations (Get/List and Identify/FindSimilar/Verify) can be conducted as usual. For all writable operations, including Add/Update/Delete the source object or its persons/faces and Train, they are not blocked but not recommended because writable updates may not be reflected on the snapshot during its taking. After snapshot taking is completed, all readable and writable operations can work as normal. Snapshot will also include the training results of the source object, which means target subscription the snapshot applied to does not need re-train the target object before calling Identify/FindSimilar.&lt;br /&gt;
     * * Free-tier subscription quota: 100 take operations per month.
     * * S0-tier subscription quota: 100 take operations per day.
     *
     * @param type User specified type for the source object to take snapshot from. Currently FaceList, PersonGroup, LargeFaceList and LargePersonGroup are supported. Possible values include: 'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'.
     * @param objectId User specified source object id to take snapshot from.
     * @param applyScope User specified array of target Face subscription ids for the snapshot. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.
     * @param userData User specified data about the snapshot for any purpose. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> takeAsync(@NonNull SnapshotObjectType type, @NonNull String objectId, @NonNull List<UUID> applyScope, String userData) {
        return takeWithRestResponseAsync(type, objectId, applyScope, userData)
            .flatMap((SnapshotsTakeResponse res) -> Mono.just(res.value()));
    }

    /**
     * List all accessible snapshots with related information, including snapshots that were taken by the user, or snapshots to be applied to the user (subscription id was included in the applyScope in Snapshot - Take).
     *
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Snapshot&gt; object if successful.
     */
    public List<Snapshot> list() {
        return listAsync().block();
    }

    /**
     * List all accessible snapshots with related information, including snapshots that were taken by the user, or snapshots to be applied to the user (subscription id was included in the applyScope in Snapshot - Take).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<Snapshot>>> listWithRestResponseAsync() {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        final SnapshotObjectType type = null;
        final List<UUID> applyScope = null;
        String applyScopeConverted = this.client.serializerAdapter().serializeList(applyScope, CollectionFormat.CSV);
        return service.list(this.client.endpoint(), type, applyScopeConverted);
    }

    /**
     * List all accessible snapshots with related information, including snapshots that were taken by the user, or snapshots to be applied to the user (subscription id was included in the applyScope in Snapshot - Take).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<Snapshot>> listAsync() {
        return listWithRestResponseAsync()
            .flatMap((SimpleResponse<List<Snapshot>> res) -> Mono.just(res.value()));
    }

    /**
     * List all accessible snapshots with related information, including snapshots that were taken by the user, or snapshots to be applied to the user (subscription id was included in the applyScope in Snapshot - Take).
     *
     * @param type User specified object type as a search filter. Possible values include: 'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'.
     * @param applyScope User specified snapshot apply scopes as a search filter. ApplyScope is an array of the target Azure subscription ids for the snapshot, specified by the user who created the snapshot by Snapshot - Take.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Snapshot&gt; object if successful.
     */
    public List<Snapshot> list(SnapshotObjectType type, List<UUID> applyScope) {
        return listAsync(type, applyScope).block();
    }

    /**
     * List all accessible snapshots with related information, including snapshots that were taken by the user, or snapshots to be applied to the user (subscription id was included in the applyScope in Snapshot - Take).
     *
     * @param type User specified object type as a search filter. Possible values include: 'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'.
     * @param applyScope User specified snapshot apply scopes as a search filter. ApplyScope is an array of the target Azure subscription ids for the snapshot, specified by the user who created the snapshot by Snapshot - Take.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<Snapshot>>> listWithRestResponseAsync(SnapshotObjectType type, List<UUID> applyScope) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        Validator.validate(applyScope);
        String applyScopeConverted = this.client.serializerAdapter().serializeList(applyScope, CollectionFormat.CSV);
        return service.list(this.client.endpoint(), type, applyScopeConverted);
    }

    /**
     * List all accessible snapshots with related information, including snapshots that were taken by the user, or snapshots to be applied to the user (subscription id was included in the applyScope in Snapshot - Take).
     *
     * @param type User specified object type as a search filter. Possible values include: 'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'.
     * @param applyScope User specified snapshot apply scopes as a search filter. ApplyScope is an array of the target Azure subscription ids for the snapshot, specified by the user who created the snapshot by Snapshot - Take.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<Snapshot>> listAsync(SnapshotObjectType type, List<UUID> applyScope) {
        return listWithRestResponseAsync(type, applyScope)
            .flatMap((SimpleResponse<List<Snapshot>> res) -> Mono.just(res.value()));
    }

    /**
     * Retrieve information about a snapshot. Snapshot is only accessible to the source subscription who took it, and target subscriptions included in the applyScope in Snapshot - Take.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Snapshot object if successful.
     */
    public Snapshot get(@NonNull UUID snapshotId) {
        return getAsync(snapshotId).block();
    }

    /**
     * Retrieve information about a snapshot. Snapshot is only accessible to the source subscription who took it, and target subscriptions included in the applyScope in Snapshot - Take.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Snapshot>> getWithRestResponseAsync(@NonNull UUID snapshotId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (snapshotId == null) {
            throw new IllegalArgumentException("Parameter snapshotId is required and cannot be null.");
        }
        return service.get(snapshotId, this.client.endpoint());
    }

    /**
     * Retrieve information about a snapshot. Snapshot is only accessible to the source subscription who took it, and target subscriptions included in the applyScope in Snapshot - Take.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Snapshot> getAsync(@NonNull UUID snapshotId) {
        return getWithRestResponseAsync(snapshotId)
            .flatMap((SimpleResponse<Snapshot> res) -> Mono.just(res.value()));
    }

    /**
     * Update the information of a snapshot. Only the source subscription who took the snapshot can update the snapshot.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void update(@NonNull UUID snapshotId) {
        updateAsync(snapshotId).block();
    }

    /**
     * Update the information of a snapshot. Only the source subscription who took the snapshot can update the snapshot.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> updateWithRestResponseAsync(@NonNull UUID snapshotId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (snapshotId == null) {
            throw new IllegalArgumentException("Parameter snapshotId is required and cannot be null.");
        }
        UpdateSnapshotRequest body = new UpdateSnapshotRequest();
        body.withApplyScope(null);
        body.withUserData(null);
        return service.update(snapshotId, this.client.endpoint(), body);
    }

    /**
     * Update the information of a snapshot. Only the source subscription who took the snapshot can update the snapshot.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> updateAsync(@NonNull UUID snapshotId) {
        return updateWithRestResponseAsync(snapshotId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Update the information of a snapshot. Only the source subscription who took the snapshot can update the snapshot.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @param applyScope Array of the target Face subscription ids for the snapshot, specified by the user who created the snapshot when calling Snapshot - Take. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.
     * @param userData User specified data about the snapshot for any purpose. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void update(@NonNull UUID snapshotId, List<UUID> applyScope, String userData) {
        updateAsync(snapshotId, applyScope, userData).block();
    }

    /**
     * Update the information of a snapshot. Only the source subscription who took the snapshot can update the snapshot.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @param applyScope Array of the target Face subscription ids for the snapshot, specified by the user who created the snapshot when calling Snapshot - Take. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.
     * @param userData User specified data about the snapshot for any purpose. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> updateWithRestResponseAsync(@NonNull UUID snapshotId, List<UUID> applyScope, String userData) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (snapshotId == null) {
            throw new IllegalArgumentException("Parameter snapshotId is required and cannot be null.");
        }
        Validator.validate(applyScope);
        UpdateSnapshotRequest body = new UpdateSnapshotRequest();
        body.withApplyScope(applyScope);
        body.withUserData(userData);
        return service.update(snapshotId, this.client.endpoint(), body);
    }

    /**
     * Update the information of a snapshot. Only the source subscription who took the snapshot can update the snapshot.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @param applyScope Array of the target Face subscription ids for the snapshot, specified by the user who created the snapshot when calling Snapshot - Take. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.
     * @param userData User specified data about the snapshot for any purpose. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> updateAsync(@NonNull UUID snapshotId, List<UUID> applyScope, String userData) {
        return updateWithRestResponseAsync(snapshotId, applyScope, userData)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Delete an existing snapshot according to the snapshotId. All object data and information in the snapshot will also be deleted. Only the source subscription who took the snapshot can delete the snapshot. If the user does not delete a snapshot with this API, the snapshot will still be automatically deleted in 48 hours after creation.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void delete(@NonNull UUID snapshotId) {
        deleteAsync(snapshotId).block();
    }

    /**
     * Delete an existing snapshot according to the snapshotId. All object data and information in the snapshot will also be deleted. Only the source subscription who took the snapshot can delete the snapshot. If the user does not delete a snapshot with this API, the snapshot will still be automatically deleted in 48 hours after creation.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> deleteWithRestResponseAsync(@NonNull UUID snapshotId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (snapshotId == null) {
            throw new IllegalArgumentException("Parameter snapshotId is required and cannot be null.");
        }
        return service.delete(snapshotId, this.client.endpoint());
    }

    /**
     * Delete an existing snapshot according to the snapshotId. All object data and information in the snapshot will also be deleted. Only the source subscription who took the snapshot can delete the snapshot. If the user does not delete a snapshot with this API, the snapshot will still be automatically deleted in 48 hours after creation.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> deleteAsync(@NonNull UUID snapshotId) {
        return deleteWithRestResponseAsync(snapshotId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Submit an operation to apply a snapshot to current subscription. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.&lt;br /&gt;
     * The snapshot interfaces are for users to backup and restore their face data from one face subscription to another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot - Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure instance), so that they can be applied cross accounts and regions.&lt;br /&gt;
     * Applying snapshot is an asynchronous operation. An operation id can be obtained from the "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the progress of applying the snapshot. The target object id will be included in the "resourceLocation" field in OperationStatus - Get response when the operation status is "succeeded".&lt;br /&gt;
     * Snapshot applying time depends on the number of person and face entries in the snapshot object. It could be in seconds, or up to 1 hour for 1,000,000 persons with multiple faces.&lt;br /&gt;
     * Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. So the target subscription is required to apply the snapshot in 48 hours since its creation.&lt;br /&gt;
     * Applying a snapshot will not block any other operations against the target object, however it is not recommended because the correctness cannot be guaranteed during snapshot applying. After snapshot applying is completed, all operations towards the target object can work as normal. Snapshot also includes the training results of the source object, which means target subscription the snapshot applied to does not need re-train the target object before calling Identify/FindSimilar.&lt;br /&gt;
     * One snapshot can be applied multiple times in parallel, while currently only CreateNew apply mode is supported, which means the apply operation will fail if target subscription already contains an object of same type and using the same objectId. Users can specify the "objectId" in request body to avoid such conflicts.&lt;br /&gt;
     * * Free-tier subscription quota: 100 apply operations per month.
     * * S0-tier subscription quota: 100 apply operations per day.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @param objectId User specified target object id to be created from the snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void apply(@NonNull UUID snapshotId, @NonNull String objectId) {
        applyAsync(snapshotId, objectId).block();
    }

    /**
     * Submit an operation to apply a snapshot to current subscription. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.&lt;br /&gt;
     * The snapshot interfaces are for users to backup and restore their face data from one face subscription to another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot - Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure instance), so that they can be applied cross accounts and regions.&lt;br /&gt;
     * Applying snapshot is an asynchronous operation. An operation id can be obtained from the "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the progress of applying the snapshot. The target object id will be included in the "resourceLocation" field in OperationStatus - Get response when the operation status is "succeeded".&lt;br /&gt;
     * Snapshot applying time depends on the number of person and face entries in the snapshot object. It could be in seconds, or up to 1 hour for 1,000,000 persons with multiple faces.&lt;br /&gt;
     * Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. So the target subscription is required to apply the snapshot in 48 hours since its creation.&lt;br /&gt;
     * Applying a snapshot will not block any other operations against the target object, however it is not recommended because the correctness cannot be guaranteed during snapshot applying. After snapshot applying is completed, all operations towards the target object can work as normal. Snapshot also includes the training results of the source object, which means target subscription the snapshot applied to does not need re-train the target object before calling Identify/FindSimilar.&lt;br /&gt;
     * One snapshot can be applied multiple times in parallel, while currently only CreateNew apply mode is supported, which means the apply operation will fail if target subscription already contains an object of same type and using the same objectId. Users can specify the "objectId" in request body to avoid such conflicts.&lt;br /&gt;
     * * Free-tier subscription quota: 100 apply operations per month.
     * * S0-tier subscription quota: 100 apply operations per day.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @param objectId User specified target object id to be created from the snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SnapshotsApplyResponse> applyWithRestResponseAsync(@NonNull UUID snapshotId, @NonNull String objectId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (snapshotId == null) {
            throw new IllegalArgumentException("Parameter snapshotId is required and cannot be null.");
        }
        if (objectId == null) {
            throw new IllegalArgumentException("Parameter objectId is required and cannot be null.");
        }
        ApplySnapshotRequest body = new ApplySnapshotRequest();
        body.withObjectId(objectId);
        body.withMode(null);
        return service.apply(snapshotId, this.client.endpoint(), body);
    }

    /**
     * Submit an operation to apply a snapshot to current subscription. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.&lt;br /&gt;
     * The snapshot interfaces are for users to backup and restore their face data from one face subscription to another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot - Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure instance), so that they can be applied cross accounts and regions.&lt;br /&gt;
     * Applying snapshot is an asynchronous operation. An operation id can be obtained from the "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the progress of applying the snapshot. The target object id will be included in the "resourceLocation" field in OperationStatus - Get response when the operation status is "succeeded".&lt;br /&gt;
     * Snapshot applying time depends on the number of person and face entries in the snapshot object. It could be in seconds, or up to 1 hour for 1,000,000 persons with multiple faces.&lt;br /&gt;
     * Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. So the target subscription is required to apply the snapshot in 48 hours since its creation.&lt;br /&gt;
     * Applying a snapshot will not block any other operations against the target object, however it is not recommended because the correctness cannot be guaranteed during snapshot applying. After snapshot applying is completed, all operations towards the target object can work as normal. Snapshot also includes the training results of the source object, which means target subscription the snapshot applied to does not need re-train the target object before calling Identify/FindSimilar.&lt;br /&gt;
     * One snapshot can be applied multiple times in parallel, while currently only CreateNew apply mode is supported, which means the apply operation will fail if target subscription already contains an object of same type and using the same objectId. Users can specify the "objectId" in request body to avoid such conflicts.&lt;br /&gt;
     * * Free-tier subscription quota: 100 apply operations per month.
     * * S0-tier subscription quota: 100 apply operations per day.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @param objectId User specified target object id to be created from the snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> applyAsync(@NonNull UUID snapshotId, @NonNull String objectId) {
        return applyWithRestResponseAsync(snapshotId, objectId)
            .flatMap((SnapshotsApplyResponse res) -> Mono.just(res.value()));
    }

    /**
     * Submit an operation to apply a snapshot to current subscription. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.&lt;br /&gt;
     * The snapshot interfaces are for users to backup and restore their face data from one face subscription to another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot - Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure instance), so that they can be applied cross accounts and regions.&lt;br /&gt;
     * Applying snapshot is an asynchronous operation. An operation id can be obtained from the "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the progress of applying the snapshot. The target object id will be included in the "resourceLocation" field in OperationStatus - Get response when the operation status is "succeeded".&lt;br /&gt;
     * Snapshot applying time depends on the number of person and face entries in the snapshot object. It could be in seconds, or up to 1 hour for 1,000,000 persons with multiple faces.&lt;br /&gt;
     * Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. So the target subscription is required to apply the snapshot in 48 hours since its creation.&lt;br /&gt;
     * Applying a snapshot will not block any other operations against the target object, however it is not recommended because the correctness cannot be guaranteed during snapshot applying. After snapshot applying is completed, all operations towards the target object can work as normal. Snapshot also includes the training results of the source object, which means target subscription the snapshot applied to does not need re-train the target object before calling Identify/FindSimilar.&lt;br /&gt;
     * One snapshot can be applied multiple times in parallel, while currently only CreateNew apply mode is supported, which means the apply operation will fail if target subscription already contains an object of same type and using the same objectId. Users can specify the "objectId" in request body to avoid such conflicts.&lt;br /&gt;
     * * Free-tier subscription quota: 100 apply operations per month.
     * * S0-tier subscription quota: 100 apply operations per day.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @param objectId User specified target object id to be created from the snapshot.
     * @param mode Snapshot applying mode. Currently only CreateNew is supported, which means the apply operation will fail if target subscription already contains an object of same type and using the same objectId. Users can specify the "objectId" in request body to avoid such conflicts. Possible values include: 'CreateNew'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void apply(@NonNull UUID snapshotId, @NonNull String objectId, SnapshotApplyMode mode) {
        applyAsync(snapshotId, objectId, mode).block();
    }

    /**
     * Submit an operation to apply a snapshot to current subscription. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.&lt;br /&gt;
     * The snapshot interfaces are for users to backup and restore their face data from one face subscription to another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot - Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure instance), so that they can be applied cross accounts and regions.&lt;br /&gt;
     * Applying snapshot is an asynchronous operation. An operation id can be obtained from the "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the progress of applying the snapshot. The target object id will be included in the "resourceLocation" field in OperationStatus - Get response when the operation status is "succeeded".&lt;br /&gt;
     * Snapshot applying time depends on the number of person and face entries in the snapshot object. It could be in seconds, or up to 1 hour for 1,000,000 persons with multiple faces.&lt;br /&gt;
     * Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. So the target subscription is required to apply the snapshot in 48 hours since its creation.&lt;br /&gt;
     * Applying a snapshot will not block any other operations against the target object, however it is not recommended because the correctness cannot be guaranteed during snapshot applying. After snapshot applying is completed, all operations towards the target object can work as normal. Snapshot also includes the training results of the source object, which means target subscription the snapshot applied to does not need re-train the target object before calling Identify/FindSimilar.&lt;br /&gt;
     * One snapshot can be applied multiple times in parallel, while currently only CreateNew apply mode is supported, which means the apply operation will fail if target subscription already contains an object of same type and using the same objectId. Users can specify the "objectId" in request body to avoid such conflicts.&lt;br /&gt;
     * * Free-tier subscription quota: 100 apply operations per month.
     * * S0-tier subscription quota: 100 apply operations per day.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @param objectId User specified target object id to be created from the snapshot.
     * @param mode Snapshot applying mode. Currently only CreateNew is supported, which means the apply operation will fail if target subscription already contains an object of same type and using the same objectId. Users can specify the "objectId" in request body to avoid such conflicts. Possible values include: 'CreateNew'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SnapshotsApplyResponse> applyWithRestResponseAsync(@NonNull UUID snapshotId, @NonNull String objectId, SnapshotApplyMode mode) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (snapshotId == null) {
            throw new IllegalArgumentException("Parameter snapshotId is required and cannot be null.");
        }
        if (objectId == null) {
            throw new IllegalArgumentException("Parameter objectId is required and cannot be null.");
        }
        ApplySnapshotRequest body = new ApplySnapshotRequest();
        body.withObjectId(objectId);
        body.withMode(mode);
        return service.apply(snapshotId, this.client.endpoint(), body);
    }

    /**
     * Submit an operation to apply a snapshot to current subscription. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.&lt;br /&gt;
     * The snapshot interfaces are for users to backup and restore their face data from one face subscription to another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot - Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure instance), so that they can be applied cross accounts and regions.&lt;br /&gt;
     * Applying snapshot is an asynchronous operation. An operation id can be obtained from the "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the progress of applying the snapshot. The target object id will be included in the "resourceLocation" field in OperationStatus - Get response when the operation status is "succeeded".&lt;br /&gt;
     * Snapshot applying time depends on the number of person and face entries in the snapshot object. It could be in seconds, or up to 1 hour for 1,000,000 persons with multiple faces.&lt;br /&gt;
     * Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. So the target subscription is required to apply the snapshot in 48 hours since its creation.&lt;br /&gt;
     * Applying a snapshot will not block any other operations against the target object, however it is not recommended because the correctness cannot be guaranteed during snapshot applying. After snapshot applying is completed, all operations towards the target object can work as normal. Snapshot also includes the training results of the source object, which means target subscription the snapshot applied to does not need re-train the target object before calling Identify/FindSimilar.&lt;br /&gt;
     * One snapshot can be applied multiple times in parallel, while currently only CreateNew apply mode is supported, which means the apply operation will fail if target subscription already contains an object of same type and using the same objectId. Users can specify the "objectId" in request body to avoid such conflicts.&lt;br /&gt;
     * * Free-tier subscription quota: 100 apply operations per month.
     * * S0-tier subscription quota: 100 apply operations per day.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @param objectId User specified target object id to be created from the snapshot.
     * @param mode Snapshot applying mode. Currently only CreateNew is supported, which means the apply operation will fail if target subscription already contains an object of same type and using the same objectId. Users can specify the "objectId" in request body to avoid such conflicts. Possible values include: 'CreateNew'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> applyAsync(@NonNull UUID snapshotId, @NonNull String objectId, SnapshotApplyMode mode) {
        return applyWithRestResponseAsync(snapshotId, objectId, mode)
            .flatMap((SnapshotsApplyResponse res) -> Mono.just(res.value()));
    }

    /**
     * Retrieve the status of a take/apply snapshot operation.
     *
     * @param operationId Id referencing a particular take/apply snapshot operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OperationStatus object if successful.
     */
    public OperationStatus getOperationStatus(@NonNull UUID operationId) {
        return getOperationStatusAsync(operationId).block();
    }

    /**
     * Retrieve the status of a take/apply snapshot operation.
     *
     * @param operationId Id referencing a particular take/apply snapshot operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OperationStatus>> getOperationStatusWithRestResponseAsync(@NonNull UUID operationId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (operationId == null) {
            throw new IllegalArgumentException("Parameter operationId is required and cannot be null.");
        }
        return service.getOperationStatus(operationId, this.client.endpoint());
    }

    /**
     * Retrieve the status of a take/apply snapshot operation.
     *
     * @param operationId Id referencing a particular take/apply snapshot operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OperationStatus> getOperationStatusAsync(@NonNull UUID operationId) {
        return getOperationStatusWithRestResponseAsync(operationId)
            .flatMap((SimpleResponse<OperationStatus> res) -> Mono.just(res.value()));
    }
}
