/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.faceapi.implementation;

import com.azure.common.annotations.BodyParam;
import com.azure.common.annotations.DELETE;
import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.GET;
import com.azure.common.annotations.HeaderParam;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.PATCH;
import com.azure.common.annotations.PathParam;
import com.azure.common.annotations.POST;
import com.azure.common.annotations.QueryParam;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.http.rest.RestVoidResponse;
import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.implementation.CollectionFormat;
import com.azure.common.implementation.RestProxy;
import com.azure.common.implementation.Validator;
import com.microsoft.azure.cognitiveservices.vision.faceapi.LargePersonGroupPersons;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ImageUrl;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.NameAndUserDataContract;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.Person;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFaceRequest;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * LargePersonGroupPersons.
 */
public final class LargePersonGroupPersonsImpl implements LargePersonGroupPersons {
    /**
     * The proxy service used to perform REST calls.
     */
    private LargePersonGroupPersonsService service;

    /**
     * The service client containing this operation class.
     */
    private FaceClientImpl client;

    /**
     * Initializes an instance of LargePersonGroupPersonsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public LargePersonGroupPersonsImpl(FaceClientImpl client) {
        this.service = RestProxy.create(LargePersonGroupPersonsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for LargePersonGroupPersons to
     * be used by the proxy service to perform REST calls.
     */
    @Host("{Endpoint}/face/v1.0")
    private interface LargePersonGroupPersonsService {
        @POST("largepersongroups/{largePersonGroupId}/persons")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<Person>> create(@PathParam("largePersonGroupId") String largePersonGroupId, @HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") NameAndUserDataContract body);

        @GET("largepersongroups/{largePersonGroupId}/persons")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<List<Person>>> list(@PathParam("largePersonGroupId") String largePersonGroupId, @HostParam("Endpoint") String endpoint, @QueryParam("start") String start, @QueryParam("top") Integer top);

        @DELETE("largepersongroups/{largePersonGroupId}/persons/{personId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<RestVoidResponse> delete(@PathParam("largePersonGroupId") String largePersonGroupId, @PathParam("personId") UUID personId, @HostParam("Endpoint") String endpoint);

        @GET("largepersongroups/{largePersonGroupId}/persons/{personId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<Person>> get(@PathParam("largePersonGroupId") String largePersonGroupId, @PathParam("personId") UUID personId, @HostParam("Endpoint") String endpoint);

        @PATCH("largepersongroups/{largePersonGroupId}/persons/{personId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<RestVoidResponse> update(@PathParam("largePersonGroupId") String largePersonGroupId, @PathParam("personId") UUID personId, @HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") NameAndUserDataContract body);

        @DELETE("largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<RestVoidResponse> deleteFace(@PathParam("largePersonGroupId") String largePersonGroupId, @PathParam("personId") UUID personId, @PathParam("persistedFaceId") UUID persistedFaceId, @HostParam("Endpoint") String endpoint);

        @GET("largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<PersistedFace>> getFace(@PathParam("largePersonGroupId") String largePersonGroupId, @PathParam("personId") UUID personId, @PathParam("persistedFaceId") UUID persistedFaceId, @HostParam("Endpoint") String endpoint);

        @PATCH("largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<RestVoidResponse> updateFace(@PathParam("largePersonGroupId") String largePersonGroupId, @PathParam("personId") UUID personId, @PathParam("persistedFaceId") UUID persistedFaceId, @HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") UpdateFaceRequest body);

        @POST("largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<PersistedFace>> addFaceFromUrl(@PathParam("largePersonGroupId") String largePersonGroupId, @PathParam("personId") UUID personId, @HostParam("Endpoint") String endpoint, @QueryParam("userData") String userData, @QueryParam("targetFace") String targetFace, @BodyParam("application/json; charset=utf-8") ImageUrl imageUrl);

        @POST("largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<PersistedFace>> addFaceFromStream(@PathParam("largePersonGroupId") String largePersonGroupId, @PathParam("personId") UUID personId, @HostParam("Endpoint") String endpoint, @QueryParam("userData") String userData, @QueryParam("targetFace") String targetFace, @HeaderParam("Content-Length") long contentLength, @BodyParam("application/octet-stream") Flux<ByteBuffer> image);
    }

    /**
     * Create a new person in a specified large person group.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Person object if successful.
     */
    public Person create(@NonNull String largePersonGroupId) {
        return createAsync(largePersonGroupId).block();
    }

    /**
     * Create a new person in a specified large person group.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Person>> createWithRestResponseAsync(@NonNull String largePersonGroupId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        NameAndUserDataContract body = new NameAndUserDataContract();
        body.withName(null);
        body.withUserData(null);
        return service.create(largePersonGroupId, this.client.endpoint(), body);
    }

    /**
     * Create a new person in a specified large person group.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Person> createAsync(@NonNull String largePersonGroupId) {
        return createWithRestResponseAsync(largePersonGroupId)
            .flatMap((SimpleResponse<Person> res) -> Mono.just(res.value()));
    }

    /**
     * Create a new person in a specified large person group.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Person object if successful.
     */
    public Person create(@NonNull String largePersonGroupId, String name, String userData) {
        return createAsync(largePersonGroupId, name, userData).block();
    }

    /**
     * Create a new person in a specified large person group.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Person>> createWithRestResponseAsync(@NonNull String largePersonGroupId, String name, String userData) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        NameAndUserDataContract body = new NameAndUserDataContract();
        body.withName(name);
        body.withUserData(userData);
        return service.create(largePersonGroupId, this.client.endpoint(), body);
    }

    /**
     * Create a new person in a specified large person group.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Person> createAsync(@NonNull String largePersonGroupId, String name, String userData) {
        return createWithRestResponseAsync(largePersonGroupId, name, userData)
            .flatMap((SimpleResponse<Person> res) -> Mono.just(res.value()));
    }

    /**
     * List all persons in a large person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Person&gt; object if successful.
     */
    public List<Person> list(@NonNull String largePersonGroupId) {
        return listAsync(largePersonGroupId).block();
    }

    /**
     * List all persons in a large person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<Person>>> listWithRestResponseAsync(@NonNull String largePersonGroupId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        final String start = null;
        final Integer top = null;
        return service.list(largePersonGroupId, this.client.endpoint(), start, top);
    }

    /**
     * List all persons in a large person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<Person>> listAsync(@NonNull String largePersonGroupId) {
        return listWithRestResponseAsync(largePersonGroupId)
            .flatMap((SimpleResponse<List<Person>> res) -> Mono.just(res.value()));
    }

    /**
     * List all persons in a large person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param start Starting person id to return (used to list a range of persons).
     * @param top Number of persons to return starting with the person id indicated by the 'start' parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Person&gt; object if successful.
     */
    public List<Person> list(@NonNull String largePersonGroupId, String start, Integer top) {
        return listAsync(largePersonGroupId, start, top).block();
    }

    /**
     * List all persons in a large person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param start Starting person id to return (used to list a range of persons).
     * @param top Number of persons to return starting with the person id indicated by the 'start' parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<Person>>> listWithRestResponseAsync(@NonNull String largePersonGroupId, String start, Integer top) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        return service.list(largePersonGroupId, this.client.endpoint(), start, top);
    }

    /**
     * List all persons in a large person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param start Starting person id to return (used to list a range of persons).
     * @param top Number of persons to return starting with the person id indicated by the 'start' parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<Person>> listAsync(@NonNull String largePersonGroupId, String start, Integer top) {
        return listWithRestResponseAsync(largePersonGroupId, start, top)
            .flatMap((SimpleResponse<List<Person>> res) -> Mono.just(res.value()));
    }

    /**
     * Delete an existing person from a large person group. All stored person data, and face features in the person entry will be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void delete(@NonNull String largePersonGroupId, @NonNull UUID personId) {
        deleteAsync(largePersonGroupId, personId).block();
    }

    /**
     * Delete an existing person from a large person group. All stored person data, and face features in the person entry will be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> deleteWithRestResponseAsync(@NonNull String largePersonGroupId, @NonNull UUID personId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        return service.delete(largePersonGroupId, personId, this.client.endpoint());
    }

    /**
     * Delete an existing person from a large person group. All stored person data, and face features in the person entry will be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> deleteAsync(@NonNull String largePersonGroupId, @NonNull UUID personId) {
        return deleteWithRestResponseAsync(largePersonGroupId, personId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Retrieve a person's information, including registered persisted faces, name and userData.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Person object if successful.
     */
    public Person get(@NonNull String largePersonGroupId, @NonNull UUID personId) {
        return getAsync(largePersonGroupId, personId).block();
    }

    /**
     * Retrieve a person's information, including registered persisted faces, name and userData.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Person>> getWithRestResponseAsync(@NonNull String largePersonGroupId, @NonNull UUID personId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        return service.get(largePersonGroupId, personId, this.client.endpoint());
    }

    /**
     * Retrieve a person's information, including registered persisted faces, name and userData.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Person> getAsync(@NonNull String largePersonGroupId, @NonNull UUID personId) {
        return getWithRestResponseAsync(largePersonGroupId, personId)
            .flatMap((SimpleResponse<Person> res) -> Mono.just(res.value()));
    }

    /**
     * Update name or userData of a person.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void update(@NonNull String largePersonGroupId, @NonNull UUID personId) {
        updateAsync(largePersonGroupId, personId).block();
    }

    /**
     * Update name or userData of a person.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> updateWithRestResponseAsync(@NonNull String largePersonGroupId, @NonNull UUID personId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        NameAndUserDataContract body = new NameAndUserDataContract();
        body.withName(null);
        body.withUserData(null);
        return service.update(largePersonGroupId, personId, this.client.endpoint(), body);
    }

    /**
     * Update name or userData of a person.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> updateAsync(@NonNull String largePersonGroupId, @NonNull UUID personId) {
        return updateWithRestResponseAsync(largePersonGroupId, personId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Update name or userData of a person.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void update(@NonNull String largePersonGroupId, @NonNull UUID personId, String name, String userData) {
        updateAsync(largePersonGroupId, personId, name, userData).block();
    }

    /**
     * Update name or userData of a person.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> updateWithRestResponseAsync(@NonNull String largePersonGroupId, @NonNull UUID personId, String name, String userData) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        NameAndUserDataContract body = new NameAndUserDataContract();
        body.withName(name);
        body.withUserData(userData);
        return service.update(largePersonGroupId, personId, this.client.endpoint(), body);
    }

    /**
     * Update name or userData of a person.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> updateAsync(@NonNull String largePersonGroupId, @NonNull UUID personId, String name, String userData) {
        return updateWithRestResponseAsync(largePersonGroupId, personId, name, userData)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Delete a face from a person. Relative feature for the persisted face will also be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void deleteFace(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull UUID persistedFaceId) {
        deleteFaceAsync(largePersonGroupId, personId, persistedFaceId).block();
    }

    /**
     * Delete a face from a person. Relative feature for the persisted face will also be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> deleteFaceWithRestResponseAsync(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull UUID persistedFaceId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        return service.deleteFace(largePersonGroupId, personId, persistedFaceId, this.client.endpoint());
    }

    /**
     * Delete a face from a person. Relative feature for the persisted face will also be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> deleteFaceAsync(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull UUID persistedFaceId) {
        return deleteFaceWithRestResponseAsync(largePersonGroupId, personId, persistedFaceId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its belonging largePersonGroupId).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PersistedFace object if successful.
     */
    public PersistedFace getFace(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull UUID persistedFaceId) {
        return getFaceAsync(largePersonGroupId, personId, persistedFaceId).block();
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its belonging largePersonGroupId).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<PersistedFace>> getFaceWithRestResponseAsync(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull UUID persistedFaceId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        return service.getFace(largePersonGroupId, personId, persistedFaceId, this.client.endpoint());
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its belonging largePersonGroupId).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<PersistedFace> getFaceAsync(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull UUID persistedFaceId) {
        return getFaceWithRestResponseAsync(largePersonGroupId, personId, persistedFaceId)
            .flatMap((SimpleResponse<PersistedFace> res) -> Mono.just(res.value()));
    }

    /**
     * Update a person persisted face's userData field.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void updateFace(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull UUID persistedFaceId) {
        updateFaceAsync(largePersonGroupId, personId, persistedFaceId).block();
    }

    /**
     * Update a person persisted face's userData field.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> updateFaceWithRestResponseAsync(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull UUID persistedFaceId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        UpdateFaceRequest body = new UpdateFaceRequest();
        body.withUserData(null);
        return service.updateFace(largePersonGroupId, personId, persistedFaceId, this.client.endpoint(), body);
    }

    /**
     * Update a person persisted face's userData field.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> updateFaceAsync(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull UUID persistedFaceId) {
        return updateFaceWithRestResponseAsync(largePersonGroupId, personId, persistedFaceId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Update a person persisted face's userData field.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void updateFace(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull UUID persistedFaceId, String userData) {
        updateFaceAsync(largePersonGroupId, personId, persistedFaceId, userData).block();
    }

    /**
     * Update a person persisted face's userData field.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> updateFaceWithRestResponseAsync(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull UUID persistedFaceId, String userData) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        UpdateFaceRequest body = new UpdateFaceRequest();
        body.withUserData(userData);
        return service.updateFace(largePersonGroupId, personId, persistedFaceId, this.client.endpoint(), body);
    }

    /**
     * Update a person persisted face's userData field.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> updateFaceAsync(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull UUID persistedFaceId, String userData) {
        return updateFaceWithRestResponseAsync(largePersonGroupId, personId, persistedFaceId, userData)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PersistedFace object if successful.
     */
    public PersistedFace addFaceFromUrl(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull String url) {
        return addFaceFromUrlAsync(largePersonGroupId, personId, url).block();
    }

    /**
     * Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<PersistedFace>> addFaceFromUrlWithRestResponseAsync(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull String url) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        final String userData = null;
        final List<Integer> targetFace = null;
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        String targetFaceConverted = this.client.serializerAdapter().serializeList(targetFace, CollectionFormat.CSV);
        return service.addFaceFromUrl(largePersonGroupId, personId, this.client.endpoint(), userData, targetFaceConverted, imageUrl);
    }

    /**
     * Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<PersistedFace> addFaceFromUrlAsync(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull String url) {
        return addFaceFromUrlWithRestResponseAsync(largePersonGroupId, personId, url)
            .flatMap((SimpleResponse<PersistedFace> res) -> Mono.just(res.value()));
    }

    /**
     * Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param url Publicly reachable URL of an image.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PersistedFace object if successful.
     */
    public PersistedFace addFaceFromUrl(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull String url, String userData, List<Integer> targetFace) {
        return addFaceFromUrlAsync(largePersonGroupId, personId, url, userData, targetFace).block();
    }

    /**
     * Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param url Publicly reachable URL of an image.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<PersistedFace>> addFaceFromUrlWithRestResponseAsync(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull String url, String userData, List<Integer> targetFace) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        Validator.validate(targetFace);
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        String targetFaceConverted = this.client.serializerAdapter().serializeList(targetFace, CollectionFormat.CSV);
        return service.addFaceFromUrl(largePersonGroupId, personId, this.client.endpoint(), userData, targetFaceConverted, imageUrl);
    }

    /**
     * Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param url Publicly reachable URL of an image.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<PersistedFace> addFaceFromUrlAsync(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull String url, String userData, List<Integer> targetFace) {
        return addFaceFromUrlWithRestResponseAsync(largePersonGroupId, personId, url, userData, targetFace)
            .flatMap((SimpleResponse<PersistedFace> res) -> Mono.just(res.value()));
    }

    /**
     * Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PersistedFace object if successful.
     */
    public PersistedFace addFaceFromStream(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull long contentLength, @NonNull Flux<ByteBuffer> image) {
        return addFaceFromStreamAsync(largePersonGroupId, personId, contentLength, image).block();
    }

    /**
     * Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<PersistedFace>> addFaceFromStreamWithRestResponseAsync(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull long contentLength, @NonNull Flux<ByteBuffer> image) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        if (image == null) {
            throw new IllegalArgumentException("Parameter image is required and cannot be null.");
        }
        final String userData = null;
        final List<Integer> targetFace = null;
        String targetFaceConverted = this.client.serializerAdapter().serializeList(targetFace, CollectionFormat.CSV);
        return service.addFaceFromStream(largePersonGroupId, personId, this.client.endpoint(), userData, targetFaceConverted, contentLength, image);
    }

    /**
     * Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<PersistedFace> addFaceFromStreamAsync(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull long contentLength, @NonNull Flux<ByteBuffer> image) {
        return addFaceFromStreamWithRestResponseAsync(largePersonGroupId, personId, contentLength, image)
            .flatMap((SimpleResponse<PersistedFace> res) -> Mono.just(res.value()));
    }

    /**
     * Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param contentLength The content length.
     * @param image An image stream.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PersistedFace object if successful.
     */
    public PersistedFace addFaceFromStream(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull long contentLength, @NonNull Flux<ByteBuffer> image, String userData, List<Integer> targetFace) {
        return addFaceFromStreamAsync(largePersonGroupId, personId, contentLength, image, userData, targetFace).block();
    }

    /**
     * Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param contentLength The content length.
     * @param image An image stream.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<PersistedFace>> addFaceFromStreamWithRestResponseAsync(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull long contentLength, @NonNull Flux<ByteBuffer> image, String userData, List<Integer> targetFace) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        if (image == null) {
            throw new IllegalArgumentException("Parameter image is required and cannot be null.");
        }
        Validator.validate(targetFace);
        String targetFaceConverted = this.client.serializerAdapter().serializeList(targetFace, CollectionFormat.CSV);
        return service.addFaceFromStream(largePersonGroupId, personId, this.client.endpoint(), userData, targetFaceConverted, contentLength, image);
    }

    /**
     * Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param contentLength The content length.
     * @param image An image stream.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<PersistedFace> addFaceFromStreamAsync(@NonNull String largePersonGroupId, @NonNull UUID personId, @NonNull long contentLength, @NonNull Flux<ByteBuffer> image, String userData, List<Integer> targetFace) {
        return addFaceFromStreamWithRestResponseAsync(largePersonGroupId, personId, contentLength, image, userData, targetFace)
            .flatMap((SimpleResponse<PersistedFace> res) -> Mono.just(res.value()));
    }
}
