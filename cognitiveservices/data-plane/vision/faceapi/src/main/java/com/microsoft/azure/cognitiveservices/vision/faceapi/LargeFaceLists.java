/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.faceapi;

import com.microsoft.azure.cognitiveservices.vision.faceapi.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.LargeFaceList;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.TrainingStatus;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in LargeFaceLists.
 */
public interface LargeFaceLists {
    /**
     * Create an empty large face list. Up to 64 large face lists are allowed to exist in one subscription.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void create(String largeFaceListId);

    /**
     * Create an empty large face list. Up to 64 large face lists are allowed to exist in one subscription.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> createAsync(String largeFaceListId, final ServiceCallback<Void> serviceCallback);

    /**
     * Create an empty large face list. Up to 64 large face lists are allowed to exist in one subscription.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> createAsync(String largeFaceListId);

    /**
     * Create an empty large face list. Up to 64 large face lists are allowed to exist in one subscription.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> createWithServiceResponseAsync(String largeFaceListId);
    /**
     * Create an empty large face list. Up to 64 large face lists are allowed to exist in one subscription.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void create(String largeFaceListId, String name, String userData);

    /**
     * Create an empty large face list. Up to 64 large face lists are allowed to exist in one subscription.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> createAsync(String largeFaceListId, String name, String userData, final ServiceCallback<Void> serviceCallback);

    /**
     * Create an empty large face list. Up to 64 large face lists are allowed to exist in one subscription.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> createAsync(String largeFaceListId, String name, String userData);

    /**
     * Create an empty large face list. Up to 64 large face lists are allowed to exist in one subscription.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> createWithServiceResponseAsync(String largeFaceListId, String name, String userData);

    /**
     * Retrieve a large face list's information.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LargeFaceList object if successful.
     */
    LargeFaceList get(String largeFaceListId);

    /**
     * Retrieve a large face list's information.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<LargeFaceList> getAsync(String largeFaceListId, final ServiceCallback<LargeFaceList> serviceCallback);

    /**
     * Retrieve a large face list's information.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LargeFaceList object
     */
    Observable<LargeFaceList> getAsync(String largeFaceListId);

    /**
     * Retrieve a large face list's information.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LargeFaceList object
     */
    Observable<ServiceResponse<LargeFaceList>> getWithServiceResponseAsync(String largeFaceListId);

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void update(String largeFaceListId);

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateAsync(String largeFaceListId, final ServiceCallback<Void> serviceCallback);

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateAsync(String largeFaceListId);

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String largeFaceListId);
    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void update(String largeFaceListId, String name, String userData);

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateAsync(String largeFaceListId, String name, String userData, final ServiceCallback<Void> serviceCallback);

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateAsync(String largeFaceListId, String name, String userData);

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String largeFaceListId, String name, String userData);

    /**
     * Delete an existing large face list according to faceListId. Persisted face images in the large face list will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String largeFaceListId);

    /**
     * Delete an existing large face list according to faceListId. Persisted face images in the large face list will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(String largeFaceListId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete an existing large face list according to faceListId. Persisted face images in the large face list will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteAsync(String largeFaceListId);

    /**
     * Delete an existing large face list according to faceListId. Persisted face images in the large face list will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String largeFaceListId);

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrainingStatus object if successful.
     */
    TrainingStatus getTrainingStatus(String largeFaceListId);

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrainingStatus> getTrainingStatusAsync(String largeFaceListId, final ServiceCallback<TrainingStatus> serviceCallback);

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrainingStatus object
     */
    Observable<TrainingStatus> getTrainingStatusAsync(String largeFaceListId);

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrainingStatus object
     */
    Observable<ServiceResponse<TrainingStatus>> getTrainingStatusWithServiceResponseAsync(String largeFaceListId);

    /**
     * Retrieve information about all existing large face lists. Only largeFaceListId, name and userData will be returned.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;LargeFaceList&gt; object if successful.
     */
    List<LargeFaceList> list();

    /**
     * Retrieve information about all existing large face lists. Only largeFaceListId, name and userData will be returned.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<LargeFaceList>> listAsync(final ServiceCallback<List<LargeFaceList>> serviceCallback);

    /**
     * Retrieve information about all existing large face lists. Only largeFaceListId, name and userData will be returned.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LargeFaceList&gt; object
     */
    Observable<List<LargeFaceList>> listAsync();

    /**
     * Retrieve information about all existing large face lists. Only largeFaceListId, name and userData will be returned.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LargeFaceList&gt; object
     */
    Observable<ServiceResponse<List<LargeFaceList>>> listWithServiceResponseAsync();

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void train(String largeFaceListId);

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> trainAsync(String largeFaceListId, final ServiceCallback<Void> serviceCallback);

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> trainAsync(String largeFaceListId);

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> trainWithServiceResponseAsync(String largeFaceListId);

    /**
     * Delete an existing face from a large face list (given by a persistedFaceId and a largeFaceListId). Persisted image related to the face will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteFace(String largeFaceListId, UUID persistedFaceId);

    /**
     * Delete an existing face from a large face list (given by a persistedFaceId and a largeFaceListId). Persisted image related to the face will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteFaceAsync(String largeFaceListId, UUID persistedFaceId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete an existing face from a large face list (given by a persistedFaceId and a largeFaceListId). Persisted image related to the face will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteFaceAsync(String largeFaceListId, UUID persistedFaceId);

    /**
     * Delete an existing face from a large face list (given by a persistedFaceId and a largeFaceListId). Persisted image related to the face will also be deleted.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteFaceWithServiceResponseAsync(String largeFaceListId, UUID persistedFaceId);

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace getFace(String largeFaceListId, UUID persistedFaceId);

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PersistedFace> getFaceAsync(String largeFaceListId, UUID persistedFaceId, final ServiceCallback<PersistedFace> serviceCallback);

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> getFaceAsync(String largeFaceListId, UUID persistedFaceId);

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<ServiceResponse<PersistedFace>> getFaceWithServiceResponseAsync(String largeFaceListId, UUID persistedFaceId);

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateFace(String largeFaceListId, UUID persistedFaceId);

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateFaceAsync(String largeFaceListId, UUID persistedFaceId, final ServiceCallback<Void> serviceCallback);

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateFaceAsync(String largeFaceListId, UUID persistedFaceId);

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateFaceWithServiceResponseAsync(String largeFaceListId, UUID persistedFaceId);
    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateFace(String largeFaceListId, UUID persistedFaceId, String userData);

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateFaceAsync(String largeFaceListId, UUID persistedFaceId, String userData, final ServiceCallback<Void> serviceCallback);

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateFaceAsync(String largeFaceListId, UUID persistedFaceId, String userData);

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateFaceWithServiceResponseAsync(String largeFaceListId, UUID persistedFaceId, String userData);

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace addFaceFromUrl(String largeFaceListId, String url);

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PersistedFace> addFaceFromUrlAsync(String largeFaceListId, String url, final ServiceCallback<PersistedFace> serviceCallback);

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> addFaceFromUrlAsync(String largeFaceListId, String url);

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<ServiceResponse<PersistedFace>> addFaceFromUrlWithServiceResponseAsync(String largeFaceListId, String url);
    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace addFaceFromUrl(String largeFaceListId, String url, String userData, List<Integer> targetFace);

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PersistedFace> addFaceFromUrlAsync(String largeFaceListId, String url, String userData, List<Integer> targetFace, final ServiceCallback<PersistedFace> serviceCallback);

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> addFaceFromUrlAsync(String largeFaceListId, String url, String userData, List<Integer> targetFace);

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<ServiceResponse<PersistedFace>> addFaceFromUrlWithServiceResponseAsync(String largeFaceListId, String url, String userData, List<Integer> targetFace);

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PersistedFace&gt; object if successful.
     */
    List<PersistedFace> listFaces(String largeFaceListId);

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<PersistedFace>> listFacesAsync(String largeFaceListId, final ServiceCallback<List<PersistedFace>> serviceCallback);

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PersistedFace&gt; object
     */
    Observable<List<PersistedFace>> listFacesAsync(String largeFaceListId);

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PersistedFace&gt; object
     */
    Observable<ServiceResponse<List<PersistedFace>>> listFacesWithServiceResponseAsync(String largeFaceListId);
    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param start Starting face id to return (used to list a range of faces).
     * @param top Number of faces to return starting with the face id indicated by the 'start' parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PersistedFace&gt; object if successful.
     */
    List<PersistedFace> listFaces(String largeFaceListId, String start, Integer top);

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param start Starting face id to return (used to list a range of faces).
     * @param top Number of faces to return starting with the face id indicated by the 'start' parameter.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<PersistedFace>> listFacesAsync(String largeFaceListId, String start, Integer top, final ServiceCallback<List<PersistedFace>> serviceCallback);

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param start Starting face id to return (used to list a range of faces).
     * @param top Number of faces to return starting with the face id indicated by the 'start' parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PersistedFace&gt; object
     */
    Observable<List<PersistedFace>> listFacesAsync(String largeFaceListId, String start, Integer top);

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param start Starting face id to return (used to list a range of faces).
     * @param top Number of faces to return starting with the face id indicated by the 'start' parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PersistedFace&gt; object
     */
    Observable<ServiceResponse<List<PersistedFace>>> listFacesWithServiceResponseAsync(String largeFaceListId, String start, Integer top);

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace addFaceFromStream(String largeFaceListId, byte[] image);

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PersistedFace> addFaceFromStreamAsync(String largeFaceListId, byte[] image, final ServiceCallback<PersistedFace> serviceCallback);

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> addFaceFromStreamAsync(String largeFaceListId, byte[] image);

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<ServiceResponse<PersistedFace>> addFaceFromStreamWithServiceResponseAsync(String largeFaceListId, byte[] image);
    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace addFaceFromStream(String largeFaceListId, byte[] image, String userData, List<Integer> targetFace);

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PersistedFace> addFaceFromStreamAsync(String largeFaceListId, byte[] image, String userData, List<Integer> targetFace, final ServiceCallback<PersistedFace> serviceCallback);

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> addFaceFromStreamAsync(String largeFaceListId, byte[] image, String userData, List<Integer> targetFace);

    /**
     * Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<ServiceResponse<PersistedFace>> addFaceFromStreamWithServiceResponseAsync(String largeFaceListId, byte[] image, String userData, List<Integer> targetFace);

}
