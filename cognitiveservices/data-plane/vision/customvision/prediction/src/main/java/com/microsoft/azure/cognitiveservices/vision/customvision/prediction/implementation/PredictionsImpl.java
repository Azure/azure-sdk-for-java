/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.customvision.prediction.implementation;

import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.PredictImageWithNoStoreOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.PredictImageUrlWithNoStoreOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.PredictImageOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.PredictImageUrlOptionalParameter;
import okhttp3.MediaType;
import okhttp3.RequestBody;
import retrofit2.Retrofit;
import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction;
import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImageUrl;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.UUID;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Multipart;
import retrofit2.http.Part;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Predictions.
 */
public class PredictionsImpl implements Predictions {
    /** The Retrofit service to perform REST calls. */
    private PredictionsService service;
    /** The service client containing this operation class. */
    private PredictionEndpointImpl client;

    /**
     * Initializes an instance of PredictionsImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PredictionsImpl(Retrofit retrofit, PredictionEndpointImpl client) {
        this.service = retrofit.create(PredictionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Predictions to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PredictionsService {
        @Multipart
        @POST("{projectId}/image/nostore")
        Observable<Response<ResponseBody>> predictImageWithNoStore(@Path("projectId") UUID projectId, @Query("iterationId") UUID iterationId, @Query("application") String application, @Part("imageData") RequestBody imageData, @Header("Prediction-Key") String apiKey, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions predictImageUrlWithNoStore" })
        @POST("{projectId}/url/nostore")
        Observable<Response<ResponseBody>> predictImageUrlWithNoStore(@Path("projectId") UUID projectId, @Query("iterationId") UUID iterationId, @Query("application") String application, @Header("Prediction-Key") String apiKey, @Header("accept-language") String acceptLanguage, @Body ImageUrl imageUrl, @Header("User-Agent") String userAgent);

        @Multipart
        @POST("{projectId}/image")
        Observable<Response<ResponseBody>> predictImage(@Path("projectId") UUID projectId, @Query("iterationId") UUID iterationId, @Query("application") String application, @Part("imageData") RequestBody imageData, @Header("Prediction-Key") String apiKey, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions predictImageUrl" })
        @POST("{projectId}/url")
        Observable<Response<ResponseBody>> predictImageUrl(@Path("projectId") UUID projectId, @Query("iterationId") UUID iterationId, @Query("application") String application, @Header("Prediction-Key") String apiKey, @Header("accept-language") String acceptLanguage, @Body ImageUrl imageUrl, @Header("User-Agent") String userAgent);

    }


    /**
     * Predict an image without saving the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param predictImageWithNoStoreOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction predictImageWithNoStore(UUID projectId, byte[] imageData, PredictImageWithNoStoreOptionalParameter predictImageWithNoStoreOptionalParameter) {
        return predictImageWithNoStoreWithServiceResponseAsync(projectId, imageData, predictImageWithNoStoreOptionalParameter).toBlocking().single().body();
    }

    /**
     * Predict an image without saving the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param predictImageWithNoStoreOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> predictImageWithNoStoreAsync(UUID projectId, byte[] imageData, PredictImageWithNoStoreOptionalParameter predictImageWithNoStoreOptionalParameter, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(predictImageWithNoStoreWithServiceResponseAsync(projectId, imageData, predictImageWithNoStoreOptionalParameter), serviceCallback);
    }

    /**
     * Predict an image without saving the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param predictImageWithNoStoreOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> predictImageWithNoStoreAsync(UUID projectId, byte[] imageData, PredictImageWithNoStoreOptionalParameter predictImageWithNoStoreOptionalParameter) {
        return predictImageWithNoStoreWithServiceResponseAsync(projectId, imageData, predictImageWithNoStoreOptionalParameter).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Predict an image without saving the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param predictImageWithNoStoreOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> predictImageWithNoStoreWithServiceResponseAsync(UUID projectId, byte[] imageData, PredictImageWithNoStoreOptionalParameter predictImageWithNoStoreOptionalParameter) {
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.client.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiKey() is required and cannot be null.");
        }
        final UUID iterationId = predictImageWithNoStoreOptionalParameter != null ? predictImageWithNoStoreOptionalParameter.iterationId() : null;
        final String application = predictImageWithNoStoreOptionalParameter != null ? predictImageWithNoStoreOptionalParameter.application() : null;

        return predictImageWithNoStoreWithServiceResponseAsync(projectId, imageData, iterationId, application);
    }

    /**
     * Predict an image without saving the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> predictImageWithNoStoreWithServiceResponseAsync(UUID projectId, byte[] imageData, UUID iterationId, String application) {
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.client.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiKey() is required and cannot be null.");
        }
        RequestBody imageDataConverted = RequestBody.create(MediaType.parse("multipart/form-data"), imageData);
        return service.predictImageWithNoStore(projectId, iterationId, application, imageDataConverted, this.client.apiKey(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = predictImageWithNoStoreDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImagePrediction> predictImageWithNoStoreDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ImagePrediction, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ImagePrediction>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    @Override
    public PredictionsPredictImageWithNoStoreParameters predictImageWithNoStore() {
        return new PredictionsPredictImageWithNoStoreParameters(this);
    }

    /**
     * Internal class implementing PredictionsPredictImageWithNoStoreDefinition.
     */
    class PredictionsPredictImageWithNoStoreParameters implements PredictionsPredictImageWithNoStoreDefinition {
        private PredictionsImpl parent;
        private UUID projectId;
        private byte[] imageData;
        private UUID iterationId;
        private String application;

        /**
         * Constructor.
         * @param parent the parent object.
         */
        PredictionsPredictImageWithNoStoreParameters(PredictionsImpl parent) {
            this.parent = parent;
        }

        @Override
        public PredictionsPredictImageWithNoStoreParameters withProjectId(UUID projectId) {
            this.projectId = projectId;
            return this;
        }

        @Override
        public PredictionsPredictImageWithNoStoreParameters withImageData(byte[] imageData) {
            this.imageData = imageData;
            return this;
        }

        @Override
        public PredictionsPredictImageWithNoStoreParameters withIterationId(UUID iterationId) {
            this.iterationId = iterationId;
            return this;
        }

        @Override
        public PredictionsPredictImageWithNoStoreParameters withApplication(String application) {
            this.application = application;
            return this;
        }

        @Override
        public ImagePrediction execute() {
        return predictImageWithNoStoreWithServiceResponseAsync(projectId, imageData, iterationId, application).toBlocking().single().body();
    }

        @Override
        public Observable<ImagePrediction> executeAsync() {
            return predictImageWithNoStoreWithServiceResponseAsync(projectId, imageData, iterationId, application).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
                @Override
                public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                    return response.body();
                }
            });
        }
    }


    /**
     * Predict an image url without saving the result.
     *
     * @param projectId The project id
     * @param predictImageUrlWithNoStoreOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction predictImageUrlWithNoStore(UUID projectId, PredictImageUrlWithNoStoreOptionalParameter predictImageUrlWithNoStoreOptionalParameter) {
        return predictImageUrlWithNoStoreWithServiceResponseAsync(projectId, predictImageUrlWithNoStoreOptionalParameter).toBlocking().single().body();
    }

    /**
     * Predict an image url without saving the result.
     *
     * @param projectId The project id
     * @param predictImageUrlWithNoStoreOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> predictImageUrlWithNoStoreAsync(UUID projectId, PredictImageUrlWithNoStoreOptionalParameter predictImageUrlWithNoStoreOptionalParameter, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(predictImageUrlWithNoStoreWithServiceResponseAsync(projectId, predictImageUrlWithNoStoreOptionalParameter), serviceCallback);
    }

    /**
     * Predict an image url without saving the result.
     *
     * @param projectId The project id
     * @param predictImageUrlWithNoStoreOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> predictImageUrlWithNoStoreAsync(UUID projectId, PredictImageUrlWithNoStoreOptionalParameter predictImageUrlWithNoStoreOptionalParameter) {
        return predictImageUrlWithNoStoreWithServiceResponseAsync(projectId, predictImageUrlWithNoStoreOptionalParameter).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Predict an image url without saving the result.
     *
     * @param projectId The project id
     * @param predictImageUrlWithNoStoreOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> predictImageUrlWithNoStoreWithServiceResponseAsync(UUID projectId, PredictImageUrlWithNoStoreOptionalParameter predictImageUrlWithNoStoreOptionalParameter) {
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.client.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiKey() is required and cannot be null.");
        }
        final UUID iterationId = predictImageUrlWithNoStoreOptionalParameter != null ? predictImageUrlWithNoStoreOptionalParameter.iterationId() : null;
        final String application = predictImageUrlWithNoStoreOptionalParameter != null ? predictImageUrlWithNoStoreOptionalParameter.application() : null;
        final String url = predictImageUrlWithNoStoreOptionalParameter != null ? predictImageUrlWithNoStoreOptionalParameter.url() : null;

        return predictImageUrlWithNoStoreWithServiceResponseAsync(projectId, iterationId, application, url);
    }

    /**
     * Predict an image url without saving the result.
     *
     * @param projectId The project id
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @param url the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> predictImageUrlWithNoStoreWithServiceResponseAsync(UUID projectId, UUID iterationId, String application, String url) {
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.client.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiKey() is required and cannot be null.");
        }
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        return service.predictImageUrlWithNoStore(projectId, iterationId, application, this.client.apiKey(), this.client.acceptLanguage(), imageUrl, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = predictImageUrlWithNoStoreDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImagePrediction> predictImageUrlWithNoStoreDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ImagePrediction, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ImagePrediction>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    @Override
    public PredictionsPredictImageUrlWithNoStoreParameters predictImageUrlWithNoStore() {
        return new PredictionsPredictImageUrlWithNoStoreParameters(this);
    }

    /**
     * Internal class implementing PredictionsPredictImageUrlWithNoStoreDefinition.
     */
    class PredictionsPredictImageUrlWithNoStoreParameters implements PredictionsPredictImageUrlWithNoStoreDefinition {
        private PredictionsImpl parent;
        private UUID projectId;
        private UUID iterationId;
        private String application;
        private String url;

        /**
         * Constructor.
         * @param parent the parent object.
         */
        PredictionsPredictImageUrlWithNoStoreParameters(PredictionsImpl parent) {
            this.parent = parent;
        }

        @Override
        public PredictionsPredictImageUrlWithNoStoreParameters withProjectId(UUID projectId) {
            this.projectId = projectId;
            return this;
        }

        @Override
        public PredictionsPredictImageUrlWithNoStoreParameters withIterationId(UUID iterationId) {
            this.iterationId = iterationId;
            return this;
        }

        @Override
        public PredictionsPredictImageUrlWithNoStoreParameters withApplication(String application) {
            this.application = application;
            return this;
        }

        @Override
        public PredictionsPredictImageUrlWithNoStoreParameters withUrl(String url) {
            this.url = url;
            return this;
        }

        @Override
        public ImagePrediction execute() {
        return predictImageUrlWithNoStoreWithServiceResponseAsync(projectId, iterationId, application, url).toBlocking().single().body();
    }

        @Override
        public Observable<ImagePrediction> executeAsync() {
            return predictImageUrlWithNoStoreWithServiceResponseAsync(projectId, iterationId, application, url).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
                @Override
                public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                    return response.body();
                }
            });
        }
    }


    /**
     * Predict an image and saves the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param predictImageOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction predictImage(UUID projectId, byte[] imageData, PredictImageOptionalParameter predictImageOptionalParameter) {
        return predictImageWithServiceResponseAsync(projectId, imageData, predictImageOptionalParameter).toBlocking().single().body();
    }

    /**
     * Predict an image and saves the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param predictImageOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> predictImageAsync(UUID projectId, byte[] imageData, PredictImageOptionalParameter predictImageOptionalParameter, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(predictImageWithServiceResponseAsync(projectId, imageData, predictImageOptionalParameter), serviceCallback);
    }

    /**
     * Predict an image and saves the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param predictImageOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> predictImageAsync(UUID projectId, byte[] imageData, PredictImageOptionalParameter predictImageOptionalParameter) {
        return predictImageWithServiceResponseAsync(projectId, imageData, predictImageOptionalParameter).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Predict an image and saves the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param predictImageOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> predictImageWithServiceResponseAsync(UUID projectId, byte[] imageData, PredictImageOptionalParameter predictImageOptionalParameter) {
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.client.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiKey() is required and cannot be null.");
        }
        final UUID iterationId = predictImageOptionalParameter != null ? predictImageOptionalParameter.iterationId() : null;
        final String application = predictImageOptionalParameter != null ? predictImageOptionalParameter.application() : null;

        return predictImageWithServiceResponseAsync(projectId, imageData, iterationId, application);
    }

    /**
     * Predict an image and saves the result.
     *
     * @param projectId The project id
     * @param imageData the InputStream value
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> predictImageWithServiceResponseAsync(UUID projectId, byte[] imageData, UUID iterationId, String application) {
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.client.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiKey() is required and cannot be null.");
        }
        RequestBody imageDataConverted = RequestBody.create(MediaType.parse("multipart/form-data"), imageData);
        return service.predictImage(projectId, iterationId, application, imageDataConverted, this.client.apiKey(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = predictImageDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImagePrediction> predictImageDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ImagePrediction, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ImagePrediction>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    @Override
    public PredictionsPredictImageParameters predictImage() {
        return new PredictionsPredictImageParameters(this);
    }

    /**
     * Internal class implementing PredictionsPredictImageDefinition.
     */
    class PredictionsPredictImageParameters implements PredictionsPredictImageDefinition {
        private PredictionsImpl parent;
        private UUID projectId;
        private byte[] imageData;
        private UUID iterationId;
        private String application;

        /**
         * Constructor.
         * @param parent the parent object.
         */
        PredictionsPredictImageParameters(PredictionsImpl parent) {
            this.parent = parent;
        }

        @Override
        public PredictionsPredictImageParameters withProjectId(UUID projectId) {
            this.projectId = projectId;
            return this;
        }

        @Override
        public PredictionsPredictImageParameters withImageData(byte[] imageData) {
            this.imageData = imageData;
            return this;
        }

        @Override
        public PredictionsPredictImageParameters withIterationId(UUID iterationId) {
            this.iterationId = iterationId;
            return this;
        }

        @Override
        public PredictionsPredictImageParameters withApplication(String application) {
            this.application = application;
            return this;
        }

        @Override
        public ImagePrediction execute() {
        return predictImageWithServiceResponseAsync(projectId, imageData, iterationId, application).toBlocking().single().body();
    }

        @Override
        public Observable<ImagePrediction> executeAsync() {
            return predictImageWithServiceResponseAsync(projectId, imageData, iterationId, application).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
                @Override
                public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                    return response.body();
                }
            });
        }
    }


    /**
     * Predict an image url and saves the result.
     *
     * @param projectId The project id
     * @param predictImageUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction predictImageUrl(UUID projectId, PredictImageUrlOptionalParameter predictImageUrlOptionalParameter) {
        return predictImageUrlWithServiceResponseAsync(projectId, predictImageUrlOptionalParameter).toBlocking().single().body();
    }

    /**
     * Predict an image url and saves the result.
     *
     * @param projectId The project id
     * @param predictImageUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> predictImageUrlAsync(UUID projectId, PredictImageUrlOptionalParameter predictImageUrlOptionalParameter, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(predictImageUrlWithServiceResponseAsync(projectId, predictImageUrlOptionalParameter), serviceCallback);
    }

    /**
     * Predict an image url and saves the result.
     *
     * @param projectId The project id
     * @param predictImageUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> predictImageUrlAsync(UUID projectId, PredictImageUrlOptionalParameter predictImageUrlOptionalParameter) {
        return predictImageUrlWithServiceResponseAsync(projectId, predictImageUrlOptionalParameter).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Predict an image url and saves the result.
     *
     * @param projectId The project id
     * @param predictImageUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> predictImageUrlWithServiceResponseAsync(UUID projectId, PredictImageUrlOptionalParameter predictImageUrlOptionalParameter) {
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.client.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiKey() is required and cannot be null.");
        }
        final UUID iterationId = predictImageUrlOptionalParameter != null ? predictImageUrlOptionalParameter.iterationId() : null;
        final String application = predictImageUrlOptionalParameter != null ? predictImageUrlOptionalParameter.application() : null;
        final String url = predictImageUrlOptionalParameter != null ? predictImageUrlOptionalParameter.url() : null;

        return predictImageUrlWithServiceResponseAsync(projectId, iterationId, application, url);
    }

    /**
     * Predict an image url and saves the result.
     *
     * @param projectId The project id
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified
     * @param application Optional. Specifies the name of application using the endpoint
     * @param url the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> predictImageUrlWithServiceResponseAsync(UUID projectId, UUID iterationId, String application, String url) {
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.client.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiKey() is required and cannot be null.");
        }
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        return service.predictImageUrl(projectId, iterationId, application, this.client.apiKey(), this.client.acceptLanguage(), imageUrl, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = predictImageUrlDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImagePrediction> predictImageUrlDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ImagePrediction, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ImagePrediction>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    @Override
    public PredictionsPredictImageUrlParameters predictImageUrl() {
        return new PredictionsPredictImageUrlParameters(this);
    }

    /**
     * Internal class implementing PredictionsPredictImageUrlDefinition.
     */
    class PredictionsPredictImageUrlParameters implements PredictionsPredictImageUrlDefinition {
        private PredictionsImpl parent;
        private UUID projectId;
        private UUID iterationId;
        private String application;
        private String url;

        /**
         * Constructor.
         * @param parent the parent object.
         */
        PredictionsPredictImageUrlParameters(PredictionsImpl parent) {
            this.parent = parent;
        }

        @Override
        public PredictionsPredictImageUrlParameters withProjectId(UUID projectId) {
            this.projectId = projectId;
            return this;
        }

        @Override
        public PredictionsPredictImageUrlParameters withIterationId(UUID iterationId) {
            this.iterationId = iterationId;
            return this;
        }

        @Override
        public PredictionsPredictImageUrlParameters withApplication(String application) {
            this.application = application;
            return this;
        }

        @Override
        public PredictionsPredictImageUrlParameters withUrl(String url) {
            this.url = url;
            return this;
        }

        @Override
        public ImagePrediction execute() {
        return predictImageUrlWithServiceResponseAsync(projectId, iterationId, application, url).toBlocking().single().body();
    }

        @Override
        public Observable<ImagePrediction> executeAsync() {
            return predictImageUrlWithServiceResponseAsync(projectId, iterationId, application, url).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
                @Override
                public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                    return response.body();
                }
            });
        }
    }

}
