/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.customvision.prediction.implementation;

import com.azure.common.ServiceClient;
import com.azure.common.annotations.BodyParam;
import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.FormParam;
import com.azure.common.annotations.HeaderParam;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.PathParam;
import com.azure.common.annotations.POST;
import com.azure.common.annotations.QueryParam;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.http.HttpPipeline;
import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.implementation.RestProxy;
import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.CustomVisionPredictionClient;
import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.CustomVisionErrorException;
import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction;
import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImageUrl;
import java.nio.ByteBuffer;
import java.util.UUID;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * Initializes a new instance of the CustomVisionPredictionClient type.
 */
public final class CustomVisionPredictionClientImpl extends ServiceClient implements CustomVisionPredictionClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private CustomVisionPredictionClientService service;

    /**
     * API key.
     */
    private String apiKey;

    /**
     * Gets API key.
     *
     * @return the apiKey value.
     */
    public String apiKey() {
        return this.apiKey;
    }

    /**
     * Sets API key.
     *
     * @param apiKey the apiKey value.
     * @return the service client itself.
     */
    public CustomVisionPredictionClientImpl withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Supported Cognitive Services endpoints.
     */
    private String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints.
     *
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Sets Supported Cognitive Services endpoints.
     *
     * @param endpoint the endpoint value.
     * @return the service client itself.
     */
    public CustomVisionPredictionClientImpl withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Initializes an instance of CustomVisionPredictionClient client.
     */
    public CustomVisionPredictionClientImpl() {
        this(RestProxy.createDefaultPipeline());
    }

    /**
     * Initializes an instance of CustomVisionPredictionClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     */
    public CustomVisionPredictionClientImpl(@NonNull HttpPipeline httpPipeline) {
        super(httpPipeline);
        this.service = RestProxy.create(CustomVisionPredictionClientService.class, this);
    }

    /**
     * The interface defining all the services for CustomVisionPredictionClient
     * to be used by the proxy service to perform REST calls.
     */
    @Host("{Endpoint}/customvision/v3.0/prediction")
    private interface CustomVisionPredictionClientService {
        @POST("{projectId}/classify/iterations/{publishedName}/url")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<ImagePrediction>> classifyImageUrl(@PathParam("projectId") UUID projectId, @PathParam("publishedName") String publishedName, @HostParam("Endpoint") String endpoint, @QueryParam("application") String application, @HeaderParam("Prediction-Key") String apiKey, @BodyParam("application/json; charset=utf-8") ImageUrl imageUrl);

        // @Multipart not supported by RestProxy
        @POST("{projectId}/classify/iterations/{publishedName}/image")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<ImagePrediction>> classifyImage(@PathParam("projectId") UUID projectId, @PathParam("publishedName") String publishedName, @HostParam("Endpoint") String endpoint, @QueryParam("application") String application, @FormParam("imageData") Flux<ByteBuffer> imageData, @HeaderParam("Prediction-Key") String apiKey);

        @POST("{projectId}/classify/iterations/{publishedName}/url/nostore")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<ImagePrediction>> classifyImageUrlWithNoStore(@PathParam("projectId") UUID projectId, @PathParam("publishedName") String publishedName, @HostParam("Endpoint") String endpoint, @QueryParam("application") String application, @HeaderParam("Prediction-Key") String apiKey, @BodyParam("application/json; charset=utf-8") ImageUrl imageUrl);

        // @Multipart not supported by RestProxy
        @POST("{projectId}/classify/iterations/{publishedName}/image/nostore")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<ImagePrediction>> classifyImageWithNoStore(@PathParam("projectId") UUID projectId, @PathParam("publishedName") String publishedName, @HostParam("Endpoint") String endpoint, @QueryParam("application") String application, @FormParam("imageData") Flux<ByteBuffer> imageData, @HeaderParam("Prediction-Key") String apiKey);

        @POST("{projectId}/detect/iterations/{publishedName}/url")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<ImagePrediction>> detectImageUrl(@PathParam("projectId") UUID projectId, @PathParam("publishedName") String publishedName, @HostParam("Endpoint") String endpoint, @QueryParam("application") String application, @HeaderParam("Prediction-Key") String apiKey, @BodyParam("application/json; charset=utf-8") ImageUrl imageUrl);

        // @Multipart not supported by RestProxy
        @POST("{projectId}/detect/iterations/{publishedName}/image")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<ImagePrediction>> detectImage(@PathParam("projectId") UUID projectId, @PathParam("publishedName") String publishedName, @HostParam("Endpoint") String endpoint, @QueryParam("application") String application, @FormParam("imageData") Flux<ByteBuffer> imageData, @HeaderParam("Prediction-Key") String apiKey);

        @POST("{projectId}/detect/iterations/{publishedName}/url/nostore")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<ImagePrediction>> detectImageUrlWithNoStore(@PathParam("projectId") UUID projectId, @PathParam("publishedName") String publishedName, @HostParam("Endpoint") String endpoint, @QueryParam("application") String application, @HeaderParam("Prediction-Key") String apiKey, @BodyParam("application/json; charset=utf-8") ImageUrl imageUrl);

        // @Multipart not supported by RestProxy
        @POST("{projectId}/detect/iterations/{publishedName}/image/nostore")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<ImagePrediction>> detectImageWithNoStore(@PathParam("projectId") UUID projectId, @PathParam("publishedName") String publishedName, @HostParam("Endpoint") String endpoint, @QueryParam("application") String application, @FormParam("imageData") Flux<ByteBuffer> imageData, @HeaderParam("Prediction-Key") String apiKey);
    }

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction classifyImageUrl(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url) {
        return classifyImageUrlAsync(projectId, publishedName, url).block();
    }

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> classifyImageUrlWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (publishedName == null) {
            throw new IllegalArgumentException("Parameter publishedName is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        final String application = null;
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        return service.classifyImageUrl(projectId, publishedName, this.endpoint(), application, this.apiKey(), imageUrl);
    }

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> classifyImageUrlAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url) {
        return classifyImageUrlWithRestResponseAsync(projectId, publishedName, url)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction classifyImageUrl(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application) {
        return classifyImageUrlAsync(projectId, publishedName, url, application).block();
    }

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> classifyImageUrlWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (publishedName == null) {
            throw new IllegalArgumentException("Parameter publishedName is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        return service.classifyImageUrl(projectId, publishedName, this.endpoint(), application, this.apiKey(), imageUrl);
    }

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> classifyImageUrlAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application) {
        return classifyImageUrlWithRestResponseAsync(projectId, publishedName, url, application)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction classifyImage(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData) {
        return classifyImageAsync(projectId, publishedName, imageData).block();
    }

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> classifyImageWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (publishedName == null) {
            throw new IllegalArgumentException("Parameter publishedName is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final String application = null;
        return service.classifyImage(projectId, publishedName, this.endpoint(), application, imageData, this.apiKey());
    }

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> classifyImageAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData) {
        return classifyImageWithRestResponseAsync(projectId, publishedName, imageData)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction classifyImage(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application) {
        return classifyImageAsync(projectId, publishedName, imageData, application).block();
    }

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> classifyImageWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (publishedName == null) {
            throw new IllegalArgumentException("Parameter publishedName is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.classifyImage(projectId, publishedName, this.endpoint(), application, imageData, this.apiKey());
    }

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> classifyImageAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application) {
        return classifyImageWithRestResponseAsync(projectId, publishedName, imageData, application)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction classifyImageUrlWithNoStore(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url) {
        return classifyImageUrlWithNoStoreAsync(projectId, publishedName, url).block();
    }

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> classifyImageUrlWithNoStoreWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (publishedName == null) {
            throw new IllegalArgumentException("Parameter publishedName is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        final String application = null;
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        return service.classifyImageUrlWithNoStore(projectId, publishedName, this.endpoint(), application, this.apiKey(), imageUrl);
    }

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> classifyImageUrlWithNoStoreAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url) {
        return classifyImageUrlWithNoStoreWithRestResponseAsync(projectId, publishedName, url)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction classifyImageUrlWithNoStore(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application) {
        return classifyImageUrlWithNoStoreAsync(projectId, publishedName, url, application).block();
    }

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> classifyImageUrlWithNoStoreWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (publishedName == null) {
            throw new IllegalArgumentException("Parameter publishedName is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        return service.classifyImageUrlWithNoStore(projectId, publishedName, this.endpoint(), application, this.apiKey(), imageUrl);
    }

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> classifyImageUrlWithNoStoreAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application) {
        return classifyImageUrlWithNoStoreWithRestResponseAsync(projectId, publishedName, url, application)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction classifyImageWithNoStore(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData) {
        return classifyImageWithNoStoreAsync(projectId, publishedName, imageData).block();
    }

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> classifyImageWithNoStoreWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (publishedName == null) {
            throw new IllegalArgumentException("Parameter publishedName is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final String application = null;
        return service.classifyImageWithNoStore(projectId, publishedName, this.endpoint(), application, imageData, this.apiKey());
    }

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> classifyImageWithNoStoreAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData) {
        return classifyImageWithNoStoreWithRestResponseAsync(projectId, publishedName, imageData)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction classifyImageWithNoStore(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application) {
        return classifyImageWithNoStoreAsync(projectId, publishedName, imageData, application).block();
    }

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> classifyImageWithNoStoreWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (publishedName == null) {
            throw new IllegalArgumentException("Parameter publishedName is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.classifyImageWithNoStore(projectId, publishedName, this.endpoint(), application, imageData, this.apiKey());
    }

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> classifyImageWithNoStoreAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application) {
        return classifyImageWithNoStoreWithRestResponseAsync(projectId, publishedName, imageData, application)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction detectImageUrl(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url) {
        return detectImageUrlAsync(projectId, publishedName, url).block();
    }

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> detectImageUrlWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (publishedName == null) {
            throw new IllegalArgumentException("Parameter publishedName is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        final String application = null;
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        return service.detectImageUrl(projectId, publishedName, this.endpoint(), application, this.apiKey(), imageUrl);
    }

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> detectImageUrlAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url) {
        return detectImageUrlWithRestResponseAsync(projectId, publishedName, url)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction detectImageUrl(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application) {
        return detectImageUrlAsync(projectId, publishedName, url, application).block();
    }

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> detectImageUrlWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (publishedName == null) {
            throw new IllegalArgumentException("Parameter publishedName is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        return service.detectImageUrl(projectId, publishedName, this.endpoint(), application, this.apiKey(), imageUrl);
    }

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> detectImageUrlAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application) {
        return detectImageUrlWithRestResponseAsync(projectId, publishedName, url, application)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction detectImage(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData) {
        return detectImageAsync(projectId, publishedName, imageData).block();
    }

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> detectImageWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (publishedName == null) {
            throw new IllegalArgumentException("Parameter publishedName is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final String application = null;
        return service.detectImage(projectId, publishedName, this.endpoint(), application, imageData, this.apiKey());
    }

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> detectImageAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData) {
        return detectImageWithRestResponseAsync(projectId, publishedName, imageData)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction detectImage(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application) {
        return detectImageAsync(projectId, publishedName, imageData, application).block();
    }

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> detectImageWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (publishedName == null) {
            throw new IllegalArgumentException("Parameter publishedName is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.detectImage(projectId, publishedName, this.endpoint(), application, imageData, this.apiKey());
    }

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> detectImageAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application) {
        return detectImageWithRestResponseAsync(projectId, publishedName, imageData, application)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction detectImageUrlWithNoStore(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url) {
        return detectImageUrlWithNoStoreAsync(projectId, publishedName, url).block();
    }

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> detectImageUrlWithNoStoreWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (publishedName == null) {
            throw new IllegalArgumentException("Parameter publishedName is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        final String application = null;
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        return service.detectImageUrlWithNoStore(projectId, publishedName, this.endpoint(), application, this.apiKey(), imageUrl);
    }

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> detectImageUrlWithNoStoreAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url) {
        return detectImageUrlWithNoStoreWithRestResponseAsync(projectId, publishedName, url)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction detectImageUrlWithNoStore(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application) {
        return detectImageUrlWithNoStoreAsync(projectId, publishedName, url, application).block();
    }

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> detectImageUrlWithNoStoreWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (publishedName == null) {
            throw new IllegalArgumentException("Parameter publishedName is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        return service.detectImageUrlWithNoStore(projectId, publishedName, this.endpoint(), application, this.apiKey(), imageUrl);
    }

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> detectImageUrlWithNoStoreAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application) {
        return detectImageUrlWithNoStoreWithRestResponseAsync(projectId, publishedName, url, application)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction detectImageWithNoStore(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData) {
        return detectImageWithNoStoreAsync(projectId, publishedName, imageData).block();
    }

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> detectImageWithNoStoreWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (publishedName == null) {
            throw new IllegalArgumentException("Parameter publishedName is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final String application = null;
        return service.detectImageWithNoStore(projectId, publishedName, this.endpoint(), application, imageData, this.apiKey());
    }

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> detectImageWithNoStoreAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData) {
        return detectImageWithNoStoreWithRestResponseAsync(projectId, publishedName, imageData)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction detectImageWithNoStore(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application) {
        return detectImageWithNoStoreAsync(projectId, publishedName, imageData, application).block();
    }

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> detectImageWithNoStoreWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (publishedName == null) {
            throw new IllegalArgumentException("Parameter publishedName is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.detectImageWithNoStore(projectId, publishedName, this.endpoint(), application, imageData, this.apiKey());
    }

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> detectImageWithNoStoreAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application) {
        return detectImageWithNoStoreWithRestResponseAsync(projectId, publishedName, imageData, application)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }
}
