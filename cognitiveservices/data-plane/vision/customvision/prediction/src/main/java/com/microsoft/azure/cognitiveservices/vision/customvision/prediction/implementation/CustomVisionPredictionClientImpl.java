/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.customvision.prediction.implementation;

import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureClient;
import com.microsoft.azure.AzureServiceClient;
import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.CustomVisionPredictionClient;
import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.CustomVisionErrorException;
import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction;
import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImageUrl;
import com.microsoft.rest.credentials.ServiceClientCredentials;
import com.microsoft.rest.RestClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.InputStream;
import java.io.IOException;
import java.util.UUID;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Multipart;
import retrofit2.http.Part;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * Initializes a new instance of the CustomVisionPredictionClientImpl class.
 */
public class CustomVisionPredictionClientImpl extends AzureServiceClient implements CustomVisionPredictionClient {
    /** The Retrofit service to perform REST calls. */
    private CustomVisionPredictionClientService service;
    /** the {@link AzureClient} used for long running operations. */
    private AzureClient azureClient;

    /**
     * Gets the {@link AzureClient} used for long running operations.
     * @return the azure client;
     */
    public AzureClient getAzureClient() {
        return this.azureClient;
    }

    /**  */
    private String apiKey;

    /**
     * Gets
     *
     * @return the apiKey value.
     */
    public String apiKey() {
        return this.apiKey;
    }

    /**
     * Sets
     *
     * @param apiKey the apiKey value.
     * @return the service client itself
     */
    public CustomVisionPredictionClientImpl withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }

    /** Supported Cognitive Services endpoints. */
    private String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints.
     *
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Sets Supported Cognitive Services endpoints.
     *
     * @param endpoint the endpoint value.
     * @return the service client itself
     */
    public CustomVisionPredictionClientImpl withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /** The preferred language for the response. */
    private String acceptLanguage;

    /**
     * Gets The preferred language for the response.
     *
     * @return the acceptLanguage value.
     */
    public String acceptLanguage() {
        return this.acceptLanguage;
    }

    /**
     * Sets The preferred language for the response.
     *
     * @param acceptLanguage the acceptLanguage value.
     * @return the service client itself
     */
    public CustomVisionPredictionClientImpl withAcceptLanguage(String acceptLanguage) {
        this.acceptLanguage = acceptLanguage;
        return this;
    }

    /** The retry timeout in seconds for Long Running Operations. Default value is 30. */
    private int longRunningOperationRetryTimeout;

    /**
     * Gets The retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @return the longRunningOperationRetryTimeout value.
     */
    public int longRunningOperationRetryTimeout() {
        return this.longRunningOperationRetryTimeout;
    }

    /**
     * Sets The retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @param longRunningOperationRetryTimeout the longRunningOperationRetryTimeout value.
     * @return the service client itself
     */
    public CustomVisionPredictionClientImpl withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout) {
        this.longRunningOperationRetryTimeout = longRunningOperationRetryTimeout;
        return this;
    }

    /** Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true. */
    private boolean generateClientRequestId;

    /**
     * Gets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @return the generateClientRequestId value.
     */
    public boolean generateClientRequestId() {
        return this.generateClientRequestId;
    }

    /**
     * Sets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @param generateClientRequestId the generateClientRequestId value.
     * @return the service client itself
     */
    public CustomVisionPredictionClientImpl withGenerateClientRequestId(boolean generateClientRequestId) {
        this.generateClientRequestId = generateClientRequestId;
        return this;
    }

    /**
     * Initializes an instance of CustomVisionPredictionClient client.
     *
     * @param credentials the management credentials for Azure
     */
    public CustomVisionPredictionClientImpl(ServiceClientCredentials credentials) {
        this("https://{Endpoint}/customvision/v3.0/prediction", credentials);
    }

    /**
     * Initializes an instance of CustomVisionPredictionClient client.
     *
     * @param baseUrl the base URL of the host
     * @param credentials the management credentials for Azure
     */
    private CustomVisionPredictionClientImpl(String baseUrl, ServiceClientCredentials credentials) {
        super(baseUrl, credentials);
        initialize();
    }

    /**
     * Initializes an instance of CustomVisionPredictionClient client.
     *
     * @param restClient the REST client to connect to Azure.
     */
    public CustomVisionPredictionClientImpl(RestClient restClient) {
        super(restClient);
        initialize();
    }

    protected void initialize() {
        this.acceptLanguage = "en-US";
        this.longRunningOperationRetryTimeout = 30;
        this.generateClientRequestId = true;
        this.azureClient = new AzureClient(this);
        initializeService();
    }

    /**
     * Gets the User-Agent header for the client.
     *
     * @return the user agent string.
     */
    @Override
    public String userAgent() {
        return String.format("%s (%s, %s)", super.userAgent(), "CustomVisionPredictionClient", "3.0");
    }

    private void initializeService() {
        service = restClient().retrofit().create(CustomVisionPredictionClientService.class);
    }

    /**
     * The interface defining all the services for CustomVisionPredictionClient to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CustomVisionPredictionClientService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.CustomVisionPredictionClient classifyImageUrl" })
        @POST("{projectId}/classify/models/{name}/url")
        Observable<Response<ResponseBody>> classifyImageUrl(@Path("projectId") UUID projectId, @Path("name") String name, @Query("application") String application, @Header("Prediction-Key") String apiKey, @Header("accept-language") String acceptLanguage, @Body ImageUrl imageUrl, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Multipart
        @POST("{projectId}/classify/models/{name}/image")
        Observable<Response<ResponseBody>> classifyImage(@Path("projectId") UUID projectId, @Path("name") String name, @Query("application") String application, @Part("imageData") RequestBody imageData, @Header("Prediction-Key") String apiKey, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.CustomVisionPredictionClient classifyImageUrlWithNoStore" })
        @POST("{projectId}/classify/models/{name}/url/nostore")
        Observable<Response<ResponseBody>> classifyImageUrlWithNoStore(@Path("projectId") UUID projectId, @Path("name") String name, @Query("application") String application, @Header("Prediction-Key") String apiKey, @Header("accept-language") String acceptLanguage, @Body ImageUrl imageUrl, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Multipart
        @POST("{projectId}/classify/models/{name}/image/nostore")
        Observable<Response<ResponseBody>> classifyImageWithNoStore(@Path("projectId") UUID projectId, @Path("name") String name, @Query("application") String application, @Part("imageData") RequestBody imageData, @Header("Prediction-Key") String apiKey, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.CustomVisionPredictionClient detectImageUrl" })
        @POST("{projectId}/detect/models/{name}/url")
        Observable<Response<ResponseBody>> detectImageUrl(@Path("projectId") UUID projectId, @Path("name") String name, @Query("application") String application, @Header("Prediction-Key") String apiKey, @Header("accept-language") String acceptLanguage, @Body ImageUrl imageUrl, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Multipart
        @POST("{projectId}/detect/models/{name}/image")
        Observable<Response<ResponseBody>> detectImage(@Path("projectId") UUID projectId, @Path("name") String name, @Query("application") String application, @Part("imageData") RequestBody imageData, @Header("Prediction-Key") String apiKey, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.CustomVisionPredictionClient detectImageUrlWithNoStore" })
        @POST("{projectId}/detect/models/{name}/url/nostore")
        Observable<Response<ResponseBody>> detectImageUrlWithNoStore(@Path("projectId") UUID projectId, @Path("name") String name, @Query("application") String application, @Header("Prediction-Key") String apiKey, @Header("accept-language") String acceptLanguage, @Body ImageUrl imageUrl, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Multipart
        @POST("{projectId}/detect/models/{name}/image/nostore")
        Observable<Response<ResponseBody>> detectImageWithNoStore(@Path("projectId") UUID projectId, @Path("name") String name, @Query("application") String application, @Part("imageData") RequestBody imageData, @Header("Prediction-Key") String apiKey, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

    }

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction classifyImageUrl(UUID projectId, String name) {
        return classifyImageUrlWithServiceResponseAsync(projectId, name).toBlocking().single().body();
    }

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> classifyImageUrlAsync(UUID projectId, String name, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(classifyImageUrlWithServiceResponseAsync(projectId, name), serviceCallback);
    }

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> classifyImageUrlAsync(UUID projectId, String name) {
        return classifyImageUrlWithServiceResponseAsync(projectId, name).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> classifyImageUrlWithServiceResponseAsync(UUID projectId, String name) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final String application = null;
        final String url = null;
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(null);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        return service.classifyImageUrl(projectId, name, application, this.apiKey(), this.acceptLanguage(), imageUrl, parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = classifyImageUrlDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction classifyImageUrl(UUID projectId, String name, String application, String url) {
        return classifyImageUrlWithServiceResponseAsync(projectId, name, application, url).toBlocking().single().body();
    }

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param url Url of the image.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> classifyImageUrlAsync(UUID projectId, String name, String application, String url, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(classifyImageUrlWithServiceResponseAsync(projectId, name, application, url), serviceCallback);
    }

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> classifyImageUrlAsync(UUID projectId, String name, String application, String url) {
        return classifyImageUrlWithServiceResponseAsync(projectId, name, application, url).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> classifyImageUrlWithServiceResponseAsync(UUID projectId, String name, String application, String url) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        return service.classifyImageUrl(projectId, name, application, this.apiKey(), this.acceptLanguage(), imageUrl, parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = classifyImageUrlDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImagePrediction> classifyImageUrlDelegate(Response<ResponseBody> response) throws CustomVisionErrorException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ImagePrediction, CustomVisionErrorException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ImagePrediction>() { }.getType())
                .registerError(CustomVisionErrorException.class)
                .build(response);
    }

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction classifyImage(UUID projectId, String name, byte[] imageData) {
        return classifyImageWithServiceResponseAsync(projectId, name, imageData).toBlocking().single().body();
    }

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> classifyImageAsync(UUID projectId, String name, byte[] imageData, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(classifyImageWithServiceResponseAsync(projectId, name, imageData), serviceCallback);
    }

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> classifyImageAsync(UUID projectId, String name, byte[] imageData) {
        return classifyImageWithServiceResponseAsync(projectId, name, imageData).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> classifyImageWithServiceResponseAsync(UUID projectId, String name, byte[] imageData) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final String application = null;
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        RequestBody imageDataConverted = RequestBody.create(MediaType.parse("multipart/form-data"), imageData);
        return service.classifyImage(projectId, name, application, imageDataConverted, this.apiKey(), this.acceptLanguage(), parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = classifyImageDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction classifyImage(UUID projectId, String name, byte[] imageData, String application) {
        return classifyImageWithServiceResponseAsync(projectId, name, imageData, application).toBlocking().single().body();
    }

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> classifyImageAsync(UUID projectId, String name, byte[] imageData, String application, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(classifyImageWithServiceResponseAsync(projectId, name, imageData, application), serviceCallback);
    }

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> classifyImageAsync(UUID projectId, String name, byte[] imageData, String application) {
        return classifyImageWithServiceResponseAsync(projectId, name, imageData, application).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> classifyImageWithServiceResponseAsync(UUID projectId, String name, byte[] imageData, String application) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        RequestBody imageDataConverted = RequestBody.create(MediaType.parse("multipart/form-data"), imageData);
        return service.classifyImage(projectId, name, application, imageDataConverted, this.apiKey(), this.acceptLanguage(), parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = classifyImageDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImagePrediction> classifyImageDelegate(Response<ResponseBody> response) throws CustomVisionErrorException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ImagePrediction, CustomVisionErrorException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ImagePrediction>() { }.getType())
                .registerError(CustomVisionErrorException.class)
                .build(response);
    }

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction classifyImageUrlWithNoStore(UUID projectId, String name) {
        return classifyImageUrlWithNoStoreWithServiceResponseAsync(projectId, name).toBlocking().single().body();
    }

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> classifyImageUrlWithNoStoreAsync(UUID projectId, String name, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(classifyImageUrlWithNoStoreWithServiceResponseAsync(projectId, name), serviceCallback);
    }

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> classifyImageUrlWithNoStoreAsync(UUID projectId, String name) {
        return classifyImageUrlWithNoStoreWithServiceResponseAsync(projectId, name).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> classifyImageUrlWithNoStoreWithServiceResponseAsync(UUID projectId, String name) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final String application = null;
        final String url = null;
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(null);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        return service.classifyImageUrlWithNoStore(projectId, name, application, this.apiKey(), this.acceptLanguage(), imageUrl, parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = classifyImageUrlWithNoStoreDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction classifyImageUrlWithNoStore(UUID projectId, String name, String application, String url) {
        return classifyImageUrlWithNoStoreWithServiceResponseAsync(projectId, name, application, url).toBlocking().single().body();
    }

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param url Url of the image.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> classifyImageUrlWithNoStoreAsync(UUID projectId, String name, String application, String url, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(classifyImageUrlWithNoStoreWithServiceResponseAsync(projectId, name, application, url), serviceCallback);
    }

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> classifyImageUrlWithNoStoreAsync(UUID projectId, String name, String application, String url) {
        return classifyImageUrlWithNoStoreWithServiceResponseAsync(projectId, name, application, url).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> classifyImageUrlWithNoStoreWithServiceResponseAsync(UUID projectId, String name, String application, String url) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        return service.classifyImageUrlWithNoStore(projectId, name, application, this.apiKey(), this.acceptLanguage(), imageUrl, parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = classifyImageUrlWithNoStoreDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImagePrediction> classifyImageUrlWithNoStoreDelegate(Response<ResponseBody> response) throws CustomVisionErrorException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ImagePrediction, CustomVisionErrorException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ImagePrediction>() { }.getType())
                .registerError(CustomVisionErrorException.class)
                .build(response);
    }

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction classifyImageWithNoStore(UUID projectId, String name, byte[] imageData) {
        return classifyImageWithNoStoreWithServiceResponseAsync(projectId, name, imageData).toBlocking().single().body();
    }

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> classifyImageWithNoStoreAsync(UUID projectId, String name, byte[] imageData, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(classifyImageWithNoStoreWithServiceResponseAsync(projectId, name, imageData), serviceCallback);
    }

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> classifyImageWithNoStoreAsync(UUID projectId, String name, byte[] imageData) {
        return classifyImageWithNoStoreWithServiceResponseAsync(projectId, name, imageData).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> classifyImageWithNoStoreWithServiceResponseAsync(UUID projectId, String name, byte[] imageData) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final String application = null;
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        RequestBody imageDataConverted = RequestBody.create(MediaType.parse("multipart/form-data"), imageData);
        return service.classifyImageWithNoStore(projectId, name, application, imageDataConverted, this.apiKey(), this.acceptLanguage(), parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = classifyImageWithNoStoreDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction classifyImageWithNoStore(UUID projectId, String name, byte[] imageData, String application) {
        return classifyImageWithNoStoreWithServiceResponseAsync(projectId, name, imageData, application).toBlocking().single().body();
    }

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> classifyImageWithNoStoreAsync(UUID projectId, String name, byte[] imageData, String application, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(classifyImageWithNoStoreWithServiceResponseAsync(projectId, name, imageData, application), serviceCallback);
    }

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> classifyImageWithNoStoreAsync(UUID projectId, String name, byte[] imageData, String application) {
        return classifyImageWithNoStoreWithServiceResponseAsync(projectId, name, imageData, application).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> classifyImageWithNoStoreWithServiceResponseAsync(UUID projectId, String name, byte[] imageData, String application) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        RequestBody imageDataConverted = RequestBody.create(MediaType.parse("multipart/form-data"), imageData);
        return service.classifyImageWithNoStore(projectId, name, application, imageDataConverted, this.apiKey(), this.acceptLanguage(), parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = classifyImageWithNoStoreDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImagePrediction> classifyImageWithNoStoreDelegate(Response<ResponseBody> response) throws CustomVisionErrorException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ImagePrediction, CustomVisionErrorException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ImagePrediction>() { }.getType())
                .registerError(CustomVisionErrorException.class)
                .build(response);
    }

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction detectImageUrl(UUID projectId, String name) {
        return detectImageUrlWithServiceResponseAsync(projectId, name).toBlocking().single().body();
    }

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> detectImageUrlAsync(UUID projectId, String name, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(detectImageUrlWithServiceResponseAsync(projectId, name), serviceCallback);
    }

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> detectImageUrlAsync(UUID projectId, String name) {
        return detectImageUrlWithServiceResponseAsync(projectId, name).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> detectImageUrlWithServiceResponseAsync(UUID projectId, String name) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final String application = null;
        final String url = null;
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(null);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        return service.detectImageUrl(projectId, name, application, this.apiKey(), this.acceptLanguage(), imageUrl, parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = detectImageUrlDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction detectImageUrl(UUID projectId, String name, String application, String url) {
        return detectImageUrlWithServiceResponseAsync(projectId, name, application, url).toBlocking().single().body();
    }

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param url Url of the image.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> detectImageUrlAsync(UUID projectId, String name, String application, String url, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(detectImageUrlWithServiceResponseAsync(projectId, name, application, url), serviceCallback);
    }

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> detectImageUrlAsync(UUID projectId, String name, String application, String url) {
        return detectImageUrlWithServiceResponseAsync(projectId, name, application, url).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> detectImageUrlWithServiceResponseAsync(UUID projectId, String name, String application, String url) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        return service.detectImageUrl(projectId, name, application, this.apiKey(), this.acceptLanguage(), imageUrl, parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = detectImageUrlDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImagePrediction> detectImageUrlDelegate(Response<ResponseBody> response) throws CustomVisionErrorException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ImagePrediction, CustomVisionErrorException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ImagePrediction>() { }.getType())
                .registerError(CustomVisionErrorException.class)
                .build(response);
    }

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction detectImage(UUID projectId, String name, byte[] imageData) {
        return detectImageWithServiceResponseAsync(projectId, name, imageData).toBlocking().single().body();
    }

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> detectImageAsync(UUID projectId, String name, byte[] imageData, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(detectImageWithServiceResponseAsync(projectId, name, imageData), serviceCallback);
    }

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> detectImageAsync(UUID projectId, String name, byte[] imageData) {
        return detectImageWithServiceResponseAsync(projectId, name, imageData).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> detectImageWithServiceResponseAsync(UUID projectId, String name, byte[] imageData) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final String application = null;
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        RequestBody imageDataConverted = RequestBody.create(MediaType.parse("multipart/form-data"), imageData);
        return service.detectImage(projectId, name, application, imageDataConverted, this.apiKey(), this.acceptLanguage(), parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = detectImageDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction detectImage(UUID projectId, String name, byte[] imageData, String application) {
        return detectImageWithServiceResponseAsync(projectId, name, imageData, application).toBlocking().single().body();
    }

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> detectImageAsync(UUID projectId, String name, byte[] imageData, String application, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(detectImageWithServiceResponseAsync(projectId, name, imageData, application), serviceCallback);
    }

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> detectImageAsync(UUID projectId, String name, byte[] imageData, String application) {
        return detectImageWithServiceResponseAsync(projectId, name, imageData, application).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> detectImageWithServiceResponseAsync(UUID projectId, String name, byte[] imageData, String application) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        RequestBody imageDataConverted = RequestBody.create(MediaType.parse("multipart/form-data"), imageData);
        return service.detectImage(projectId, name, application, imageDataConverted, this.apiKey(), this.acceptLanguage(), parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = detectImageDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImagePrediction> detectImageDelegate(Response<ResponseBody> response) throws CustomVisionErrorException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ImagePrediction, CustomVisionErrorException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ImagePrediction>() { }.getType())
                .registerError(CustomVisionErrorException.class)
                .build(response);
    }

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction detectImageUrlWithNoStore(UUID projectId, String name) {
        return detectImageUrlWithNoStoreWithServiceResponseAsync(projectId, name).toBlocking().single().body();
    }

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> detectImageUrlWithNoStoreAsync(UUID projectId, String name, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(detectImageUrlWithNoStoreWithServiceResponseAsync(projectId, name), serviceCallback);
    }

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> detectImageUrlWithNoStoreAsync(UUID projectId, String name) {
        return detectImageUrlWithNoStoreWithServiceResponseAsync(projectId, name).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> detectImageUrlWithNoStoreWithServiceResponseAsync(UUID projectId, String name) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final String application = null;
        final String url = null;
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(null);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        return service.detectImageUrlWithNoStore(projectId, name, application, this.apiKey(), this.acceptLanguage(), imageUrl, parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = detectImageUrlWithNoStoreDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction detectImageUrlWithNoStore(UUID projectId, String name, String application, String url) {
        return detectImageUrlWithNoStoreWithServiceResponseAsync(projectId, name, application, url).toBlocking().single().body();
    }

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param url Url of the image.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> detectImageUrlWithNoStoreAsync(UUID projectId, String name, String application, String url, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(detectImageUrlWithNoStoreWithServiceResponseAsync(projectId, name, application, url), serviceCallback);
    }

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> detectImageUrlWithNoStoreAsync(UUID projectId, String name, String application, String url) {
        return detectImageUrlWithNoStoreWithServiceResponseAsync(projectId, name, application, url).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> detectImageUrlWithNoStoreWithServiceResponseAsync(UUID projectId, String name, String application, String url) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        return service.detectImageUrlWithNoStore(projectId, name, application, this.apiKey(), this.acceptLanguage(), imageUrl, parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = detectImageUrlWithNoStoreDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImagePrediction> detectImageUrlWithNoStoreDelegate(Response<ResponseBody> response) throws CustomVisionErrorException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ImagePrediction, CustomVisionErrorException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ImagePrediction>() { }.getType())
                .registerError(CustomVisionErrorException.class)
                .build(response);
    }

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction detectImageWithNoStore(UUID projectId, String name, byte[] imageData) {
        return detectImageWithNoStoreWithServiceResponseAsync(projectId, name, imageData).toBlocking().single().body();
    }

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> detectImageWithNoStoreAsync(UUID projectId, String name, byte[] imageData, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(detectImageWithNoStoreWithServiceResponseAsync(projectId, name, imageData), serviceCallback);
    }

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> detectImageWithNoStoreAsync(UUID projectId, String name, byte[] imageData) {
        return detectImageWithNoStoreWithServiceResponseAsync(projectId, name, imageData).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> detectImageWithNoStoreWithServiceResponseAsync(UUID projectId, String name, byte[] imageData) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final String application = null;
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        RequestBody imageDataConverted = RequestBody.create(MediaType.parse("multipart/form-data"), imageData);
        return service.detectImageWithNoStore(projectId, name, application, imageDataConverted, this.apiKey(), this.acceptLanguage(), parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = detectImageWithNoStoreDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction detectImageWithNoStore(UUID projectId, String name, byte[] imageData, String application) {
        return detectImageWithNoStoreWithServiceResponseAsync(projectId, name, imageData, application).toBlocking().single().body();
    }

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ImagePrediction> detectImageWithNoStoreAsync(UUID projectId, String name, byte[] imageData, String application, final ServiceCallback<ImagePrediction> serviceCallback) {
        return ServiceFuture.fromResponse(detectImageWithNoStoreWithServiceResponseAsync(projectId, name, imageData, application), serviceCallback);
    }

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ImagePrediction> detectImageWithNoStoreAsync(UUID projectId, String name, byte[] imageData, String application) {
        return detectImageWithNoStoreWithServiceResponseAsync(projectId, name, imageData, application).map(new Func1<ServiceResponse<ImagePrediction>, ImagePrediction>() {
            @Override
            public ImagePrediction call(ServiceResponse<ImagePrediction> response) {
                return response.body();
            }
        });
    }

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param name Specifies the name of the model to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param imageData Binary image data.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    public Observable<ServiceResponse<ImagePrediction>> detectImageWithNoStoreWithServiceResponseAsync(UUID projectId, String name, byte[] imageData, String application) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        RequestBody imageDataConverted = RequestBody.create(MediaType.parse("multipart/form-data"), imageData);
        return service.detectImageWithNoStore(projectId, name, application, imageDataConverted, this.apiKey(), this.acceptLanguage(), parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ImagePrediction>>>() {
                @Override
                public Observable<ServiceResponse<ImagePrediction>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ImagePrediction> clientResponse = detectImageWithNoStoreDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ImagePrediction> detectImageWithNoStoreDelegate(Response<ResponseBody> response) throws CustomVisionErrorException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ImagePrediction, CustomVisionErrorException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ImagePrediction>() { }.getType())
                .registerError(CustomVisionErrorException.class)
                .build(response);
    }

}
