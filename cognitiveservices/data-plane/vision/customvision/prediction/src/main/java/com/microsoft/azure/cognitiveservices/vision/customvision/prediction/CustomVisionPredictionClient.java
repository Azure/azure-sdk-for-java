/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.customvision.prediction;

import com.microsoft.azure.AzureClient;
import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.CustomVisionErrorException;
import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction;
import com.microsoft.rest.RestClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.UUID;
import rx.Observable;

/**
 * The interface for CustomVisionPredictionClient class.
 */
public interface CustomVisionPredictionClient {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * Gets the {@link AzureClient} used for long running operations.
     * @return the azure client;
     */
    AzureClient getAzureClient();

    /**
     * Gets the User-Agent header for the client.
     *
     * @return the user agent string.
     */
    String userAgent();

    /**
     * Gets API key..
     *
     * @return the apiKey value.
     */
    String apiKey();

    /**
     * Sets API key..
     *
     * @param apiKey the apiKey value.
     * @return the service client itself
     */
    CustomVisionPredictionClient withApiKey(String apiKey);

    /**
     * Gets Supported Cognitive Services endpoints..
     *
     * @return the endpoint value.
     */
    String endpoint();

    /**
     * Sets Supported Cognitive Services endpoints..
     *
     * @param endpoint the endpoint value.
     * @return the service client itself
     */
    CustomVisionPredictionClient withEndpoint(String endpoint);

    /**
     * Gets The preferred language for the response..
     *
     * @return the acceptLanguage value.
     */
    String acceptLanguage();

    /**
     * Sets The preferred language for the response..
     *
     * @param acceptLanguage the acceptLanguage value.
     * @return the service client itself
     */
    CustomVisionPredictionClient withAcceptLanguage(String acceptLanguage);

    /**
     * Gets The retry timeout in seconds for Long Running Operations. Default value is 30..
     *
     * @return the longRunningOperationRetryTimeout value.
     */
    int longRunningOperationRetryTimeout();

    /**
     * Sets The retry timeout in seconds for Long Running Operations. Default value is 30..
     *
     * @param longRunningOperationRetryTimeout the longRunningOperationRetryTimeout value.
     * @return the service client itself
     */
    CustomVisionPredictionClient withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout);

    /**
     * Gets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true..
     *
     * @return the generateClientRequestId value.
     */
    boolean generateClientRequestId();

    /**
     * Sets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true..
     *
     * @param generateClientRequestId the generateClientRequestId value.
     * @return the service client itself
     */
    CustomVisionPredictionClient withGenerateClientRequestId(boolean generateClientRequestId);

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction classifyImageUrl(UUID projectId, String publishedName, String url);

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> classifyImageUrlAsync(UUID projectId, String publishedName, String url, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> classifyImageUrlAsync(UUID projectId, String publishedName, String url);

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> classifyImageUrlWithServiceResponseAsync(UUID projectId, String publishedName, String url);
    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction classifyImageUrl(UUID projectId, String publishedName, String url, String application);

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> classifyImageUrlAsync(UUID projectId, String publishedName, String url, String application, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> classifyImageUrlAsync(UUID projectId, String publishedName, String url, String application);

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> classifyImageUrlWithServiceResponseAsync(UUID projectId, String publishedName, String url, String application);

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction classifyImage(UUID projectId, String publishedName, byte[] imageData);

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> classifyImageAsync(UUID projectId, String publishedName, byte[] imageData, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> classifyImageAsync(UUID projectId, String publishedName, byte[] imageData);

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> classifyImageWithServiceResponseAsync(UUID projectId, String publishedName, byte[] imageData);
    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction classifyImage(UUID projectId, String publishedName, byte[] imageData, String application);

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> classifyImageAsync(UUID projectId, String publishedName, byte[] imageData, String application, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> classifyImageAsync(UUID projectId, String publishedName, byte[] imageData, String application);

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> classifyImageWithServiceResponseAsync(UUID projectId, String publishedName, byte[] imageData, String application);

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction classifyImageUrlWithNoStore(UUID projectId, String publishedName, String url);

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> classifyImageUrlWithNoStoreAsync(UUID projectId, String publishedName, String url, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> classifyImageUrlWithNoStoreAsync(UUID projectId, String publishedName, String url);

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> classifyImageUrlWithNoStoreWithServiceResponseAsync(UUID projectId, String publishedName, String url);
    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction classifyImageUrlWithNoStore(UUID projectId, String publishedName, String url, String application);

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> classifyImageUrlWithNoStoreAsync(UUID projectId, String publishedName, String url, String application, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> classifyImageUrlWithNoStoreAsync(UUID projectId, String publishedName, String url, String application);

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> classifyImageUrlWithNoStoreWithServiceResponseAsync(UUID projectId, String publishedName, String url, String application);

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction classifyImageWithNoStore(UUID projectId, String publishedName, byte[] imageData);

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> classifyImageWithNoStoreAsync(UUID projectId, String publishedName, byte[] imageData, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> classifyImageWithNoStoreAsync(UUID projectId, String publishedName, byte[] imageData);

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> classifyImageWithNoStoreWithServiceResponseAsync(UUID projectId, String publishedName, byte[] imageData);
    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction classifyImageWithNoStore(UUID projectId, String publishedName, byte[] imageData, String application);

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> classifyImageWithNoStoreAsync(UUID projectId, String publishedName, byte[] imageData, String application, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> classifyImageWithNoStoreAsync(UUID projectId, String publishedName, byte[] imageData, String application);

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> classifyImageWithNoStoreWithServiceResponseAsync(UUID projectId, String publishedName, byte[] imageData, String application);

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction detectImageUrl(UUID projectId, String publishedName, String url);

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> detectImageUrlAsync(UUID projectId, String publishedName, String url, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> detectImageUrlAsync(UUID projectId, String publishedName, String url);

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> detectImageUrlWithServiceResponseAsync(UUID projectId, String publishedName, String url);
    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction detectImageUrl(UUID projectId, String publishedName, String url, String application);

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> detectImageUrlAsync(UUID projectId, String publishedName, String url, String application, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> detectImageUrlAsync(UUID projectId, String publishedName, String url, String application);

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> detectImageUrlWithServiceResponseAsync(UUID projectId, String publishedName, String url, String application);

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction detectImage(UUID projectId, String publishedName, byte[] imageData);

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> detectImageAsync(UUID projectId, String publishedName, byte[] imageData, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> detectImageAsync(UUID projectId, String publishedName, byte[] imageData);

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> detectImageWithServiceResponseAsync(UUID projectId, String publishedName, byte[] imageData);
    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction detectImage(UUID projectId, String publishedName, byte[] imageData, String application);

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> detectImageAsync(UUID projectId, String publishedName, byte[] imageData, String application, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> detectImageAsync(UUID projectId, String publishedName, byte[] imageData, String application);

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> detectImageWithServiceResponseAsync(UUID projectId, String publishedName, byte[] imageData, String application);

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction detectImageUrlWithNoStore(UUID projectId, String publishedName, String url);

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> detectImageUrlWithNoStoreAsync(UUID projectId, String publishedName, String url, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> detectImageUrlWithNoStoreAsync(UUID projectId, String publishedName, String url);

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> detectImageUrlWithNoStoreWithServiceResponseAsync(UUID projectId, String publishedName, String url);
    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction detectImageUrlWithNoStore(UUID projectId, String publishedName, String url, String application);

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> detectImageUrlWithNoStoreAsync(UUID projectId, String publishedName, String url, String application, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> detectImageUrlWithNoStoreAsync(UUID projectId, String publishedName, String url, String application);

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> detectImageUrlWithNoStoreWithServiceResponseAsync(UUID projectId, String publishedName, String url, String application);

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction detectImageWithNoStore(UUID projectId, String publishedName, byte[] imageData);

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> detectImageWithNoStoreAsync(UUID projectId, String publishedName, byte[] imageData, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> detectImageWithNoStoreAsync(UUID projectId, String publishedName, byte[] imageData);

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> detectImageWithNoStoreWithServiceResponseAsync(UUID projectId, String publishedName, byte[] imageData);
    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction detectImageWithNoStore(UUID projectId, String publishedName, byte[] imageData, String application);

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> detectImageWithNoStoreAsync(UUID projectId, String publishedName, byte[] imageData, String application, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> detectImageWithNoStoreAsync(UUID projectId, String publishedName, byte[] imageData, String application);

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> detectImageWithNoStoreWithServiceResponseAsync(UUID projectId, String publishedName, byte[] imageData, String application);

}
