/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.customvision.prediction;

import com.azure.common.http.rest.SimpleResponse;
import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.CustomVisionErrorException;
import com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction;
import java.nio.ByteBuffer;
import java.util.UUID;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * The interface for CustomVisionPredictionClient class.
 */
public interface CustomVisionPredictionClient {
    /**
     * Gets API key.
     *
     * @return the apiKey value.
     */
    String apiKey();

    /**
     * Sets API key.
     *
     * @param apiKey the apiKey value.
     * @return the service client itself.
     */
    CustomVisionPredictionClient withApiKey(String apiKey);

    /**
     * Gets Supported Cognitive Services endpoints.
     *
     * @return the endpoint value.
     */
    String endpoint();

    /**
     * Sets Supported Cognitive Services endpoints.
     *
     * @param endpoint the endpoint value.
     * @return the service client itself.
     */
    CustomVisionPredictionClient withEndpoint(String endpoint);

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction classifyImageUrl(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url);

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> classifyImageUrlWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url);

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> classifyImageUrlAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url);

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction classifyImageUrl(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application);

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> classifyImageUrlWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application);

    /**
     * Classify an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> classifyImageUrlAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application);

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction classifyImage(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData);

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> classifyImageWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData);

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> classifyImageAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData);

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction classifyImage(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application);

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> classifyImageWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application);

    /**
     * Classify an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> classifyImageAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application);

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction classifyImageUrlWithNoStore(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url);

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> classifyImageUrlWithNoStoreWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url);

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> classifyImageUrlWithNoStoreAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url);

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction classifyImageUrlWithNoStore(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application);

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> classifyImageUrlWithNoStoreWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application);

    /**
     * Classify an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> classifyImageUrlWithNoStoreAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application);

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction classifyImageWithNoStore(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData);

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> classifyImageWithNoStoreWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData);

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> classifyImageWithNoStoreAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData);

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction classifyImageWithNoStore(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application);

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> classifyImageWithNoStoreWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application);

    /**
     * Classify an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> classifyImageWithNoStoreAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application);

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction detectImageUrl(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url);

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> detectImageUrlWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url);

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> detectImageUrlAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url);

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction detectImageUrl(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application);

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> detectImageUrlWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application);

    /**
     * Detect objects in an image url and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> detectImageUrlAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application);

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction detectImage(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData);

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> detectImageWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData);

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> detectImageAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData);

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction detectImage(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application);

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> detectImageWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application);

    /**
     * Detect objects in an image and saves the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> detectImageAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application);

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction detectImageUrlWithNoStore(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url);

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> detectImageUrlWithNoStoreWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url);

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> detectImageUrlWithNoStoreAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url);

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction detectImageUrlWithNoStore(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application);

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> detectImageUrlWithNoStoreWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application);

    /**
     * Detect objects in an image url without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param url Url of the image.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> detectImageUrlWithNoStoreAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull String url, String application);

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction detectImageWithNoStore(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData);

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> detectImageWithNoStoreWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData);

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> detectImageWithNoStoreAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData);

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction detectImageWithNoStore(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application);

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> detectImageWithNoStoreWithRestResponseAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application);

    /**
     * Detect objects in an image without saving the result.
     *
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param application Optional. Specifies the name of application using the endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> detectImageWithNoStoreAsync(@NonNull UUID projectId, @NonNull String publishedName, @NonNull Flux<ByteBuffer> imageData, String application);
}
