/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.customvision.training.implementation;

import com.azure.common.ServiceClient;
import com.azure.common.annotations.BodyParam;
import com.azure.common.annotations.DELETE;
import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.FormParam;
import com.azure.common.annotations.GET;
import com.azure.common.annotations.HeaderParam;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.PATCH;
import com.azure.common.annotations.PathParam;
import com.azure.common.annotations.POST;
import com.azure.common.annotations.QueryParam;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.http.HttpPipeline;
import com.azure.common.http.rest.RestVoidResponse;
import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.implementation.CollectionFormat;
import com.azure.common.implementation.RestProxy;
import com.azure.common.implementation.Validator;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.CustomVisionTrainingClient;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CustomVisionErrorException;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Domain;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Export;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Image;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageFileCreateBatch;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageIdCreateBatch;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImagePerformance;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImagePrediction;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionCreateBatch;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionCreateEntry;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionCreateSummary;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionProposal;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageTagCreateBatch;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageTagCreateEntry;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageTagCreateSummary;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageUrl;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageUrlCreateBatch;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.IterationPerformance;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.PredictionQueryResult;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.PredictionQueryToken;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * Initializes a new instance of the CustomVisionTrainingClient type.
 */
public final class CustomVisionTrainingClientImpl extends ServiceClient implements CustomVisionTrainingClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private CustomVisionTrainingClientService service;

    /**
     * API key.
     */
    private String apiKey;

    /**
     * Gets API key.
     *
     * @return the apiKey value.
     */
    public String apiKey() {
        return this.apiKey;
    }

    /**
     * Sets API key.
     *
     * @param apiKey the apiKey value.
     * @return the service client itself.
     */
    public CustomVisionTrainingClientImpl withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Supported Cognitive Services endpoints.
     */
    private String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints.
     *
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Sets Supported Cognitive Services endpoints.
     *
     * @param endpoint the endpoint value.
     * @return the service client itself.
     */
    public CustomVisionTrainingClientImpl withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Initializes an instance of CustomVisionTrainingClient client.
     */
    public CustomVisionTrainingClientImpl() {
        this(RestProxy.createDefaultPipeline());
    }

    /**
     * Initializes an instance of CustomVisionTrainingClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     */
    public CustomVisionTrainingClientImpl(@NonNull HttpPipeline httpPipeline) {
        super(httpPipeline);
        this.service = RestProxy.create(CustomVisionTrainingClientService.class, this);
    }

    /**
     * The interface defining all the services for CustomVisionTrainingClient
     * to be used by the proxy service to perform REST calls.
     */
    @Host("{Endpoint}/customvision/v3.0/training")
    private interface CustomVisionTrainingClientService {
        @GET("domains")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<List<Domain>>> getDomains(@HostParam("Endpoint") String endpoint, @HeaderParam("Training-Key") String apiKey);

        @GET("domains/{domainId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<Domain>> getDomain(@PathParam("domainId") UUID domainId, @HostParam("Endpoint") String endpoint, @HeaderParam("Training-Key") String apiKey);

        @GET("projects/{projectId}/images/tagged/count")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<Integer>> getTaggedImageCount(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @QueryParam("iterationId") UUID iterationId, @QueryParam("tagIds") String tagIds, @HeaderParam("Training-Key") String apiKey);

        @GET("projects/{projectId}/images/untagged/count")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<Integer>> getUntaggedImageCount(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @QueryParam("iterationId") UUID iterationId, @HeaderParam("Training-Key") String apiKey);

        @POST("projects/{projectId}/images/tags")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<ImageTagCreateSummary>> createImageTags(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @HeaderParam("Training-Key") String apiKey, @BodyParam("application/json; charset=utf-8") ImageTagCreateBatch batch);

        @DELETE("projects/{projectId}/images/tags")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<RestVoidResponse> deleteImageTags(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @QueryParam("imageIds") String imageIds, @QueryParam("tagIds") String tagIds, @HeaderParam("Training-Key") String apiKey);

        @POST("projects/{projectId}/images/regions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<ImageRegionCreateSummary>> createImageRegions(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @HeaderParam("Training-Key") String apiKey, @BodyParam("application/json; charset=utf-8") ImageRegionCreateBatch batch);

        @DELETE("projects/{projectId}/images/regions")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<RestVoidResponse> deleteImageRegions(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @QueryParam("regionIds") String regionIds, @HeaderParam("Training-Key") String apiKey);

        @GET("projects/{projectId}/images/tagged")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<List<Image>>> getTaggedImages(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @QueryParam("iterationId") UUID iterationId, @QueryParam("tagIds") String tagIds, @QueryParam("orderBy") String orderBy, @QueryParam("take") Integer take, @QueryParam("skip") Integer skip, @HeaderParam("Training-Key") String apiKey);

        @GET("projects/{projectId}/images/untagged")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<List<Image>>> getUntaggedImages(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @QueryParam("iterationId") UUID iterationId, @QueryParam("orderBy") String orderBy, @QueryParam("take") Integer take, @QueryParam("skip") Integer skip, @HeaderParam("Training-Key") String apiKey);

        @GET("projects/{projectId}/images/id")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<List<Image>>> getImagesByIds(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @QueryParam("imageIds") String imageIds, @QueryParam("iterationId") UUID iterationId, @HeaderParam("Training-Key") String apiKey);

        // @Multipart not supported by RestProxy
        @POST("projects/{projectId}/images")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<ImageCreateSummary>> createImagesFromData(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @QueryParam("tagIds") String tagIds, @FormParam("imageData") Flux<ByteBuffer> imageData, @HeaderParam("Training-Key") String apiKey);

        @DELETE("projects/{projectId}/images")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<RestVoidResponse> deleteImages(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @QueryParam("imageIds") String imageIds, @HeaderParam("Training-Key") String apiKey);

        @POST("projects/{projectId}/images/files")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<ImageCreateSummary>> createImagesFromFiles(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") ImageFileCreateBatch batch, @HeaderParam("Training-Key") String apiKey);

        @POST("projects/{projectId}/images/urls")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<ImageCreateSummary>> createImagesFromUrls(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") ImageUrlCreateBatch batch, @HeaderParam("Training-Key") String apiKey);

        @POST("projects/{projectId}/images/predictions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<ImageCreateSummary>> createImagesFromPredictions(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") ImageIdCreateBatch batch, @HeaderParam("Training-Key") String apiKey);

        @POST("projects/{projectId}/images/{imageId}/regionproposals")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<ImageRegionProposal>> getImageRegionProposals(@PathParam("projectId") UUID projectId, @PathParam("imageId") UUID imageId, @HostParam("Endpoint") String endpoint, @HeaderParam("Training-Key") String apiKey);

        @DELETE("projects/{projectId}/predictions")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<RestVoidResponse> deletePrediction(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @QueryParam("ids") String ids, @HeaderParam("Training-Key") String apiKey);

        @POST("projects/{projectId}/quicktest/url")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<ImagePrediction>> quickTestImageUrl(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @QueryParam("iterationId") UUID iterationId, @HeaderParam("Training-Key") String apiKey, @BodyParam("application/json; charset=utf-8") ImageUrl imageUrl);

        // @Multipart not supported by RestProxy
        @POST("projects/{projectId}/quicktest/image")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<ImagePrediction>> quickTestImage(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @QueryParam("iterationId") UUID iterationId, @FormParam("imageData") Flux<ByteBuffer> imageData, @HeaderParam("Training-Key") String apiKey);

        @POST("projects/{projectId}/predictions/query")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<PredictionQueryResult>> queryPredictions(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") PredictionQueryToken query, @HeaderParam("Training-Key") String apiKey);

        @GET("projects/{projectId}/iterations/{iterationId}/performance")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<IterationPerformance>> getIterationPerformance(@PathParam("projectId") UUID projectId, @PathParam("iterationId") UUID iterationId, @HostParam("Endpoint") String endpoint, @QueryParam("threshold") Double threshold, @QueryParam("overlapThreshold") Double overlapThreshold, @HeaderParam("Training-Key") String apiKey);

        @GET("projects/{projectId}/iterations/{iterationId}/performance/images")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<List<ImagePerformance>>> getImagePerformances(@PathParam("projectId") UUID projectId, @PathParam("iterationId") UUID iterationId, @HostParam("Endpoint") String endpoint, @QueryParam("tagIds") String tagIds, @QueryParam("orderBy") String orderBy, @QueryParam("take") Integer take, @QueryParam("skip") Integer skip, @HeaderParam("Training-Key") String apiKey);

        @GET("projects/{projectId}/iterations/{iterationId}/performance/images/count")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<Integer>> getImagePerformanceCount(@PathParam("projectId") UUID projectId, @PathParam("iterationId") UUID iterationId, @HostParam("Endpoint") String endpoint, @QueryParam("tagIds") String tagIds, @HeaderParam("Training-Key") String apiKey);

        @GET("projects")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<List<Project>>> getProjects(@HostParam("Endpoint") String endpoint, @HeaderParam("Training-Key") String apiKey);

        @POST("projects")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<Project>> createProject(@HostParam("Endpoint") String endpoint, @QueryParam("name") String name, @QueryParam("description") String description, @QueryParam("domainId") UUID domainId, @QueryParam("classificationType") String classificationType, @QueryParam("targetExportPlatforms") String targetExportPlatforms, @HeaderParam("Training-Key") String apiKey);

        @GET("projects/{projectId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<Project>> getProject(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @HeaderParam("Training-Key") String apiKey);

        @DELETE("projects/{projectId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<RestVoidResponse> deleteProject(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @HeaderParam("Training-Key") String apiKey);

        @PATCH("projects/{projectId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<Project>> updateProject(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") Project updatedProject, @HeaderParam("Training-Key") String apiKey);

        @POST("projects/{projectId}/train")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<Iteration>> trainProject(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @QueryParam("trainingType") String trainingType, @QueryParam("reservedBudgetInHours") Integer reservedBudgetInHours, @QueryParam("forceTrain") Boolean forceTrain, @QueryParam("notificationEmailAddress") String notificationEmailAddress, @HeaderParam("Training-Key") String apiKey);

        @GET("projects/{projectId}/iterations")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<List<Iteration>>> getIterations(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @HeaderParam("Training-Key") String apiKey);

        @GET("projects/{projectId}/iterations/{iterationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<Iteration>> getIteration(@PathParam("projectId") UUID projectId, @PathParam("iterationId") UUID iterationId, @HostParam("Endpoint") String endpoint, @HeaderParam("Training-Key") String apiKey);

        @DELETE("projects/{projectId}/iterations/{iterationId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<RestVoidResponse> deleteIteration(@PathParam("projectId") UUID projectId, @PathParam("iterationId") UUID iterationId, @HostParam("Endpoint") String endpoint, @HeaderParam("Training-Key") String apiKey);

        @PATCH("projects/{projectId}/iterations/{iterationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<Iteration>> updateIteration(@PathParam("projectId") UUID projectId, @PathParam("iterationId") UUID iterationId, @HostParam("Endpoint") String endpoint, @HeaderParam("Training-Key") String apiKey, @BodyParam("application/json; charset=utf-8") Iteration updatedIteration);

        @POST("projects/{projectId}/iterations/{iterationId}/publish")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<Boolean>> publishIteration(@PathParam("projectId") UUID projectId, @PathParam("iterationId") UUID iterationId, @HostParam("Endpoint") String endpoint, @QueryParam("publishName") String publishName, @QueryParam("predictionId") String predictionId, @HeaderParam("Training-Key") String apiKey);

        @DELETE("projects/{projectId}/iterations/{iterationId}/publish")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<RestVoidResponse> unpublishIteration(@PathParam("projectId") UUID projectId, @PathParam("iterationId") UUID iterationId, @HostParam("Endpoint") String endpoint, @HeaderParam("Training-Key") String apiKey);

        @GET("projects/{projectId}/iterations/{iterationId}/export")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<List<Export>>> getExports(@PathParam("projectId") UUID projectId, @PathParam("iterationId") UUID iterationId, @HostParam("Endpoint") String endpoint, @HeaderParam("Training-Key") String apiKey);

        @POST("projects/{projectId}/iterations/{iterationId}/export")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<Export>> exportIteration(@PathParam("projectId") UUID projectId, @PathParam("iterationId") UUID iterationId, @HostParam("Endpoint") String endpoint, @QueryParam("platform") String platform, @QueryParam("flavor") String flavor, @HeaderParam("Training-Key") String apiKey);

        @GET("projects/{projectId}/tags/{tagId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<Tag>> getTag(@PathParam("projectId") UUID projectId, @PathParam("tagId") UUID tagId, @HostParam("Endpoint") String endpoint, @QueryParam("iterationId") UUID iterationId, @HeaderParam("Training-Key") String apiKey);

        @DELETE("projects/{projectId}/tags/{tagId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<RestVoidResponse> deleteTag(@PathParam("projectId") UUID projectId, @PathParam("tagId") UUID tagId, @HostParam("Endpoint") String endpoint, @HeaderParam("Training-Key") String apiKey);

        @PATCH("projects/{projectId}/tags/{tagId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<Tag>> updateTag(@PathParam("projectId") UUID projectId, @PathParam("tagId") UUID tagId, @HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") Tag updatedTag, @HeaderParam("Training-Key") String apiKey);

        @GET("projects/{projectId}/tags")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<List<Tag>>> getTags(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @QueryParam("iterationId") UUID iterationId, @HeaderParam("Training-Key") String apiKey);

        @POST("projects/{projectId}/tags")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CustomVisionErrorException.class)
        Mono<SimpleResponse<Tag>> createTag(@PathParam("projectId") UUID projectId, @HostParam("Endpoint") String endpoint, @QueryParam("name") String name, @QueryParam("description") String description, @QueryParam("type") String type, @HeaderParam("Training-Key") String apiKey);
    }

    /**
     * Get a list of the available domains.
     *
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Domain&gt; object if successful.
     */
    public List<Domain> getDomains() {
        return getDomainsAsync().block();
    }

    /**
     * Get a list of the available domains.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<Domain>>> getDomainsWithRestResponseAsync() {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.getDomains(this.endpoint(), this.apiKey());
    }

    /**
     * Get a list of the available domains.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<Domain>> getDomainsAsync() {
        return getDomainsWithRestResponseAsync()
            .flatMap((SimpleResponse<List<Domain>> res) -> Mono.just(res.value()));
    }

    /**
     * Get information about a specific domain.
     *
     * @param domainId The id of the domain to get information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Domain object if successful.
     */
    public Domain getDomain(@NonNull UUID domainId) {
        return getDomainAsync(domainId).block();
    }

    /**
     * Get information about a specific domain.
     *
     * @param domainId The id of the domain to get information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Domain>> getDomainWithRestResponseAsync(@NonNull UUID domainId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (domainId == null) {
            throw new IllegalArgumentException("Parameter domainId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.getDomain(domainId, this.endpoint(), this.apiKey());
    }

    /**
     * Get information about a specific domain.
     *
     * @param domainId The id of the domain to get information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Domain> getDomainAsync(@NonNull UUID domainId) {
        return getDomainWithRestResponseAsync(domainId)
            .flatMap((SimpleResponse<Domain> res) -> Mono.just(res.value()));
    }

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    public int getTaggedImageCount(@NonNull UUID projectId) {
        return getTaggedImageCountAsync(projectId).block();
    }

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Integer>> getTaggedImageCountWithRestResponseAsync(@NonNull UUID projectId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final UUID iterationId = null;
        final List<UUID> tagIds = null;
        String tagIdsConverted = this.serializerAdapter().serializeList(tagIds, CollectionFormat.CSV);
        return service.getTaggedImageCount(projectId, this.endpoint(), iterationId, tagIdsConverted, this.apiKey());
    }

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Integer> getTaggedImageCountAsync(@NonNull UUID projectId) {
        return getTaggedImageCountWithRestResponseAsync(projectId)
            .flatMap((SimpleResponse<Integer> res) -> Mono.just(res.value()));
    }

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    public int getTaggedImageCount(@NonNull UUID projectId, UUID iterationId, List<UUID> tagIds) {
        return getTaggedImageCountAsync(projectId, iterationId, tagIds).block();
    }

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Integer>> getTaggedImageCountWithRestResponseAsync(@NonNull UUID projectId, UUID iterationId, List<UUID> tagIds) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        Validator.validate(tagIds);
        String tagIdsConverted = this.serializerAdapter().serializeList(tagIds, CollectionFormat.CSV);
        return service.getTaggedImageCount(projectId, this.endpoint(), iterationId, tagIdsConverted, this.apiKey());
    }

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Integer> getTaggedImageCountAsync(@NonNull UUID projectId, UUID iterationId, List<UUID> tagIds) {
        return getTaggedImageCountWithRestResponseAsync(projectId, iterationId, tagIds)
            .flatMap((SimpleResponse<Integer> res) -> Mono.just(res.value()));
    }

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    public int getUntaggedImageCount(@NonNull UUID projectId) {
        return getUntaggedImageCountAsync(projectId).block();
    }

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Integer>> getUntaggedImageCountWithRestResponseAsync(@NonNull UUID projectId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final UUID iterationId = null;
        return service.getUntaggedImageCount(projectId, this.endpoint(), iterationId, this.apiKey());
    }

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Integer> getUntaggedImageCountAsync(@NonNull UUID projectId) {
        return getUntaggedImageCountWithRestResponseAsync(projectId)
            .flatMap((SimpleResponse<Integer> res) -> Mono.just(res.value()));
    }

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    public int getUntaggedImageCount(@NonNull UUID projectId, UUID iterationId) {
        return getUntaggedImageCountAsync(projectId, iterationId).block();
    }

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Integer>> getUntaggedImageCountWithRestResponseAsync(@NonNull UUID projectId, UUID iterationId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.getUntaggedImageCount(projectId, this.endpoint(), iterationId, this.apiKey());
    }

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Integer> getUntaggedImageCountAsync(@NonNull UUID projectId, UUID iterationId) {
        return getUntaggedImageCountWithRestResponseAsync(projectId, iterationId)
            .flatMap((SimpleResponse<Integer> res) -> Mono.just(res.value()));
    }

    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageTagCreateSummary object if successful.
     */
    public ImageTagCreateSummary createImageTags(@NonNull UUID projectId) {
        return createImageTagsAsync(projectId).block();
    }

    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImageTagCreateSummary>> createImageTagsWithRestResponseAsync(@NonNull UUID projectId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        ImageTagCreateBatch batch = new ImageTagCreateBatch();
        batch.withTags(null);
        return service.createImageTags(projectId, this.endpoint(), this.apiKey(), batch);
    }

    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImageTagCreateSummary> createImageTagsAsync(@NonNull UUID projectId) {
        return createImageTagsWithRestResponseAsync(projectId)
            .flatMap((SimpleResponse<ImageTagCreateSummary> res) -> Mono.just(res.value()));
    }

    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @param tags Image Tag entries to include in this batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageTagCreateSummary object if successful.
     */
    public ImageTagCreateSummary createImageTags(@NonNull UUID projectId, List<ImageTagCreateEntry> tags) {
        return createImageTagsAsync(projectId, tags).block();
    }

    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @param tags Image Tag entries to include in this batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImageTagCreateSummary>> createImageTagsWithRestResponseAsync(@NonNull UUID projectId, List<ImageTagCreateEntry> tags) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        Validator.validate(tags);
        ImageTagCreateBatch batch = new ImageTagCreateBatch();
        batch.withTags(tags);
        return service.createImageTags(projectId, this.endpoint(), this.apiKey(), batch);
    }

    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @param tags Image Tag entries to include in this batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImageTagCreateSummary> createImageTagsAsync(@NonNull UUID projectId, List<ImageTagCreateEntry> tags) {
        return createImageTagsWithRestResponseAsync(projectId, tags)
            .flatMap((SimpleResponse<ImageTagCreateSummary> res) -> Mono.just(res.value()));
    }

    /**
     * Remove a set of tags from a set of images.
     *
     * @param projectId The project id.
     * @param imageIds Image ids. Limited to 64 images.
     * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void deleteImageTags(@NonNull UUID projectId, @NonNull List<UUID> imageIds, @NonNull List<UUID> tagIds) {
        deleteImageTagsAsync(projectId, imageIds, tagIds).block();
    }

    /**
     * Remove a set of tags from a set of images.
     *
     * @param projectId The project id.
     * @param imageIds Image ids. Limited to 64 images.
     * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> deleteImageTagsWithRestResponseAsync(@NonNull UUID projectId, @NonNull List<UUID> imageIds, @NonNull List<UUID> tagIds) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (imageIds == null) {
            throw new IllegalArgumentException("Parameter imageIds is required and cannot be null.");
        }
        if (tagIds == null) {
            throw new IllegalArgumentException("Parameter tagIds is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        Validator.validate(imageIds);
        Validator.validate(tagIds);
        String imageIdsConverted = this.serializerAdapter().serializeList(imageIds, CollectionFormat.CSV);
        String tagIdsConverted = this.serializerAdapter().serializeList(tagIds, CollectionFormat.CSV);
        return service.deleteImageTags(projectId, this.endpoint(), imageIdsConverted, tagIdsConverted, this.apiKey());
    }

    /**
     * Remove a set of tags from a set of images.
     *
     * @param projectId The project id.
     * @param imageIds Image ids. Limited to 64 images.
     * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> deleteImageTagsAsync(@NonNull UUID projectId, @NonNull List<UUID> imageIds, @NonNull List<UUID> tagIds) {
        return deleteImageTagsWithRestResponseAsync(projectId, imageIds, tagIds)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     * There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageRegionCreateSummary object if successful.
     */
    public ImageRegionCreateSummary createImageRegions(@NonNull UUID projectId) {
        return createImageRegionsAsync(projectId).block();
    }

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     * There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImageRegionCreateSummary>> createImageRegionsWithRestResponseAsync(@NonNull UUID projectId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        ImageRegionCreateBatch batch = new ImageRegionCreateBatch();
        batch.withRegions(null);
        return service.createImageRegions(projectId, this.endpoint(), this.apiKey(), batch);
    }

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     * There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImageRegionCreateSummary> createImageRegionsAsync(@NonNull UUID projectId) {
        return createImageRegionsWithRestResponseAsync(projectId)
            .flatMap((SimpleResponse<ImageRegionCreateSummary> res) -> Mono.just(res.value()));
    }

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     * There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @param regions the List&lt;ImageRegionCreateEntry&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageRegionCreateSummary object if successful.
     */
    public ImageRegionCreateSummary createImageRegions(@NonNull UUID projectId, List<ImageRegionCreateEntry> regions) {
        return createImageRegionsAsync(projectId, regions).block();
    }

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     * There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @param regions the List&lt;ImageRegionCreateEntry&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImageRegionCreateSummary>> createImageRegionsWithRestResponseAsync(@NonNull UUID projectId, List<ImageRegionCreateEntry> regions) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        Validator.validate(regions);
        ImageRegionCreateBatch batch = new ImageRegionCreateBatch();
        batch.withRegions(regions);
        return service.createImageRegions(projectId, this.endpoint(), this.apiKey(), batch);
    }

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     * There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @param regions the List&lt;ImageRegionCreateEntry&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImageRegionCreateSummary> createImageRegionsAsync(@NonNull UUID projectId, List<ImageRegionCreateEntry> regions) {
        return createImageRegionsWithRestResponseAsync(projectId, regions)
            .flatMap((SimpleResponse<ImageRegionCreateSummary> res) -> Mono.just(res.value()));
    }

    /**
     * Delete a set of image regions.
     *
     * @param projectId The project id.
     * @param regionIds Regions to delete. Limited to 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void deleteImageRegions(@NonNull UUID projectId, @NonNull List<UUID> regionIds) {
        deleteImageRegionsAsync(projectId, regionIds).block();
    }

    /**
     * Delete a set of image regions.
     *
     * @param projectId The project id.
     * @param regionIds Regions to delete. Limited to 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> deleteImageRegionsWithRestResponseAsync(@NonNull UUID projectId, @NonNull List<UUID> regionIds) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (regionIds == null) {
            throw new IllegalArgumentException("Parameter regionIds is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        Validator.validate(regionIds);
        String regionIdsConverted = this.serializerAdapter().serializeList(regionIds, CollectionFormat.CSV);
        return service.deleteImageRegions(projectId, this.endpoint(), regionIdsConverted, this.apiKey());
    }

    /**
     * Delete a set of image regions.
     *
     * @param projectId The project id.
     * @param regionIds Regions to delete. Limited to 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> deleteImageRegionsAsync(@NonNull UUID projectId, @NonNull List<UUID> regionIds) {
        return deleteImageRegionsWithRestResponseAsync(projectId, regionIds)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Image&gt; object if successful.
     */
    public List<Image> getTaggedImages(@NonNull UUID projectId) {
        return getTaggedImagesAsync(projectId).block();
    }

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<Image>>> getTaggedImagesWithRestResponseAsync(@NonNull UUID projectId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final UUID iterationId = null;
        final List<UUID> tagIds = null;
        final String orderBy = null;
        final Integer take = 50;
        final Integer skip = 0;
        String tagIdsConverted = this.serializerAdapter().serializeList(tagIds, CollectionFormat.CSV);
        return service.getTaggedImages(projectId, this.endpoint(), iterationId, tagIdsConverted, orderBy, take, skip, this.apiKey());
    }

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<Image>> getTaggedImagesAsync(@NonNull UUID projectId) {
        return getTaggedImagesWithRestResponseAsync(projectId)
            .flatMap((SimpleResponse<List<Image>> res) -> Mono.just(res.value()));
    }

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'.
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Image&gt; object if successful.
     */
    public List<Image> getTaggedImages(@NonNull UUID projectId, UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip) {
        return getTaggedImagesAsync(projectId, iterationId, tagIds, orderBy, take, skip).block();
    }

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'.
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<Image>>> getTaggedImagesWithRestResponseAsync(@NonNull UUID projectId, UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        Validator.validate(tagIds);
        String tagIdsConverted = this.serializerAdapter().serializeList(tagIds, CollectionFormat.CSV);
        return service.getTaggedImages(projectId, this.endpoint(), iterationId, tagIdsConverted, orderBy, take, skip, this.apiKey());
    }

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'.
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<Image>> getTaggedImagesAsync(@NonNull UUID projectId, UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip) {
        return getTaggedImagesWithRestResponseAsync(projectId, iterationId, tagIds, orderBy, take, skip)
            .flatMap((SimpleResponse<List<Image>> res) -> Mono.just(res.value()));
    }

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Image&gt; object if successful.
     */
    public List<Image> getUntaggedImages(@NonNull UUID projectId) {
        return getUntaggedImagesAsync(projectId).block();
    }

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<Image>>> getUntaggedImagesWithRestResponseAsync(@NonNull UUID projectId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final UUID iterationId = null;
        final String orderBy = null;
        final Integer take = 50;
        final Integer skip = 0;
        return service.getUntaggedImages(projectId, this.endpoint(), iterationId, orderBy, take, skip, this.apiKey());
    }

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<Image>> getUntaggedImagesAsync(@NonNull UUID projectId) {
        return getUntaggedImagesWithRestResponseAsync(projectId)
            .flatMap((SimpleResponse<List<Image>> res) -> Mono.just(res.value()));
    }

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'.
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Image&gt; object if successful.
     */
    public List<Image> getUntaggedImages(@NonNull UUID projectId, UUID iterationId, String orderBy, Integer take, Integer skip) {
        return getUntaggedImagesAsync(projectId, iterationId, orderBy, take, skip).block();
    }

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'.
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<Image>>> getUntaggedImagesWithRestResponseAsync(@NonNull UUID projectId, UUID iterationId, String orderBy, Integer take, Integer skip) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.getUntaggedImages(projectId, this.endpoint(), iterationId, orderBy, take, skip, this.apiKey());
    }

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'.
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<Image>> getUntaggedImagesAsync(@NonNull UUID projectId, UUID iterationId, String orderBy, Integer take, Integer skip) {
        return getUntaggedImagesWithRestResponseAsync(projectId, iterationId, orderBy, take, skip)
            .flatMap((SimpleResponse<List<Image>> res) -> Mono.just(res.value()));
    }

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Image&gt; object if successful.
     */
    public List<Image> getImagesByIds(@NonNull UUID projectId) {
        return getImagesByIdsAsync(projectId).block();
    }

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<Image>>> getImagesByIdsWithRestResponseAsync(@NonNull UUID projectId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final List<UUID> imageIds = null;
        final UUID iterationId = null;
        String imageIdsConverted = this.serializerAdapter().serializeList(imageIds, CollectionFormat.CSV);
        return service.getImagesByIds(projectId, this.endpoint(), imageIdsConverted, iterationId, this.apiKey());
    }

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<Image>> getImagesByIdsAsync(@NonNull UUID projectId) {
        return getImagesByIdsWithRestResponseAsync(projectId)
            .flatMap((SimpleResponse<List<Image>> res) -> Mono.just(res.value()));
    }

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @param imageIds The list of image ids to retrieve. Limited to 256.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Image&gt; object if successful.
     */
    public List<Image> getImagesByIds(@NonNull UUID projectId, List<UUID> imageIds, UUID iterationId) {
        return getImagesByIdsAsync(projectId, imageIds, iterationId).block();
    }

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @param imageIds The list of image ids to retrieve. Limited to 256.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<Image>>> getImagesByIdsWithRestResponseAsync(@NonNull UUID projectId, List<UUID> imageIds, UUID iterationId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        Validator.validate(imageIds);
        String imageIdsConverted = this.serializerAdapter().serializeList(imageIds, CollectionFormat.CSV);
        return service.getImagesByIds(projectId, this.endpoint(), imageIdsConverted, iterationId, this.apiKey());
    }

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @param imageIds The list of image ids to retrieve. Limited to 256.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<Image>> getImagesByIdsAsync(@NonNull UUID projectId, List<UUID> imageIds, UUID iterationId) {
        return getImagesByIdsWithRestResponseAsync(projectId, imageIds, iterationId)
            .flatMap((SimpleResponse<List<Image>> res) -> Mono.just(res.value()));
    }

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     * multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageCreateSummary object if successful.
     */
    public ImageCreateSummary createImagesFromData(@NonNull UUID projectId, @NonNull Flux<ByteBuffer> imageData) {
        return createImagesFromDataAsync(projectId, imageData).block();
    }

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     * multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImageCreateSummary>> createImagesFromDataWithRestResponseAsync(@NonNull UUID projectId, @NonNull Flux<ByteBuffer> imageData) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final List<UUID> tagIds = null;
        String tagIdsConverted = this.serializerAdapter().serializeList(tagIds, CollectionFormat.CSV);
        return service.createImagesFromData(projectId, this.endpoint(), tagIdsConverted, imageData, this.apiKey());
    }

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     * multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImageCreateSummary> createImagesFromDataAsync(@NonNull UUID projectId, @NonNull Flux<ByteBuffer> imageData) {
        return createImagesFromDataWithRestResponseAsync(projectId, imageData)
            .flatMap((SimpleResponse<ImageCreateSummary> res) -> Mono.just(res.value()));
    }

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     * multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param tagIds The tags ids with which to tag each image. Limited to 20.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageCreateSummary object if successful.
     */
    public ImageCreateSummary createImagesFromData(@NonNull UUID projectId, @NonNull Flux<ByteBuffer> imageData, List<UUID> tagIds) {
        return createImagesFromDataAsync(projectId, imageData, tagIds).block();
    }

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     * multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param tagIds The tags ids with which to tag each image. Limited to 20.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImageCreateSummary>> createImagesFromDataWithRestResponseAsync(@NonNull UUID projectId, @NonNull Flux<ByteBuffer> imageData, List<UUID> tagIds) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        Validator.validate(tagIds);
        String tagIdsConverted = this.serializerAdapter().serializeList(tagIds, CollectionFormat.CSV);
        return service.createImagesFromData(projectId, this.endpoint(), tagIdsConverted, imageData, this.apiKey());
    }

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     * multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param tagIds The tags ids with which to tag each image. Limited to 20.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImageCreateSummary> createImagesFromDataAsync(@NonNull UUID projectId, @NonNull Flux<ByteBuffer> imageData, List<UUID> tagIds) {
        return createImagesFromDataWithRestResponseAsync(projectId, imageData, tagIds)
            .flatMap((SimpleResponse<ImageCreateSummary> res) -> Mono.just(res.value()));
    }

    /**
     * Delete images from the set of training images.
     *
     * @param projectId The project id.
     * @param imageIds Ids of the images to be deleted. Limited to 256 images per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void deleteImages(@NonNull UUID projectId, @NonNull List<UUID> imageIds) {
        deleteImagesAsync(projectId, imageIds).block();
    }

    /**
     * Delete images from the set of training images.
     *
     * @param projectId The project id.
     * @param imageIds Ids of the images to be deleted. Limited to 256 images per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> deleteImagesWithRestResponseAsync(@NonNull UUID projectId, @NonNull List<UUID> imageIds) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (imageIds == null) {
            throw new IllegalArgumentException("Parameter imageIds is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        Validator.validate(imageIds);
        String imageIdsConverted = this.serializerAdapter().serializeList(imageIds, CollectionFormat.CSV);
        return service.deleteImages(projectId, this.endpoint(), imageIdsConverted, this.apiKey());
    }

    /**
     * Delete images from the set of training images.
     *
     * @param projectId The project id.
     * @param imageIds Ids of the images to be deleted. Limited to 256 images per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> deleteImagesAsync(@NonNull UUID projectId, @NonNull List<UUID> imageIds) {
        return deleteImagesWithRestResponseAsync(projectId, imageIds)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Add the provided batch of images to the set of training images.
     * This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch The batch of image files to add. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageCreateSummary object if successful.
     */
    public ImageCreateSummary createImagesFromFiles(@NonNull UUID projectId, @NonNull ImageFileCreateBatch batch) {
        return createImagesFromFilesAsync(projectId, batch).block();
    }

    /**
     * Add the provided batch of images to the set of training images.
     * This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch The batch of image files to add. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImageCreateSummary>> createImagesFromFilesWithRestResponseAsync(@NonNull UUID projectId, @NonNull ImageFileCreateBatch batch) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (batch == null) {
            throw new IllegalArgumentException("Parameter batch is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        Validator.validate(batch);
        return service.createImagesFromFiles(projectId, this.endpoint(), batch, this.apiKey());
    }

    /**
     * Add the provided batch of images to the set of training images.
     * This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch The batch of image files to add. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImageCreateSummary> createImagesFromFilesAsync(@NonNull UUID projectId, @NonNull ImageFileCreateBatch batch) {
        return createImagesFromFilesWithRestResponseAsync(projectId, batch)
            .flatMap((SimpleResponse<ImageCreateSummary> res) -> Mono.just(res.value()));
    }

    /**
     * Add the provided images urls to the set of training images.
     * This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image urls and tag ids. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageCreateSummary object if successful.
     */
    public ImageCreateSummary createImagesFromUrls(@NonNull UUID projectId, @NonNull ImageUrlCreateBatch batch) {
        return createImagesFromUrlsAsync(projectId, batch).block();
    }

    /**
     * Add the provided images urls to the set of training images.
     * This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image urls and tag ids. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImageCreateSummary>> createImagesFromUrlsWithRestResponseAsync(@NonNull UUID projectId, @NonNull ImageUrlCreateBatch batch) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (batch == null) {
            throw new IllegalArgumentException("Parameter batch is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        Validator.validate(batch);
        return service.createImagesFromUrls(projectId, this.endpoint(), batch, this.apiKey());
    }

    /**
     * Add the provided images urls to the set of training images.
     * This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image urls and tag ids. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImageCreateSummary> createImagesFromUrlsAsync(@NonNull UUID projectId, @NonNull ImageUrlCreateBatch batch) {
        return createImagesFromUrlsWithRestResponseAsync(projectId, batch)
            .flatMap((SimpleResponse<ImageCreateSummary> res) -> Mono.just(res.value()));
    }

    /**
     * Add the specified predicted images to the set of training images.
     * This API creates a batch of images from predicted images specified. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image and tag ids. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageCreateSummary object if successful.
     */
    public ImageCreateSummary createImagesFromPredictions(@NonNull UUID projectId, @NonNull ImageIdCreateBatch batch) {
        return createImagesFromPredictionsAsync(projectId, batch).block();
    }

    /**
     * Add the specified predicted images to the set of training images.
     * This API creates a batch of images from predicted images specified. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image and tag ids. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImageCreateSummary>> createImagesFromPredictionsWithRestResponseAsync(@NonNull UUID projectId, @NonNull ImageIdCreateBatch batch) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (batch == null) {
            throw new IllegalArgumentException("Parameter batch is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        Validator.validate(batch);
        return service.createImagesFromPredictions(projectId, this.endpoint(), batch, this.apiKey());
    }

    /**
     * Add the specified predicted images to the set of training images.
     * This API creates a batch of images from predicted images specified. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image and tag ids. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImageCreateSummary> createImagesFromPredictionsAsync(@NonNull UUID projectId, @NonNull ImageIdCreateBatch batch) {
        return createImagesFromPredictionsWithRestResponseAsync(projectId, batch)
            .flatMap((SimpleResponse<ImageCreateSummary> res) -> Mono.just(res.value()));
    }

    /**
     * Get region proposals for an image. Returns empty array if no proposals are found.
     * This API will get region proposals for an image along with confidences for the region. It returns an empty array if no proposals are found.
     *
     * @param projectId The project id.
     * @param imageId The image id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageRegionProposal object if successful.
     */
    public ImageRegionProposal getImageRegionProposals(@NonNull UUID projectId, @NonNull UUID imageId) {
        return getImageRegionProposalsAsync(projectId, imageId).block();
    }

    /**
     * Get region proposals for an image. Returns empty array if no proposals are found.
     * This API will get region proposals for an image along with confidences for the region. It returns an empty array if no proposals are found.
     *
     * @param projectId The project id.
     * @param imageId The image id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImageRegionProposal>> getImageRegionProposalsWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID imageId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (imageId == null) {
            throw new IllegalArgumentException("Parameter imageId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.getImageRegionProposals(projectId, imageId, this.endpoint(), this.apiKey());
    }

    /**
     * Get region proposals for an image. Returns empty array if no proposals are found.
     * This API will get region proposals for an image along with confidences for the region. It returns an empty array if no proposals are found.
     *
     * @param projectId The project id.
     * @param imageId The image id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImageRegionProposal> getImageRegionProposalsAsync(@NonNull UUID projectId, @NonNull UUID imageId) {
        return getImageRegionProposalsWithRestResponseAsync(projectId, imageId)
            .flatMap((SimpleResponse<ImageRegionProposal> res) -> Mono.just(res.value()));
    }

    /**
     * Delete a set of predicted images and their associated prediction results.
     *
     * @param projectId The project id.
     * @param ids The prediction ids. Limited to 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void deletePrediction(@NonNull UUID projectId, @NonNull List<UUID> ids) {
        deletePredictionAsync(projectId, ids).block();
    }

    /**
     * Delete a set of predicted images and their associated prediction results.
     *
     * @param projectId The project id.
     * @param ids The prediction ids. Limited to 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> deletePredictionWithRestResponseAsync(@NonNull UUID projectId, @NonNull List<UUID> ids) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (ids == null) {
            throw new IllegalArgumentException("Parameter ids is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        Validator.validate(ids);
        String idsConverted = this.serializerAdapter().serializeList(ids, CollectionFormat.CSV);
        return service.deletePrediction(projectId, this.endpoint(), idsConverted, this.apiKey());
    }

    /**
     * Delete a set of predicted images and their associated prediction results.
     *
     * @param projectId The project id.
     * @param ids The prediction ids. Limited to 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> deletePredictionAsync(@NonNull UUID projectId, @NonNull List<UUID> ids) {
        return deletePredictionWithRestResponseAsync(projectId, ids)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction quickTestImageUrl(@NonNull UUID projectId, @NonNull String url) {
        return quickTestImageUrlAsync(projectId, url).block();
    }

    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> quickTestImageUrlWithRestResponseAsync(@NonNull UUID projectId, @NonNull String url) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        final UUID iterationId = null;
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        return service.quickTestImageUrl(projectId, this.endpoint(), iterationId, this.apiKey(), imageUrl);
    }

    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> quickTestImageUrlAsync(@NonNull UUID projectId, @NonNull String url) {
        return quickTestImageUrlWithRestResponseAsync(projectId, url)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }

    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
     *             The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction quickTestImageUrl(@NonNull UUID projectId, @NonNull String url, UUID iterationId) {
        return quickTestImageUrlAsync(projectId, url, iterationId).block();
    }

    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
     *             The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> quickTestImageUrlWithRestResponseAsync(@NonNull UUID projectId, @NonNull String url, UUID iterationId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        return service.quickTestImageUrl(projectId, this.endpoint(), iterationId, this.apiKey(), imageUrl);
    }

    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
     *             The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> quickTestImageUrlAsync(@NonNull UUID projectId, @NonNull String url, UUID iterationId) {
        return quickTestImageUrlWithRestResponseAsync(projectId, url, iterationId)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }

    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction quickTestImage(@NonNull UUID projectId, @NonNull Flux<ByteBuffer> imageData) {
        return quickTestImageAsync(projectId, imageData).block();
    }

    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> quickTestImageWithRestResponseAsync(@NonNull UUID projectId, @NonNull Flux<ByteBuffer> imageData) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final UUID iterationId = null;
        return service.quickTestImage(projectId, this.endpoint(), iterationId, imageData, this.apiKey());
    }

    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> quickTestImageAsync(@NonNull UUID projectId, @NonNull Flux<ByteBuffer> imageData) {
        return quickTestImageWithRestResponseAsync(projectId, imageData)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }

    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
     *             The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    public ImagePrediction quickTestImage(@NonNull UUID projectId, @NonNull Flux<ByteBuffer> imageData, UUID iterationId) {
        return quickTestImageAsync(projectId, imageData, iterationId).block();
    }

    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
     *             The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<ImagePrediction>> quickTestImageWithRestResponseAsync(@NonNull UUID projectId, @NonNull Flux<ByteBuffer> imageData, UUID iterationId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (imageData == null) {
            throw new IllegalArgumentException("Parameter imageData is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.quickTestImage(projectId, this.endpoint(), iterationId, imageData, this.apiKey());
    }

    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
     *             The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<ImagePrediction> quickTestImageAsync(@NonNull UUID projectId, @NonNull Flux<ByteBuffer> imageData, UUID iterationId) {
        return quickTestImageWithRestResponseAsync(projectId, imageData, iterationId)
            .flatMap((SimpleResponse<ImagePrediction> res) -> Mono.just(res.value()));
    }

    /**
     * Get images that were sent to your prediction endpoint.
     *
     * @param projectId The project id.
     * @param query Parameters used to query the predictions. Limited to combining 2 tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PredictionQueryResult object if successful.
     */
    public PredictionQueryResult queryPredictions(@NonNull UUID projectId, @NonNull PredictionQueryToken query) {
        return queryPredictionsAsync(projectId, query).block();
    }

    /**
     * Get images that were sent to your prediction endpoint.
     *
     * @param projectId The project id.
     * @param query Parameters used to query the predictions. Limited to combining 2 tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<PredictionQueryResult>> queryPredictionsWithRestResponseAsync(@NonNull UUID projectId, @NonNull PredictionQueryToken query) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (query == null) {
            throw new IllegalArgumentException("Parameter query is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        Validator.validate(query);
        return service.queryPredictions(projectId, this.endpoint(), query, this.apiKey());
    }

    /**
     * Get images that were sent to your prediction endpoint.
     *
     * @param projectId The project id.
     * @param query Parameters used to query the predictions. Limited to combining 2 tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<PredictionQueryResult> queryPredictionsAsync(@NonNull UUID projectId, @NonNull PredictionQueryToken query) {
        return queryPredictionsWithRestResponseAsync(projectId, query)
            .flatMap((SimpleResponse<PredictionQueryResult> res) -> Mono.just(res.value()));
    }

    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IterationPerformance object if successful.
     */
    public IterationPerformance getIterationPerformance(@NonNull UUID projectId, @NonNull UUID iterationId) {
        return getIterationPerformanceAsync(projectId, iterationId).block();
    }

    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<IterationPerformance>> getIterationPerformanceWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (iterationId == null) {
            throw new IllegalArgumentException("Parameter iterationId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final Double threshold = null;
        final Double overlapThreshold = null;
        return service.getIterationPerformance(projectId, iterationId, this.endpoint(), threshold, overlapThreshold, this.apiKey());
    }

    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<IterationPerformance> getIterationPerformanceAsync(@NonNull UUID projectId, @NonNull UUID iterationId) {
        return getIterationPerformanceWithRestResponseAsync(projectId, iterationId)
            .flatMap((SimpleResponse<IterationPerformance> res) -> Mono.just(res.value()));
    }

    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @param threshold The threshold used to determine true predictions.
     * @param overlapThreshold If applicable, the bounding box overlap threshold used to determine true predictions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IterationPerformance object if successful.
     */
    public IterationPerformance getIterationPerformance(@NonNull UUID projectId, @NonNull UUID iterationId, Double threshold, Double overlapThreshold) {
        return getIterationPerformanceAsync(projectId, iterationId, threshold, overlapThreshold).block();
    }

    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @param threshold The threshold used to determine true predictions.
     * @param overlapThreshold If applicable, the bounding box overlap threshold used to determine true predictions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<IterationPerformance>> getIterationPerformanceWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId, Double threshold, Double overlapThreshold) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (iterationId == null) {
            throw new IllegalArgumentException("Parameter iterationId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.getIterationPerformance(projectId, iterationId, this.endpoint(), threshold, overlapThreshold, this.apiKey());
    }

    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @param threshold The threshold used to determine true predictions.
     * @param overlapThreshold If applicable, the bounding box overlap threshold used to determine true predictions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<IterationPerformance> getIterationPerformanceAsync(@NonNull UUID projectId, @NonNull UUID iterationId, Double threshold, Double overlapThreshold) {
        return getIterationPerformanceWithRestResponseAsync(projectId, iterationId, threshold, overlapThreshold)
            .flatMap((SimpleResponse<IterationPerformance> res) -> Mono.just(res.value()));
    }

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;ImagePerformance&gt; object if successful.
     */
    public List<ImagePerformance> getImagePerformances(@NonNull UUID projectId, @NonNull UUID iterationId) {
        return getImagePerformancesAsync(projectId, iterationId).block();
    }

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<ImagePerformance>>> getImagePerformancesWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (iterationId == null) {
            throw new IllegalArgumentException("Parameter iterationId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final List<UUID> tagIds = null;
        final String orderBy = null;
        final Integer take = 50;
        final Integer skip = 0;
        String tagIdsConverted = this.serializerAdapter().serializeList(tagIds, CollectionFormat.CSV);
        return service.getImagePerformances(projectId, iterationId, this.endpoint(), tagIdsConverted, orderBy, take, skip, this.apiKey());
    }

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<ImagePerformance>> getImagePerformancesAsync(@NonNull UUID projectId, @NonNull UUID iterationId) {
        return getImagePerformancesWithRestResponseAsync(projectId, iterationId)
            .flatMap((SimpleResponse<List<ImagePerformance>> res) -> Mono.just(res.value()));
    }

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'.
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;ImagePerformance&gt; object if successful.
     */
    public List<ImagePerformance> getImagePerformances(@NonNull UUID projectId, @NonNull UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip) {
        return getImagePerformancesAsync(projectId, iterationId, tagIds, orderBy, take, skip).block();
    }

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'.
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<ImagePerformance>>> getImagePerformancesWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (iterationId == null) {
            throw new IllegalArgumentException("Parameter iterationId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        Validator.validate(tagIds);
        String tagIdsConverted = this.serializerAdapter().serializeList(tagIds, CollectionFormat.CSV);
        return service.getImagePerformances(projectId, iterationId, this.endpoint(), tagIdsConverted, orderBy, take, skip, this.apiKey());
    }

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'.
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<ImagePerformance>> getImagePerformancesAsync(@NonNull UUID projectId, @NonNull UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip) {
        return getImagePerformancesWithRestResponseAsync(projectId, iterationId, tagIds, orderBy, take, skip)
            .flatMap((SimpleResponse<List<ImagePerformance>> res) -> Mono.just(res.value()));
    }

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     * training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    public int getImagePerformanceCount(@NonNull UUID projectId, @NonNull UUID iterationId) {
        return getImagePerformanceCountAsync(projectId, iterationId).block();
    }

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     * training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Integer>> getImagePerformanceCountWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (iterationId == null) {
            throw new IllegalArgumentException("Parameter iterationId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final List<UUID> tagIds = null;
        String tagIdsConverted = this.serializerAdapter().serializeList(tagIds, CollectionFormat.CSV);
        return service.getImagePerformanceCount(projectId, iterationId, this.endpoint(), tagIdsConverted, this.apiKey());
    }

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     * training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Integer> getImagePerformanceCountAsync(@NonNull UUID projectId, @NonNull UUID iterationId) {
        return getImagePerformanceCountWithRestResponseAsync(projectId, iterationId)
            .flatMap((SimpleResponse<Integer> res) -> Mono.just(res.value()));
    }

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     * training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    public int getImagePerformanceCount(@NonNull UUID projectId, @NonNull UUID iterationId, List<UUID> tagIds) {
        return getImagePerformanceCountAsync(projectId, iterationId, tagIds).block();
    }

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     * training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Integer>> getImagePerformanceCountWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId, List<UUID> tagIds) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (iterationId == null) {
            throw new IllegalArgumentException("Parameter iterationId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        Validator.validate(tagIds);
        String tagIdsConverted = this.serializerAdapter().serializeList(tagIds, CollectionFormat.CSV);
        return service.getImagePerformanceCount(projectId, iterationId, this.endpoint(), tagIdsConverted, this.apiKey());
    }

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     * training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Integer> getImagePerformanceCountAsync(@NonNull UUID projectId, @NonNull UUID iterationId, List<UUID> tagIds) {
        return getImagePerformanceCountWithRestResponseAsync(projectId, iterationId, tagIds)
            .flatMap((SimpleResponse<Integer> res) -> Mono.just(res.value()));
    }

    /**
     * Get your projects.
     *
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Project&gt; object if successful.
     */
    public List<Project> getProjects() {
        return getProjectsAsync().block();
    }

    /**
     * Get your projects.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<Project>>> getProjectsWithRestResponseAsync() {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.getProjects(this.endpoint(), this.apiKey());
    }

    /**
     * Get your projects.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<Project>> getProjectsAsync() {
        return getProjectsWithRestResponseAsync()
            .flatMap((SimpleResponse<List<Project>> res) -> Mono.just(res.value()));
    }

    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Project object if successful.
     */
    public Project createProject(@NonNull String name) {
        return createProjectAsync(name).block();
    }

    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Project>> createProjectWithRestResponseAsync(@NonNull String name) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final String description = null;
        final UUID domainId = null;
        final String classificationType = null;
        final List<String> targetExportPlatforms = null;
        String targetExportPlatformsConverted = this.serializerAdapter().serializeList(targetExportPlatforms, CollectionFormat.CSV);
        return service.createProject(this.endpoint(), name, description, domainId, classificationType, targetExportPlatformsConverted, this.apiKey());
    }

    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Project> createProjectAsync(@NonNull String name) {
        return createProjectWithRestResponseAsync(name)
            .flatMap((SimpleResponse<Project> res) -> Mono.just(res.value()));
    }

    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @param description The description of the project.
     * @param domainId The id of the domain to use for this project. Defaults to General.
     * @param classificationType The type of classifier to create for this project. Possible values include: 'Multiclass', 'Multilabel'.
     * @param targetExportPlatforms List of platforms the trained model is intending exporting to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Project object if successful.
     */
    public Project createProject(@NonNull String name, String description, UUID domainId, String classificationType, List<String> targetExportPlatforms) {
        return createProjectAsync(name, description, domainId, classificationType, targetExportPlatforms).block();
    }

    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @param description The description of the project.
     * @param domainId The id of the domain to use for this project. Defaults to General.
     * @param classificationType The type of classifier to create for this project. Possible values include: 'Multiclass', 'Multilabel'.
     * @param targetExportPlatforms List of platforms the trained model is intending exporting to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Project>> createProjectWithRestResponseAsync(@NonNull String name, String description, UUID domainId, String classificationType, List<String> targetExportPlatforms) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        Validator.validate(targetExportPlatforms);
        String targetExportPlatformsConverted = this.serializerAdapter().serializeList(targetExportPlatforms, CollectionFormat.CSV);
        return service.createProject(this.endpoint(), name, description, domainId, classificationType, targetExportPlatformsConverted, this.apiKey());
    }

    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @param description The description of the project.
     * @param domainId The id of the domain to use for this project. Defaults to General.
     * @param classificationType The type of classifier to create for this project. Possible values include: 'Multiclass', 'Multilabel'.
     * @param targetExportPlatforms List of platforms the trained model is intending exporting to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Project> createProjectAsync(@NonNull String name, String description, UUID domainId, String classificationType, List<String> targetExportPlatforms) {
        return createProjectWithRestResponseAsync(name, description, domainId, classificationType, targetExportPlatforms)
            .flatMap((SimpleResponse<Project> res) -> Mono.just(res.value()));
    }

    /**
     * Get a specific project.
     *
     * @param projectId The id of the project to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Project object if successful.
     */
    public Project getProject(@NonNull UUID projectId) {
        return getProjectAsync(projectId).block();
    }

    /**
     * Get a specific project.
     *
     * @param projectId The id of the project to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Project>> getProjectWithRestResponseAsync(@NonNull UUID projectId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.getProject(projectId, this.endpoint(), this.apiKey());
    }

    /**
     * Get a specific project.
     *
     * @param projectId The id of the project to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Project> getProjectAsync(@NonNull UUID projectId) {
        return getProjectWithRestResponseAsync(projectId)
            .flatMap((SimpleResponse<Project> res) -> Mono.just(res.value()));
    }

    /**
     * Delete a specific project.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void deleteProject(@NonNull UUID projectId) {
        deleteProjectAsync(projectId).block();
    }

    /**
     * Delete a specific project.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> deleteProjectWithRestResponseAsync(@NonNull UUID projectId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.deleteProject(projectId, this.endpoint(), this.apiKey());
    }

    /**
     * Delete a specific project.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> deleteProjectAsync(@NonNull UUID projectId) {
        return deleteProjectWithRestResponseAsync(projectId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Update a specific project.
     *
     * @param projectId The id of the project to update.
     * @param updatedProject The updated project model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Project object if successful.
     */
    public Project updateProject(@NonNull UUID projectId, @NonNull Project updatedProject) {
        return updateProjectAsync(projectId, updatedProject).block();
    }

    /**
     * Update a specific project.
     *
     * @param projectId The id of the project to update.
     * @param updatedProject The updated project model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Project>> updateProjectWithRestResponseAsync(@NonNull UUID projectId, @NonNull Project updatedProject) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (updatedProject == null) {
            throw new IllegalArgumentException("Parameter updatedProject is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        Validator.validate(updatedProject);
        return service.updateProject(projectId, this.endpoint(), updatedProject, this.apiKey());
    }

    /**
     * Update a specific project.
     *
     * @param projectId The id of the project to update.
     * @param updatedProject The updated project model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Project> updateProjectAsync(@NonNull UUID projectId, @NonNull Project updatedProject) {
        return updateProjectWithRestResponseAsync(projectId, updatedProject)
            .flatMap((SimpleResponse<Project> res) -> Mono.just(res.value()));
    }

    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Iteration object if successful.
     */
    public Iteration trainProject(@NonNull UUID projectId) {
        return trainProjectAsync(projectId).block();
    }

    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Iteration>> trainProjectWithRestResponseAsync(@NonNull UUID projectId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final String trainingType = null;
        final Integer reservedBudgetInHours = 0;
        final Boolean forceTrain = false;
        final String notificationEmailAddress = null;
        return service.trainProject(projectId, this.endpoint(), trainingType, reservedBudgetInHours, forceTrain, notificationEmailAddress, this.apiKey());
    }

    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Iteration> trainProjectAsync(@NonNull UUID projectId) {
        return trainProjectWithRestResponseAsync(projectId)
            .flatMap((SimpleResponse<Iteration> res) -> Mono.just(res.value()));
    }

    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @param trainingType The type of training to use to train the project (default: Regular). Possible values include: 'Regular', 'Advanced'.
     * @param reservedBudgetInHours The number of hours reserved as budget for training (if applicable).
     * @param forceTrain Whether to force train even if dataset and configuration does not change (default: false).
     * @param notificationEmailAddress The email address to send notification to when training finishes (default: null).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Iteration object if successful.
     */
    public Iteration trainProject(@NonNull UUID projectId, String trainingType, Integer reservedBudgetInHours, Boolean forceTrain, String notificationEmailAddress) {
        return trainProjectAsync(projectId, trainingType, reservedBudgetInHours, forceTrain, notificationEmailAddress).block();
    }

    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @param trainingType The type of training to use to train the project (default: Regular). Possible values include: 'Regular', 'Advanced'.
     * @param reservedBudgetInHours The number of hours reserved as budget for training (if applicable).
     * @param forceTrain Whether to force train even if dataset and configuration does not change (default: false).
     * @param notificationEmailAddress The email address to send notification to when training finishes (default: null).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Iteration>> trainProjectWithRestResponseAsync(@NonNull UUID projectId, String trainingType, Integer reservedBudgetInHours, Boolean forceTrain, String notificationEmailAddress) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.trainProject(projectId, this.endpoint(), trainingType, reservedBudgetInHours, forceTrain, notificationEmailAddress, this.apiKey());
    }

    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @param trainingType The type of training to use to train the project (default: Regular). Possible values include: 'Regular', 'Advanced'.
     * @param reservedBudgetInHours The number of hours reserved as budget for training (if applicable).
     * @param forceTrain Whether to force train even if dataset and configuration does not change (default: false).
     * @param notificationEmailAddress The email address to send notification to when training finishes (default: null).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Iteration> trainProjectAsync(@NonNull UUID projectId, String trainingType, Integer reservedBudgetInHours, Boolean forceTrain, String notificationEmailAddress) {
        return trainProjectWithRestResponseAsync(projectId, trainingType, reservedBudgetInHours, forceTrain, notificationEmailAddress)
            .flatMap((SimpleResponse<Iteration> res) -> Mono.just(res.value()));
    }

    /**
     * Get iterations for the project.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Iteration&gt; object if successful.
     */
    public List<Iteration> getIterations(@NonNull UUID projectId) {
        return getIterationsAsync(projectId).block();
    }

    /**
     * Get iterations for the project.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<Iteration>>> getIterationsWithRestResponseAsync(@NonNull UUID projectId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.getIterations(projectId, this.endpoint(), this.apiKey());
    }

    /**
     * Get iterations for the project.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<Iteration>> getIterationsAsync(@NonNull UUID projectId) {
        return getIterationsWithRestResponseAsync(projectId)
            .flatMap((SimpleResponse<List<Iteration>> res) -> Mono.just(res.value()));
    }

    /**
     * Get a specific iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Iteration object if successful.
     */
    public Iteration getIteration(@NonNull UUID projectId, @NonNull UUID iterationId) {
        return getIterationAsync(projectId, iterationId).block();
    }

    /**
     * Get a specific iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Iteration>> getIterationWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (iterationId == null) {
            throw new IllegalArgumentException("Parameter iterationId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.getIteration(projectId, iterationId, this.endpoint(), this.apiKey());
    }

    /**
     * Get a specific iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Iteration> getIterationAsync(@NonNull UUID projectId, @NonNull UUID iterationId) {
        return getIterationWithRestResponseAsync(projectId, iterationId)
            .flatMap((SimpleResponse<Iteration> res) -> Mono.just(res.value()));
    }

    /**
     * Delete a specific iteration of a project.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void deleteIteration(@NonNull UUID projectId, @NonNull UUID iterationId) {
        deleteIterationAsync(projectId, iterationId).block();
    }

    /**
     * Delete a specific iteration of a project.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> deleteIterationWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (iterationId == null) {
            throw new IllegalArgumentException("Parameter iterationId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.deleteIteration(projectId, iterationId, this.endpoint(), this.apiKey());
    }

    /**
     * Delete a specific iteration of a project.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> deleteIterationAsync(@NonNull UUID projectId, @NonNull UUID iterationId) {
        return deleteIterationWithRestResponseAsync(projectId, iterationId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Update a specific iteration.
     *
     * @param projectId Project id.
     * @param iterationId Iteration id.
     * @param name Gets or sets the name of the iteration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Iteration object if successful.
     */
    public Iteration updateIteration(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String name) {
        return updateIterationAsync(projectId, iterationId, name).block();
    }

    /**
     * Update a specific iteration.
     *
     * @param projectId Project id.
     * @param iterationId Iteration id.
     * @param name Gets or sets the name of the iteration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Iteration>> updateIterationWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String name) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (iterationId == null) {
            throw new IllegalArgumentException("Parameter iterationId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        Iteration updatedIteration = new Iteration();
        updatedIteration.withName(name);
        return service.updateIteration(projectId, iterationId, this.endpoint(), this.apiKey(), updatedIteration);
    }

    /**
     * Update a specific iteration.
     *
     * @param projectId Project id.
     * @param iterationId Iteration id.
     * @param name Gets or sets the name of the iteration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Iteration> updateIterationAsync(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String name) {
        return updateIterationWithRestResponseAsync(projectId, iterationId, name)
            .flatMap((SimpleResponse<Iteration> res) -> Mono.just(res.value()));
    }

    /**
     * Publish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param publishName The name to give the published iteration.
     * @param predictionId The id of the prediction resource to publish to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the boolean object if successful.
     */
    public boolean publishIteration(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String publishName, @NonNull String predictionId) {
        return publishIterationAsync(projectId, iterationId, publishName, predictionId).block();
    }

    /**
     * Publish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param publishName The name to give the published iteration.
     * @param predictionId The id of the prediction resource to publish to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Boolean>> publishIterationWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String publishName, @NonNull String predictionId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (iterationId == null) {
            throw new IllegalArgumentException("Parameter iterationId is required and cannot be null.");
        }
        if (publishName == null) {
            throw new IllegalArgumentException("Parameter publishName is required and cannot be null.");
        }
        if (predictionId == null) {
            throw new IllegalArgumentException("Parameter predictionId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.publishIteration(projectId, iterationId, this.endpoint(), publishName, predictionId, this.apiKey());
    }

    /**
     * Publish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param publishName The name to give the published iteration.
     * @param predictionId The id of the prediction resource to publish to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Boolean> publishIterationAsync(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String publishName, @NonNull String predictionId) {
        return publishIterationWithRestResponseAsync(projectId, iterationId, publishName, predictionId)
            .flatMap((SimpleResponse<Boolean> res) -> Mono.just(res.value()));
    }

    /**
     * Unpublish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void unpublishIteration(@NonNull UUID projectId, @NonNull UUID iterationId) {
        unpublishIterationAsync(projectId, iterationId).block();
    }

    /**
     * Unpublish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> unpublishIterationWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (iterationId == null) {
            throw new IllegalArgumentException("Parameter iterationId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.unpublishIteration(projectId, iterationId, this.endpoint(), this.apiKey());
    }

    /**
     * Unpublish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> unpublishIterationAsync(@NonNull UUID projectId, @NonNull UUID iterationId) {
        return unpublishIterationWithRestResponseAsync(projectId, iterationId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Get the list of exports for a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Export&gt; object if successful.
     */
    public List<Export> getExports(@NonNull UUID projectId, @NonNull UUID iterationId) {
        return getExportsAsync(projectId, iterationId).block();
    }

    /**
     * Get the list of exports for a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<Export>>> getExportsWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (iterationId == null) {
            throw new IllegalArgumentException("Parameter iterationId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.getExports(projectId, iterationId, this.endpoint(), this.apiKey());
    }

    /**
     * Get the list of exports for a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<Export>> getExportsAsync(@NonNull UUID projectId, @NonNull UUID iterationId) {
        return getExportsWithRestResponseAsync(projectId, iterationId)
            .flatMap((SimpleResponse<List<Export>> res) -> Mono.just(res.value()));
    }

    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Export object if successful.
     */
    public Export exportIteration(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String platform) {
        return exportIterationAsync(projectId, iterationId, platform).block();
    }

    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Export>> exportIterationWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String platform) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (iterationId == null) {
            throw new IllegalArgumentException("Parameter iterationId is required and cannot be null.");
        }
        if (platform == null) {
            throw new IllegalArgumentException("Parameter platform is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final String flavor = null;
        return service.exportIteration(projectId, iterationId, this.endpoint(), platform, flavor, this.apiKey());
    }

    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Export> exportIterationAsync(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String platform) {
        return exportIterationWithRestResponseAsync(projectId, iterationId, platform)
            .flatMap((SimpleResponse<Export> res) -> Mono.just(res.value()));
    }

    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'.
     * @param flavor The flavor of the target platform. Possible values include: 'Linux', 'Windows', 'ONNX10', 'ONNX12', 'ARM'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Export object if successful.
     */
    public Export exportIteration(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String platform, String flavor) {
        return exportIterationAsync(projectId, iterationId, platform, flavor).block();
    }

    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'.
     * @param flavor The flavor of the target platform. Possible values include: 'Linux', 'Windows', 'ONNX10', 'ONNX12', 'ARM'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Export>> exportIterationWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String platform, String flavor) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (iterationId == null) {
            throw new IllegalArgumentException("Parameter iterationId is required and cannot be null.");
        }
        if (platform == null) {
            throw new IllegalArgumentException("Parameter platform is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.exportIteration(projectId, iterationId, this.endpoint(), platform, flavor, this.apiKey());
    }

    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'.
     * @param flavor The flavor of the target platform. Possible values include: 'Linux', 'Windows', 'ONNX10', 'ONNX12', 'ARM'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Export> exportIterationAsync(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String platform, String flavor) {
        return exportIterationWithRestResponseAsync(projectId, iterationId, platform, flavor)
            .flatMap((SimpleResponse<Export> res) -> Mono.just(res.value()));
    }

    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Tag object if successful.
     */
    public Tag getTag(@NonNull UUID projectId, @NonNull UUID tagId) {
        return getTagAsync(projectId, tagId).block();
    }

    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Tag>> getTagWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID tagId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final UUID iterationId = null;
        return service.getTag(projectId, tagId, this.endpoint(), iterationId, this.apiKey());
    }

    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Tag> getTagAsync(@NonNull UUID projectId, @NonNull UUID tagId) {
        return getTagWithRestResponseAsync(projectId, tagId)
            .flatMap((SimpleResponse<Tag> res) -> Mono.just(res.value()));
    }

    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @param iterationId The iteration to retrieve this tag from. Optional, defaults to current training set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Tag object if successful.
     */
    public Tag getTag(@NonNull UUID projectId, @NonNull UUID tagId, UUID iterationId) {
        return getTagAsync(projectId, tagId, iterationId).block();
    }

    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @param iterationId The iteration to retrieve this tag from. Optional, defaults to current training set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Tag>> getTagWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID tagId, UUID iterationId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.getTag(projectId, tagId, this.endpoint(), iterationId, this.apiKey());
    }

    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @param iterationId The iteration to retrieve this tag from. Optional, defaults to current training set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Tag> getTagAsync(@NonNull UUID projectId, @NonNull UUID tagId, UUID iterationId) {
        return getTagWithRestResponseAsync(projectId, tagId, iterationId)
            .flatMap((SimpleResponse<Tag> res) -> Mono.just(res.value()));
    }

    /**
     * Delete a tag from the project.
     *
     * @param projectId The project id.
     * @param tagId Id of the tag to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void deleteTag(@NonNull UUID projectId, @NonNull UUID tagId) {
        deleteTagAsync(projectId, tagId).block();
    }

    /**
     * Delete a tag from the project.
     *
     * @param projectId The project id.
     * @param tagId Id of the tag to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> deleteTagWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID tagId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.deleteTag(projectId, tagId, this.endpoint(), this.apiKey());
    }

    /**
     * Delete a tag from the project.
     *
     * @param projectId The project id.
     * @param tagId Id of the tag to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> deleteTagAsync(@NonNull UUID projectId, @NonNull UUID tagId) {
        return deleteTagWithRestResponseAsync(projectId, tagId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Update a tag.
     *
     * @param projectId The project id.
     * @param tagId The id of the target tag.
     * @param updatedTag The updated tag model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Tag object if successful.
     */
    public Tag updateTag(@NonNull UUID projectId, @NonNull UUID tagId, @NonNull Tag updatedTag) {
        return updateTagAsync(projectId, tagId, updatedTag).block();
    }

    /**
     * Update a tag.
     *
     * @param projectId The project id.
     * @param tagId The id of the target tag.
     * @param updatedTag The updated tag model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Tag>> updateTagWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID tagId, @NonNull Tag updatedTag) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (updatedTag == null) {
            throw new IllegalArgumentException("Parameter updatedTag is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        Validator.validate(updatedTag);
        return service.updateTag(projectId, tagId, this.endpoint(), updatedTag, this.apiKey());
    }

    /**
     * Update a tag.
     *
     * @param projectId The project id.
     * @param tagId The id of the target tag.
     * @param updatedTag The updated tag model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Tag> updateTagAsync(@NonNull UUID projectId, @NonNull UUID tagId, @NonNull Tag updatedTag) {
        return updateTagWithRestResponseAsync(projectId, tagId, updatedTag)
            .flatMap((SimpleResponse<Tag> res) -> Mono.just(res.value()));
    }

    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Tag&gt; object if successful.
     */
    public List<Tag> getTags(@NonNull UUID projectId) {
        return getTagsAsync(projectId).block();
    }

    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<Tag>>> getTagsWithRestResponseAsync(@NonNull UUID projectId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final UUID iterationId = null;
        return service.getTags(projectId, this.endpoint(), iterationId, this.apiKey());
    }

    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<Tag>> getTagsAsync(@NonNull UUID projectId) {
        return getTagsWithRestResponseAsync(projectId)
            .flatMap((SimpleResponse<List<Tag>> res) -> Mono.just(res.value()));
    }

    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Tag&gt; object if successful.
     */
    public List<Tag> getTags(@NonNull UUID projectId, UUID iterationId) {
        return getTagsAsync(projectId, iterationId).block();
    }

    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<Tag>>> getTagsWithRestResponseAsync(@NonNull UUID projectId, UUID iterationId) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.getTags(projectId, this.endpoint(), iterationId, this.apiKey());
    }

    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<Tag>> getTagsAsync(@NonNull UUID projectId, UUID iterationId) {
        return getTagsWithRestResponseAsync(projectId, iterationId)
            .flatMap((SimpleResponse<List<Tag>> res) -> Mono.just(res.value()));
    }

    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Tag object if successful.
     */
    public Tag createTag(@NonNull UUID projectId, @NonNull String name) {
        return createTagAsync(projectId, name).block();
    }

    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Tag>> createTagWithRestResponseAsync(@NonNull UUID projectId, @NonNull String name) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        final String description = null;
        final String type = null;
        return service.createTag(projectId, this.endpoint(), name, description, type, this.apiKey());
    }

    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Tag> createTagAsync(@NonNull UUID projectId, @NonNull String name) {
        return createTagWithRestResponseAsync(projectId, name)
            .flatMap((SimpleResponse<Tag> res) -> Mono.just(res.value()));
    }

    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @param description Optional description for the tag.
     * @param type Optional type for the tag. Possible values include: 'Regular', 'Negative'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Tag object if successful.
     */
    public Tag createTag(@NonNull UUID projectId, @NonNull String name, String description, String type) {
        return createTagAsync(projectId, name, description, type).block();
    }

    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @param description Optional description for the tag.
     * @param type Optional type for the tag. Possible values include: 'Regular', 'Negative'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Tag>> createTagWithRestResponseAsync(@NonNull UUID projectId, @NonNull String name, String description, String type) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (projectId == null) {
            throw new IllegalArgumentException("Parameter projectId is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.apiKey() == null) {
            throw new IllegalArgumentException("Parameter this.apiKey() is required and cannot be null.");
        }
        return service.createTag(projectId, this.endpoint(), name, description, type, this.apiKey());
    }

    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @param description Optional description for the tag.
     * @param type Optional type for the tag. Possible values include: 'Regular', 'Negative'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Tag> createTagAsync(@NonNull UUID projectId, @NonNull String name, String description, String type) {
        return createTagWithRestResponseAsync(projectId, name, description, type)
            .flatMap((SimpleResponse<Tag> res) -> Mono.just(res.value()));
    }
}
