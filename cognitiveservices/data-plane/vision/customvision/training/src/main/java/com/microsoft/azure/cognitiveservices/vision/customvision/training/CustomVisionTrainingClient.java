/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.customvision.training;

import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.http.rest.VoidResponse;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CustomVisionErrorException;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Domain;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Export;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Image;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageFileCreateBatch;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageIdCreateBatch;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImagePerformance;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImagePrediction;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionCreateEntry;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionCreateSummary;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionProposal;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageTagCreateEntry;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageTagCreateSummary;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageUrlCreateBatch;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.IterationPerformance;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.PredictionQueryResult;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.PredictionQueryToken;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag;
import io.netty.buffer.ByteBuf;
import java.util.List;
import java.util.UUID;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * The interface for CustomVisionTrainingClient class.
 */
public interface CustomVisionTrainingClient {
    /**
     * Gets API key.
     *
     * @return the apiKey value.
     */
    String apiKey();

    /**
     * Sets API key.
     *
     * @param apiKey the apiKey value.
     * @return the service client itself.
     */
    CustomVisionTrainingClient withApiKey(String apiKey);

    /**
     * Gets Supported Cognitive Services endpoints.
     *
     * @return the endpoint value.
     */
    String endpoint();

    /**
     * Sets Supported Cognitive Services endpoints.
     *
     * @param endpoint the endpoint value.
     * @return the service client itself.
     */
    CustomVisionTrainingClient withEndpoint(String endpoint);

    /**
     * Get a list of the available domains.
     *
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Domain&gt; object if successful.
     */
    List<Domain> getDomains();

    /**
     * Get a list of the available domains.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<List<Domain>>> getDomainsWithRestResponseAsync();

    /**
     * Get a list of the available domains.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<List<Domain>> getDomainsAsync();

    /**
     * Get information about a specific domain.
     *
     * @param domainId The id of the domain to get information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Domain object if successful.
     */
    Domain getDomain(@NonNull UUID domainId);

    /**
     * Get information about a specific domain.
     *
     * @param domainId The id of the domain to get information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Domain>> getDomainWithRestResponseAsync(@NonNull UUID domainId);

    /**
     * Get information about a specific domain.
     *
     * @param domainId The id of the domain to get information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Domain> getDomainAsync(@NonNull UUID domainId);

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    int getTaggedImageCount(@NonNull UUID projectId);

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Integer>> getTaggedImageCountWithRestResponseAsync(@NonNull UUID projectId);

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Integer> getTaggedImageCountAsync(@NonNull UUID projectId);

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    int getTaggedImageCount(@NonNull UUID projectId, UUID iterationId, List<UUID> tagIds);

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Integer>> getTaggedImageCountWithRestResponseAsync(@NonNull UUID projectId, UUID iterationId, List<UUID> tagIds);

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Integer> getTaggedImageCountAsync(@NonNull UUID projectId, UUID iterationId, List<UUID> tagIds);

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    int getUntaggedImageCount(@NonNull UUID projectId);

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Integer>> getUntaggedImageCountWithRestResponseAsync(@NonNull UUID projectId);

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Integer> getUntaggedImageCountAsync(@NonNull UUID projectId);

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    int getUntaggedImageCount(@NonNull UUID projectId, UUID iterationId);

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Integer>> getUntaggedImageCountWithRestResponseAsync(@NonNull UUID projectId, UUID iterationId);

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Integer> getUntaggedImageCountAsync(@NonNull UUID projectId, UUID iterationId);

    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageTagCreateSummary object if successful.
     */
    ImageTagCreateSummary createImageTags(@NonNull UUID projectId);

    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImageTagCreateSummary>> createImageTagsWithRestResponseAsync(@NonNull UUID projectId);

    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImageTagCreateSummary> createImageTagsAsync(@NonNull UUID projectId);

    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @param tags Image Tag entries to include in this batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageTagCreateSummary object if successful.
     */
    ImageTagCreateSummary createImageTags(@NonNull UUID projectId, List<ImageTagCreateEntry> tags);

    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @param tags Image Tag entries to include in this batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImageTagCreateSummary>> createImageTagsWithRestResponseAsync(@NonNull UUID projectId, List<ImageTagCreateEntry> tags);

    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @param tags Image Tag entries to include in this batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImageTagCreateSummary> createImageTagsAsync(@NonNull UUID projectId, List<ImageTagCreateEntry> tags);

    /**
     * Remove a set of tags from a set of images.
     *
     * @param projectId The project id.
     * @param imageIds Image ids. Limited to 64 images.
     * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteImageTags(@NonNull UUID projectId, @NonNull List<UUID> imageIds, @NonNull List<UUID> tagIds);

    /**
     * Remove a set of tags from a set of images.
     *
     * @param projectId The project id.
     * @param imageIds Image ids. Limited to 64 images.
     * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<VoidResponse> deleteImageTagsWithRestResponseAsync(@NonNull UUID projectId, @NonNull List<UUID> imageIds, @NonNull List<UUID> tagIds);

    /**
     * Remove a set of tags from a set of images.
     *
     * @param projectId The project id.
     * @param imageIds Image ids. Limited to 64 images.
     * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> deleteImageTagsAsync(@NonNull UUID projectId, @NonNull List<UUID> imageIds, @NonNull List<UUID> tagIds);

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     * There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageRegionCreateSummary object if successful.
     */
    ImageRegionCreateSummary createImageRegions(@NonNull UUID projectId);

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     * There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImageRegionCreateSummary>> createImageRegionsWithRestResponseAsync(@NonNull UUID projectId);

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     * There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImageRegionCreateSummary> createImageRegionsAsync(@NonNull UUID projectId);

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     * There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @param regions the List&lt;ImageRegionCreateEntry&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageRegionCreateSummary object if successful.
     */
    ImageRegionCreateSummary createImageRegions(@NonNull UUID projectId, List<ImageRegionCreateEntry> regions);

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     * There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @param regions the List&lt;ImageRegionCreateEntry&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImageRegionCreateSummary>> createImageRegionsWithRestResponseAsync(@NonNull UUID projectId, List<ImageRegionCreateEntry> regions);

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     * There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @param regions the List&lt;ImageRegionCreateEntry&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImageRegionCreateSummary> createImageRegionsAsync(@NonNull UUID projectId, List<ImageRegionCreateEntry> regions);

    /**
     * Delete a set of image regions.
     *
     * @param projectId The project id.
     * @param regionIds Regions to delete. Limited to 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteImageRegions(@NonNull UUID projectId, @NonNull List<UUID> regionIds);

    /**
     * Delete a set of image regions.
     *
     * @param projectId The project id.
     * @param regionIds Regions to delete. Limited to 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<VoidResponse> deleteImageRegionsWithRestResponseAsync(@NonNull UUID projectId, @NonNull List<UUID> regionIds);

    /**
     * Delete a set of image regions.
     *
     * @param projectId The project id.
     * @param regionIds Regions to delete. Limited to 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> deleteImageRegionsAsync(@NonNull UUID projectId, @NonNull List<UUID> regionIds);

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Image&gt; object if successful.
     */
    List<Image> getTaggedImages(@NonNull UUID projectId);

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<List<Image>>> getTaggedImagesWithRestResponseAsync(@NonNull UUID projectId);

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<List<Image>> getTaggedImagesAsync(@NonNull UUID projectId);

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'.
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Image&gt; object if successful.
     */
    List<Image> getTaggedImages(@NonNull UUID projectId, UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip);

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'.
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<List<Image>>> getTaggedImagesWithRestResponseAsync(@NonNull UUID projectId, UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip);

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'.
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<List<Image>> getTaggedImagesAsync(@NonNull UUID projectId, UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip);

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Image&gt; object if successful.
     */
    List<Image> getUntaggedImages(@NonNull UUID projectId);

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<List<Image>>> getUntaggedImagesWithRestResponseAsync(@NonNull UUID projectId);

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<List<Image>> getUntaggedImagesAsync(@NonNull UUID projectId);

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'.
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Image&gt; object if successful.
     */
    List<Image> getUntaggedImages(@NonNull UUID projectId, UUID iterationId, String orderBy, Integer take, Integer skip);

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'.
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<List<Image>>> getUntaggedImagesWithRestResponseAsync(@NonNull UUID projectId, UUID iterationId, String orderBy, Integer take, Integer skip);

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'.
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<List<Image>> getUntaggedImagesAsync(@NonNull UUID projectId, UUID iterationId, String orderBy, Integer take, Integer skip);

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Image&gt; object if successful.
     */
    List<Image> getImagesByIds(@NonNull UUID projectId);

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<List<Image>>> getImagesByIdsWithRestResponseAsync(@NonNull UUID projectId);

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<List<Image>> getImagesByIdsAsync(@NonNull UUID projectId);

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @param imageIds The list of image ids to retrieve. Limited to 256.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Image&gt; object if successful.
     */
    List<Image> getImagesByIds(@NonNull UUID projectId, List<UUID> imageIds, UUID iterationId);

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @param imageIds The list of image ids to retrieve. Limited to 256.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<List<Image>>> getImagesByIdsWithRestResponseAsync(@NonNull UUID projectId, List<UUID> imageIds, UUID iterationId);

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     * current workspace is used.
     *
     * @param projectId The project id.
     * @param imageIds The list of image ids to retrieve. Limited to 256.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<List<Image>> getImagesByIdsAsync(@NonNull UUID projectId, List<UUID> imageIds, UUID iterationId);

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     * multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageCreateSummary object if successful.
     */
    ImageCreateSummary createImagesFromData(@NonNull UUID projectId, @NonNull Flux<ByteBuf> imageData);

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     * multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImageCreateSummary>> createImagesFromDataWithRestResponseAsync(@NonNull UUID projectId, @NonNull Flux<ByteBuf> imageData);

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     * multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImageCreateSummary> createImagesFromDataAsync(@NonNull UUID projectId, @NonNull Flux<ByteBuf> imageData);

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     * multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param tagIds The tags ids with which to tag each image. Limited to 20.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageCreateSummary object if successful.
     */
    ImageCreateSummary createImagesFromData(@NonNull UUID projectId, @NonNull Flux<ByteBuf> imageData, List<UUID> tagIds);

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     * multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param tagIds The tags ids with which to tag each image. Limited to 20.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImageCreateSummary>> createImagesFromDataWithRestResponseAsync(@NonNull UUID projectId, @NonNull Flux<ByteBuf> imageData, List<UUID> tagIds);

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     * multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param tagIds The tags ids with which to tag each image. Limited to 20.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImageCreateSummary> createImagesFromDataAsync(@NonNull UUID projectId, @NonNull Flux<ByteBuf> imageData, List<UUID> tagIds);

    /**
     * Delete images from the set of training images.
     *
     * @param projectId The project id.
     * @param imageIds Ids of the images to be deleted. Limited to 256 images per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteImages(@NonNull UUID projectId, @NonNull List<UUID> imageIds);

    /**
     * Delete images from the set of training images.
     *
     * @param projectId The project id.
     * @param imageIds Ids of the images to be deleted. Limited to 256 images per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<VoidResponse> deleteImagesWithRestResponseAsync(@NonNull UUID projectId, @NonNull List<UUID> imageIds);

    /**
     * Delete images from the set of training images.
     *
     * @param projectId The project id.
     * @param imageIds Ids of the images to be deleted. Limited to 256 images per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> deleteImagesAsync(@NonNull UUID projectId, @NonNull List<UUID> imageIds);

    /**
     * Add the provided batch of images to the set of training images.
     * This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch The batch of image files to add. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageCreateSummary object if successful.
     */
    ImageCreateSummary createImagesFromFiles(@NonNull UUID projectId, @NonNull ImageFileCreateBatch batch);

    /**
     * Add the provided batch of images to the set of training images.
     * This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch The batch of image files to add. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImageCreateSummary>> createImagesFromFilesWithRestResponseAsync(@NonNull UUID projectId, @NonNull ImageFileCreateBatch batch);

    /**
     * Add the provided batch of images to the set of training images.
     * This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch The batch of image files to add. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImageCreateSummary> createImagesFromFilesAsync(@NonNull UUID projectId, @NonNull ImageFileCreateBatch batch);

    /**
     * Add the provided images urls to the set of training images.
     * This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image urls and tag ids. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageCreateSummary object if successful.
     */
    ImageCreateSummary createImagesFromUrls(@NonNull UUID projectId, @NonNull ImageUrlCreateBatch batch);

    /**
     * Add the provided images urls to the set of training images.
     * This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image urls and tag ids. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImageCreateSummary>> createImagesFromUrlsWithRestResponseAsync(@NonNull UUID projectId, @NonNull ImageUrlCreateBatch batch);

    /**
     * Add the provided images urls to the set of training images.
     * This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image urls and tag ids. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImageCreateSummary> createImagesFromUrlsAsync(@NonNull UUID projectId, @NonNull ImageUrlCreateBatch batch);

    /**
     * Add the specified predicted images to the set of training images.
     * This API creates a batch of images from predicted images specified. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image and tag ids. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageCreateSummary object if successful.
     */
    ImageCreateSummary createImagesFromPredictions(@NonNull UUID projectId, @NonNull ImageIdCreateBatch batch);

    /**
     * Add the specified predicted images to the set of training images.
     * This API creates a batch of images from predicted images specified. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image and tag ids. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImageCreateSummary>> createImagesFromPredictionsWithRestResponseAsync(@NonNull UUID projectId, @NonNull ImageIdCreateBatch batch);

    /**
     * Add the specified predicted images to the set of training images.
     * This API creates a batch of images from predicted images specified. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image and tag ids. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImageCreateSummary> createImagesFromPredictionsAsync(@NonNull UUID projectId, @NonNull ImageIdCreateBatch batch);

    /**
     * Get region proposals for an image. Returns empty array if no proposals are found.
     * This API will get region proposals for an image along with confidences for the region. It returns an empty array if no proposals are found.
     *
     * @param projectId The project id.
     * @param imageId The image id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImageRegionProposal object if successful.
     */
    ImageRegionProposal getImageRegionProposals(@NonNull UUID projectId, @NonNull UUID imageId);

    /**
     * Get region proposals for an image. Returns empty array if no proposals are found.
     * This API will get region proposals for an image along with confidences for the region. It returns an empty array if no proposals are found.
     *
     * @param projectId The project id.
     * @param imageId The image id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImageRegionProposal>> getImageRegionProposalsWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID imageId);

    /**
     * Get region proposals for an image. Returns empty array if no proposals are found.
     * This API will get region proposals for an image along with confidences for the region. It returns an empty array if no proposals are found.
     *
     * @param projectId The project id.
     * @param imageId The image id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImageRegionProposal> getImageRegionProposalsAsync(@NonNull UUID projectId, @NonNull UUID imageId);

    /**
     * Delete a set of predicted images and their associated prediction results.
     *
     * @param projectId The project id.
     * @param ids The prediction ids. Limited to 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deletePrediction(@NonNull UUID projectId, @NonNull List<UUID> ids);

    /**
     * Delete a set of predicted images and their associated prediction results.
     *
     * @param projectId The project id.
     * @param ids The prediction ids. Limited to 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<VoidResponse> deletePredictionWithRestResponseAsync(@NonNull UUID projectId, @NonNull List<UUID> ids);

    /**
     * Delete a set of predicted images and their associated prediction results.
     *
     * @param projectId The project id.
     * @param ids The prediction ids. Limited to 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> deletePredictionAsync(@NonNull UUID projectId, @NonNull List<UUID> ids);

    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction quickTestImageUrl(@NonNull UUID projectId, @NonNull String url);

    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> quickTestImageUrlWithRestResponseAsync(@NonNull UUID projectId, @NonNull String url);

    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> quickTestImageUrlAsync(@NonNull UUID projectId, @NonNull String url);

    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
     *             The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction quickTestImageUrl(@NonNull UUID projectId, @NonNull String url, UUID iterationId);

    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
     *             The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> quickTestImageUrlWithRestResponseAsync(@NonNull UUID projectId, @NonNull String url, UUID iterationId);

    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
     *             The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> quickTestImageUrlAsync(@NonNull UUID projectId, @NonNull String url, UUID iterationId);

    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction quickTestImage(@NonNull UUID projectId, @NonNull Flux<ByteBuf> imageData);

    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> quickTestImageWithRestResponseAsync(@NonNull UUID projectId, @NonNull Flux<ByteBuf> imageData);

    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> quickTestImageAsync(@NonNull UUID projectId, @NonNull Flux<ByteBuf> imageData);

    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
     *             The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction quickTestImage(@NonNull UUID projectId, @NonNull Flux<ByteBuf> imageData, UUID iterationId);

    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
     *             The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<ImagePrediction>> quickTestImageWithRestResponseAsync(@NonNull UUID projectId, @NonNull Flux<ByteBuf> imageData, UUID iterationId);

    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
     *             The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<ImagePrediction> quickTestImageAsync(@NonNull UUID projectId, @NonNull Flux<ByteBuf> imageData, UUID iterationId);

    /**
     * Get images that were sent to your prediction endpoint.
     *
     * @param projectId The project id.
     * @param query Parameters used to query the predictions. Limited to combining 2 tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PredictionQueryResult object if successful.
     */
    PredictionQueryResult queryPredictions(@NonNull UUID projectId, @NonNull PredictionQueryToken query);

    /**
     * Get images that were sent to your prediction endpoint.
     *
     * @param projectId The project id.
     * @param query Parameters used to query the predictions. Limited to combining 2 tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<PredictionQueryResult>> queryPredictionsWithRestResponseAsync(@NonNull UUID projectId, @NonNull PredictionQueryToken query);

    /**
     * Get images that were sent to your prediction endpoint.
     *
     * @param projectId The project id.
     * @param query Parameters used to query the predictions. Limited to combining 2 tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<PredictionQueryResult> queryPredictionsAsync(@NonNull UUID projectId, @NonNull PredictionQueryToken query);

    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IterationPerformance object if successful.
     */
    IterationPerformance getIterationPerformance(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<IterationPerformance>> getIterationPerformanceWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<IterationPerformance> getIterationPerformanceAsync(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @param threshold The threshold used to determine true predictions.
     * @param overlapThreshold If applicable, the bounding box overlap threshold used to determine true predictions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IterationPerformance object if successful.
     */
    IterationPerformance getIterationPerformance(@NonNull UUID projectId, @NonNull UUID iterationId, Double threshold, Double overlapThreshold);

    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @param threshold The threshold used to determine true predictions.
     * @param overlapThreshold If applicable, the bounding box overlap threshold used to determine true predictions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<IterationPerformance>> getIterationPerformanceWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId, Double threshold, Double overlapThreshold);

    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @param threshold The threshold used to determine true predictions.
     * @param overlapThreshold If applicable, the bounding box overlap threshold used to determine true predictions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<IterationPerformance> getIterationPerformanceAsync(@NonNull UUID projectId, @NonNull UUID iterationId, Double threshold, Double overlapThreshold);

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;ImagePerformance&gt; object if successful.
     */
    List<ImagePerformance> getImagePerformances(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<List<ImagePerformance>>> getImagePerformancesWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<List<ImagePerformance>> getImagePerformancesAsync(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'.
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;ImagePerformance&gt; object if successful.
     */
    List<ImagePerformance> getImagePerformances(@NonNull UUID projectId, @NonNull UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip);

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'.
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<List<ImagePerformance>>> getImagePerformancesWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip);

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'.
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<List<ImagePerformance>> getImagePerformancesAsync(@NonNull UUID projectId, @NonNull UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip);

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     * training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    int getImagePerformanceCount(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     * training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Integer>> getImagePerformanceCountWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     * training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Integer> getImagePerformanceCountAsync(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     * training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    int getImagePerformanceCount(@NonNull UUID projectId, @NonNull UUID iterationId, List<UUID> tagIds);

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     * training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Integer>> getImagePerformanceCountWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId, List<UUID> tagIds);

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     * training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Integer> getImagePerformanceCountAsync(@NonNull UUID projectId, @NonNull UUID iterationId, List<UUID> tagIds);

    /**
     * Get your projects.
     *
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Project&gt; object if successful.
     */
    List<Project> getProjects();

    /**
     * Get your projects.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<List<Project>>> getProjectsWithRestResponseAsync();

    /**
     * Get your projects.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<List<Project>> getProjectsAsync();

    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Project object if successful.
     */
    Project createProject(@NonNull String name);

    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Project>> createProjectWithRestResponseAsync(@NonNull String name);

    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Project> createProjectAsync(@NonNull String name);

    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @param description The description of the project.
     * @param domainId The id of the domain to use for this project. Defaults to General.
     * @param classificationType The type of classifier to create for this project. Possible values include: 'Multiclass', 'Multilabel'.
     * @param targetExportPlatforms List of platforms the trained model is intending exporting to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Project object if successful.
     */
    Project createProject(@NonNull String name, String description, UUID domainId, String classificationType, List<String> targetExportPlatforms);

    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @param description The description of the project.
     * @param domainId The id of the domain to use for this project. Defaults to General.
     * @param classificationType The type of classifier to create for this project. Possible values include: 'Multiclass', 'Multilabel'.
     * @param targetExportPlatforms List of platforms the trained model is intending exporting to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Project>> createProjectWithRestResponseAsync(@NonNull String name, String description, UUID domainId, String classificationType, List<String> targetExportPlatforms);

    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @param description The description of the project.
     * @param domainId The id of the domain to use for this project. Defaults to General.
     * @param classificationType The type of classifier to create for this project. Possible values include: 'Multiclass', 'Multilabel'.
     * @param targetExportPlatforms List of platforms the trained model is intending exporting to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Project> createProjectAsync(@NonNull String name, String description, UUID domainId, String classificationType, List<String> targetExportPlatforms);

    /**
     * Get a specific project.
     *
     * @param projectId The id of the project to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Project object if successful.
     */
    Project getProject(@NonNull UUID projectId);

    /**
     * Get a specific project.
     *
     * @param projectId The id of the project to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Project>> getProjectWithRestResponseAsync(@NonNull UUID projectId);

    /**
     * Get a specific project.
     *
     * @param projectId The id of the project to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Project> getProjectAsync(@NonNull UUID projectId);

    /**
     * Delete a specific project.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteProject(@NonNull UUID projectId);

    /**
     * Delete a specific project.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<VoidResponse> deleteProjectWithRestResponseAsync(@NonNull UUID projectId);

    /**
     * Delete a specific project.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> deleteProjectAsync(@NonNull UUID projectId);

    /**
     * Update a specific project.
     *
     * @param projectId The id of the project to update.
     * @param updatedProject The updated project model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Project object if successful.
     */
    Project updateProject(@NonNull UUID projectId, @NonNull Project updatedProject);

    /**
     * Update a specific project.
     *
     * @param projectId The id of the project to update.
     * @param updatedProject The updated project model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Project>> updateProjectWithRestResponseAsync(@NonNull UUID projectId, @NonNull Project updatedProject);

    /**
     * Update a specific project.
     *
     * @param projectId The id of the project to update.
     * @param updatedProject The updated project model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Project> updateProjectAsync(@NonNull UUID projectId, @NonNull Project updatedProject);

    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Iteration object if successful.
     */
    Iteration trainProject(@NonNull UUID projectId);

    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Iteration>> trainProjectWithRestResponseAsync(@NonNull UUID projectId);

    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Iteration> trainProjectAsync(@NonNull UUID projectId);

    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @param trainingType The type of training to use to train the project (default: Regular). Possible values include: 'Regular', 'Advanced'.
     * @param reservedBudgetInHours The number of hours reserved as budget for training (if applicable).
     * @param forceTrain Whether to force train even if dataset and configuration does not change (default: false).
     * @param notificationEmailAddress The email address to send notification to when training finishes (default: null).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Iteration object if successful.
     */
    Iteration trainProject(@NonNull UUID projectId, String trainingType, Integer reservedBudgetInHours, Boolean forceTrain, String notificationEmailAddress);

    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @param trainingType The type of training to use to train the project (default: Regular). Possible values include: 'Regular', 'Advanced'.
     * @param reservedBudgetInHours The number of hours reserved as budget for training (if applicable).
     * @param forceTrain Whether to force train even if dataset and configuration does not change (default: false).
     * @param notificationEmailAddress The email address to send notification to when training finishes (default: null).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Iteration>> trainProjectWithRestResponseAsync(@NonNull UUID projectId, String trainingType, Integer reservedBudgetInHours, Boolean forceTrain, String notificationEmailAddress);

    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @param trainingType The type of training to use to train the project (default: Regular). Possible values include: 'Regular', 'Advanced'.
     * @param reservedBudgetInHours The number of hours reserved as budget for training (if applicable).
     * @param forceTrain Whether to force train even if dataset and configuration does not change (default: false).
     * @param notificationEmailAddress The email address to send notification to when training finishes (default: null).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Iteration> trainProjectAsync(@NonNull UUID projectId, String trainingType, Integer reservedBudgetInHours, Boolean forceTrain, String notificationEmailAddress);

    /**
     * Get iterations for the project.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Iteration&gt; object if successful.
     */
    List<Iteration> getIterations(@NonNull UUID projectId);

    /**
     * Get iterations for the project.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<List<Iteration>>> getIterationsWithRestResponseAsync(@NonNull UUID projectId);

    /**
     * Get iterations for the project.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<List<Iteration>> getIterationsAsync(@NonNull UUID projectId);

    /**
     * Get a specific iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Iteration object if successful.
     */
    Iteration getIteration(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Get a specific iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Iteration>> getIterationWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Get a specific iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Iteration> getIterationAsync(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Delete a specific iteration of a project.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteIteration(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Delete a specific iteration of a project.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<VoidResponse> deleteIterationWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Delete a specific iteration of a project.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> deleteIterationAsync(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Update a specific iteration.
     *
     * @param projectId Project id.
     * @param iterationId Iteration id.
     * @param name Gets or sets the name of the iteration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Iteration object if successful.
     */
    Iteration updateIteration(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String name);

    /**
     * Update a specific iteration.
     *
     * @param projectId Project id.
     * @param iterationId Iteration id.
     * @param name Gets or sets the name of the iteration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Iteration>> updateIterationWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String name);

    /**
     * Update a specific iteration.
     *
     * @param projectId Project id.
     * @param iterationId Iteration id.
     * @param name Gets or sets the name of the iteration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Iteration> updateIterationAsync(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String name);

    /**
     * Publish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param publishName The name to give the published iteration.
     * @param predictionId The id of the prediction resource to publish to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the boolean object if successful.
     */
    boolean publishIteration(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String publishName, @NonNull String predictionId);

    /**
     * Publish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param publishName The name to give the published iteration.
     * @param predictionId The id of the prediction resource to publish to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Boolean>> publishIterationWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String publishName, @NonNull String predictionId);

    /**
     * Publish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param publishName The name to give the published iteration.
     * @param predictionId The id of the prediction resource to publish to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Boolean> publishIterationAsync(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String publishName, @NonNull String predictionId);

    /**
     * Unpublish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void unpublishIteration(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Unpublish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<VoidResponse> unpublishIterationWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Unpublish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> unpublishIterationAsync(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Get the list of exports for a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Export&gt; object if successful.
     */
    List<Export> getExports(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Get the list of exports for a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<List<Export>>> getExportsWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Get the list of exports for a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<List<Export>> getExportsAsync(@NonNull UUID projectId, @NonNull UUID iterationId);

    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Export object if successful.
     */
    Export exportIteration(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String platform);

    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Export>> exportIterationWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String platform);

    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Export> exportIterationAsync(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String platform);

    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'.
     * @param flavor The flavor of the target platform. Possible values include: 'Linux', 'Windows', 'ONNX10', 'ONNX12', 'ARM'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Export object if successful.
     */
    Export exportIteration(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String platform, String flavor);

    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'.
     * @param flavor The flavor of the target platform. Possible values include: 'Linux', 'Windows', 'ONNX10', 'ONNX12', 'ARM'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Export>> exportIterationWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String platform, String flavor);

    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'.
     * @param flavor The flavor of the target platform. Possible values include: 'Linux', 'Windows', 'ONNX10', 'ONNX12', 'ARM'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Export> exportIterationAsync(@NonNull UUID projectId, @NonNull UUID iterationId, @NonNull String platform, String flavor);

    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Tag object if successful.
     */
    Tag getTag(@NonNull UUID projectId, @NonNull UUID tagId);

    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Tag>> getTagWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID tagId);

    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Tag> getTagAsync(@NonNull UUID projectId, @NonNull UUID tagId);

    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @param iterationId The iteration to retrieve this tag from. Optional, defaults to current training set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Tag object if successful.
     */
    Tag getTag(@NonNull UUID projectId, @NonNull UUID tagId, UUID iterationId);

    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @param iterationId The iteration to retrieve this tag from. Optional, defaults to current training set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Tag>> getTagWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID tagId, UUID iterationId);

    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @param iterationId The iteration to retrieve this tag from. Optional, defaults to current training set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Tag> getTagAsync(@NonNull UUID projectId, @NonNull UUID tagId, UUID iterationId);

    /**
     * Delete a tag from the project.
     *
     * @param projectId The project id.
     * @param tagId Id of the tag to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteTag(@NonNull UUID projectId, @NonNull UUID tagId);

    /**
     * Delete a tag from the project.
     *
     * @param projectId The project id.
     * @param tagId Id of the tag to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<VoidResponse> deleteTagWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID tagId);

    /**
     * Delete a tag from the project.
     *
     * @param projectId The project id.
     * @param tagId Id of the tag to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> deleteTagAsync(@NonNull UUID projectId, @NonNull UUID tagId);

    /**
     * Update a tag.
     *
     * @param projectId The project id.
     * @param tagId The id of the target tag.
     * @param updatedTag The updated tag model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Tag object if successful.
     */
    Tag updateTag(@NonNull UUID projectId, @NonNull UUID tagId, @NonNull Tag updatedTag);

    /**
     * Update a tag.
     *
     * @param projectId The project id.
     * @param tagId The id of the target tag.
     * @param updatedTag The updated tag model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Tag>> updateTagWithRestResponseAsync(@NonNull UUID projectId, @NonNull UUID tagId, @NonNull Tag updatedTag);

    /**
     * Update a tag.
     *
     * @param projectId The project id.
     * @param tagId The id of the target tag.
     * @param updatedTag The updated tag model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Tag> updateTagAsync(@NonNull UUID projectId, @NonNull UUID tagId, @NonNull Tag updatedTag);

    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Tag&gt; object if successful.
     */
    List<Tag> getTags(@NonNull UUID projectId);

    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<List<Tag>>> getTagsWithRestResponseAsync(@NonNull UUID projectId);

    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<List<Tag>> getTagsAsync(@NonNull UUID projectId);

    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Tag&gt; object if successful.
     */
    List<Tag> getTags(@NonNull UUID projectId, UUID iterationId);

    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<List<Tag>>> getTagsWithRestResponseAsync(@NonNull UUID projectId, UUID iterationId);

    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<List<Tag>> getTagsAsync(@NonNull UUID projectId, UUID iterationId);

    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Tag object if successful.
     */
    Tag createTag(@NonNull UUID projectId, @NonNull String name);

    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Tag>> createTagWithRestResponseAsync(@NonNull UUID projectId, @NonNull String name);

    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Tag> createTagAsync(@NonNull UUID projectId, @NonNull String name);

    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @param description Optional description for the tag.
     * @param type Optional type for the tag. Possible values include: 'Regular', 'Negative'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CustomVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Tag object if successful.
     */
    Tag createTag(@NonNull UUID projectId, @NonNull String name, String description, String type);

    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @param description Optional description for the tag.
     * @param type Optional type for the tag. Possible values include: 'Regular', 'Negative'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Tag>> createTagWithRestResponseAsync(@NonNull UUID projectId, @NonNull String name, String description, String type);

    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @param description Optional description for the tag.
     * @param type Optional type for the tag. Possible values include: 'Regular', 'Negative'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Tag> createTagAsync(@NonNull UUID projectId, @NonNull String name, String description, String type);
}
