/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.customvision.training;

import com.microsoft.azure.AzureClient;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CustomVisionErrorException;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Domain;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Export;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Image;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageFileCreateBatch;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageIdCreateBatch;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImagePerformance;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImagePrediction;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionCreateEntry;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionCreateSummary;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionProposal;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageTagCreateEntry;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageTagCreateSummary;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageUrlCreateBatch;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.IterationPerformance;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.PredictionQueryResult;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.PredictionQueryToken;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project;
import com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag;
import com.microsoft.rest.RestClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import rx.Observable;

/**
 * The interface for CustomVisionTrainingClient class.
 */
public interface CustomVisionTrainingClient {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * Gets the {@link AzureClient} used for long running operations.
     * @return the azure client;
     */
    AzureClient getAzureClient();

    /**
     * Gets the User-Agent header for the client.
     *
     * @return the user agent string.
     */
    String userAgent();

    /**
     * Gets API key..
     *
     * @return the apiKey value.
     */
    String apiKey();

    /**
     * Sets API key..
     *
     * @param apiKey the apiKey value.
     * @return the service client itself
     */
    CustomVisionTrainingClient withApiKey(String apiKey);

    /**
     * Gets Supported Cognitive Services endpoints..
     *
     * @return the endpoint value.
     */
    String endpoint();

    /**
     * Sets Supported Cognitive Services endpoints..
     *
     * @param endpoint the endpoint value.
     * @return the service client itself
     */
    CustomVisionTrainingClient withEndpoint(String endpoint);

    /**
     * Gets The preferred language for the response..
     *
     * @return the acceptLanguage value.
     */
    String acceptLanguage();

    /**
     * Sets The preferred language for the response..
     *
     * @param acceptLanguage the acceptLanguage value.
     * @return the service client itself
     */
    CustomVisionTrainingClient withAcceptLanguage(String acceptLanguage);

    /**
     * Gets The retry timeout in seconds for Long Running Operations. Default value is 30..
     *
     * @return the longRunningOperationRetryTimeout value.
     */
    int longRunningOperationRetryTimeout();

    /**
     * Sets The retry timeout in seconds for Long Running Operations. Default value is 30..
     *
     * @param longRunningOperationRetryTimeout the longRunningOperationRetryTimeout value.
     * @return the service client itself
     */
    CustomVisionTrainingClient withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout);

    /**
     * Gets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true..
     *
     * @return the generateClientRequestId value.
     */
    boolean generateClientRequestId();

    /**
     * Sets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true..
     *
     * @param generateClientRequestId the generateClientRequestId value.
     * @return the service client itself
     */
    CustomVisionTrainingClient withGenerateClientRequestId(boolean generateClientRequestId);

    /**
     * Get a list of the available domains.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Domain&gt; object if successful.
     */
    List<Domain> getDomains();

    /**
     * Get a list of the available domains.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Domain>> getDomainsAsync(final ServiceCallback<List<Domain>> serviceCallback);

    /**
     * Get a list of the available domains.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Domain&gt; object
     */
    Observable<List<Domain>> getDomainsAsync();

    /**
     * Get a list of the available domains.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Domain&gt; object
     */
    Observable<ServiceResponse<List<Domain>>> getDomainsWithServiceResponseAsync();

    /**
     * Get information about a specific domain.
     *
     * @param domainId The id of the domain to get information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Domain object if successful.
     */
    Domain getDomain(UUID domainId);

    /**
     * Get information about a specific domain.
     *
     * @param domainId The id of the domain to get information about.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Domain> getDomainAsync(UUID domainId, final ServiceCallback<Domain> serviceCallback);

    /**
     * Get information about a specific domain.
     *
     * @param domainId The id of the domain to get information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Domain object
     */
    Observable<Domain> getDomainAsync(UUID domainId);

    /**
     * Get information about a specific domain.
     *
     * @param domainId The id of the domain to get information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Domain object
     */
    Observable<ServiceResponse<Domain>> getDomainWithServiceResponseAsync(UUID domainId);

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the int object if successful.
     */
    int getTaggedImageCount(UUID projectId);

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Integer> getTaggedImageCountAsync(UUID projectId, final ServiceCallback<Integer> serviceCallback);

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    Observable<Integer> getTaggedImageCountAsync(UUID projectId);

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    Observable<ServiceResponse<Integer>> getTaggedImageCountWithServiceResponseAsync(UUID projectId);
    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the int object if successful.
     */
    int getTaggedImageCount(UUID projectId, UUID iterationId, List<UUID> tagIds);

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Integer> getTaggedImageCountAsync(UUID projectId, UUID iterationId, List<UUID> tagIds, final ServiceCallback<Integer> serviceCallback);

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    Observable<Integer> getTaggedImageCountAsync(UUID projectId, UUID iterationId, List<UUID> tagIds);

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    Observable<ServiceResponse<Integer>> getTaggedImageCountWithServiceResponseAsync(UUID projectId, UUID iterationId, List<UUID> tagIds);

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     current workspace is used.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the int object if successful.
     */
    int getUntaggedImageCount(UUID projectId);

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     current workspace is used.
     *
     * @param projectId The project id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Integer> getUntaggedImageCountAsync(UUID projectId, final ServiceCallback<Integer> serviceCallback);

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     current workspace is used.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    Observable<Integer> getUntaggedImageCountAsync(UUID projectId);

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     current workspace is used.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    Observable<ServiceResponse<Integer>> getUntaggedImageCountWithServiceResponseAsync(UUID projectId);
    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     current workspace is used.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the int object if successful.
     */
    int getUntaggedImageCount(UUID projectId, UUID iterationId);

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     current workspace is used.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Integer> getUntaggedImageCountAsync(UUID projectId, UUID iterationId, final ServiceCallback<Integer> serviceCallback);

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     current workspace is used.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    Observable<Integer> getUntaggedImageCountAsync(UUID projectId, UUID iterationId);

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
     current workspace is used.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    Observable<ServiceResponse<Integer>> getUntaggedImageCountWithServiceResponseAsync(UUID projectId, UUID iterationId);

    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImageTagCreateSummary object if successful.
     */
    ImageTagCreateSummary createImageTags(UUID projectId);

    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImageTagCreateSummary> createImageTagsAsync(UUID projectId, final ServiceCallback<ImageTagCreateSummary> serviceCallback);

    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageTagCreateSummary object
     */
    Observable<ImageTagCreateSummary> createImageTagsAsync(UUID projectId);

    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageTagCreateSummary object
     */
    Observable<ServiceResponse<ImageTagCreateSummary>> createImageTagsWithServiceResponseAsync(UUID projectId);
    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @param tags Image Tag entries to include in this batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImageTagCreateSummary object if successful.
     */
    ImageTagCreateSummary createImageTags(UUID projectId, List<ImageTagCreateEntry> tags);

    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @param tags Image Tag entries to include in this batch.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImageTagCreateSummary> createImageTagsAsync(UUID projectId, List<ImageTagCreateEntry> tags, final ServiceCallback<ImageTagCreateSummary> serviceCallback);

    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @param tags Image Tag entries to include in this batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageTagCreateSummary object
     */
    Observable<ImageTagCreateSummary> createImageTagsAsync(UUID projectId, List<ImageTagCreateEntry> tags);

    /**
     * Associate a set of images with a set of tags.
     *
     * @param projectId The project id.
     * @param tags Image Tag entries to include in this batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageTagCreateSummary object
     */
    Observable<ServiceResponse<ImageTagCreateSummary>> createImageTagsWithServiceResponseAsync(UUID projectId, List<ImageTagCreateEntry> tags);

    /**
     * Remove a set of tags from a set of images.
     *
     * @param projectId The project id.
     * @param imageIds Image ids. Limited to 64 images.
     * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteImageTags(UUID projectId, List<UUID> imageIds, List<UUID> tagIds);

    /**
     * Remove a set of tags from a set of images.
     *
     * @param projectId The project id.
     * @param imageIds Image ids. Limited to 64 images.
     * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteImageTagsAsync(UUID projectId, List<UUID> imageIds, List<UUID> tagIds, final ServiceCallback<Void> serviceCallback);

    /**
     * Remove a set of tags from a set of images.
     *
     * @param projectId The project id.
     * @param imageIds Image ids. Limited to 64 images.
     * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteImageTagsAsync(UUID projectId, List<UUID> imageIds, List<UUID> tagIds);

    /**
     * Remove a set of tags from a set of images.
     *
     * @param projectId The project id.
     * @param imageIds Image ids. Limited to 64 images.
     * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteImageTagsWithServiceResponseAsync(UUID projectId, List<UUID> imageIds, List<UUID> tagIds);

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImageRegionCreateSummary object if successful.
     */
    ImageRegionCreateSummary createImageRegions(UUID projectId);

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImageRegionCreateSummary> createImageRegionsAsync(UUID projectId, final ServiceCallback<ImageRegionCreateSummary> serviceCallback);

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageRegionCreateSummary object
     */
    Observable<ImageRegionCreateSummary> createImageRegionsAsync(UUID projectId);

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageRegionCreateSummary object
     */
    Observable<ServiceResponse<ImageRegionCreateSummary>> createImageRegionsWithServiceResponseAsync(UUID projectId);
    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @param regions the List&lt;ImageRegionCreateEntry&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImageRegionCreateSummary object if successful.
     */
    ImageRegionCreateSummary createImageRegions(UUID projectId, List<ImageRegionCreateEntry> regions);

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @param regions the List&lt;ImageRegionCreateEntry&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImageRegionCreateSummary> createImageRegionsAsync(UUID projectId, List<ImageRegionCreateEntry> regions, final ServiceCallback<ImageRegionCreateSummary> serviceCallback);

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @param regions the List&lt;ImageRegionCreateEntry&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageRegionCreateSummary object
     */
    Observable<ImageRegionCreateSummary> createImageRegionsAsync(UUID projectId, List<ImageRegionCreateEntry> regions);

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
     There is a limit of 64 entries in the batch.
     *
     * @param projectId The project id.
     * @param regions the List&lt;ImageRegionCreateEntry&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageRegionCreateSummary object
     */
    Observable<ServiceResponse<ImageRegionCreateSummary>> createImageRegionsWithServiceResponseAsync(UUID projectId, List<ImageRegionCreateEntry> regions);

    /**
     * Delete a set of image regions.
     *
     * @param projectId The project id.
     * @param regionIds Regions to delete. Limited to 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteImageRegions(UUID projectId, List<UUID> regionIds);

    /**
     * Delete a set of image regions.
     *
     * @param projectId The project id.
     * @param regionIds Regions to delete. Limited to 64.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteImageRegionsAsync(UUID projectId, List<UUID> regionIds, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a set of image regions.
     *
     * @param projectId The project id.
     * @param regionIds Regions to delete. Limited to 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteImageRegionsAsync(UUID projectId, List<UUID> regionIds);

    /**
     * Delete a set of image regions.
     *
     * @param projectId The project id.
     * @param regionIds Regions to delete. Limited to 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteImageRegionsWithServiceResponseAsync(UUID projectId, List<UUID> regionIds);

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Image&gt; object if successful.
     */
    List<Image> getTaggedImages(UUID projectId);

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Image>> getTaggedImagesAsync(UUID projectId, final ServiceCallback<List<Image>> serviceCallback);

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Image&gt; object
     */
    Observable<List<Image>> getTaggedImagesAsync(UUID projectId);

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Image&gt; object
     */
    Observable<ServiceResponse<List<Image>>> getTaggedImagesWithServiceResponseAsync(UUID projectId);
    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Image&gt; object if successful.
     */
    List<Image> getTaggedImages(UUID projectId, UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip);

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Image>> getTaggedImagesAsync(UUID projectId, UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip, final ServiceCallback<List<Image>> serviceCallback);

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Image&gt; object
     */
    Observable<List<Image>> getTaggedImagesAsync(UUID projectId, UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip);

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Image&gt; object
     */
    Observable<ServiceResponse<List<Image>>> getTaggedImagesWithServiceResponseAsync(UUID projectId, UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip);

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Image&gt; object if successful.
     */
    List<Image> getUntaggedImages(UUID projectId);

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Image>> getUntaggedImagesAsync(UUID projectId, final ServiceCallback<List<Image>> serviceCallback);

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Image&gt; object
     */
    Observable<List<Image>> getUntaggedImagesAsync(UUID projectId);

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Image&gt; object
     */
    Observable<ServiceResponse<List<Image>>> getUntaggedImagesWithServiceResponseAsync(UUID projectId);
    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Image&gt; object if successful.
     */
    List<Image> getUntaggedImages(UUID projectId, UUID iterationId, String orderBy, Integer take, Integer skip);

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Image>> getUntaggedImagesAsync(UUID projectId, UUID iterationId, String orderBy, Integer take, Integer skip, final ServiceCallback<List<Image>> serviceCallback);

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Image&gt; object
     */
    Observable<List<Image>> getUntaggedImagesAsync(UUID projectId, UUID iterationId, String orderBy, Integer take, Integer skip);

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Image&gt; object
     */
    Observable<ServiceResponse<List<Image>>> getUntaggedImagesWithServiceResponseAsync(UUID projectId, UUID iterationId, String orderBy, Integer take, Integer skip);

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     current workspace is used.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Image&gt; object if successful.
     */
    List<Image> getImagesByIds(UUID projectId);

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     current workspace is used.
     *
     * @param projectId The project id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Image>> getImagesByIdsAsync(UUID projectId, final ServiceCallback<List<Image>> serviceCallback);

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     current workspace is used.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Image&gt; object
     */
    Observable<List<Image>> getImagesByIdsAsync(UUID projectId);

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     current workspace is used.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Image&gt; object
     */
    Observable<ServiceResponse<List<Image>>> getImagesByIdsWithServiceResponseAsync(UUID projectId);
    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     current workspace is used.
     *
     * @param projectId The project id.
     * @param imageIds The list of image ids to retrieve. Limited to 256.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Image&gt; object if successful.
     */
    List<Image> getImagesByIds(UUID projectId, List<UUID> imageIds, UUID iterationId);

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     current workspace is used.
     *
     * @param projectId The project id.
     * @param imageIds The list of image ids to retrieve. Limited to 256.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Image>> getImagesByIdsAsync(UUID projectId, List<UUID> imageIds, UUID iterationId, final ServiceCallback<List<Image>> serviceCallback);

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     current workspace is used.
     *
     * @param projectId The project id.
     * @param imageIds The list of image ids to retrieve. Limited to 256.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Image&gt; object
     */
    Observable<List<Image>> getImagesByIdsAsync(UUID projectId, List<UUID> imageIds, UUID iterationId);

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
     current workspace is used.
     *
     * @param projectId The project id.
     * @param imageIds The list of image ids to retrieve. Limited to 256.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Image&gt; object
     */
    Observable<ServiceResponse<List<Image>>> getImagesByIdsWithServiceResponseAsync(UUID projectId, List<UUID> imageIds, UUID iterationId);

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImageCreateSummary object if successful.
     */
    ImageCreateSummary createImagesFromData(UUID projectId, byte[] imageData);

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImageCreateSummary> createImagesFromDataAsync(UUID projectId, byte[] imageData, final ServiceCallback<ImageCreateSummary> serviceCallback);

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageCreateSummary object
     */
    Observable<ImageCreateSummary> createImagesFromDataAsync(UUID projectId, byte[] imageData);

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageCreateSummary object
     */
    Observable<ServiceResponse<ImageCreateSummary>> createImagesFromDataWithServiceResponseAsync(UUID projectId, byte[] imageData);
    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param tagIds The tags ids with which to tag each image. Limited to 20.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImageCreateSummary object if successful.
     */
    ImageCreateSummary createImagesFromData(UUID projectId, byte[] imageData, List<UUID> tagIds);

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param tagIds The tags ids with which to tag each image. Limited to 20.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImageCreateSummary> createImagesFromDataAsync(UUID projectId, byte[] imageData, List<UUID> tagIds, final ServiceCallback<ImageCreateSummary> serviceCallback);

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param tagIds The tags ids with which to tag each image. Limited to 20.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageCreateSummary object
     */
    Observable<ImageCreateSummary> createImagesFromDataAsync(UUID projectId, byte[] imageData, List<UUID> tagIds);

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
     multiple image files can be sent at once, with a maximum of 64 files.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param tagIds The tags ids with which to tag each image. Limited to 20.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageCreateSummary object
     */
    Observable<ServiceResponse<ImageCreateSummary>> createImagesFromDataWithServiceResponseAsync(UUID projectId, byte[] imageData, List<UUID> tagIds);

    /**
     * Delete images from the set of training images.
     *
     * @param projectId The project id.
     * @param imageIds Ids of the images to be deleted. Limited to 256 images per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteImages(UUID projectId, List<UUID> imageIds);

    /**
     * Delete images from the set of training images.
     *
     * @param projectId The project id.
     * @param imageIds Ids of the images to be deleted. Limited to 256 images per batch.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteImagesAsync(UUID projectId, List<UUID> imageIds, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete images from the set of training images.
     *
     * @param projectId The project id.
     * @param imageIds Ids of the images to be deleted. Limited to 256 images per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteImagesAsync(UUID projectId, List<UUID> imageIds);

    /**
     * Delete images from the set of training images.
     *
     * @param projectId The project id.
     * @param imageIds Ids of the images to be deleted. Limited to 256 images per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteImagesWithServiceResponseAsync(UUID projectId, List<UUID> imageIds);

    /**
     * Add the provided batch of images to the set of training images.
     * This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch The batch of image files to add. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImageCreateSummary object if successful.
     */
    ImageCreateSummary createImagesFromFiles(UUID projectId, ImageFileCreateBatch batch);

    /**
     * Add the provided batch of images to the set of training images.
     * This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch The batch of image files to add. Limited to 64 images and 20 tags per batch.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImageCreateSummary> createImagesFromFilesAsync(UUID projectId, ImageFileCreateBatch batch, final ServiceCallback<ImageCreateSummary> serviceCallback);

    /**
     * Add the provided batch of images to the set of training images.
     * This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch The batch of image files to add. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageCreateSummary object
     */
    Observable<ImageCreateSummary> createImagesFromFilesAsync(UUID projectId, ImageFileCreateBatch batch);

    /**
     * Add the provided batch of images to the set of training images.
     * This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch The batch of image files to add. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageCreateSummary object
     */
    Observable<ServiceResponse<ImageCreateSummary>> createImagesFromFilesWithServiceResponseAsync(UUID projectId, ImageFileCreateBatch batch);

    /**
     * Add the provided images urls to the set of training images.
     * This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image urls and tag ids. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImageCreateSummary object if successful.
     */
    ImageCreateSummary createImagesFromUrls(UUID projectId, ImageUrlCreateBatch batch);

    /**
     * Add the provided images urls to the set of training images.
     * This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image urls and tag ids. Limited to 64 images and 20 tags per batch.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImageCreateSummary> createImagesFromUrlsAsync(UUID projectId, ImageUrlCreateBatch batch, final ServiceCallback<ImageCreateSummary> serviceCallback);

    /**
     * Add the provided images urls to the set of training images.
     * This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image urls and tag ids. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageCreateSummary object
     */
    Observable<ImageCreateSummary> createImagesFromUrlsAsync(UUID projectId, ImageUrlCreateBatch batch);

    /**
     * Add the provided images urls to the set of training images.
     * This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image urls and tag ids. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageCreateSummary object
     */
    Observable<ServiceResponse<ImageCreateSummary>> createImagesFromUrlsWithServiceResponseAsync(UUID projectId, ImageUrlCreateBatch batch);

    /**
     * Add the specified predicted images to the set of training images.
     * This API creates a batch of images from predicted images specified. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image and tag ids. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImageCreateSummary object if successful.
     */
    ImageCreateSummary createImagesFromPredictions(UUID projectId, ImageIdCreateBatch batch);

    /**
     * Add the specified predicted images to the set of training images.
     * This API creates a batch of images from predicted images specified. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image and tag ids. Limited to 64 images and 20 tags per batch.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImageCreateSummary> createImagesFromPredictionsAsync(UUID projectId, ImageIdCreateBatch batch, final ServiceCallback<ImageCreateSummary> serviceCallback);

    /**
     * Add the specified predicted images to the set of training images.
     * This API creates a batch of images from predicted images specified. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image and tag ids. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageCreateSummary object
     */
    Observable<ImageCreateSummary> createImagesFromPredictionsAsync(UUID projectId, ImageIdCreateBatch batch);

    /**
     * Add the specified predicted images to the set of training images.
     * This API creates a batch of images from predicted images specified. There is a limit of 64 images and 20 tags.
     *
     * @param projectId The project id.
     * @param batch Image and tag ids. Limited to 64 images and 20 tags per batch.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageCreateSummary object
     */
    Observable<ServiceResponse<ImageCreateSummary>> createImagesFromPredictionsWithServiceResponseAsync(UUID projectId, ImageIdCreateBatch batch);

    /**
     * Get region proposals for an image. Returns empty array if no proposals are found.
     * This API will get region proposals for an image along with confidences for the region. It returns an empty array if no proposals are found.
     *
     * @param projectId The project id.
     * @param imageId The image id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImageRegionProposal object if successful.
     */
    ImageRegionProposal getImageRegionProposals(UUID projectId, UUID imageId);

    /**
     * Get region proposals for an image. Returns empty array if no proposals are found.
     * This API will get region proposals for an image along with confidences for the region. It returns an empty array if no proposals are found.
     *
     * @param projectId The project id.
     * @param imageId The image id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImageRegionProposal> getImageRegionProposalsAsync(UUID projectId, UUID imageId, final ServiceCallback<ImageRegionProposal> serviceCallback);

    /**
     * Get region proposals for an image. Returns empty array if no proposals are found.
     * This API will get region proposals for an image along with confidences for the region. It returns an empty array if no proposals are found.
     *
     * @param projectId The project id.
     * @param imageId The image id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageRegionProposal object
     */
    Observable<ImageRegionProposal> getImageRegionProposalsAsync(UUID projectId, UUID imageId);

    /**
     * Get region proposals for an image. Returns empty array if no proposals are found.
     * This API will get region proposals for an image along with confidences for the region. It returns an empty array if no proposals are found.
     *
     * @param projectId The project id.
     * @param imageId The image id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageRegionProposal object
     */
    Observable<ServiceResponse<ImageRegionProposal>> getImageRegionProposalsWithServiceResponseAsync(UUID projectId, UUID imageId);

    /**
     * Delete a set of predicted images and their associated prediction results.
     *
     * @param projectId The project id.
     * @param ids The prediction ids. Limited to 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deletePrediction(UUID projectId, List<UUID> ids);

    /**
     * Delete a set of predicted images and their associated prediction results.
     *
     * @param projectId The project id.
     * @param ids The prediction ids. Limited to 64.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deletePredictionAsync(UUID projectId, List<UUID> ids, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a set of predicted images and their associated prediction results.
     *
     * @param projectId The project id.
     * @param ids The prediction ids. Limited to 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deletePredictionAsync(UUID projectId, List<UUID> ids);

    /**
     * Delete a set of predicted images and their associated prediction results.
     *
     * @param projectId The project id.
     * @param ids The prediction ids. Limited to 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deletePredictionWithServiceResponseAsync(UUID projectId, List<UUID> ids);

    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction quickTestImageUrl(UUID projectId, String url);

    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> quickTestImageUrlAsync(UUID projectId, String url, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> quickTestImageUrlAsync(UUID projectId, String url);

    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> quickTestImageUrlWithServiceResponseAsync(UUID projectId, String url);
    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction quickTestImageUrl(UUID projectId, String url, UUID iterationId);

    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> quickTestImageUrlAsync(UUID projectId, String url, UUID iterationId, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> quickTestImageUrlAsync(UUID projectId, String url, UUID iterationId);

    /**
     * Quick test an image url.
     *
     * @param projectId The project to evaluate against.
     * @param url Url of the image.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> quickTestImageUrlWithServiceResponseAsync(UUID projectId, String url, UUID iterationId);

    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction quickTestImage(UUID projectId, byte[] imageData);

    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> quickTestImageAsync(UUID projectId, byte[] imageData, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> quickTestImageAsync(UUID projectId, byte[] imageData);

    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> quickTestImageWithServiceResponseAsync(UUID projectId, byte[] imageData);
    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImagePrediction object if successful.
     */
    ImagePrediction quickTestImage(UUID projectId, byte[] imageData, UUID iterationId);

    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ImagePrediction> quickTestImageAsync(UUID projectId, byte[] imageData, UUID iterationId, final ServiceCallback<ImagePrediction> serviceCallback);

    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ImagePrediction> quickTestImageAsync(UUID projectId, byte[] imageData, UUID iterationId);

    /**
     * Quick test an image.
     *
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB.
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.
                 The default iteration for the project will be used when not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImagePrediction object
     */
    Observable<ServiceResponse<ImagePrediction>> quickTestImageWithServiceResponseAsync(UUID projectId, byte[] imageData, UUID iterationId);

    /**
     * Get images that were sent to your prediction endpoint.
     *
     * @param projectId The project id.
     * @param query Parameters used to query the predictions. Limited to combining 2 tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PredictionQueryResult object if successful.
     */
    PredictionQueryResult queryPredictions(UUID projectId, PredictionQueryToken query);

    /**
     * Get images that were sent to your prediction endpoint.
     *
     * @param projectId The project id.
     * @param query Parameters used to query the predictions. Limited to combining 2 tags.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PredictionQueryResult> queryPredictionsAsync(UUID projectId, PredictionQueryToken query, final ServiceCallback<PredictionQueryResult> serviceCallback);

    /**
     * Get images that were sent to your prediction endpoint.
     *
     * @param projectId The project id.
     * @param query Parameters used to query the predictions. Limited to combining 2 tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PredictionQueryResult object
     */
    Observable<PredictionQueryResult> queryPredictionsAsync(UUID projectId, PredictionQueryToken query);

    /**
     * Get images that were sent to your prediction endpoint.
     *
     * @param projectId The project id.
     * @param query Parameters used to query the predictions. Limited to combining 2 tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PredictionQueryResult object
     */
    Observable<ServiceResponse<PredictionQueryResult>> queryPredictionsWithServiceResponseAsync(UUID projectId, PredictionQueryToken query);

    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IterationPerformance object if successful.
     */
    IterationPerformance getIterationPerformance(UUID projectId, UUID iterationId);

    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IterationPerformance> getIterationPerformanceAsync(UUID projectId, UUID iterationId, final ServiceCallback<IterationPerformance> serviceCallback);

    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IterationPerformance object
     */
    Observable<IterationPerformance> getIterationPerformanceAsync(UUID projectId, UUID iterationId);

    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IterationPerformance object
     */
    Observable<ServiceResponse<IterationPerformance>> getIterationPerformanceWithServiceResponseAsync(UUID projectId, UUID iterationId);
    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @param threshold The threshold used to determine true predictions.
     * @param overlapThreshold If applicable, the bounding box overlap threshold used to determine true predictions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IterationPerformance object if successful.
     */
    IterationPerformance getIterationPerformance(UUID projectId, UUID iterationId, Double threshold, Double overlapThreshold);

    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @param threshold The threshold used to determine true predictions.
     * @param overlapThreshold If applicable, the bounding box overlap threshold used to determine true predictions.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IterationPerformance> getIterationPerformanceAsync(UUID projectId, UUID iterationId, Double threshold, Double overlapThreshold, final ServiceCallback<IterationPerformance> serviceCallback);

    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @param threshold The threshold used to determine true predictions.
     * @param overlapThreshold If applicable, the bounding box overlap threshold used to determine true predictions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IterationPerformance object
     */
    Observable<IterationPerformance> getIterationPerformanceAsync(UUID projectId, UUID iterationId, Double threshold, Double overlapThreshold);

    /**
     * Get detailed performance information about an iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @param threshold The threshold used to determine true predictions.
     * @param overlapThreshold If applicable, the bounding box overlap threshold used to determine true predictions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IterationPerformance object
     */
    Observable<ServiceResponse<IterationPerformance>> getIterationPerformanceWithServiceResponseAsync(UUID projectId, UUID iterationId, Double threshold, Double overlapThreshold);

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ImagePerformance&gt; object if successful.
     */
    List<ImagePerformance> getImagePerformances(UUID projectId, UUID iterationId);

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<ImagePerformance>> getImagePerformancesAsync(UUID projectId, UUID iterationId, final ServiceCallback<List<ImagePerformance>> serviceCallback);

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ImagePerformance&gt; object
     */
    Observable<List<ImagePerformance>> getImagePerformancesAsync(UUID projectId, UUID iterationId);

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ImagePerformance&gt; object
     */
    Observable<ServiceResponse<List<ImagePerformance>>> getImagePerformancesWithServiceResponseAsync(UUID projectId, UUID iterationId);
    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ImagePerformance&gt; object if successful.
     */
    List<ImagePerformance> getImagePerformances(UUID projectId, UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip);

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<ImagePerformance>> getImagePerformancesAsync(UUID projectId, UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip, final ServiceCallback<List<ImagePerformance>> serviceCallback);

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ImagePerformance&gt; object
     */
    Observable<List<ImagePerformance>> getImagePerformancesAsync(UUID projectId, UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip);

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.
     Use the {take} and {skip} parameters to control how many images to return in a given batch.
     The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
     * @param orderBy The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'
     * @param take Maximum number of images to return. Defaults to 50, limited to 256.
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ImagePerformance&gt; object
     */
    Observable<ServiceResponse<List<ImagePerformance>>> getImagePerformancesWithServiceResponseAsync(UUID projectId, UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip);

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the int object if successful.
     */
    int getImagePerformanceCount(UUID projectId, UUID iterationId);

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Integer> getImagePerformanceCountAsync(UUID projectId, UUID iterationId, final ServiceCallback<Integer> serviceCallback);

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    Observable<Integer> getImagePerformanceCountAsync(UUID projectId, UUID iterationId);

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    Observable<ServiceResponse<Integer>> getImagePerformanceCountWithServiceResponseAsync(UUID projectId, UUID iterationId);
    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the int object if successful.
     */
    int getImagePerformanceCount(UUID projectId, UUID iterationId, List<UUID> tagIds);

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Integer> getImagePerformanceCountAsync(UUID projectId, UUID iterationId, List<UUID> tagIds, final ServiceCallback<Integer> serviceCallback);

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    Observable<Integer> getImagePerformanceCountAsync(UUID projectId, UUID iterationId, List<UUID> tagIds);

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from
     training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and
     "Cat" tags, then only images tagged with Dog and/or Cat will be returned.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    Observable<ServiceResponse<Integer>> getImagePerformanceCountWithServiceResponseAsync(UUID projectId, UUID iterationId, List<UUID> tagIds);

    /**
     * Get your projects.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Project&gt; object if successful.
     */
    List<Project> getProjects();

    /**
     * Get your projects.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Project>> getProjectsAsync(final ServiceCallback<List<Project>> serviceCallback);

    /**
     * Get your projects.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Project&gt; object
     */
    Observable<List<Project>> getProjectsAsync();

    /**
     * Get your projects.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Project&gt; object
     */
    Observable<ServiceResponse<List<Project>>> getProjectsWithServiceResponseAsync();

    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Project object if successful.
     */
    Project createProject(String name);

    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Project> createProjectAsync(String name, final ServiceCallback<Project> serviceCallback);

    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Project object
     */
    Observable<Project> createProjectAsync(String name);

    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Project object
     */
    Observable<ServiceResponse<Project>> createProjectWithServiceResponseAsync(String name);
    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @param description The description of the project.
     * @param domainId The id of the domain to use for this project. Defaults to General.
     * @param classificationType The type of classifier to create for this project. Possible values include: 'Multiclass', 'Multilabel'
     * @param targetExportPlatforms List of platforms the trained model is intending exporting to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Project object if successful.
     */
    Project createProject(String name, String description, UUID domainId, String classificationType, List<String> targetExportPlatforms);

    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @param description The description of the project.
     * @param domainId The id of the domain to use for this project. Defaults to General.
     * @param classificationType The type of classifier to create for this project. Possible values include: 'Multiclass', 'Multilabel'
     * @param targetExportPlatforms List of platforms the trained model is intending exporting to.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Project> createProjectAsync(String name, String description, UUID domainId, String classificationType, List<String> targetExportPlatforms, final ServiceCallback<Project> serviceCallback);

    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @param description The description of the project.
     * @param domainId The id of the domain to use for this project. Defaults to General.
     * @param classificationType The type of classifier to create for this project. Possible values include: 'Multiclass', 'Multilabel'
     * @param targetExportPlatforms List of platforms the trained model is intending exporting to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Project object
     */
    Observable<Project> createProjectAsync(String name, String description, UUID domainId, String classificationType, List<String> targetExportPlatforms);

    /**
     * Create a project.
     *
     * @param name Name of the project.
     * @param description The description of the project.
     * @param domainId The id of the domain to use for this project. Defaults to General.
     * @param classificationType The type of classifier to create for this project. Possible values include: 'Multiclass', 'Multilabel'
     * @param targetExportPlatforms List of platforms the trained model is intending exporting to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Project object
     */
    Observable<ServiceResponse<Project>> createProjectWithServiceResponseAsync(String name, String description, UUID domainId, String classificationType, List<String> targetExportPlatforms);

    /**
     * Get a specific project.
     *
     * @param projectId The id of the project to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Project object if successful.
     */
    Project getProject(UUID projectId);

    /**
     * Get a specific project.
     *
     * @param projectId The id of the project to get.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Project> getProjectAsync(UUID projectId, final ServiceCallback<Project> serviceCallback);

    /**
     * Get a specific project.
     *
     * @param projectId The id of the project to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Project object
     */
    Observable<Project> getProjectAsync(UUID projectId);

    /**
     * Get a specific project.
     *
     * @param projectId The id of the project to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Project object
     */
    Observable<ServiceResponse<Project>> getProjectWithServiceResponseAsync(UUID projectId);

    /**
     * Delete a specific project.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteProject(UUID projectId);

    /**
     * Delete a specific project.
     *
     * @param projectId The project id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteProjectAsync(UUID projectId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a specific project.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteProjectAsync(UUID projectId);

    /**
     * Delete a specific project.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteProjectWithServiceResponseAsync(UUID projectId);

    /**
     * Update a specific project.
     *
     * @param projectId The id of the project to update.
     * @param updatedProject The updated project model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Project object if successful.
     */
    Project updateProject(UUID projectId, Project updatedProject);

    /**
     * Update a specific project.
     *
     * @param projectId The id of the project to update.
     * @param updatedProject The updated project model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Project> updateProjectAsync(UUID projectId, Project updatedProject, final ServiceCallback<Project> serviceCallback);

    /**
     * Update a specific project.
     *
     * @param projectId The id of the project to update.
     * @param updatedProject The updated project model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Project object
     */
    Observable<Project> updateProjectAsync(UUID projectId, Project updatedProject);

    /**
     * Update a specific project.
     *
     * @param projectId The id of the project to update.
     * @param updatedProject The updated project model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Project object
     */
    Observable<ServiceResponse<Project>> updateProjectWithServiceResponseAsync(UUID projectId, Project updatedProject);

    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Iteration object if successful.
     */
    Iteration trainProject(UUID projectId);

    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Iteration> trainProjectAsync(UUID projectId, final ServiceCallback<Iteration> serviceCallback);

    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Iteration object
     */
    Observable<Iteration> trainProjectAsync(UUID projectId);

    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Iteration object
     */
    Observable<ServiceResponse<Iteration>> trainProjectWithServiceResponseAsync(UUID projectId);
    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @param trainingType The type of training to use to train the project (default: Regular). Possible values include: 'Regular', 'Advanced'
     * @param reservedBudgetInHours The number of hours reserved as budget for training (if applicable).
     * @param forceTrain Whether to force train even if dataset and configuration does not change (default: false).
     * @param notificationEmailAddress The email address to send notification to when training finishes (default: null).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Iteration object if successful.
     */
    Iteration trainProject(UUID projectId, String trainingType, Integer reservedBudgetInHours, Boolean forceTrain, String notificationEmailAddress);

    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @param trainingType The type of training to use to train the project (default: Regular). Possible values include: 'Regular', 'Advanced'
     * @param reservedBudgetInHours The number of hours reserved as budget for training (if applicable).
     * @param forceTrain Whether to force train even if dataset and configuration does not change (default: false).
     * @param notificationEmailAddress The email address to send notification to when training finishes (default: null).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Iteration> trainProjectAsync(UUID projectId, String trainingType, Integer reservedBudgetInHours, Boolean forceTrain, String notificationEmailAddress, final ServiceCallback<Iteration> serviceCallback);

    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @param trainingType The type of training to use to train the project (default: Regular). Possible values include: 'Regular', 'Advanced'
     * @param reservedBudgetInHours The number of hours reserved as budget for training (if applicable).
     * @param forceTrain Whether to force train even if dataset and configuration does not change (default: false).
     * @param notificationEmailAddress The email address to send notification to when training finishes (default: null).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Iteration object
     */
    Observable<Iteration> trainProjectAsync(UUID projectId, String trainingType, Integer reservedBudgetInHours, Boolean forceTrain, String notificationEmailAddress);

    /**
     * Queues project for training.
     *
     * @param projectId The project id.
     * @param trainingType The type of training to use to train the project (default: Regular). Possible values include: 'Regular', 'Advanced'
     * @param reservedBudgetInHours The number of hours reserved as budget for training (if applicable).
     * @param forceTrain Whether to force train even if dataset and configuration does not change (default: false).
     * @param notificationEmailAddress The email address to send notification to when training finishes (default: null).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Iteration object
     */
    Observable<ServiceResponse<Iteration>> trainProjectWithServiceResponseAsync(UUID projectId, String trainingType, Integer reservedBudgetInHours, Boolean forceTrain, String notificationEmailAddress);

    /**
     * Get iterations for the project.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Iteration&gt; object if successful.
     */
    List<Iteration> getIterations(UUID projectId);

    /**
     * Get iterations for the project.
     *
     * @param projectId The project id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Iteration>> getIterationsAsync(UUID projectId, final ServiceCallback<List<Iteration>> serviceCallback);

    /**
     * Get iterations for the project.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Iteration&gt; object
     */
    Observable<List<Iteration>> getIterationsAsync(UUID projectId);

    /**
     * Get iterations for the project.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Iteration&gt; object
     */
    Observable<ServiceResponse<List<Iteration>>> getIterationsWithServiceResponseAsync(UUID projectId);

    /**
     * Get a specific iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Iteration object if successful.
     */
    Iteration getIteration(UUID projectId, UUID iterationId);

    /**
     * Get a specific iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Iteration> getIterationAsync(UUID projectId, UUID iterationId, final ServiceCallback<Iteration> serviceCallback);

    /**
     * Get a specific iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Iteration object
     */
    Observable<Iteration> getIterationAsync(UUID projectId, UUID iterationId);

    /**
     * Get a specific iteration.
     *
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Iteration object
     */
    Observable<ServiceResponse<Iteration>> getIterationWithServiceResponseAsync(UUID projectId, UUID iterationId);

    /**
     * Delete a specific iteration of a project.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteIteration(UUID projectId, UUID iterationId);

    /**
     * Delete a specific iteration of a project.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteIterationAsync(UUID projectId, UUID iterationId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a specific iteration of a project.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteIterationAsync(UUID projectId, UUID iterationId);

    /**
     * Delete a specific iteration of a project.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteIterationWithServiceResponseAsync(UUID projectId, UUID iterationId);

    /**
     * Update a specific iteration.
     *
     * @param projectId Project id.
     * @param iterationId Iteration id.
     * @param name Gets or sets the name of the iteration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Iteration object if successful.
     */
    Iteration updateIteration(UUID projectId, UUID iterationId, String name);

    /**
     * Update a specific iteration.
     *
     * @param projectId Project id.
     * @param iterationId Iteration id.
     * @param name Gets or sets the name of the iteration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Iteration> updateIterationAsync(UUID projectId, UUID iterationId, String name, final ServiceCallback<Iteration> serviceCallback);

    /**
     * Update a specific iteration.
     *
     * @param projectId Project id.
     * @param iterationId Iteration id.
     * @param name Gets or sets the name of the iteration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Iteration object
     */
    Observable<Iteration> updateIterationAsync(UUID projectId, UUID iterationId, String name);

    /**
     * Update a specific iteration.
     *
     * @param projectId Project id.
     * @param iterationId Iteration id.
     * @param name Gets or sets the name of the iteration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Iteration object
     */
    Observable<ServiceResponse<Iteration>> updateIterationWithServiceResponseAsync(UUID projectId, UUID iterationId, String name);

    /**
     * Publish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param publishName The name to give the published iteration.
     * @param predictionId The id of the prediction resource to publish to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the boolean object if successful.
     */
    boolean publishIteration(UUID projectId, UUID iterationId, String publishName, String predictionId);

    /**
     * Publish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param publishName The name to give the published iteration.
     * @param predictionId The id of the prediction resource to publish to.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Boolean> publishIterationAsync(UUID projectId, UUID iterationId, String publishName, String predictionId, final ServiceCallback<Boolean> serviceCallback);

    /**
     * Publish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param publishName The name to give the published iteration.
     * @param predictionId The id of the prediction resource to publish to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the boolean object
     */
    Observable<Boolean> publishIterationAsync(UUID projectId, UUID iterationId, String publishName, String predictionId);

    /**
     * Publish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param publishName The name to give the published iteration.
     * @param predictionId The id of the prediction resource to publish to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the boolean object
     */
    Observable<ServiceResponse<Boolean>> publishIterationWithServiceResponseAsync(UUID projectId, UUID iterationId, String publishName, String predictionId);

    /**
     * Unpublish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void unpublishIteration(UUID projectId, UUID iterationId);

    /**
     * Unpublish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> unpublishIterationAsync(UUID projectId, UUID iterationId, final ServiceCallback<Void> serviceCallback);

    /**
     * Unpublish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> unpublishIterationAsync(UUID projectId, UUID iterationId);

    /**
     * Unpublish a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> unpublishIterationWithServiceResponseAsync(UUID projectId, UUID iterationId);

    /**
     * Get the list of exports for a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Export&gt; object if successful.
     */
    List<Export> getExports(UUID projectId, UUID iterationId);

    /**
     * Get the list of exports for a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Export>> getExportsAsync(UUID projectId, UUID iterationId, final ServiceCallback<List<Export>> serviceCallback);

    /**
     * Get the list of exports for a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Export&gt; object
     */
    Observable<List<Export>> getExportsAsync(UUID projectId, UUID iterationId);

    /**
     * Get the list of exports for a specific iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Export&gt; object
     */
    Observable<ServiceResponse<List<Export>>> getExportsWithServiceResponseAsync(UUID projectId, UUID iterationId);

    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Export object if successful.
     */
    Export exportIteration(UUID projectId, UUID iterationId, String platform);

    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Export> exportIterationAsync(UUID projectId, UUID iterationId, String platform, final ServiceCallback<Export> serviceCallback);

    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Export object
     */
    Observable<Export> exportIterationAsync(UUID projectId, UUID iterationId, String platform);

    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Export object
     */
    Observable<ServiceResponse<Export>> exportIterationWithServiceResponseAsync(UUID projectId, UUID iterationId, String platform);
    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'
     * @param flavor The flavor of the target platform. Possible values include: 'Linux', 'Windows', 'ONNX10', 'ONNX12', 'ARM'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Export object if successful.
     */
    Export exportIteration(UUID projectId, UUID iterationId, String platform, String flavor);

    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'
     * @param flavor The flavor of the target platform. Possible values include: 'Linux', 'Windows', 'ONNX10', 'ONNX12', 'ARM'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Export> exportIterationAsync(UUID projectId, UUID iterationId, String platform, String flavor, final ServiceCallback<Export> serviceCallback);

    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'
     * @param flavor The flavor of the target platform. Possible values include: 'Linux', 'Windows', 'ONNX10', 'ONNX12', 'ARM'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Export object
     */
    Observable<Export> exportIterationAsync(UUID projectId, UUID iterationId, String platform, String flavor);

    /**
     * Export a trained iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'
     * @param flavor The flavor of the target platform. Possible values include: 'Linux', 'Windows', 'ONNX10', 'ONNX12', 'ARM'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Export object
     */
    Observable<ServiceResponse<Export>> exportIterationWithServiceResponseAsync(UUID projectId, UUID iterationId, String platform, String flavor);

    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Tag object if successful.
     */
    Tag getTag(UUID projectId, UUID tagId);

    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Tag> getTagAsync(UUID projectId, UUID tagId, final ServiceCallback<Tag> serviceCallback);

    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Tag object
     */
    Observable<Tag> getTagAsync(UUID projectId, UUID tagId);

    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Tag object
     */
    Observable<ServiceResponse<Tag>> getTagWithServiceResponseAsync(UUID projectId, UUID tagId);
    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @param iterationId The iteration to retrieve this tag from. Optional, defaults to current training set.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Tag object if successful.
     */
    Tag getTag(UUID projectId, UUID tagId, UUID iterationId);

    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @param iterationId The iteration to retrieve this tag from. Optional, defaults to current training set.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Tag> getTagAsync(UUID projectId, UUID tagId, UUID iterationId, final ServiceCallback<Tag> serviceCallback);

    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @param iterationId The iteration to retrieve this tag from. Optional, defaults to current training set.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Tag object
     */
    Observable<Tag> getTagAsync(UUID projectId, UUID tagId, UUID iterationId);

    /**
     * Get information about a specific tag.
     *
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @param iterationId The iteration to retrieve this tag from. Optional, defaults to current training set.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Tag object
     */
    Observable<ServiceResponse<Tag>> getTagWithServiceResponseAsync(UUID projectId, UUID tagId, UUID iterationId);

    /**
     * Delete a tag from the project.
     *
     * @param projectId The project id.
     * @param tagId Id of the tag to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteTag(UUID projectId, UUID tagId);

    /**
     * Delete a tag from the project.
     *
     * @param projectId The project id.
     * @param tagId Id of the tag to be deleted.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteTagAsync(UUID projectId, UUID tagId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a tag from the project.
     *
     * @param projectId The project id.
     * @param tagId Id of the tag to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteTagAsync(UUID projectId, UUID tagId);

    /**
     * Delete a tag from the project.
     *
     * @param projectId The project id.
     * @param tagId Id of the tag to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteTagWithServiceResponseAsync(UUID projectId, UUID tagId);

    /**
     * Update a tag.
     *
     * @param projectId The project id.
     * @param tagId The id of the target tag.
     * @param updatedTag The updated tag model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Tag object if successful.
     */
    Tag updateTag(UUID projectId, UUID tagId, Tag updatedTag);

    /**
     * Update a tag.
     *
     * @param projectId The project id.
     * @param tagId The id of the target tag.
     * @param updatedTag The updated tag model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Tag> updateTagAsync(UUID projectId, UUID tagId, Tag updatedTag, final ServiceCallback<Tag> serviceCallback);

    /**
     * Update a tag.
     *
     * @param projectId The project id.
     * @param tagId The id of the target tag.
     * @param updatedTag The updated tag model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Tag object
     */
    Observable<Tag> updateTagAsync(UUID projectId, UUID tagId, Tag updatedTag);

    /**
     * Update a tag.
     *
     * @param projectId The project id.
     * @param tagId The id of the target tag.
     * @param updatedTag The updated tag model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Tag object
     */
    Observable<ServiceResponse<Tag>> updateTagWithServiceResponseAsync(UUID projectId, UUID tagId, Tag updatedTag);

    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Tag&gt; object if successful.
     */
    List<Tag> getTags(UUID projectId);

    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Tag>> getTagsAsync(UUID projectId, final ServiceCallback<List<Tag>> serviceCallback);

    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Tag&gt; object
     */
    Observable<List<Tag>> getTagsAsync(UUID projectId);

    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Tag&gt; object
     */
    Observable<ServiceResponse<List<Tag>>> getTagsWithServiceResponseAsync(UUID projectId);
    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Tag&gt; object if successful.
     */
    List<Tag> getTags(UUID projectId, UUID iterationId);

    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Tag>> getTagsAsync(UUID projectId, UUID iterationId, final ServiceCallback<List<Tag>> serviceCallback);

    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Tag&gt; object
     */
    Observable<List<Tag>> getTagsAsync(UUID projectId, UUID iterationId);

    /**
     * Get the tags for a given project and iteration.
     *
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Tag&gt; object
     */
    Observable<ServiceResponse<List<Tag>>> getTagsWithServiceResponseAsync(UUID projectId, UUID iterationId);

    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Tag object if successful.
     */
    Tag createTag(UUID projectId, String name);

    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Tag> createTagAsync(UUID projectId, String name, final ServiceCallback<Tag> serviceCallback);

    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Tag object
     */
    Observable<Tag> createTagAsync(UUID projectId, String name);

    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Tag object
     */
    Observable<ServiceResponse<Tag>> createTagWithServiceResponseAsync(UUID projectId, String name);
    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @param description Optional description for the tag.
     * @param type Optional type for the tag. Possible values include: 'Regular', 'Negative'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CustomVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Tag object if successful.
     */
    Tag createTag(UUID projectId, String name, String description, String type);

    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @param description Optional description for the tag.
     * @param type Optional type for the tag. Possible values include: 'Regular', 'Negative'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Tag> createTagAsync(UUID projectId, String name, String description, String type, final ServiceCallback<Tag> serviceCallback);

    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @param description Optional description for the tag.
     * @param type Optional type for the tag. Possible values include: 'Regular', 'Negative'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Tag object
     */
    Observable<Tag> createTagAsync(UUID projectId, String name, String description, String type);

    /**
     * Create a tag for the project.
     *
     * @param projectId The project id.
     * @param name The tag name.
     * @param description Optional description for the tag.
     * @param type Optional type for the tag. Possible values include: 'Regular', 'Negative'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Tag object
     */
    Observable<ServiceResponse<Tag>> createTagWithServiceResponseAsync(UUID projectId, String name, String description, String type);

}
