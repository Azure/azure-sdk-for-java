/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.formrecognizer.models;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Analyze API call result.
 */
public class AnalyzeResult {
    /**
     * Status of the analyze operation. Possible values include: 'success',
     * 'partialSuccess', 'failure'.
     */
    @JsonProperty(value = "status")
    private String status;

    /**
     * Page level information extracted in the analyzed
     * document.
     */
    @JsonProperty(value = "pages")
    private List<ExtractedPage> pages;

    /**
     * List of errors reported during the analyze
     * operation.
     */
    @JsonProperty(value = "errors")
    private List<FormOperationError> errors;

    /**
     * Get status of the analyze operation. Possible values include: 'success', 'partialSuccess', 'failure'.
     *
     * @return the status value
     */
    public String status() {
        return this.status;
    }

    /**
     * Set status of the analyze operation. Possible values include: 'success', 'partialSuccess', 'failure'.
     *
     * @param status the status value to set
     * @return the AnalyzeResult object itself.
     */
    public AnalyzeResult withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get page level information extracted in the analyzed
     document.
     *
     * @return the pages value
     */
    public List<ExtractedPage> pages() {
        return this.pages;
    }

    /**
     * Set page level information extracted in the analyzed
     document.
     *
     * @param pages the pages value to set
     * @return the AnalyzeResult object itself.
     */
    public AnalyzeResult withPages(List<ExtractedPage> pages) {
        this.pages = pages;
        return this;
    }

    /**
     * Get list of errors reported during the analyze
     operation.
     *
     * @return the errors value
     */
    public List<FormOperationError> errors() {
        return this.errors;
    }

    /**
     * Set list of errors reported during the analyze
     operation.
     *
     * @param errors the errors value to set
     * @return the AnalyzeResult object itself.
     */
    public AnalyzeResult withErrors(List<FormOperationError> errors) {
        this.errors = errors;
        return this;
    }

}
