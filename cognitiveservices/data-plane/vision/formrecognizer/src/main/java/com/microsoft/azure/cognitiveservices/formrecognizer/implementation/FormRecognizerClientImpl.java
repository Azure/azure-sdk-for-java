/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.formrecognizer.implementation;

import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureClient;
import com.microsoft.azure.AzureServiceClient;
import com.microsoft.azure.cognitiveservices.formrecognizer.FormRecognizerClient;
import com.microsoft.azure.cognitiveservices.formrecognizer.models.AnalyzeResult;
import com.microsoft.azure.cognitiveservices.formrecognizer.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.formrecognizer.models.KeysResult;
import com.microsoft.azure.cognitiveservices.formrecognizer.models.ModelResult;
import com.microsoft.azure.cognitiveservices.formrecognizer.models.ModelsResult;
import com.microsoft.azure.cognitiveservices.formrecognizer.models.TrainRequest;
import com.microsoft.azure.cognitiveservices.formrecognizer.models.TrainResult;
import com.microsoft.rest.CollectionFormat;
import com.microsoft.rest.credentials.ServiceClientCredentials;
import com.microsoft.rest.RestClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.InputStream;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Multipart;
import retrofit2.http.Part;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * Initializes a new instance of the FormRecognizerClientImpl class.
 */
public class FormRecognizerClientImpl extends AzureServiceClient implements FormRecognizerClient {
    /** The Retrofit service to perform REST calls. */
    private FormRecognizerClientService service;
    /** the {@link AzureClient} used for long running operations. */
    private AzureClient azureClient;

    /**
     * Gets the {@link AzureClient} used for long running operations.
     * @return the azure client;
     */
    public AzureClient getAzureClient() {
        return this.azureClient;
    }

    /** Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com). */
    private String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com).
     *
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Sets Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com).
     *
     * @param endpoint the endpoint value.
     * @return the service client itself
     */
    public FormRecognizerClientImpl withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /** The preferred language for the response. */
    private String acceptLanguage;

    /**
     * Gets The preferred language for the response.
     *
     * @return the acceptLanguage value.
     */
    public String acceptLanguage() {
        return this.acceptLanguage;
    }

    /**
     * Sets The preferred language for the response.
     *
     * @param acceptLanguage the acceptLanguage value.
     * @return the service client itself
     */
    public FormRecognizerClientImpl withAcceptLanguage(String acceptLanguage) {
        this.acceptLanguage = acceptLanguage;
        return this;
    }

    /** The retry timeout in seconds for Long Running Operations. Default value is 30. */
    private int longRunningOperationRetryTimeout;

    /**
     * Gets The retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @return the longRunningOperationRetryTimeout value.
     */
    public int longRunningOperationRetryTimeout() {
        return this.longRunningOperationRetryTimeout;
    }

    /**
     * Sets The retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @param longRunningOperationRetryTimeout the longRunningOperationRetryTimeout value.
     * @return the service client itself
     */
    public FormRecognizerClientImpl withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout) {
        this.longRunningOperationRetryTimeout = longRunningOperationRetryTimeout;
        return this;
    }

    /** Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true. */
    private boolean generateClientRequestId;

    /**
     * Gets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @return the generateClientRequestId value.
     */
    public boolean generateClientRequestId() {
        return this.generateClientRequestId;
    }

    /**
     * Sets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @param generateClientRequestId the generateClientRequestId value.
     * @return the service client itself
     */
    public FormRecognizerClientImpl withGenerateClientRequestId(boolean generateClientRequestId) {
        this.generateClientRequestId = generateClientRequestId;
        return this;
    }

    /**
     * Initializes an instance of FormRecognizerClient client.
     *
     * @param credentials the management credentials for Azure
     */
    public FormRecognizerClientImpl(ServiceClientCredentials credentials) {
        this("https://{Endpoint}/formrecognizer/v1.0-preview", credentials);
    }

    /**
     * Initializes an instance of FormRecognizerClient client.
     *
     * @param baseUrl the base URL of the host
     * @param credentials the management credentials for Azure
     */
    private FormRecognizerClientImpl(String baseUrl, ServiceClientCredentials credentials) {
        super(baseUrl, credentials);
        initialize();
    }

    /**
     * Initializes an instance of FormRecognizerClient client.
     *
     * @param restClient the REST client to connect to Azure.
     */
    public FormRecognizerClientImpl(RestClient restClient) {
        super(restClient);
        initialize();
    }

    protected void initialize() {
        this.acceptLanguage = "en-US";
        this.longRunningOperationRetryTimeout = 30;
        this.generateClientRequestId = true;
        this.azureClient = new AzureClient(this);
        initializeService();
    }

    /**
     * Gets the User-Agent header for the client.
     *
     * @return the user agent string.
     */
    @Override
    public String userAgent() {
        return String.format("%s (%s, %s)", super.userAgent(), "FormRecognizerClient", "1.0-preview");
    }

    private void initializeService() {
        service = restClient().retrofit().create(FormRecognizerClientService.class);
    }

    /**
     * The interface defining all the services for FormRecognizerClient to be
     * used by Retrofit to perform actually REST calls.
     */
    interface FormRecognizerClientService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.formrecognizer.FormRecognizerClient trainCustomModel" })
        @POST("custom/train")
        Observable<Response<ResponseBody>> trainCustomModel(@Header("accept-language") String acceptLanguage, @Body TrainRequest trainRequest, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.formrecognizer.FormRecognizerClient getExtractedKeys" })
        @GET("custom/models/{id}/keys")
        Observable<Response<ResponseBody>> getExtractedKeys(@Path("id") UUID id, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.formrecognizer.FormRecognizerClient getCustomModels" })
        @GET("custom/models")
        Observable<Response<ResponseBody>> getCustomModels(@Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.formrecognizer.FormRecognizerClient getCustomModel" })
        @GET("custom/models/{id}")
        Observable<Response<ResponseBody>> getCustomModel(@Path("id") UUID id, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.formrecognizer.FormRecognizerClient deleteCustomModel" })
        @HTTP(path = "custom/models/{id}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteCustomModel(@Path("id") UUID id, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Multipart
        @POST("custom/models/{id}/analyze")
        Observable<Response<ResponseBody>> analyzeWithCustomModel(@Path("id") UUID id, @Query("keys") String keys, @Part("form_stream") RequestBody formStream, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

    }

    /**
     * Train Model.
     * Create and train a custom model. The train request must include a source parameter that is either an externally accessible Azure Storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration
      setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid source path would be '/input/contosodataset'. All data to be trained is expected to be directly under the source folder. Subfolders are not supported. Models are trained using documents that are of the following content type - 'application/pdf', 'image/jpeg' and 'image/png'."
      Other type of content is ignored.
     *
     * @param source Get or set source path.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrainResult object if successful.
     */
    public TrainResult trainCustomModel(String source) {
        return trainCustomModelWithServiceResponseAsync(source).toBlocking().single().body();
    }

    /**
     * Train Model.
     * Create and train a custom model. The train request must include a source parameter that is either an externally accessible Azure Storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration
      setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid source path would be '/input/contosodataset'. All data to be trained is expected to be directly under the source folder. Subfolders are not supported. Models are trained using documents that are of the following content type - 'application/pdf', 'image/jpeg' and 'image/png'."
      Other type of content is ignored.
     *
     * @param source Get or set source path.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TrainResult> trainCustomModelAsync(String source, final ServiceCallback<TrainResult> serviceCallback) {
        return ServiceFuture.fromResponse(trainCustomModelWithServiceResponseAsync(source), serviceCallback);
    }

    /**
     * Train Model.
     * Create and train a custom model. The train request must include a source parameter that is either an externally accessible Azure Storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration
      setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid source path would be '/input/contosodataset'. All data to be trained is expected to be directly under the source folder. Subfolders are not supported. Models are trained using documents that are of the following content type - 'application/pdf', 'image/jpeg' and 'image/png'."
      Other type of content is ignored.
     *
     * @param source Get or set source path.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrainResult object
     */
    public Observable<TrainResult> trainCustomModelAsync(String source) {
        return trainCustomModelWithServiceResponseAsync(source).map(new Func1<ServiceResponse<TrainResult>, TrainResult>() {
            @Override
            public TrainResult call(ServiceResponse<TrainResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Train Model.
     * Create and train a custom model. The train request must include a source parameter that is either an externally accessible Azure Storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration
      setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid source path would be '/input/contosodataset'. All data to be trained is expected to be directly under the source folder. Subfolders are not supported. Models are trained using documents that are of the following content type - 'application/pdf', 'image/jpeg' and 'image/png'."
      Other type of content is ignored.
     *
     * @param source Get or set source path.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrainResult object
     */
    public Observable<ServiceResponse<TrainResult>> trainCustomModelWithServiceResponseAsync(String source) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (source == null) {
            throw new IllegalArgumentException("Parameter source is required and cannot be null.");
        }
        TrainRequest trainRequest = new TrainRequest();
        trainRequest.withSource(source);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        return service.trainCustomModel(this.acceptLanguage(), trainRequest, parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TrainResult>>>() {
                @Override
                public Observable<ServiceResponse<TrainResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TrainResult> clientResponse = trainCustomModelDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TrainResult> trainCustomModelDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<TrainResult, ErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<TrainResult>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get Keys.
     * Retrieve the keys that were
      extracted during the training of the specified model.
     *
     * @param id Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the KeysResult object if successful.
     */
    public KeysResult getExtractedKeys(UUID id) {
        return getExtractedKeysWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Get Keys.
     * Retrieve the keys that were
      extracted during the training of the specified model.
     *
     * @param id Model identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<KeysResult> getExtractedKeysAsync(UUID id, final ServiceCallback<KeysResult> serviceCallback) {
        return ServiceFuture.fromResponse(getExtractedKeysWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Get Keys.
     * Retrieve the keys that were
      extracted during the training of the specified model.
     *
     * @param id Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the KeysResult object
     */
    public Observable<KeysResult> getExtractedKeysAsync(UUID id) {
        return getExtractedKeysWithServiceResponseAsync(id).map(new Func1<ServiceResponse<KeysResult>, KeysResult>() {
            @Override
            public KeysResult call(ServiceResponse<KeysResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Get Keys.
     * Retrieve the keys that were
      extracted during the training of the specified model.
     *
     * @param id Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the KeysResult object
     */
    public Observable<ServiceResponse<KeysResult>> getExtractedKeysWithServiceResponseAsync(UUID id) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        return service.getExtractedKeys(id, this.acceptLanguage(), parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<KeysResult>>>() {
                @Override
                public Observable<ServiceResponse<KeysResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<KeysResult> clientResponse = getExtractedKeysDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<KeysResult> getExtractedKeysDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<KeysResult, ErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<KeysResult>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get Models.
     * Get information about all trained custom models.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ModelsResult object if successful.
     */
    public ModelsResult getCustomModels() {
        return getCustomModelsWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Get Models.
     * Get information about all trained custom models.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ModelsResult> getCustomModelsAsync(final ServiceCallback<ModelsResult> serviceCallback) {
        return ServiceFuture.fromResponse(getCustomModelsWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get Models.
     * Get information about all trained custom models.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ModelsResult object
     */
    public Observable<ModelsResult> getCustomModelsAsync() {
        return getCustomModelsWithServiceResponseAsync().map(new Func1<ServiceResponse<ModelsResult>, ModelsResult>() {
            @Override
            public ModelsResult call(ServiceResponse<ModelsResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Get Models.
     * Get information about all trained custom models.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ModelsResult object
     */
    public Observable<ServiceResponse<ModelsResult>> getCustomModelsWithServiceResponseAsync() {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        return service.getCustomModels(this.acceptLanguage(), parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ModelsResult>>>() {
                @Override
                public Observable<ServiceResponse<ModelsResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ModelsResult> clientResponse = getCustomModelsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ModelsResult> getCustomModelsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ModelsResult, ErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ModelsResult>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get Model.
     * Get information about a model.
     *
     * @param id Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ModelResult object if successful.
     */
    public ModelResult getCustomModel(UUID id) {
        return getCustomModelWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Get Model.
     * Get information about a model.
     *
     * @param id Model identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ModelResult> getCustomModelAsync(UUID id, final ServiceCallback<ModelResult> serviceCallback) {
        return ServiceFuture.fromResponse(getCustomModelWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Get Model.
     * Get information about a model.
     *
     * @param id Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ModelResult object
     */
    public Observable<ModelResult> getCustomModelAsync(UUID id) {
        return getCustomModelWithServiceResponseAsync(id).map(new Func1<ServiceResponse<ModelResult>, ModelResult>() {
            @Override
            public ModelResult call(ServiceResponse<ModelResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Get Model.
     * Get information about a model.
     *
     * @param id Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ModelResult object
     */
    public Observable<ServiceResponse<ModelResult>> getCustomModelWithServiceResponseAsync(UUID id) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        return service.getCustomModel(id, this.acceptLanguage(), parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ModelResult>>>() {
                @Override
                public Observable<ServiceResponse<ModelResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ModelResult> clientResponse = getCustomModelDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ModelResult> getCustomModelDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ModelResult, ErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ModelResult>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Delete Model.
     * Delete model artifacts.
     *
     * @param id The identifier of the model to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteCustomModel(UUID id) {
        deleteCustomModelWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Delete Model.
     * Delete model artifacts.
     *
     * @param id The identifier of the model to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteCustomModelAsync(UUID id, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteCustomModelWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Delete Model.
     * Delete model artifacts.
     *
     * @param id The identifier of the model to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteCustomModelAsync(UUID id) {
        return deleteCustomModelWithServiceResponseAsync(id).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete Model.
     * Delete model artifacts.
     *
     * @param id The identifier of the model to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteCustomModelWithServiceResponseAsync(UUID id) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        return service.deleteCustomModel(id, this.acceptLanguage(), parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteCustomModelDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteCustomModelDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Analyze Form.
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is returned in JSON.
     *
     * @param id Model Identifier to analyze the document with.
     * @param formStream A pdf document or image (jpg,png) file to analyze.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AnalyzeResult object if successful.
     */
    public AnalyzeResult analyzeWithCustomModel(UUID id, byte[] formStream) {
        return analyzeWithCustomModelWithServiceResponseAsync(id, formStream).toBlocking().single().body();
    }

    /**
     * Analyze Form.
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is returned in JSON.
     *
     * @param id Model Identifier to analyze the document with.
     * @param formStream A pdf document or image (jpg,png) file to analyze.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AnalyzeResult> analyzeWithCustomModelAsync(UUID id, byte[] formStream, final ServiceCallback<AnalyzeResult> serviceCallback) {
        return ServiceFuture.fromResponse(analyzeWithCustomModelWithServiceResponseAsync(id, formStream), serviceCallback);
    }

    /**
     * Analyze Form.
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is returned in JSON.
     *
     * @param id Model Identifier to analyze the document with.
     * @param formStream A pdf document or image (jpg,png) file to analyze.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AnalyzeResult object
     */
    public Observable<AnalyzeResult> analyzeWithCustomModelAsync(UUID id, byte[] formStream) {
        return analyzeWithCustomModelWithServiceResponseAsync(id, formStream).map(new Func1<ServiceResponse<AnalyzeResult>, AnalyzeResult>() {
            @Override
            public AnalyzeResult call(ServiceResponse<AnalyzeResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Analyze Form.
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is returned in JSON.
     *
     * @param id Model Identifier to analyze the document with.
     * @param formStream A pdf document or image (jpg,png) file to analyze.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AnalyzeResult object
     */
    public Observable<ServiceResponse<AnalyzeResult>> analyzeWithCustomModelWithServiceResponseAsync(UUID id, byte[] formStream) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (formStream == null) {
            throw new IllegalArgumentException("Parameter formStream is required and cannot be null.");
        }
        final List<String> keys = null;
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        String keysConverted = this.serializerAdapter().serializeList(keys, CollectionFormat.CSV);RequestBody formStreamConverted = RequestBody.create(MediaType.parse("multipart/form-data"), formStream);
        return service.analyzeWithCustomModel(id, keysConverted, formStreamConverted, this.acceptLanguage(), parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AnalyzeResult>>>() {
                @Override
                public Observable<ServiceResponse<AnalyzeResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AnalyzeResult> clientResponse = analyzeWithCustomModelDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Analyze Form.
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is returned in JSON.
     *
     * @param id Model Identifier to analyze the document with.
     * @param formStream A pdf document or image (jpg,png) file to analyze.
     * @param keys An optional list of known keys to extract the values for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AnalyzeResult object if successful.
     */
    public AnalyzeResult analyzeWithCustomModel(UUID id, byte[] formStream, List<String> keys) {
        return analyzeWithCustomModelWithServiceResponseAsync(id, formStream, keys).toBlocking().single().body();
    }

    /**
     * Analyze Form.
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is returned in JSON.
     *
     * @param id Model Identifier to analyze the document with.
     * @param formStream A pdf document or image (jpg,png) file to analyze.
     * @param keys An optional list of known keys to extract the values for.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AnalyzeResult> analyzeWithCustomModelAsync(UUID id, byte[] formStream, List<String> keys, final ServiceCallback<AnalyzeResult> serviceCallback) {
        return ServiceFuture.fromResponse(analyzeWithCustomModelWithServiceResponseAsync(id, formStream, keys), serviceCallback);
    }

    /**
     * Analyze Form.
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is returned in JSON.
     *
     * @param id Model Identifier to analyze the document with.
     * @param formStream A pdf document or image (jpg,png) file to analyze.
     * @param keys An optional list of known keys to extract the values for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AnalyzeResult object
     */
    public Observable<AnalyzeResult> analyzeWithCustomModelAsync(UUID id, byte[] formStream, List<String> keys) {
        return analyzeWithCustomModelWithServiceResponseAsync(id, formStream, keys).map(new Func1<ServiceResponse<AnalyzeResult>, AnalyzeResult>() {
            @Override
            public AnalyzeResult call(ServiceResponse<AnalyzeResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Analyze Form.
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is returned in JSON.
     *
     * @param id Model Identifier to analyze the document with.
     * @param formStream A pdf document or image (jpg,png) file to analyze.
     * @param keys An optional list of known keys to extract the values for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AnalyzeResult object
     */
    public Observable<ServiceResponse<AnalyzeResult>> analyzeWithCustomModelWithServiceResponseAsync(UUID id, byte[] formStream, List<String> keys) {
        if (this.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.endpoint() is required and cannot be null.");
        }
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (formStream == null) {
            throw new IllegalArgumentException("Parameter formStream is required and cannot be null.");
        }
        Validator.validate(keys);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.endpoint());
        String keysConverted = this.serializerAdapter().serializeList(keys, CollectionFormat.CSV);RequestBody formStreamConverted = RequestBody.create(MediaType.parse("multipart/form-data"), formStream);
        return service.analyzeWithCustomModel(id, keysConverted, formStreamConverted, this.acceptLanguage(), parameterizedHost, this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AnalyzeResult>>>() {
                @Override
                public Observable<ServiceResponse<AnalyzeResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AnalyzeResult> clientResponse = analyzeWithCustomModelDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AnalyzeResult> analyzeWithCustomModelDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<AnalyzeResult, ErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<AnalyzeResult>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
