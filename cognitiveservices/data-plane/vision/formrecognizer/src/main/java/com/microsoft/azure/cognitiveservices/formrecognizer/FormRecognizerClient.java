/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.formrecognizer;

import com.microsoft.azure.AzureClient;
import com.microsoft.azure.cognitiveservices.formrecognizer.models.AnalyzeResult;
import com.microsoft.azure.cognitiveservices.formrecognizer.models.BatchReadReceiptHeaders;
import com.microsoft.azure.cognitiveservices.formrecognizer.models.BatchReadReceiptInStreamHeaders;
import com.microsoft.azure.cognitiveservices.formrecognizer.models.ComputerVisionErrorException;
import com.microsoft.azure.cognitiveservices.formrecognizer.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.formrecognizer.models.KeysResult;
import com.microsoft.azure.cognitiveservices.formrecognizer.models.ModelResult;
import com.microsoft.azure.cognitiveservices.formrecognizer.models.ModelsResult;
import com.microsoft.azure.cognitiveservices.formrecognizer.models.ReadReceiptResult;
import com.microsoft.azure.cognitiveservices.formrecognizer.models.TrainRequest;
import com.microsoft.azure.cognitiveservices.formrecognizer.models.TrainResult;
import com.microsoft.rest.RestClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import rx.Observable;

/**
 * The interface for FormRecognizerClient class.
 */
public interface FormRecognizerClient {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * Gets the {@link AzureClient} used for long running operations.
     * @return the azure client;
     */
    AzureClient getAzureClient();

    /**
     * Gets the User-Agent header for the client.
     *
     * @return the user agent string.
     */
    String userAgent();

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com)..
     *
     * @return the endpoint value.
     */
    String endpoint();

    /**
     * Sets Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com)..
     *
     * @param endpoint the endpoint value.
     * @return the service client itself
     */
    FormRecognizerClient withEndpoint(String endpoint);

    /**
     * Gets The preferred language for the response..
     *
     * @return the acceptLanguage value.
     */
    String acceptLanguage();

    /**
     * Sets The preferred language for the response..
     *
     * @param acceptLanguage the acceptLanguage value.
     * @return the service client itself
     */
    FormRecognizerClient withAcceptLanguage(String acceptLanguage);

    /**
     * Gets The retry timeout in seconds for Long Running Operations. Default value is 30..
     *
     * @return the longRunningOperationRetryTimeout value.
     */
    int longRunningOperationRetryTimeout();

    /**
     * Sets The retry timeout in seconds for Long Running Operations. Default value is 30..
     *
     * @param longRunningOperationRetryTimeout the longRunningOperationRetryTimeout value.
     * @return the service client itself
     */
    FormRecognizerClient withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout);

    /**
     * Gets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true..
     *
     * @return the generateClientRequestId value.
     */
    boolean generateClientRequestId();

    /**
     * Sets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true..
     *
     * @param generateClientRequestId the generateClientRequestId value.
     * @return the service client itself
     */
    FormRecognizerClient withGenerateClientRequestId(boolean generateClientRequestId);

    /**
     * Train Model.
     * Create and train a custom model. The train request must include a source parameter that is either an externally accessible Azure Storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration
      setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid source path would be '/input/contosodataset'. All data to be trained is expected to be directly under the source folder. Subfolders are not supported. Models are trained using documents that are of the following content type - 'application/pdf', 'image/jpeg' and 'image/png'."
      Other type of content is ignored.
     *
     * @param trainRequest Request object for training.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrainResult object if successful.
     */
    TrainResult trainCustomModel(TrainRequest trainRequest);

    /**
     * Train Model.
     * Create and train a custom model. The train request must include a source parameter that is either an externally accessible Azure Storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration
      setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid source path would be '/input/contosodataset'. All data to be trained is expected to be directly under the source folder. Subfolders are not supported. Models are trained using documents that are of the following content type - 'application/pdf', 'image/jpeg' and 'image/png'."
      Other type of content is ignored.
     *
     * @param trainRequest Request object for training.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrainResult> trainCustomModelAsync(TrainRequest trainRequest, final ServiceCallback<TrainResult> serviceCallback);

    /**
     * Train Model.
     * Create and train a custom model. The train request must include a source parameter that is either an externally accessible Azure Storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration
      setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid source path would be '/input/contosodataset'. All data to be trained is expected to be directly under the source folder. Subfolders are not supported. Models are trained using documents that are of the following content type - 'application/pdf', 'image/jpeg' and 'image/png'."
      Other type of content is ignored.
     *
     * @param trainRequest Request object for training.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrainResult object
     */
    Observable<TrainResult> trainCustomModelAsync(TrainRequest trainRequest);

    /**
     * Train Model.
     * Create and train a custom model. The train request must include a source parameter that is either an externally accessible Azure Storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration
      setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid source path would be '/input/contosodataset'. All data to be trained is expected to be directly under the source folder. Subfolders are not supported. Models are trained using documents that are of the following content type - 'application/pdf', 'image/jpeg' and 'image/png'."
      Other type of content is ignored.
     *
     * @param trainRequest Request object for training.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrainResult object
     */
    Observable<ServiceResponse<TrainResult>> trainCustomModelWithServiceResponseAsync(TrainRequest trainRequest);

    /**
     * Get Keys.
     * Retrieve the keys that were
      extracted during the training of the specified model.
     *
     * @param id Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the KeysResult object if successful.
     */
    KeysResult getExtractedKeys(UUID id);

    /**
     * Get Keys.
     * Retrieve the keys that were
      extracted during the training of the specified model.
     *
     * @param id Model identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<KeysResult> getExtractedKeysAsync(UUID id, final ServiceCallback<KeysResult> serviceCallback);

    /**
     * Get Keys.
     * Retrieve the keys that were
      extracted during the training of the specified model.
     *
     * @param id Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the KeysResult object
     */
    Observable<KeysResult> getExtractedKeysAsync(UUID id);

    /**
     * Get Keys.
     * Retrieve the keys that were
      extracted during the training of the specified model.
     *
     * @param id Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the KeysResult object
     */
    Observable<ServiceResponse<KeysResult>> getExtractedKeysWithServiceResponseAsync(UUID id);

    /**
     * Get Models.
     * Get information about all trained custom models.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ModelsResult object if successful.
     */
    ModelsResult getCustomModels();

    /**
     * Get Models.
     * Get information about all trained custom models.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ModelsResult> getCustomModelsAsync(final ServiceCallback<ModelsResult> serviceCallback);

    /**
     * Get Models.
     * Get information about all trained custom models.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ModelsResult object
     */
    Observable<ModelsResult> getCustomModelsAsync();

    /**
     * Get Models.
     * Get information about all trained custom models.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ModelsResult object
     */
    Observable<ServiceResponse<ModelsResult>> getCustomModelsWithServiceResponseAsync();

    /**
     * Get Model.
     * Get information about a model.
     *
     * @param id Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ModelResult object if successful.
     */
    ModelResult getCustomModel(UUID id);

    /**
     * Get Model.
     * Get information about a model.
     *
     * @param id Model identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ModelResult> getCustomModelAsync(UUID id, final ServiceCallback<ModelResult> serviceCallback);

    /**
     * Get Model.
     * Get information about a model.
     *
     * @param id Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ModelResult object
     */
    Observable<ModelResult> getCustomModelAsync(UUID id);

    /**
     * Get Model.
     * Get information about a model.
     *
     * @param id Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ModelResult object
     */
    Observable<ServiceResponse<ModelResult>> getCustomModelWithServiceResponseAsync(UUID id);

    /**
     * Delete Model.
     * Delete model artifacts.
     *
     * @param id The identifier of the model to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteCustomModel(UUID id);

    /**
     * Delete Model.
     * Delete model artifacts.
     *
     * @param id The identifier of the model to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteCustomModelAsync(UUID id, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete Model.
     * Delete model artifacts.
     *
     * @param id The identifier of the model to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteCustomModelAsync(UUID id);

    /**
     * Delete Model.
     * Delete model artifacts.
     *
     * @param id The identifier of the model to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteCustomModelWithServiceResponseAsync(UUID id);

    /**
     * Analyze Form.
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is returned in JSON.
     *
     * @param id Model Identifier to analyze the document with.
     * @param formStream A pdf document or image (jpg,png) file to analyze.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AnalyzeResult object if successful.
     */
    AnalyzeResult analyzeWithCustomModel(UUID id, byte[] formStream);

    /**
     * Analyze Form.
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is returned in JSON.
     *
     * @param id Model Identifier to analyze the document with.
     * @param formStream A pdf document or image (jpg,png) file to analyze.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<AnalyzeResult> analyzeWithCustomModelAsync(UUID id, byte[] formStream, final ServiceCallback<AnalyzeResult> serviceCallback);

    /**
     * Analyze Form.
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is returned in JSON.
     *
     * @param id Model Identifier to analyze the document with.
     * @param formStream A pdf document or image (jpg,png) file to analyze.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AnalyzeResult object
     */
    Observable<AnalyzeResult> analyzeWithCustomModelAsync(UUID id, byte[] formStream);

    /**
     * Analyze Form.
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is returned in JSON.
     *
     * @param id Model Identifier to analyze the document with.
     * @param formStream A pdf document or image (jpg,png) file to analyze.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AnalyzeResult object
     */
    Observable<ServiceResponse<AnalyzeResult>> analyzeWithCustomModelWithServiceResponseAsync(UUID id, byte[] formStream);
    /**
     * Analyze Form.
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is returned in JSON.
     *
     * @param id Model Identifier to analyze the document with.
     * @param formStream A pdf document or image (jpg,png) file to analyze.
     * @param keys An optional list of known keys to extract the values for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AnalyzeResult object if successful.
     */
    AnalyzeResult analyzeWithCustomModel(UUID id, byte[] formStream, List<String> keys);

    /**
     * Analyze Form.
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is returned in JSON.
     *
     * @param id Model Identifier to analyze the document with.
     * @param formStream A pdf document or image (jpg,png) file to analyze.
     * @param keys An optional list of known keys to extract the values for.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<AnalyzeResult> analyzeWithCustomModelAsync(UUID id, byte[] formStream, List<String> keys, final ServiceCallback<AnalyzeResult> serviceCallback);

    /**
     * Analyze Form.
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is returned in JSON.
     *
     * @param id Model Identifier to analyze the document with.
     * @param formStream A pdf document or image (jpg,png) file to analyze.
     * @param keys An optional list of known keys to extract the values for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AnalyzeResult object
     */
    Observable<AnalyzeResult> analyzeWithCustomModelAsync(UUID id, byte[] formStream, List<String> keys);

    /**
     * Analyze Form.
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is returned in JSON.
     *
     * @param id Model Identifier to analyze the document with.
     * @param formStream A pdf document or image (jpg,png) file to analyze.
     * @param keys An optional list of known keys to extract the values for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AnalyzeResult object
     */
    Observable<ServiceResponse<AnalyzeResult>> analyzeWithCustomModelWithServiceResponseAsync(UUID id, byte[] formStream, List<String> keys);

    /**
     * Batch Read Receipt operation. The response contains a field called 'Operation-Location', which contains the URL that you must use for your 'Get Read Receipt Result' operation.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void batchReadReceipt(String url);

    /**
     * Batch Read Receipt operation. The response contains a field called 'Operation-Location', which contains the URL that you must use for your 'Get Read Receipt Result' operation.
     *
     * @param url Publicly reachable URL of an image.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> batchReadReceiptAsync(String url, final ServiceCallback<Void> serviceCallback);

    /**
     * Batch Read Receipt operation. The response contains a field called 'Operation-Location', which contains the URL that you must use for your 'Get Read Receipt Result' operation.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> batchReadReceiptAsync(String url);

    /**
     * Batch Read Receipt operation. The response contains a field called 'Operation-Location', which contains the URL that you must use for your 'Get Read Receipt Result' operation.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, BatchReadReceiptHeaders>> batchReadReceiptWithServiceResponseAsync(String url);

    /**
     * This interface is used for getting the analysis results of a 'Batch Read Receipt' operation. The URL to this interface should be retrieved from the 'Operation-Location' field returned from the 'Batch Read Receipt' operation.
     *
     * @param operationId Id of read operation returned in the response of a 'Batch Read Receipt' operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReadReceiptResult object if successful.
     */
    ReadReceiptResult getReadReceiptResult(String operationId);

    /**
     * This interface is used for getting the analysis results of a 'Batch Read Receipt' operation. The URL to this interface should be retrieved from the 'Operation-Location' field returned from the 'Batch Read Receipt' operation.
     *
     * @param operationId Id of read operation returned in the response of a 'Batch Read Receipt' operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ReadReceiptResult> getReadReceiptResultAsync(String operationId, final ServiceCallback<ReadReceiptResult> serviceCallback);

    /**
     * This interface is used for getting the analysis results of a 'Batch Read Receipt' operation. The URL to this interface should be retrieved from the 'Operation-Location' field returned from the 'Batch Read Receipt' operation.
     *
     * @param operationId Id of read operation returned in the response of a 'Batch Read Receipt' operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReadReceiptResult object
     */
    Observable<ReadReceiptResult> getReadReceiptResultAsync(String operationId);

    /**
     * This interface is used for getting the analysis results of a 'Batch Read Receipt' operation. The URL to this interface should be retrieved from the 'Operation-Location' field returned from the 'Batch Read Receipt' operation.
     *
     * @param operationId Id of read operation returned in the response of a 'Batch Read Receipt' operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReadReceiptResult object
     */
    Observable<ServiceResponse<ReadReceiptResult>> getReadReceiptResultWithServiceResponseAsync(String operationId);

    /**
     * Read Receipt operation. When you use the 'Batch Read Receipt' interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'Get Read Receipt Result' operation.
     *
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void batchReadReceiptInStream(byte[] image);

    /**
     * Read Receipt operation. When you use the 'Batch Read Receipt' interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'Get Read Receipt Result' operation.
     *
     * @param image An image stream.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> batchReadReceiptInStreamAsync(byte[] image, final ServiceCallback<Void> serviceCallback);

    /**
     * Read Receipt operation. When you use the 'Batch Read Receipt' interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'Get Read Receipt Result' operation.
     *
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> batchReadReceiptInStreamAsync(byte[] image);

    /**
     * Read Receipt operation. When you use the 'Batch Read Receipt' interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'Get Read Receipt Result' operation.
     *
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, BatchReadReceiptInStreamHeaders>> batchReadReceiptInStreamWithServiceResponseAsync(byte[] image);

}
