/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.contentmoderator;

import com.azure.common.http.rest.RestVoidResponse;
import com.azure.common.http.rest.SimpleResponse;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.CreateReviewBodyItem;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.CreateVideoReviewsBodyItem;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Frames;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Job;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.JobId;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Review;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.TranscriptModerationBodyItem;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.VideoFrameBodyItem;
import java.nio.ByteBuffer;
import java.util.List;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Reviews.
 */
public interface Reviews {
    /**
     * Returns review details for the review Id passed.
     *
     * @param teamName Your Team Name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Review object if successful.
     */
    Review getReview(@NonNull String teamName, @NonNull String reviewId);

    /**
     * Returns review details for the review Id passed.
     *
     * @param teamName Your Team Name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Review>> getReviewWithRestResponseAsync(@NonNull String teamName, @NonNull String reviewId);

    /**
     * Returns review details for the review Id passed.
     *
     * @param teamName Your Team Name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Review> getReviewAsync(@NonNull String teamName, @NonNull String reviewId);

    /**
     * Get the Job Details for a Job Id.
     *
     * @param teamName Your Team Name.
     * @param jobId Id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Job object if successful.
     */
    Job getJobDetails(@NonNull String teamName, @NonNull String jobId);

    /**
     * Get the Job Details for a Job Id.
     *
     * @param teamName Your Team Name.
     * @param jobId Id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Job>> getJobDetailsWithRestResponseAsync(@NonNull String teamName, @NonNull String jobId);

    /**
     * Get the Job Details for a Job Id.
     *
     * @param teamName Your Team Name.
     * @param jobId Id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Job> getJobDetailsAsync(@NonNull String teamName, @NonNull String jobId);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param urlContentType The content type.
     * @param teamName Your team name.
     * @param createReviewBody Body for create reviews API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;String&gt; object if successful.
     */
    List<String> createReviews(@NonNull String urlContentType, @NonNull String teamName, @NonNull List<CreateReviewBodyItem> createReviewBody);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param urlContentType The content type.
     * @param teamName Your team name.
     * @param createReviewBody Body for create reviews API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<List<String>>> createReviewsWithRestResponseAsync(@NonNull String urlContentType, @NonNull String teamName, @NonNull List<CreateReviewBodyItem> createReviewBody);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param urlContentType The content type.
     * @param teamName Your team name.
     * @param createReviewBody Body for create reviews API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<List<String>> createReviewsAsync(@NonNull String urlContentType, @NonNull String teamName, @NonNull List<CreateReviewBodyItem> createReviewBody);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param urlContentType The content type.
     * @param teamName Your team name.
     * @param createReviewBody Body for create reviews API.
     * @param subTeam SubTeam of your team, you want to assign the created review to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;String&gt; object if successful.
     */
    List<String> createReviews(@NonNull String urlContentType, @NonNull String teamName, @NonNull List<CreateReviewBodyItem> createReviewBody, String subTeam);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param urlContentType The content type.
     * @param teamName Your team name.
     * @param createReviewBody Body for create reviews API.
     * @param subTeam SubTeam of your team, you want to assign the created review to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<List<String>>> createReviewsWithRestResponseAsync(@NonNull String urlContentType, @NonNull String teamName, @NonNull List<CreateReviewBodyItem> createReviewBody, String subTeam);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param urlContentType The content type.
     * @param teamName Your team name.
     * @param createReviewBody Body for create reviews API.
     * @param subTeam SubTeam of your team, you want to assign the created review to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<List<String>> createReviewsAsync(@NonNull String urlContentType, @NonNull String teamName, @NonNull List<CreateReviewBodyItem> createReviewBody, String subTeam);

    /**
     * A job Id will be returned for the content posted on this endpoint.
     *
     * Once the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     *
     * &lt;p&gt;
     * &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {&lt;br/&gt;
     *   "JobId": "&lt;Job Id&gt;,&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id, if the Job resulted in a Review to be created&gt;",&lt;br/&gt;
     *   "WorkFlowId": "default",&lt;br/&gt;
     *   "Status": "&lt;This will be one of Complete, InProgress, Error&gt;",&lt;br/&gt;
     *   "ContentType": "Image",&lt;br/&gt;
     *   "ContentId": "&lt;This is the ContentId that was specified on input&gt;",&lt;br/&gt;
     *   "CallBackType": "Job",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;
     * &lt;p&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param contentType Image, Text or Video. Possible values include: 'Image', 'Text', 'Video'.
     * @param contentId Id/Name to identify the content submitted.
     * @param workflowName Workflow Name that you want to invoke.
     * @param jobContentType The content type. Possible values include: 'application/json', 'image/jpeg'.
     * @param contentValue Content to evaluate for a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the JobId object if successful.
     */
    JobId createJob(@NonNull String teamName, @NonNull String contentType, @NonNull String contentId, @NonNull String workflowName, @NonNull String jobContentType, @NonNull String contentValue);

    /**
     * A job Id will be returned for the content posted on this endpoint.
     *
     * Once the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     *
     * &lt;p&gt;
     * &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {&lt;br/&gt;
     *   "JobId": "&lt;Job Id&gt;,&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id, if the Job resulted in a Review to be created&gt;",&lt;br/&gt;
     *   "WorkFlowId": "default",&lt;br/&gt;
     *   "Status": "&lt;This will be one of Complete, InProgress, Error&gt;",&lt;br/&gt;
     *   "ContentType": "Image",&lt;br/&gt;
     *   "ContentId": "&lt;This is the ContentId that was specified on input&gt;",&lt;br/&gt;
     *   "CallBackType": "Job",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;
     * &lt;p&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param contentType Image, Text or Video. Possible values include: 'Image', 'Text', 'Video'.
     * @param contentId Id/Name to identify the content submitted.
     * @param workflowName Workflow Name that you want to invoke.
     * @param jobContentType The content type. Possible values include: 'application/json', 'image/jpeg'.
     * @param contentValue Content to evaluate for a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<JobId>> createJobWithRestResponseAsync(@NonNull String teamName, @NonNull String contentType, @NonNull String contentId, @NonNull String workflowName, @NonNull String jobContentType, @NonNull String contentValue);

    /**
     * A job Id will be returned for the content posted on this endpoint.
     *
     * Once the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     *
     * &lt;p&gt;
     * &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {&lt;br/&gt;
     *   "JobId": "&lt;Job Id&gt;,&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id, if the Job resulted in a Review to be created&gt;",&lt;br/&gt;
     *   "WorkFlowId": "default",&lt;br/&gt;
     *   "Status": "&lt;This will be one of Complete, InProgress, Error&gt;",&lt;br/&gt;
     *   "ContentType": "Image",&lt;br/&gt;
     *   "ContentId": "&lt;This is the ContentId that was specified on input&gt;",&lt;br/&gt;
     *   "CallBackType": "Job",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;
     * &lt;p&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param contentType Image, Text or Video. Possible values include: 'Image', 'Text', 'Video'.
     * @param contentId Id/Name to identify the content submitted.
     * @param workflowName Workflow Name that you want to invoke.
     * @param jobContentType The content type. Possible values include: 'application/json', 'image/jpeg'.
     * @param contentValue Content to evaluate for a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<JobId> createJobAsync(@NonNull String teamName, @NonNull String contentType, @NonNull String contentId, @NonNull String workflowName, @NonNull String jobContentType, @NonNull String contentValue);

    /**
     * A job Id will be returned for the content posted on this endpoint.
     *
     * Once the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     *
     * &lt;p&gt;
     * &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {&lt;br/&gt;
     *   "JobId": "&lt;Job Id&gt;,&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id, if the Job resulted in a Review to be created&gt;",&lt;br/&gt;
     *   "WorkFlowId": "default",&lt;br/&gt;
     *   "Status": "&lt;This will be one of Complete, InProgress, Error&gt;",&lt;br/&gt;
     *   "ContentType": "Image",&lt;br/&gt;
     *   "ContentId": "&lt;This is the ContentId that was specified on input&gt;",&lt;br/&gt;
     *   "CallBackType": "Job",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;
     * &lt;p&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param contentType Image, Text or Video. Possible values include: 'Image', 'Text', 'Video'.
     * @param contentId Id/Name to identify the content submitted.
     * @param workflowName Workflow Name that you want to invoke.
     * @param jobContentType The content type. Possible values include: 'application/json', 'image/jpeg'.
     * @param contentValue Content to evaluate for a job.
     * @param callBackEndpoint Callback endpoint for posting the create job result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the JobId object if successful.
     */
    JobId createJob(@NonNull String teamName, @NonNull String contentType, @NonNull String contentId, @NonNull String workflowName, @NonNull String jobContentType, @NonNull String contentValue, String callBackEndpoint);

    /**
     * A job Id will be returned for the content posted on this endpoint.
     *
     * Once the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     *
     * &lt;p&gt;
     * &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {&lt;br/&gt;
     *   "JobId": "&lt;Job Id&gt;,&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id, if the Job resulted in a Review to be created&gt;",&lt;br/&gt;
     *   "WorkFlowId": "default",&lt;br/&gt;
     *   "Status": "&lt;This will be one of Complete, InProgress, Error&gt;",&lt;br/&gt;
     *   "ContentType": "Image",&lt;br/&gt;
     *   "ContentId": "&lt;This is the ContentId that was specified on input&gt;",&lt;br/&gt;
     *   "CallBackType": "Job",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;
     * &lt;p&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param contentType Image, Text or Video. Possible values include: 'Image', 'Text', 'Video'.
     * @param contentId Id/Name to identify the content submitted.
     * @param workflowName Workflow Name that you want to invoke.
     * @param jobContentType The content type. Possible values include: 'application/json', 'image/jpeg'.
     * @param contentValue Content to evaluate for a job.
     * @param callBackEndpoint Callback endpoint for posting the create job result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<JobId>> createJobWithRestResponseAsync(@NonNull String teamName, @NonNull String contentType, @NonNull String contentId, @NonNull String workflowName, @NonNull String jobContentType, @NonNull String contentValue, String callBackEndpoint);

    /**
     * A job Id will be returned for the content posted on this endpoint.
     *
     * Once the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     *
     * &lt;p&gt;
     * &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {&lt;br/&gt;
     *   "JobId": "&lt;Job Id&gt;,&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id, if the Job resulted in a Review to be created&gt;",&lt;br/&gt;
     *   "WorkFlowId": "default",&lt;br/&gt;
     *   "Status": "&lt;This will be one of Complete, InProgress, Error&gt;",&lt;br/&gt;
     *   "ContentType": "Image",&lt;br/&gt;
     *   "ContentId": "&lt;This is the ContentId that was specified on input&gt;",&lt;br/&gt;
     *   "CallBackType": "Job",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;
     * &lt;p&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param contentType Image, Text or Video. Possible values include: 'Image', 'Text', 'Video'.
     * @param contentId Id/Name to identify the content submitted.
     * @param workflowName Workflow Name that you want to invoke.
     * @param jobContentType The content type. Possible values include: 'application/json', 'image/jpeg'.
     * @param contentValue Content to evaluate for a job.
     * @param callBackEndpoint Callback endpoint for posting the create job result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<JobId> createJobAsync(@NonNull String teamName, @NonNull String contentType, @NonNull String contentId, @NonNull String workflowName, @NonNull String jobContentType, @NonNull String contentValue, String callBackEndpoint);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void addVideoFrame(@NonNull String teamName, @NonNull String reviewId);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<RestVoidResponse> addVideoFrameWithRestResponseAsync(@NonNull String teamName, @NonNull String reviewId);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> addVideoFrameAsync(@NonNull String teamName, @NonNull String reviewId);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param timescale Timescale of the video you are adding frames to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void addVideoFrame(@NonNull String teamName, @NonNull String reviewId, Integer timescale);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param timescale Timescale of the video you are adding frames to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<RestVoidResponse> addVideoFrameWithRestResponseAsync(@NonNull String teamName, @NonNull String reviewId, Integer timescale);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param timescale Timescale of the video you are adding frames to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> addVideoFrameAsync(@NonNull String teamName, @NonNull String reviewId, Integer timescale);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Frames object if successful.
     */
    Frames getVideoFrames(@NonNull String teamName, @NonNull String reviewId);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Frames>> getVideoFramesWithRestResponseAsync(@NonNull String teamName, @NonNull String reviewId);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Frames> getVideoFramesAsync(@NonNull String teamName, @NonNull String reviewId);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param startSeed Time stamp of the frame from where you want to start fetching the frames.
     * @param noOfRecords Number of frames to fetch.
     * @param filter Get frames filtered by tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Frames object if successful.
     */
    Frames getVideoFrames(@NonNull String teamName, @NonNull String reviewId, Integer startSeed, Integer noOfRecords, String filter);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param startSeed Time stamp of the frame from where you want to start fetching the frames.
     * @param noOfRecords Number of frames to fetch.
     * @param filter Get frames filtered by tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Frames>> getVideoFramesWithRestResponseAsync(@NonNull String teamName, @NonNull String reviewId, Integer startSeed, Integer noOfRecords, String filter);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param startSeed Time stamp of the frame from where you want to start fetching the frames.
     * @param noOfRecords Number of frames to fetch.
     * @param filter Get frames filtered by tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Frames> getVideoFramesAsync(@NonNull String teamName, @NonNull String reviewId, Integer startSeed, Integer noOfRecords, String filter);

    /**
     * Publish video review to make it available for review.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void publishVideoReview(@NonNull String teamName, @NonNull String reviewId);

    /**
     * Publish video review to make it available for review.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<RestVoidResponse> publishVideoReviewWithRestResponseAsync(@NonNull String teamName, @NonNull String reviewId);

    /**
     * Publish video review to make it available for review.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> publishVideoReviewAsync(@NonNull String teamName, @NonNull String reviewId);

    /**
     * This API adds a transcript screen text result file for a video review. Transcript screen text result file is a result of Screen Text API . In order to generate transcript screen text result file , a transcript file has to be screened for profanity using Screen Text API.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param transcriptModerationBody Body for add video transcript moderation result API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void addVideoTranscriptModerationResult(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull List<TranscriptModerationBodyItem> transcriptModerationBody);

    /**
     * This API adds a transcript screen text result file for a video review. Transcript screen text result file is a result of Screen Text API . In order to generate transcript screen text result file , a transcript file has to be screened for profanity using Screen Text API.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param transcriptModerationBody Body for add video transcript moderation result API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<RestVoidResponse> addVideoTranscriptModerationResultWithRestResponseAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull List<TranscriptModerationBodyItem> transcriptModerationBody);

    /**
     * This API adds a transcript screen text result file for a video review. Transcript screen text result file is a result of Screen Text API . In order to generate transcript screen text result file , a transcript file has to be screened for profanity using Screen Text API.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param transcriptModerationBody Body for add video transcript moderation result API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> addVideoTranscriptModerationResultAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull List<TranscriptModerationBodyItem> transcriptModerationBody);

    /**
     * This API adds a transcript file (text version of all the words spoken in a video) to a video review. The file should be a valid WebVTT format.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param contentLength The content length.
     * @param vTTfile Transcript file of the video.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void addVideoTranscript(@NonNull String teamName, @NonNull String reviewId, @NonNull long contentLength, @NonNull Flux<ByteBuffer> vTTfile);

    /**
     * This API adds a transcript file (text version of all the words spoken in a video) to a video review. The file should be a valid WebVTT format.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param contentLength The content length.
     * @param vTTfile Transcript file of the video.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<RestVoidResponse> addVideoTranscriptWithRestResponseAsync(@NonNull String teamName, @NonNull String reviewId, @NonNull long contentLength, @NonNull Flux<ByteBuffer> vTTfile);

    /**
     * This API adds a transcript file (text version of all the words spoken in a video) to a video review. The file should be a valid WebVTT format.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param contentLength The content length.
     * @param vTTfile Transcript file of the video.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> addVideoTranscriptAsync(@NonNull String teamName, @NonNull String reviewId, @NonNull long contentLength, @NonNull Flux<ByteBuffer> vTTfile);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param createVideoReviewsBody Body for create reviews API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;String&gt; object if successful.
     */
    List<String> createVideoReviews(@NonNull String contentType, @NonNull String teamName, @NonNull List<CreateVideoReviewsBodyItem> createVideoReviewsBody);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param createVideoReviewsBody Body for create reviews API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<List<String>>> createVideoReviewsWithRestResponseAsync(@NonNull String contentType, @NonNull String teamName, @NonNull List<CreateVideoReviewsBodyItem> createVideoReviewsBody);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param createVideoReviewsBody Body for create reviews API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<List<String>> createVideoReviewsAsync(@NonNull String contentType, @NonNull String teamName, @NonNull List<CreateVideoReviewsBodyItem> createVideoReviewsBody);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param createVideoReviewsBody Body for create reviews API.
     * @param subTeam SubTeam of your team, you want to assign the created review to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;String&gt; object if successful.
     */
    List<String> createVideoReviews(@NonNull String contentType, @NonNull String teamName, @NonNull List<CreateVideoReviewsBodyItem> createVideoReviewsBody, String subTeam);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param createVideoReviewsBody Body for create reviews API.
     * @param subTeam SubTeam of your team, you want to assign the created review to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<List<String>>> createVideoReviewsWithRestResponseAsync(@NonNull String contentType, @NonNull String teamName, @NonNull List<CreateVideoReviewsBodyItem> createVideoReviewsBody, String subTeam);

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param createVideoReviewsBody Body for create reviews API.
     * @param subTeam SubTeam of your team, you want to assign the created review to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<List<String>> createVideoReviewsAsync(@NonNull String contentType, @NonNull String teamName, @NonNull List<CreateVideoReviewsBodyItem> createVideoReviewsBody, String subTeam);

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param videoFrameBody Body for add video frames API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void addVideoFrameUrl(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull List<VideoFrameBodyItem> videoFrameBody);

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param videoFrameBody Body for add video frames API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<RestVoidResponse> addVideoFrameUrlWithRestResponseAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull List<VideoFrameBodyItem> videoFrameBody);

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param videoFrameBody Body for add video frames API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> addVideoFrameUrlAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull List<VideoFrameBodyItem> videoFrameBody);

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param videoFrameBody Body for add video frames API.
     * @param timescale Timescale of the video.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void addVideoFrameUrl(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull List<VideoFrameBodyItem> videoFrameBody, Integer timescale);

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param videoFrameBody Body for add video frames API.
     * @param timescale Timescale of the video.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<RestVoidResponse> addVideoFrameUrlWithRestResponseAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull List<VideoFrameBodyItem> videoFrameBody, Integer timescale);

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param videoFrameBody Body for add video frames API.
     * @param timescale Timescale of the video.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> addVideoFrameUrlAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull List<VideoFrameBodyItem> videoFrameBody, Integer timescale);

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param frameImageZip Zip file containing frame images.
     * @param frameMetadata Metadata of the frame.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void addVideoFrameStream(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull Flux<ByteBuffer> frameImageZip, @NonNull String frameMetadata);

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param frameImageZip Zip file containing frame images.
     * @param frameMetadata Metadata of the frame.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<RestVoidResponse> addVideoFrameStreamWithRestResponseAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull Flux<ByteBuffer> frameImageZip, @NonNull String frameMetadata);

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param frameImageZip Zip file containing frame images.
     * @param frameMetadata Metadata of the frame.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> addVideoFrameStreamAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull Flux<ByteBuffer> frameImageZip, @NonNull String frameMetadata);

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param frameImageZip Zip file containing frame images.
     * @param frameMetadata Metadata of the frame.
     * @param timescale Timescale of the video .
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void addVideoFrameStream(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull Flux<ByteBuffer> frameImageZip, @NonNull String frameMetadata, Integer timescale);

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param frameImageZip Zip file containing frame images.
     * @param frameMetadata Metadata of the frame.
     * @param timescale Timescale of the video .
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<RestVoidResponse> addVideoFrameStreamWithRestResponseAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull Flux<ByteBuffer> frameImageZip, @NonNull String frameMetadata, Integer timescale);

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param frameImageZip Zip file containing frame images.
     * @param frameMetadata Metadata of the frame.
     * @param timescale Timescale of the video .
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> addVideoFrameStreamAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull Flux<ByteBuffer> frameImageZip, @NonNull String frameMetadata, Integer timescale);
}
