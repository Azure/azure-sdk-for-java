/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.contentmoderator.implementation;

import com.azure.common.annotations.BodyParam;
import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.FormParam;
import com.azure.common.annotations.GET;
import com.azure.common.annotations.HeaderParam;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.PathParam;
import com.azure.common.annotations.POST;
import com.azure.common.annotations.PUT;
import com.azure.common.annotations.QueryParam;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.http.rest.RestVoidResponse;
import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.implementation.RestProxy;
import com.azure.common.implementation.Validator;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.Reviews;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Content;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.CreateReviewBodyItem;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.CreateVideoReviewsBodyItem;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Frames;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Job;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.JobId;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Review;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.TranscriptModerationBodyItem;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.VideoFrameBodyItem;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Reviews.
 */
public final class ReviewsImpl implements Reviews {
    /**
     * The proxy service used to perform REST calls.
     */
    private ReviewsService service;

    /**
     * The service client containing this operation class.
     */
    private ContentModeratorClientImpl client;

    /**
     * Initializes an instance of ReviewsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public ReviewsImpl(ContentModeratorClientImpl client) {
        this.service = RestProxy.create(ReviewsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Reviews to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{Endpoint}")
    private interface ReviewsService {
        @GET("contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<Review>> getReview(@PathParam("teamName") String teamName, @PathParam("reviewId") String reviewId, @HostParam("Endpoint") String endpoint);

        @GET("contentmoderator/review/v1.0/teams/{teamName}/jobs/{JobId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<Job>> getJobDetails(@PathParam("teamName") String teamName, @PathParam("JobId") String jobId, @HostParam("Endpoint") String endpoint);

        @POST("contentmoderator/review/v1.0/teams/{teamName}/reviews")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<List<String>>> createReviews(@PathParam("teamName") String teamName, @HostParam("Endpoint") String endpoint, @HeaderParam("UrlContentType") String urlContentType, @QueryParam("subTeam") String subTeam, @BodyParam("application/json; charset=utf-8") List<CreateReviewBodyItem> createReviewBody);

        @POST("contentmoderator/review/v1.0/teams/{teamName}/jobs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<JobId>> createJob(@PathParam("teamName") String teamName, @HostParam("Endpoint") String endpoint, @QueryParam("ContentType") String contentType, @QueryParam("ContentId") String contentId, @QueryParam("WorkflowName") String workflowName, @QueryParam("CallBackEndpoint") String callBackEndpoint, @HeaderParam("Content-Type") String jobContentType, @BodyParam("application/json; charset=utf-8") Content content);

        @POST("contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<RestVoidResponse> addVideoFrame(@PathParam("teamName") String teamName, @PathParam("reviewId") String reviewId, @HostParam("Endpoint") String endpoint, @QueryParam("timescale") Integer timescale);

        @GET("contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<Frames>> getVideoFrames(@PathParam("teamName") String teamName, @PathParam("reviewId") String reviewId, @HostParam("Endpoint") String endpoint, @QueryParam("startSeed") Integer startSeed, @QueryParam("noOfRecords") Integer noOfRecords, @QueryParam("filter") String filter);

        @POST("contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/publish")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<RestVoidResponse> publishVideoReview(@PathParam("teamName") String teamName, @PathParam("reviewId") String reviewId, @HostParam("Endpoint") String endpoint);

        @PUT("contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcriptmoderationresult")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<RestVoidResponse> addVideoTranscriptModerationResult(@PathParam("teamName") String teamName, @PathParam("reviewId") String reviewId, @HostParam("Endpoint") String endpoint, @HeaderParam("Content-Type") String contentType, @BodyParam("application/json; charset=utf-8") List<TranscriptModerationBodyItem> transcriptModerationBody);

        @PUT("contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcript")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<RestVoidResponse> addVideoTranscript(@PathParam("teamName") String teamName, @PathParam("reviewId") String reviewId, @HostParam("Endpoint") String endpoint, @HeaderParam("Content-Type") String contentType, @HeaderParam("Content-Length") long contentLength, @BodyParam("text/plain") Flux<ByteBuffer> vTTfile);

        @POST("contentmoderator/review/v1.0/teams/{teamName}/reviews")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<List<String>>> createVideoReviews(@PathParam("teamName") String teamName, @HostParam("Endpoint") String endpoint, @HeaderParam("Content-Type") String contentType, @QueryParam("subTeam") String subTeam, @BodyParam("application/json; charset=utf-8") List<CreateVideoReviewsBodyItem> createVideoReviewsBody);

        @POST("contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<RestVoidResponse> addVideoFrameUrl(@PathParam("teamName") String teamName, @PathParam("reviewId") String reviewId, @HostParam("Endpoint") String endpoint, @HeaderParam("Content-Type") String contentType, @QueryParam("timescale") Integer timescale, @BodyParam("application/json; charset=utf-8") List<VideoFrameBodyItem> videoFrameBody);

        // @Multipart not supported by RestProxy
        @POST("contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<RestVoidResponse> addVideoFrameStream(@PathParam("teamName") String teamName, @PathParam("reviewId") String reviewId, @HostParam("Endpoint") String endpoint, @HeaderParam("Content-Type") String contentType, @QueryParam("timescale") Integer timescale, @FormParam("frameImageZip") Flux<ByteBuffer> frameImageZip, @FormParam("frameMetadata") String frameMetadata);
    }

    /**
     * Returns review details for the review Id passed.
     *
     * @param teamName Your Team Name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Review object if successful.
     */
    public Review getReview(@NonNull String teamName, @NonNull String reviewId) {
        return getReviewAsync(teamName, reviewId).block();
    }

    /**
     * Returns review details for the review Id passed.
     *
     * @param teamName Your Team Name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Review>> getReviewWithRestResponseAsync(@NonNull String teamName, @NonNull String reviewId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (teamName == null) {
            throw new IllegalArgumentException("Parameter teamName is required and cannot be null.");
        }
        if (reviewId == null) {
            throw new IllegalArgumentException("Parameter reviewId is required and cannot be null.");
        }
        return service.getReview(teamName, reviewId, this.client.endpoint());
    }

    /**
     * Returns review details for the review Id passed.
     *
     * @param teamName Your Team Name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Review> getReviewAsync(@NonNull String teamName, @NonNull String reviewId) {
        return getReviewWithRestResponseAsync(teamName, reviewId)
            .flatMap((SimpleResponse<Review> res) -> Mono.just(res.value()));
    }

    /**
     * Get the Job Details for a Job Id.
     *
     * @param teamName Your Team Name.
     * @param jobId Id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Job object if successful.
     */
    public Job getJobDetails(@NonNull String teamName, @NonNull String jobId) {
        return getJobDetailsAsync(teamName, jobId).block();
    }

    /**
     * Get the Job Details for a Job Id.
     *
     * @param teamName Your Team Name.
     * @param jobId Id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Job>> getJobDetailsWithRestResponseAsync(@NonNull String teamName, @NonNull String jobId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (teamName == null) {
            throw new IllegalArgumentException("Parameter teamName is required and cannot be null.");
        }
        if (jobId == null) {
            throw new IllegalArgumentException("Parameter jobId is required and cannot be null.");
        }
        return service.getJobDetails(teamName, jobId, this.client.endpoint());
    }

    /**
     * Get the Job Details for a Job Id.
     *
     * @param teamName Your Team Name.
     * @param jobId Id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Job> getJobDetailsAsync(@NonNull String teamName, @NonNull String jobId) {
        return getJobDetailsWithRestResponseAsync(teamName, jobId)
            .flatMap((SimpleResponse<Job> res) -> Mono.just(res.value()));
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param urlContentType The content type.
     * @param teamName Your team name.
     * @param createReviewBody Body for create reviews API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;String&gt; object if successful.
     */
    public List<String> createReviews(@NonNull String urlContentType, @NonNull String teamName, @NonNull List<CreateReviewBodyItem> createReviewBody) {
        return createReviewsAsync(urlContentType, teamName, createReviewBody).block();
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param urlContentType The content type.
     * @param teamName Your team name.
     * @param createReviewBody Body for create reviews API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<String>>> createReviewsWithRestResponseAsync(@NonNull String urlContentType, @NonNull String teamName, @NonNull List<CreateReviewBodyItem> createReviewBody) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (urlContentType == null) {
            throw new IllegalArgumentException("Parameter urlContentType is required and cannot be null.");
        }
        if (teamName == null) {
            throw new IllegalArgumentException("Parameter teamName is required and cannot be null.");
        }
        if (createReviewBody == null) {
            throw new IllegalArgumentException("Parameter createReviewBody is required and cannot be null.");
        }
        Validator.validate(createReviewBody);
        final String subTeam = null;
        List<CreateReviewBodyItem> createReviewBodyConverted = createReviewBody;
        return service.createReviews(teamName, this.client.endpoint(), urlContentType, subTeam, createReviewBodyConverted);
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param urlContentType The content type.
     * @param teamName Your team name.
     * @param createReviewBody Body for create reviews API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<String>> createReviewsAsync(@NonNull String urlContentType, @NonNull String teamName, @NonNull List<CreateReviewBodyItem> createReviewBody) {
        return createReviewsWithRestResponseAsync(urlContentType, teamName, createReviewBody)
            .flatMap((SimpleResponse<List<String>> res) -> Mono.just(res.value()));
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param urlContentType The content type.
     * @param teamName Your team name.
     * @param createReviewBody Body for create reviews API.
     * @param subTeam SubTeam of your team, you want to assign the created review to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;String&gt; object if successful.
     */
    public List<String> createReviews(@NonNull String urlContentType, @NonNull String teamName, @NonNull List<CreateReviewBodyItem> createReviewBody, String subTeam) {
        return createReviewsAsync(urlContentType, teamName, createReviewBody, subTeam).block();
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param urlContentType The content type.
     * @param teamName Your team name.
     * @param createReviewBody Body for create reviews API.
     * @param subTeam SubTeam of your team, you want to assign the created review to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<String>>> createReviewsWithRestResponseAsync(@NonNull String urlContentType, @NonNull String teamName, @NonNull List<CreateReviewBodyItem> createReviewBody, String subTeam) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (urlContentType == null) {
            throw new IllegalArgumentException("Parameter urlContentType is required and cannot be null.");
        }
        if (teamName == null) {
            throw new IllegalArgumentException("Parameter teamName is required and cannot be null.");
        }
        if (createReviewBody == null) {
            throw new IllegalArgumentException("Parameter createReviewBody is required and cannot be null.");
        }
        Validator.validate(createReviewBody);
        List<CreateReviewBodyItem> createReviewBodyConverted = createReviewBody;
        return service.createReviews(teamName, this.client.endpoint(), urlContentType, subTeam, createReviewBodyConverted);
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param urlContentType The content type.
     * @param teamName Your team name.
     * @param createReviewBody Body for create reviews API.
     * @param subTeam SubTeam of your team, you want to assign the created review to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<String>> createReviewsAsync(@NonNull String urlContentType, @NonNull String teamName, @NonNull List<CreateReviewBodyItem> createReviewBody, String subTeam) {
        return createReviewsWithRestResponseAsync(urlContentType, teamName, createReviewBody, subTeam)
            .flatMap((SimpleResponse<List<String>> res) -> Mono.just(res.value()));
    }

    /**
     * A job Id will be returned for the content posted on this endpoint.
     *
     * Once the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     *
     * &lt;p&gt;
     * &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {&lt;br/&gt;
     *   "JobId": "&lt;Job Id&gt;,&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id, if the Job resulted in a Review to be created&gt;",&lt;br/&gt;
     *   "WorkFlowId": "default",&lt;br/&gt;
     *   "Status": "&lt;This will be one of Complete, InProgress, Error&gt;",&lt;br/&gt;
     *   "ContentType": "Image",&lt;br/&gt;
     *   "ContentId": "&lt;This is the ContentId that was specified on input&gt;",&lt;br/&gt;
     *   "CallBackType": "Job",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;
     * &lt;p&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param contentType Image, Text or Video. Possible values include: 'Image', 'Text', 'Video'.
     * @param contentId Id/Name to identify the content submitted.
     * @param workflowName Workflow Name that you want to invoke.
     * @param jobContentType The content type. Possible values include: 'application/json', 'image/jpeg'.
     * @param contentValue Content to evaluate for a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the JobId object if successful.
     */
    public JobId createJob(@NonNull String teamName, @NonNull String contentType, @NonNull String contentId, @NonNull String workflowName, @NonNull String jobContentType, @NonNull String contentValue) {
        return createJobAsync(teamName, contentType, contentId, workflowName, jobContentType, contentValue).block();
    }

    /**
     * A job Id will be returned for the content posted on this endpoint.
     *
     * Once the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     *
     * &lt;p&gt;
     * &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {&lt;br/&gt;
     *   "JobId": "&lt;Job Id&gt;,&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id, if the Job resulted in a Review to be created&gt;",&lt;br/&gt;
     *   "WorkFlowId": "default",&lt;br/&gt;
     *   "Status": "&lt;This will be one of Complete, InProgress, Error&gt;",&lt;br/&gt;
     *   "ContentType": "Image",&lt;br/&gt;
     *   "ContentId": "&lt;This is the ContentId that was specified on input&gt;",&lt;br/&gt;
     *   "CallBackType": "Job",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;
     * &lt;p&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param contentType Image, Text or Video. Possible values include: 'Image', 'Text', 'Video'.
     * @param contentId Id/Name to identify the content submitted.
     * @param workflowName Workflow Name that you want to invoke.
     * @param jobContentType The content type. Possible values include: 'application/json', 'image/jpeg'.
     * @param contentValue Content to evaluate for a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<JobId>> createJobWithRestResponseAsync(@NonNull String teamName, @NonNull String contentType, @NonNull String contentId, @NonNull String workflowName, @NonNull String jobContentType, @NonNull String contentValue) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (teamName == null) {
            throw new IllegalArgumentException("Parameter teamName is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        if (contentId == null) {
            throw new IllegalArgumentException("Parameter contentId is required and cannot be null.");
        }
        if (workflowName == null) {
            throw new IllegalArgumentException("Parameter workflowName is required and cannot be null.");
        }
        if (jobContentType == null) {
            throw new IllegalArgumentException("Parameter jobContentType is required and cannot be null.");
        }
        if (contentValue == null) {
            throw new IllegalArgumentException("Parameter contentValue is required and cannot be null.");
        }
        final String callBackEndpoint = null;
        Content content = new Content();
        content.withContentValue(contentValue);
        return service.createJob(teamName, this.client.endpoint(), contentType, contentId, workflowName, callBackEndpoint, jobContentType, content);
    }

    /**
     * A job Id will be returned for the content posted on this endpoint.
     *
     * Once the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     *
     * &lt;p&gt;
     * &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {&lt;br/&gt;
     *   "JobId": "&lt;Job Id&gt;,&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id, if the Job resulted in a Review to be created&gt;",&lt;br/&gt;
     *   "WorkFlowId": "default",&lt;br/&gt;
     *   "Status": "&lt;This will be one of Complete, InProgress, Error&gt;",&lt;br/&gt;
     *   "ContentType": "Image",&lt;br/&gt;
     *   "ContentId": "&lt;This is the ContentId that was specified on input&gt;",&lt;br/&gt;
     *   "CallBackType": "Job",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;
     * &lt;p&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param contentType Image, Text or Video. Possible values include: 'Image', 'Text', 'Video'.
     * @param contentId Id/Name to identify the content submitted.
     * @param workflowName Workflow Name that you want to invoke.
     * @param jobContentType The content type. Possible values include: 'application/json', 'image/jpeg'.
     * @param contentValue Content to evaluate for a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<JobId> createJobAsync(@NonNull String teamName, @NonNull String contentType, @NonNull String contentId, @NonNull String workflowName, @NonNull String jobContentType, @NonNull String contentValue) {
        return createJobWithRestResponseAsync(teamName, contentType, contentId, workflowName, jobContentType, contentValue)
            .flatMap((SimpleResponse<JobId> res) -> Mono.just(res.value()));
    }

    /**
     * A job Id will be returned for the content posted on this endpoint.
     *
     * Once the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     *
     * &lt;p&gt;
     * &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {&lt;br/&gt;
     *   "JobId": "&lt;Job Id&gt;,&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id, if the Job resulted in a Review to be created&gt;",&lt;br/&gt;
     *   "WorkFlowId": "default",&lt;br/&gt;
     *   "Status": "&lt;This will be one of Complete, InProgress, Error&gt;",&lt;br/&gt;
     *   "ContentType": "Image",&lt;br/&gt;
     *   "ContentId": "&lt;This is the ContentId that was specified on input&gt;",&lt;br/&gt;
     *   "CallBackType": "Job",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;
     * &lt;p&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param contentType Image, Text or Video. Possible values include: 'Image', 'Text', 'Video'.
     * @param contentId Id/Name to identify the content submitted.
     * @param workflowName Workflow Name that you want to invoke.
     * @param jobContentType The content type. Possible values include: 'application/json', 'image/jpeg'.
     * @param contentValue Content to evaluate for a job.
     * @param callBackEndpoint Callback endpoint for posting the create job result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the JobId object if successful.
     */
    public JobId createJob(@NonNull String teamName, @NonNull String contentType, @NonNull String contentId, @NonNull String workflowName, @NonNull String jobContentType, @NonNull String contentValue, String callBackEndpoint) {
        return createJobAsync(teamName, contentType, contentId, workflowName, jobContentType, contentValue, callBackEndpoint).block();
    }

    /**
     * A job Id will be returned for the content posted on this endpoint.
     *
     * Once the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     *
     * &lt;p&gt;
     * &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {&lt;br/&gt;
     *   "JobId": "&lt;Job Id&gt;,&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id, if the Job resulted in a Review to be created&gt;",&lt;br/&gt;
     *   "WorkFlowId": "default",&lt;br/&gt;
     *   "Status": "&lt;This will be one of Complete, InProgress, Error&gt;",&lt;br/&gt;
     *   "ContentType": "Image",&lt;br/&gt;
     *   "ContentId": "&lt;This is the ContentId that was specified on input&gt;",&lt;br/&gt;
     *   "CallBackType": "Job",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;
     * &lt;p&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param contentType Image, Text or Video. Possible values include: 'Image', 'Text', 'Video'.
     * @param contentId Id/Name to identify the content submitted.
     * @param workflowName Workflow Name that you want to invoke.
     * @param jobContentType The content type. Possible values include: 'application/json', 'image/jpeg'.
     * @param contentValue Content to evaluate for a job.
     * @param callBackEndpoint Callback endpoint for posting the create job result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<JobId>> createJobWithRestResponseAsync(@NonNull String teamName, @NonNull String contentType, @NonNull String contentId, @NonNull String workflowName, @NonNull String jobContentType, @NonNull String contentValue, String callBackEndpoint) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (teamName == null) {
            throw new IllegalArgumentException("Parameter teamName is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        if (contentId == null) {
            throw new IllegalArgumentException("Parameter contentId is required and cannot be null.");
        }
        if (workflowName == null) {
            throw new IllegalArgumentException("Parameter workflowName is required and cannot be null.");
        }
        if (jobContentType == null) {
            throw new IllegalArgumentException("Parameter jobContentType is required and cannot be null.");
        }
        if (contentValue == null) {
            throw new IllegalArgumentException("Parameter contentValue is required and cannot be null.");
        }
        Content content = new Content();
        content.withContentValue(contentValue);
        return service.createJob(teamName, this.client.endpoint(), contentType, contentId, workflowName, callBackEndpoint, jobContentType, content);
    }

    /**
     * A job Id will be returned for the content posted on this endpoint.
     *
     * Once the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     *
     * &lt;p&gt;
     * &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {&lt;br/&gt;
     *   "JobId": "&lt;Job Id&gt;,&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id, if the Job resulted in a Review to be created&gt;",&lt;br/&gt;
     *   "WorkFlowId": "default",&lt;br/&gt;
     *   "Status": "&lt;This will be one of Complete, InProgress, Error&gt;",&lt;br/&gt;
     *   "ContentType": "Image",&lt;br/&gt;
     *   "ContentId": "&lt;This is the ContentId that was specified on input&gt;",&lt;br/&gt;
     *   "CallBackType": "Job",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;
     * &lt;p&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
     *
     * {
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param contentType Image, Text or Video. Possible values include: 'Image', 'Text', 'Video'.
     * @param contentId Id/Name to identify the content submitted.
     * @param workflowName Workflow Name that you want to invoke.
     * @param jobContentType The content type. Possible values include: 'application/json', 'image/jpeg'.
     * @param contentValue Content to evaluate for a job.
     * @param callBackEndpoint Callback endpoint for posting the create job result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<JobId> createJobAsync(@NonNull String teamName, @NonNull String contentType, @NonNull String contentId, @NonNull String workflowName, @NonNull String jobContentType, @NonNull String contentValue, String callBackEndpoint) {
        return createJobWithRestResponseAsync(teamName, contentType, contentId, workflowName, jobContentType, contentValue, callBackEndpoint)
            .flatMap((SimpleResponse<JobId> res) -> Mono.just(res.value()));
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void addVideoFrame(@NonNull String teamName, @NonNull String reviewId) {
        addVideoFrameAsync(teamName, reviewId).block();
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> addVideoFrameWithRestResponseAsync(@NonNull String teamName, @NonNull String reviewId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (teamName == null) {
            throw new IllegalArgumentException("Parameter teamName is required and cannot be null.");
        }
        if (reviewId == null) {
            throw new IllegalArgumentException("Parameter reviewId is required and cannot be null.");
        }
        final Integer timescale = null;
        return service.addVideoFrame(teamName, reviewId, this.client.endpoint(), timescale);
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> addVideoFrameAsync(@NonNull String teamName, @NonNull String reviewId) {
        return addVideoFrameWithRestResponseAsync(teamName, reviewId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param timescale Timescale of the video you are adding frames to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void addVideoFrame(@NonNull String teamName, @NonNull String reviewId, Integer timescale) {
        addVideoFrameAsync(teamName, reviewId, timescale).block();
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param timescale Timescale of the video you are adding frames to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> addVideoFrameWithRestResponseAsync(@NonNull String teamName, @NonNull String reviewId, Integer timescale) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (teamName == null) {
            throw new IllegalArgumentException("Parameter teamName is required and cannot be null.");
        }
        if (reviewId == null) {
            throw new IllegalArgumentException("Parameter reviewId is required and cannot be null.");
        }
        return service.addVideoFrame(teamName, reviewId, this.client.endpoint(), timescale);
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param timescale Timescale of the video you are adding frames to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> addVideoFrameAsync(@NonNull String teamName, @NonNull String reviewId, Integer timescale) {
        return addVideoFrameWithRestResponseAsync(teamName, reviewId, timescale)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Frames object if successful.
     */
    public Frames getVideoFrames(@NonNull String teamName, @NonNull String reviewId) {
        return getVideoFramesAsync(teamName, reviewId).block();
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Frames>> getVideoFramesWithRestResponseAsync(@NonNull String teamName, @NonNull String reviewId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (teamName == null) {
            throw new IllegalArgumentException("Parameter teamName is required and cannot be null.");
        }
        if (reviewId == null) {
            throw new IllegalArgumentException("Parameter reviewId is required and cannot be null.");
        }
        final Integer startSeed = null;
        final Integer noOfRecords = null;
        final String filter = null;
        return service.getVideoFrames(teamName, reviewId, this.client.endpoint(), startSeed, noOfRecords, filter);
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Frames> getVideoFramesAsync(@NonNull String teamName, @NonNull String reviewId) {
        return getVideoFramesWithRestResponseAsync(teamName, reviewId)
            .flatMap((SimpleResponse<Frames> res) -> Mono.just(res.value()));
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param startSeed Time stamp of the frame from where you want to start fetching the frames.
     * @param noOfRecords Number of frames to fetch.
     * @param filter Get frames filtered by tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Frames object if successful.
     */
    public Frames getVideoFrames(@NonNull String teamName, @NonNull String reviewId, Integer startSeed, Integer noOfRecords, String filter) {
        return getVideoFramesAsync(teamName, reviewId, startSeed, noOfRecords, filter).block();
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param startSeed Time stamp of the frame from where you want to start fetching the frames.
     * @param noOfRecords Number of frames to fetch.
     * @param filter Get frames filtered by tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Frames>> getVideoFramesWithRestResponseAsync(@NonNull String teamName, @NonNull String reviewId, Integer startSeed, Integer noOfRecords, String filter) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (teamName == null) {
            throw new IllegalArgumentException("Parameter teamName is required and cannot be null.");
        }
        if (reviewId == null) {
            throw new IllegalArgumentException("Parameter reviewId is required and cannot be null.");
        }
        return service.getVideoFrames(teamName, reviewId, this.client.endpoint(), startSeed, noOfRecords, filter);
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param startSeed Time stamp of the frame from where you want to start fetching the frames.
     * @param noOfRecords Number of frames to fetch.
     * @param filter Get frames filtered by tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Frames> getVideoFramesAsync(@NonNull String teamName, @NonNull String reviewId, Integer startSeed, Integer noOfRecords, String filter) {
        return getVideoFramesWithRestResponseAsync(teamName, reviewId, startSeed, noOfRecords, filter)
            .flatMap((SimpleResponse<Frames> res) -> Mono.just(res.value()));
    }

    /**
     * Publish video review to make it available for review.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void publishVideoReview(@NonNull String teamName, @NonNull String reviewId) {
        publishVideoReviewAsync(teamName, reviewId).block();
    }

    /**
     * Publish video review to make it available for review.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> publishVideoReviewWithRestResponseAsync(@NonNull String teamName, @NonNull String reviewId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (teamName == null) {
            throw new IllegalArgumentException("Parameter teamName is required and cannot be null.");
        }
        if (reviewId == null) {
            throw new IllegalArgumentException("Parameter reviewId is required and cannot be null.");
        }
        return service.publishVideoReview(teamName, reviewId, this.client.endpoint());
    }

    /**
     * Publish video review to make it available for review.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> publishVideoReviewAsync(@NonNull String teamName, @NonNull String reviewId) {
        return publishVideoReviewWithRestResponseAsync(teamName, reviewId)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * This API adds a transcript screen text result file for a video review. Transcript screen text result file is a result of Screen Text API . In order to generate transcript screen text result file , a transcript file has to be screened for profanity using Screen Text API.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param transcriptModerationBody Body for add video transcript moderation result API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void addVideoTranscriptModerationResult(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull List<TranscriptModerationBodyItem> transcriptModerationBody) {
        addVideoTranscriptModerationResultAsync(contentType, teamName, reviewId, transcriptModerationBody).block();
    }

    /**
     * This API adds a transcript screen text result file for a video review. Transcript screen text result file is a result of Screen Text API . In order to generate transcript screen text result file , a transcript file has to be screened for profanity using Screen Text API.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param transcriptModerationBody Body for add video transcript moderation result API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> addVideoTranscriptModerationResultWithRestResponseAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull List<TranscriptModerationBodyItem> transcriptModerationBody) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        if (teamName == null) {
            throw new IllegalArgumentException("Parameter teamName is required and cannot be null.");
        }
        if (reviewId == null) {
            throw new IllegalArgumentException("Parameter reviewId is required and cannot be null.");
        }
        if (transcriptModerationBody == null) {
            throw new IllegalArgumentException("Parameter transcriptModerationBody is required and cannot be null.");
        }
        Validator.validate(transcriptModerationBody);
        List<TranscriptModerationBodyItem> transcriptModerationBodyConverted = transcriptModerationBody;
        return service.addVideoTranscriptModerationResult(teamName, reviewId, this.client.endpoint(), contentType, transcriptModerationBodyConverted);
    }

    /**
     * This API adds a transcript screen text result file for a video review. Transcript screen text result file is a result of Screen Text API . In order to generate transcript screen text result file , a transcript file has to be screened for profanity using Screen Text API.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param transcriptModerationBody Body for add video transcript moderation result API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> addVideoTranscriptModerationResultAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull List<TranscriptModerationBodyItem> transcriptModerationBody) {
        return addVideoTranscriptModerationResultWithRestResponseAsync(contentType, teamName, reviewId, transcriptModerationBody)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * This API adds a transcript file (text version of all the words spoken in a video) to a video review. The file should be a valid WebVTT format.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param contentLength The content length.
     * @param vTTfile Transcript file of the video.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void addVideoTranscript(@NonNull String teamName, @NonNull String reviewId, @NonNull long contentLength, @NonNull Flux<ByteBuffer> vTTfile) {
        addVideoTranscriptAsync(teamName, reviewId, contentLength, vTTfile).block();
    }

    /**
     * This API adds a transcript file (text version of all the words spoken in a video) to a video review. The file should be a valid WebVTT format.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param contentLength The content length.
     * @param vTTfile Transcript file of the video.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> addVideoTranscriptWithRestResponseAsync(@NonNull String teamName, @NonNull String reviewId, @NonNull long contentLength, @NonNull Flux<ByteBuffer> vTTfile) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (teamName == null) {
            throw new IllegalArgumentException("Parameter teamName is required and cannot be null.");
        }
        if (reviewId == null) {
            throw new IllegalArgumentException("Parameter reviewId is required and cannot be null.");
        }
        if (vTTfile == null) {
            throw new IllegalArgumentException("Parameter vTTfile is required and cannot be null.");
        }
        final String contentType = "text/plain";
        return service.addVideoTranscript(teamName, reviewId, this.client.endpoint(), contentType, contentLength, vTTfile);
    }

    /**
     * This API adds a transcript file (text version of all the words spoken in a video) to a video review. The file should be a valid WebVTT format.
     *
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param contentLength The content length.
     * @param vTTfile Transcript file of the video.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> addVideoTranscriptAsync(@NonNull String teamName, @NonNull String reviewId, @NonNull long contentLength, @NonNull Flux<ByteBuffer> vTTfile) {
        return addVideoTranscriptWithRestResponseAsync(teamName, reviewId, contentLength, vTTfile)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param createVideoReviewsBody Body for create reviews API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;String&gt; object if successful.
     */
    public List<String> createVideoReviews(@NonNull String contentType, @NonNull String teamName, @NonNull List<CreateVideoReviewsBodyItem> createVideoReviewsBody) {
        return createVideoReviewsAsync(contentType, teamName, createVideoReviewsBody).block();
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param createVideoReviewsBody Body for create reviews API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<String>>> createVideoReviewsWithRestResponseAsync(@NonNull String contentType, @NonNull String teamName, @NonNull List<CreateVideoReviewsBodyItem> createVideoReviewsBody) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        if (teamName == null) {
            throw new IllegalArgumentException("Parameter teamName is required and cannot be null.");
        }
        if (createVideoReviewsBody == null) {
            throw new IllegalArgumentException("Parameter createVideoReviewsBody is required and cannot be null.");
        }
        Validator.validate(createVideoReviewsBody);
        final String subTeam = null;
        List<CreateVideoReviewsBodyItem> createVideoReviewsBodyConverted = createVideoReviewsBody;
        return service.createVideoReviews(teamName, this.client.endpoint(), contentType, subTeam, createVideoReviewsBodyConverted);
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param createVideoReviewsBody Body for create reviews API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<String>> createVideoReviewsAsync(@NonNull String contentType, @NonNull String teamName, @NonNull List<CreateVideoReviewsBodyItem> createVideoReviewsBody) {
        return createVideoReviewsWithRestResponseAsync(contentType, teamName, createVideoReviewsBody)
            .flatMap((SimpleResponse<List<String>> res) -> Mono.just(res.value()));
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param createVideoReviewsBody Body for create reviews API.
     * @param subTeam SubTeam of your team, you want to assign the created review to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;String&gt; object if successful.
     */
    public List<String> createVideoReviews(@NonNull String contentType, @NonNull String teamName, @NonNull List<CreateVideoReviewsBodyItem> createVideoReviewsBody, String subTeam) {
        return createVideoReviewsAsync(contentType, teamName, createVideoReviewsBody, subTeam).block();
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param createVideoReviewsBody Body for create reviews API.
     * @param subTeam SubTeam of your team, you want to assign the created review to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<String>>> createVideoReviewsWithRestResponseAsync(@NonNull String contentType, @NonNull String teamName, @NonNull List<CreateVideoReviewsBodyItem> createVideoReviewsBody, String subTeam) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        if (teamName == null) {
            throw new IllegalArgumentException("Parameter teamName is required and cannot be null.");
        }
        if (createVideoReviewsBody == null) {
            throw new IllegalArgumentException("Parameter createVideoReviewsBody is required and cannot be null.");
        }
        Validator.validate(createVideoReviewsBody);
        List<CreateVideoReviewsBodyItem> createVideoReviewsBodyConverted = createVideoReviewsBody;
        return service.createVideoReviews(teamName, this.client.endpoint(), contentType, subTeam, createVideoReviewsBodyConverted);
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
     *
     * &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
     * &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
     * &lt;p&gt;
     * {&lt;br/&gt;
     *   "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
     *   "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
     *   "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
     *   "CallBackType": "Review",&lt;br/&gt;
     *   "ContentId": "&lt;The ContentId that was specified input&gt;",&lt;br/&gt;
     *   "Metadata": {&lt;br/&gt;
     *     "adultscore": "0.xxx",&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "racyscore": "0.xxx",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   },&lt;br/&gt;
     *   "ReviewerResultTags": {&lt;br/&gt;
     *     "a": "False",&lt;br/&gt;
     *     "r": "True"&lt;br/&gt;
     *   }&lt;br/&gt;
     * }&lt;br/&gt;
     *
     * &lt;/p&gt;.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param createVideoReviewsBody Body for create reviews API.
     * @param subTeam SubTeam of your team, you want to assign the created review to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<String>> createVideoReviewsAsync(@NonNull String contentType, @NonNull String teamName, @NonNull List<CreateVideoReviewsBodyItem> createVideoReviewsBody, String subTeam) {
        return createVideoReviewsWithRestResponseAsync(contentType, teamName, createVideoReviewsBody, subTeam)
            .flatMap((SimpleResponse<List<String>> res) -> Mono.just(res.value()));
    }

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param videoFrameBody Body for add video frames API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void addVideoFrameUrl(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull List<VideoFrameBodyItem> videoFrameBody) {
        addVideoFrameUrlAsync(contentType, teamName, reviewId, videoFrameBody).block();
    }

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param videoFrameBody Body for add video frames API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> addVideoFrameUrlWithRestResponseAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull List<VideoFrameBodyItem> videoFrameBody) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        if (teamName == null) {
            throw new IllegalArgumentException("Parameter teamName is required and cannot be null.");
        }
        if (reviewId == null) {
            throw new IllegalArgumentException("Parameter reviewId is required and cannot be null.");
        }
        if (videoFrameBody == null) {
            throw new IllegalArgumentException("Parameter videoFrameBody is required and cannot be null.");
        }
        Validator.validate(videoFrameBody);
        final Integer timescale = null;
        List<VideoFrameBodyItem> videoFrameBodyConverted = videoFrameBody;
        return service.addVideoFrameUrl(teamName, reviewId, this.client.endpoint(), contentType, timescale, videoFrameBodyConverted);
    }

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param videoFrameBody Body for add video frames API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> addVideoFrameUrlAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull List<VideoFrameBodyItem> videoFrameBody) {
        return addVideoFrameUrlWithRestResponseAsync(contentType, teamName, reviewId, videoFrameBody)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param videoFrameBody Body for add video frames API.
     * @param timescale Timescale of the video.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void addVideoFrameUrl(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull List<VideoFrameBodyItem> videoFrameBody, Integer timescale) {
        addVideoFrameUrlAsync(contentType, teamName, reviewId, videoFrameBody, timescale).block();
    }

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param videoFrameBody Body for add video frames API.
     * @param timescale Timescale of the video.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> addVideoFrameUrlWithRestResponseAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull List<VideoFrameBodyItem> videoFrameBody, Integer timescale) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        if (teamName == null) {
            throw new IllegalArgumentException("Parameter teamName is required and cannot be null.");
        }
        if (reviewId == null) {
            throw new IllegalArgumentException("Parameter reviewId is required and cannot be null.");
        }
        if (videoFrameBody == null) {
            throw new IllegalArgumentException("Parameter videoFrameBody is required and cannot be null.");
        }
        Validator.validate(videoFrameBody);
        List<VideoFrameBodyItem> videoFrameBodyConverted = videoFrameBody;
        return service.addVideoFrameUrl(teamName, reviewId, this.client.endpoint(), contentType, timescale, videoFrameBodyConverted);
    }

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param videoFrameBody Body for add video frames API.
     * @param timescale Timescale of the video.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> addVideoFrameUrlAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull List<VideoFrameBodyItem> videoFrameBody, Integer timescale) {
        return addVideoFrameUrlWithRestResponseAsync(contentType, teamName, reviewId, videoFrameBody, timescale)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param frameImageZip Zip file containing frame images.
     * @param frameMetadata Metadata of the frame.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void addVideoFrameStream(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull Flux<ByteBuffer> frameImageZip, @NonNull String frameMetadata) {
        addVideoFrameStreamAsync(contentType, teamName, reviewId, frameImageZip, frameMetadata).block();
    }

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param frameImageZip Zip file containing frame images.
     * @param frameMetadata Metadata of the frame.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> addVideoFrameStreamWithRestResponseAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull Flux<ByteBuffer> frameImageZip, @NonNull String frameMetadata) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        if (teamName == null) {
            throw new IllegalArgumentException("Parameter teamName is required and cannot be null.");
        }
        if (reviewId == null) {
            throw new IllegalArgumentException("Parameter reviewId is required and cannot be null.");
        }
        if (frameImageZip == null) {
            throw new IllegalArgumentException("Parameter frameImageZip is required and cannot be null.");
        }
        if (frameMetadata == null) {
            throw new IllegalArgumentException("Parameter frameMetadata is required and cannot be null.");
        }
        final Integer timescale = null;
        return service.addVideoFrameStream(teamName, reviewId, this.client.endpoint(), contentType, timescale, frameImageZip, frameMetadata);
    }

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param frameImageZip Zip file containing frame images.
     * @param frameMetadata Metadata of the frame.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> addVideoFrameStreamAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull Flux<ByteBuffer> frameImageZip, @NonNull String frameMetadata) {
        return addVideoFrameStreamWithRestResponseAsync(contentType, teamName, reviewId, frameImageZip, frameMetadata)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param frameImageZip Zip file containing frame images.
     * @param frameMetadata Metadata of the frame.
     * @param timescale Timescale of the video .
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void addVideoFrameStream(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull Flux<ByteBuffer> frameImageZip, @NonNull String frameMetadata, Integer timescale) {
        addVideoFrameStreamAsync(contentType, teamName, reviewId, frameImageZip, frameMetadata, timescale).block();
    }

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param frameImageZip Zip file containing frame images.
     * @param frameMetadata Metadata of the frame.
     * @param timescale Timescale of the video .
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> addVideoFrameStreamWithRestResponseAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull Flux<ByteBuffer> frameImageZip, @NonNull String frameMetadata, Integer timescale) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        if (teamName == null) {
            throw new IllegalArgumentException("Parameter teamName is required and cannot be null.");
        }
        if (reviewId == null) {
            throw new IllegalArgumentException("Parameter reviewId is required and cannot be null.");
        }
        if (frameImageZip == null) {
            throw new IllegalArgumentException("Parameter frameImageZip is required and cannot be null.");
        }
        if (frameMetadata == null) {
            throw new IllegalArgumentException("Parameter frameMetadata is required and cannot be null.");
        }
        return service.addVideoFrameStream(teamName, reviewId, this.client.endpoint(), contentType, timescale, frameImageZip, frameMetadata);
    }

    /**
     * Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.
     *
     * @param contentType The content type.
     * @param teamName Your team name.
     * @param reviewId Id of the review.
     * @param frameImageZip Zip file containing frame images.
     * @param frameMetadata Metadata of the frame.
     * @param timescale Timescale of the video .
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> addVideoFrameStreamAsync(@NonNull String contentType, @NonNull String teamName, @NonNull String reviewId, @NonNull Flux<ByteBuffer> frameImageZip, @NonNull String frameMetadata, Integer timescale) {
        return addVideoFrameStreamWithRestResponseAsync(contentType, teamName, reviewId, frameImageZip, frameMetadata, timescale)
            .flatMap((RestVoidResponse res) -> Mono.just(res.value()));
    }
}
