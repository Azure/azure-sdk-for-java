/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.contentmoderator.implementation;

import com.azure.common.annotations.BodyParam;
import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.HeaderParam;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.POST;
import com.azure.common.annotations.QueryParam;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.implementation.RestProxy;
import com.azure.common.implementation.Validator;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModel;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Evaluate;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FoundFaces;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchResponse;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCR;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * ImageModerations.
 */
public final class ImageModerationsImpl implements ImageModerations {
    /**
     * The proxy service used to perform REST calls.
     */
    private ImageModerationsService service;

    /**
     * The service client containing this operation class.
     */
    private ContentModeratorClientImpl client;

    /**
     * Initializes an instance of ImageModerationsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public ImageModerationsImpl(ContentModeratorClientImpl client) {
        this.service = RestProxy.create(ImageModerationsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for ImageModerations to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{Endpoint}")
    private interface ImageModerationsService {
        @POST("contentmoderator/moderate/v1.0/ProcessImage/FindFaces")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<FoundFaces>> findFaces(@HostParam("Endpoint") String endpoint, @QueryParam("CacheImage") Boolean cacheImage);

        @POST("contentmoderator/moderate/v1.0/ProcessImage/OCR")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<OCR>> oCRMethod(@HostParam("Endpoint") String endpoint, @QueryParam("language") String language, @QueryParam("CacheImage") Boolean cacheImage, @QueryParam("enhanced") Boolean enhanced);

        @POST("contentmoderator/moderate/v1.0/ProcessImage/Evaluate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<Evaluate>> evaluateMethod(@HostParam("Endpoint") String endpoint, @QueryParam("CacheImage") Boolean cacheImage);

        @POST("contentmoderator/moderate/v1.0/ProcessImage/Match")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<MatchResponse>> matchMethod(@HostParam("Endpoint") String endpoint, @QueryParam("listId") String listId, @QueryParam("CacheImage") Boolean cacheImage);

        @POST("contentmoderator/moderate/v1.0/ProcessImage/FindFaces")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<FoundFaces>> findFacesFileInput(@HostParam("Endpoint") String endpoint, @QueryParam("CacheImage") Boolean cacheImage, @HeaderParam("Content-Length") long contentLength, @BodyParam("image/gif") Flux<ByteBuffer> imageStream);

        @POST("contentmoderator/moderate/v1.0/ProcessImage/FindFaces")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<FoundFaces>> findFacesUrlInput(@HostParam("Endpoint") String endpoint, @QueryParam("CacheImage") Boolean cacheImage, @HeaderParam("Content-Type") String contentType, @BodyParam("application/json; charset=utf-8") BodyModel imageUrl);

        @POST("contentmoderator/moderate/v1.0/ProcessImage/OCR")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<OCR>> oCRUrlInput(@HostParam("Endpoint") String endpoint, @QueryParam("language") String language, @QueryParam("CacheImage") Boolean cacheImage, @QueryParam("enhanced") Boolean enhanced, @HeaderParam("Content-Type") String contentType, @BodyParam("application/json; charset=utf-8") BodyModel imageUrl);

        @POST("contentmoderator/moderate/v1.0/ProcessImage/OCR")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<OCR>> oCRFileInput(@HostParam("Endpoint") String endpoint, @QueryParam("language") String language, @QueryParam("CacheImage") Boolean cacheImage, @QueryParam("enhanced") Boolean enhanced, @HeaderParam("Content-Length") long contentLength, @BodyParam("image/gif") Flux<ByteBuffer> imageStream);

        @POST("contentmoderator/moderate/v1.0/ProcessImage/Evaluate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<Evaluate>> evaluateFileInput(@HostParam("Endpoint") String endpoint, @QueryParam("CacheImage") Boolean cacheImage, @HeaderParam("Content-Length") long contentLength, @BodyParam("image/gif") Flux<ByteBuffer> imageStream);

        @POST("contentmoderator/moderate/v1.0/ProcessImage/Evaluate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<Evaluate>> evaluateUrlInput(@HostParam("Endpoint") String endpoint, @QueryParam("CacheImage") Boolean cacheImage, @HeaderParam("Content-Type") String contentType, @BodyParam("application/json; charset=utf-8") BodyModel imageUrl);

        @POST("contentmoderator/moderate/v1.0/ProcessImage/Match")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<MatchResponse>> matchUrlInput(@HostParam("Endpoint") String endpoint, @QueryParam("listId") String listId, @QueryParam("CacheImage") Boolean cacheImage, @HeaderParam("Content-Type") String contentType, @BodyParam("application/json; charset=utf-8") BodyModel imageUrl);

        @POST("contentmoderator/moderate/v1.0/ProcessImage/Match")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<MatchResponse>> matchFileInput(@HostParam("Endpoint") String endpoint, @QueryParam("listId") String listId, @QueryParam("CacheImage") Boolean cacheImage, @HeaderParam("Content-Length") long contentLength, @BodyParam("image/gif") Flux<ByteBuffer> imageStream);
    }

    /**
     * Returns the list of faces found.
     *
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the FoundFaces object if successful.
     */
    public FoundFaces findFaces() {
        return findFacesAsync().block();
    }

    /**
     * Returns the list of faces found.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<FoundFaces>> findFacesWithRestResponseAsync() {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        final Boolean cacheImage = null;
        return service.findFaces(this.client.endpoint(), cacheImage);
    }

    /**
     * Returns the list of faces found.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<FoundFaces> findFacesAsync() {
        return findFacesWithRestResponseAsync()
            .flatMap((SimpleResponse<FoundFaces> res) -> Mono.just(res.value()));
    }

    /**
     * Returns the list of faces found.
     *
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the FoundFaces object if successful.
     */
    public FoundFaces findFaces(Boolean cacheImage) {
        return findFacesAsync(cacheImage).block();
    }

    /**
     * Returns the list of faces found.
     *
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<FoundFaces>> findFacesWithRestResponseAsync(Boolean cacheImage) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        return service.findFaces(this.client.endpoint(), cacheImage);
    }

    /**
     * Returns the list of faces found.
     *
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<FoundFaces> findFacesAsync(Boolean cacheImage) {
        return findFacesWithRestResponseAsync(cacheImage)
            .flatMap((SimpleResponse<FoundFaces> res) -> Mono.just(res.value()));
    }

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OCR object if successful.
     */
    public OCR oCRMethod(@NonNull String language) {
        return oCRMethodAsync(language).block();
    }

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OCR>> oCRMethodWithRestResponseAsync(@NonNull String language) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (language == null) {
            throw new IllegalArgumentException("Parameter language is required and cannot be null.");
        }
        final Boolean cacheImage = null;
        final Boolean enhanced = false;
        return service.oCRMethod(this.client.endpoint(), language, cacheImage, enhanced);
    }

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OCR> oCRMethodAsync(@NonNull String language) {
        return oCRMethodWithRestResponseAsync(language)
            .flatMap((SimpleResponse<OCR> res) -> Mono.just(res.value()));
    }

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OCR object if successful.
     */
    public OCR oCRMethod(@NonNull String language, Boolean cacheImage, Boolean enhanced) {
        return oCRMethodAsync(language, cacheImage, enhanced).block();
    }

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OCR>> oCRMethodWithRestResponseAsync(@NonNull String language, Boolean cacheImage, Boolean enhanced) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (language == null) {
            throw new IllegalArgumentException("Parameter language is required and cannot be null.");
        }
        return service.oCRMethod(this.client.endpoint(), language, cacheImage, enhanced);
    }

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OCR> oCRMethodAsync(@NonNull String language, Boolean cacheImage, Boolean enhanced) {
        return oCRMethodWithRestResponseAsync(language, cacheImage, enhanced)
            .flatMap((SimpleResponse<OCR> res) -> Mono.just(res.value()));
    }

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Evaluate object if successful.
     */
    public Evaluate evaluateMethod() {
        return evaluateMethodAsync().block();
    }

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Evaluate>> evaluateMethodWithRestResponseAsync() {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        final Boolean cacheImage = null;
        return service.evaluateMethod(this.client.endpoint(), cacheImage);
    }

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Evaluate> evaluateMethodAsync() {
        return evaluateMethodWithRestResponseAsync()
            .flatMap((SimpleResponse<Evaluate> res) -> Mono.just(res.value()));
    }

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Evaluate object if successful.
     */
    public Evaluate evaluateMethod(Boolean cacheImage) {
        return evaluateMethodAsync(cacheImage).block();
    }

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Evaluate>> evaluateMethodWithRestResponseAsync(Boolean cacheImage) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        return service.evaluateMethod(this.client.endpoint(), cacheImage);
    }

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Evaluate> evaluateMethodAsync(Boolean cacheImage) {
        return evaluateMethodWithRestResponseAsync(cacheImage)
            .flatMap((SimpleResponse<Evaluate> res) -> Mono.just(res.value()));
    }

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MatchResponse object if successful.
     */
    public MatchResponse matchMethod() {
        return matchMethodAsync().block();
    }

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<MatchResponse>> matchMethodWithRestResponseAsync() {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        final String listId = null;
        final Boolean cacheImage = null;
        return service.matchMethod(this.client.endpoint(), listId, cacheImage);
    }

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<MatchResponse> matchMethodAsync() {
        return matchMethodWithRestResponseAsync()
            .flatMap((SimpleResponse<MatchResponse> res) -> Mono.just(res.value()));
    }

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param listId The list Id.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MatchResponse object if successful.
     */
    public MatchResponse matchMethod(String listId, Boolean cacheImage) {
        return matchMethodAsync(listId, cacheImage).block();
    }

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param listId The list Id.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<MatchResponse>> matchMethodWithRestResponseAsync(String listId, Boolean cacheImage) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        return service.matchMethod(this.client.endpoint(), listId, cacheImage);
    }

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param listId The list Id.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<MatchResponse> matchMethodAsync(String listId, Boolean cacheImage) {
        return matchMethodWithRestResponseAsync(listId, cacheImage)
            .flatMap((SimpleResponse<MatchResponse> res) -> Mono.just(res.value()));
    }

    /**
     * Returns the list of faces found.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the FoundFaces object if successful.
     */
    public FoundFaces findFacesFileInput(@NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream) {
        return findFacesFileInputAsync(contentLength, imageStream).block();
    }

    /**
     * Returns the list of faces found.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<FoundFaces>> findFacesFileInputWithRestResponseAsync(@NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (imageStream == null) {
            throw new IllegalArgumentException("Parameter imageStream is required and cannot be null.");
        }
        final Boolean cacheImage = null;
        return service.findFacesFileInput(this.client.endpoint(), cacheImage, contentLength, imageStream);
    }

    /**
     * Returns the list of faces found.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<FoundFaces> findFacesFileInputAsync(@NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream) {
        return findFacesFileInputWithRestResponseAsync(contentLength, imageStream)
            .flatMap((SimpleResponse<FoundFaces> res) -> Mono.just(res.value()));
    }

    /**
     * Returns the list of faces found.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the FoundFaces object if successful.
     */
    public FoundFaces findFacesFileInput(@NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream, Boolean cacheImage) {
        return findFacesFileInputAsync(contentLength, imageStream, cacheImage).block();
    }

    /**
     * Returns the list of faces found.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<FoundFaces>> findFacesFileInputWithRestResponseAsync(@NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream, Boolean cacheImage) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (imageStream == null) {
            throw new IllegalArgumentException("Parameter imageStream is required and cannot be null.");
        }
        return service.findFacesFileInput(this.client.endpoint(), cacheImage, contentLength, imageStream);
    }

    /**
     * Returns the list of faces found.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<FoundFaces> findFacesFileInputAsync(@NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream, Boolean cacheImage) {
        return findFacesFileInputWithRestResponseAsync(contentLength, imageStream, cacheImage)
            .flatMap((SimpleResponse<FoundFaces> res) -> Mono.just(res.value()));
    }

    /**
     * Returns the list of faces found.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the FoundFaces object if successful.
     */
    public FoundFaces findFacesUrlInput(@NonNull String contentType, @NonNull BodyModel imageUrl) {
        return findFacesUrlInputAsync(contentType, imageUrl).block();
    }

    /**
     * Returns the list of faces found.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<FoundFaces>> findFacesUrlInputWithRestResponseAsync(@NonNull String contentType, @NonNull BodyModel imageUrl) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        if (imageUrl == null) {
            throw new IllegalArgumentException("Parameter imageUrl is required and cannot be null.");
        }
        Validator.validate(imageUrl);
        final Boolean cacheImage = null;
        return service.findFacesUrlInput(this.client.endpoint(), cacheImage, contentType, imageUrl);
    }

    /**
     * Returns the list of faces found.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<FoundFaces> findFacesUrlInputAsync(@NonNull String contentType, @NonNull BodyModel imageUrl) {
        return findFacesUrlInputWithRestResponseAsync(contentType, imageUrl)
            .flatMap((SimpleResponse<FoundFaces> res) -> Mono.just(res.value()));
    }

    /**
     * Returns the list of faces found.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the FoundFaces object if successful.
     */
    public FoundFaces findFacesUrlInput(@NonNull String contentType, @NonNull BodyModel imageUrl, Boolean cacheImage) {
        return findFacesUrlInputAsync(contentType, imageUrl, cacheImage).block();
    }

    /**
     * Returns the list of faces found.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<FoundFaces>> findFacesUrlInputWithRestResponseAsync(@NonNull String contentType, @NonNull BodyModel imageUrl, Boolean cacheImage) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        if (imageUrl == null) {
            throw new IllegalArgumentException("Parameter imageUrl is required and cannot be null.");
        }
        Validator.validate(imageUrl);
        return service.findFacesUrlInput(this.client.endpoint(), cacheImage, contentType, imageUrl);
    }

    /**
     * Returns the list of faces found.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<FoundFaces> findFacesUrlInputAsync(@NonNull String contentType, @NonNull BodyModel imageUrl, Boolean cacheImage) {
        return findFacesUrlInputWithRestResponseAsync(contentType, imageUrl, cacheImage)
            .flatMap((SimpleResponse<FoundFaces> res) -> Mono.just(res.value()));
    }

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OCR object if successful.
     */
    public OCR oCRUrlInput(@NonNull String language, @NonNull String contentType, @NonNull BodyModel imageUrl) {
        return oCRUrlInputAsync(language, contentType, imageUrl).block();
    }

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OCR>> oCRUrlInputWithRestResponseAsync(@NonNull String language, @NonNull String contentType, @NonNull BodyModel imageUrl) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (language == null) {
            throw new IllegalArgumentException("Parameter language is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        if (imageUrl == null) {
            throw new IllegalArgumentException("Parameter imageUrl is required and cannot be null.");
        }
        Validator.validate(imageUrl);
        final Boolean cacheImage = null;
        final Boolean enhanced = false;
        return service.oCRUrlInput(this.client.endpoint(), language, cacheImage, enhanced, contentType, imageUrl);
    }

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OCR> oCRUrlInputAsync(@NonNull String language, @NonNull String contentType, @NonNull BodyModel imageUrl) {
        return oCRUrlInputWithRestResponseAsync(language, contentType, imageUrl)
            .flatMap((SimpleResponse<OCR> res) -> Mono.just(res.value()));
    }

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OCR object if successful.
     */
    public OCR oCRUrlInput(@NonNull String language, @NonNull String contentType, @NonNull BodyModel imageUrl, Boolean cacheImage, Boolean enhanced) {
        return oCRUrlInputAsync(language, contentType, imageUrl, cacheImage, enhanced).block();
    }

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OCR>> oCRUrlInputWithRestResponseAsync(@NonNull String language, @NonNull String contentType, @NonNull BodyModel imageUrl, Boolean cacheImage, Boolean enhanced) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (language == null) {
            throw new IllegalArgumentException("Parameter language is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        if (imageUrl == null) {
            throw new IllegalArgumentException("Parameter imageUrl is required and cannot be null.");
        }
        Validator.validate(imageUrl);
        return service.oCRUrlInput(this.client.endpoint(), language, cacheImage, enhanced, contentType, imageUrl);
    }

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OCR> oCRUrlInputAsync(@NonNull String language, @NonNull String contentType, @NonNull BodyModel imageUrl, Boolean cacheImage, Boolean enhanced) {
        return oCRUrlInputWithRestResponseAsync(language, contentType, imageUrl, cacheImage, enhanced)
            .flatMap((SimpleResponse<OCR> res) -> Mono.just(res.value()));
    }

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OCR object if successful.
     */
    public OCR oCRFileInput(@NonNull String language, @NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream) {
        return oCRFileInputAsync(language, contentLength, imageStream).block();
    }

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OCR>> oCRFileInputWithRestResponseAsync(@NonNull String language, @NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (language == null) {
            throw new IllegalArgumentException("Parameter language is required and cannot be null.");
        }
        if (imageStream == null) {
            throw new IllegalArgumentException("Parameter imageStream is required and cannot be null.");
        }
        final Boolean cacheImage = null;
        final Boolean enhanced = false;
        return service.oCRFileInput(this.client.endpoint(), language, cacheImage, enhanced, contentLength, imageStream);
    }

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OCR> oCRFileInputAsync(@NonNull String language, @NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream) {
        return oCRFileInputWithRestResponseAsync(language, contentLength, imageStream)
            .flatMap((SimpleResponse<OCR> res) -> Mono.just(res.value()));
    }

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OCR object if successful.
     */
    public OCR oCRFileInput(@NonNull String language, @NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream, Boolean cacheImage, Boolean enhanced) {
        return oCRFileInputAsync(language, contentLength, imageStream, cacheImage, enhanced).block();
    }

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<OCR>> oCRFileInputWithRestResponseAsync(@NonNull String language, @NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream, Boolean cacheImage, Boolean enhanced) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (language == null) {
            throw new IllegalArgumentException("Parameter language is required and cannot be null.");
        }
        if (imageStream == null) {
            throw new IllegalArgumentException("Parameter imageStream is required and cannot be null.");
        }
        return service.oCRFileInput(this.client.endpoint(), language, cacheImage, enhanced, contentLength, imageStream);
    }

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<OCR> oCRFileInputAsync(@NonNull String language, @NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream, Boolean cacheImage, Boolean enhanced) {
        return oCRFileInputWithRestResponseAsync(language, contentLength, imageStream, cacheImage, enhanced)
            .flatMap((SimpleResponse<OCR> res) -> Mono.just(res.value()));
    }

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Evaluate object if successful.
     */
    public Evaluate evaluateFileInput(@NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream) {
        return evaluateFileInputAsync(contentLength, imageStream).block();
    }

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Evaluate>> evaluateFileInputWithRestResponseAsync(@NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (imageStream == null) {
            throw new IllegalArgumentException("Parameter imageStream is required and cannot be null.");
        }
        final Boolean cacheImage = null;
        return service.evaluateFileInput(this.client.endpoint(), cacheImage, contentLength, imageStream);
    }

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Evaluate> evaluateFileInputAsync(@NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream) {
        return evaluateFileInputWithRestResponseAsync(contentLength, imageStream)
            .flatMap((SimpleResponse<Evaluate> res) -> Mono.just(res.value()));
    }

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Evaluate object if successful.
     */
    public Evaluate evaluateFileInput(@NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream, Boolean cacheImage) {
        return evaluateFileInputAsync(contentLength, imageStream, cacheImage).block();
    }

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Evaluate>> evaluateFileInputWithRestResponseAsync(@NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream, Boolean cacheImage) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (imageStream == null) {
            throw new IllegalArgumentException("Parameter imageStream is required and cannot be null.");
        }
        return service.evaluateFileInput(this.client.endpoint(), cacheImage, contentLength, imageStream);
    }

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Evaluate> evaluateFileInputAsync(@NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream, Boolean cacheImage) {
        return evaluateFileInputWithRestResponseAsync(contentLength, imageStream, cacheImage)
            .flatMap((SimpleResponse<Evaluate> res) -> Mono.just(res.value()));
    }

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Evaluate object if successful.
     */
    public Evaluate evaluateUrlInput(@NonNull String contentType, @NonNull BodyModel imageUrl) {
        return evaluateUrlInputAsync(contentType, imageUrl).block();
    }

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Evaluate>> evaluateUrlInputWithRestResponseAsync(@NonNull String contentType, @NonNull BodyModel imageUrl) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        if (imageUrl == null) {
            throw new IllegalArgumentException("Parameter imageUrl is required and cannot be null.");
        }
        Validator.validate(imageUrl);
        final Boolean cacheImage = null;
        return service.evaluateUrlInput(this.client.endpoint(), cacheImage, contentType, imageUrl);
    }

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Evaluate> evaluateUrlInputAsync(@NonNull String contentType, @NonNull BodyModel imageUrl) {
        return evaluateUrlInputWithRestResponseAsync(contentType, imageUrl)
            .flatMap((SimpleResponse<Evaluate> res) -> Mono.just(res.value()));
    }

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Evaluate object if successful.
     */
    public Evaluate evaluateUrlInput(@NonNull String contentType, @NonNull BodyModel imageUrl, Boolean cacheImage) {
        return evaluateUrlInputAsync(contentType, imageUrl, cacheImage).block();
    }

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<Evaluate>> evaluateUrlInputWithRestResponseAsync(@NonNull String contentType, @NonNull BodyModel imageUrl, Boolean cacheImage) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        if (imageUrl == null) {
            throw new IllegalArgumentException("Parameter imageUrl is required and cannot be null.");
        }
        Validator.validate(imageUrl);
        return service.evaluateUrlInput(this.client.endpoint(), cacheImage, contentType, imageUrl);
    }

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Evaluate> evaluateUrlInputAsync(@NonNull String contentType, @NonNull BodyModel imageUrl, Boolean cacheImage) {
        return evaluateUrlInputWithRestResponseAsync(contentType, imageUrl, cacheImage)
            .flatMap((SimpleResponse<Evaluate> res) -> Mono.just(res.value()));
    }

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MatchResponse object if successful.
     */
    public MatchResponse matchUrlInput(@NonNull String contentType, @NonNull BodyModel imageUrl) {
        return matchUrlInputAsync(contentType, imageUrl).block();
    }

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<MatchResponse>> matchUrlInputWithRestResponseAsync(@NonNull String contentType, @NonNull BodyModel imageUrl) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        if (imageUrl == null) {
            throw new IllegalArgumentException("Parameter imageUrl is required and cannot be null.");
        }
        Validator.validate(imageUrl);
        final String listId = null;
        final Boolean cacheImage = null;
        return service.matchUrlInput(this.client.endpoint(), listId, cacheImage, contentType, imageUrl);
    }

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<MatchResponse> matchUrlInputAsync(@NonNull String contentType, @NonNull BodyModel imageUrl) {
        return matchUrlInputWithRestResponseAsync(contentType, imageUrl)
            .flatMap((SimpleResponse<MatchResponse> res) -> Mono.just(res.value()));
    }

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param listId The list Id.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MatchResponse object if successful.
     */
    public MatchResponse matchUrlInput(@NonNull String contentType, @NonNull BodyModel imageUrl, String listId, Boolean cacheImage) {
        return matchUrlInputAsync(contentType, imageUrl, listId, cacheImage).block();
    }

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param listId The list Id.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<MatchResponse>> matchUrlInputWithRestResponseAsync(@NonNull String contentType, @NonNull BodyModel imageUrl, String listId, Boolean cacheImage) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        if (imageUrl == null) {
            throw new IllegalArgumentException("Parameter imageUrl is required and cannot be null.");
        }
        Validator.validate(imageUrl);
        return service.matchUrlInput(this.client.endpoint(), listId, cacheImage, contentType, imageUrl);
    }

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param listId The list Id.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<MatchResponse> matchUrlInputAsync(@NonNull String contentType, @NonNull BodyModel imageUrl, String listId, Boolean cacheImage) {
        return matchUrlInputWithRestResponseAsync(contentType, imageUrl, listId, cacheImage)
            .flatMap((SimpleResponse<MatchResponse> res) -> Mono.just(res.value()));
    }

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MatchResponse object if successful.
     */
    public MatchResponse matchFileInput(@NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream) {
        return matchFileInputAsync(contentLength, imageStream).block();
    }

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<MatchResponse>> matchFileInputWithRestResponseAsync(@NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (imageStream == null) {
            throw new IllegalArgumentException("Parameter imageStream is required and cannot be null.");
        }
        final String listId = null;
        final Boolean cacheImage = null;
        return service.matchFileInput(this.client.endpoint(), listId, cacheImage, contentLength, imageStream);
    }

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<MatchResponse> matchFileInputAsync(@NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream) {
        return matchFileInputWithRestResponseAsync(contentLength, imageStream)
            .flatMap((SimpleResponse<MatchResponse> res) -> Mono.just(res.value()));
    }

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param listId The list Id.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MatchResponse object if successful.
     */
    public MatchResponse matchFileInput(@NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream, String listId, Boolean cacheImage) {
        return matchFileInputAsync(contentLength, imageStream, listId, cacheImage).block();
    }

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param listId The list Id.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<MatchResponse>> matchFileInputWithRestResponseAsync(@NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream, String listId, Boolean cacheImage) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (imageStream == null) {
            throw new IllegalArgumentException("Parameter imageStream is required and cannot be null.");
        }
        return service.matchFileInput(this.client.endpoint(), listId, cacheImage, contentLength, imageStream);
    }

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param listId The list Id.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<MatchResponse> matchFileInputAsync(@NonNull long contentLength, @NonNull Flux<ByteBuffer> imageStream, String listId, Boolean cacheImage) {
        return matchFileInputWithRestResponseAsync(contentLength, imageStream, listId, cacheImage)
            .flatMap((SimpleResponse<MatchResponse> res) -> Mono.just(res.value()));
    }
}
