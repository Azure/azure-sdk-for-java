/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.contentmoderator.implementation;

import com.azure.common.annotations.BodyParam;
import com.azure.common.annotations.DELETE;
import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.GET;
import com.azure.common.annotations.HeaderParam;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.PathParam;
import com.azure.common.annotations.POST;
import com.azure.common.annotations.PUT;
import com.azure.common.annotations.QueryParam;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.http.rest.SimpleResponse;
import com.azure.common.implementation.RestProxy;
import com.azure.common.implementation.Validator;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Body;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.RefreshIndex;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.TermList;
import java.util.ArrayList;
import java.util.List;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * ListManagementTermLists.
 */
public final class ListManagementTermListsImpl implements ListManagementTermLists {
    /**
     * The proxy service used to perform REST calls.
     */
    private ListManagementTermListsService service;

    /**
     * The service client containing this operation class.
     */
    private ContentModeratorClientImpl client;

    /**
     * Initializes an instance of ListManagementTermListsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public ListManagementTermListsImpl(ContentModeratorClientImpl client) {
        this.service = RestProxy.create(ListManagementTermListsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for ListManagementTermLists to
     * be used by the proxy service to perform REST calls.
     */
    @Host("{Endpoint}")
    private interface ListManagementTermListsService {
        @GET("contentmoderator/lists/v1.0/termlists/{listId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<TermList>> getDetails(@PathParam("listId") String listId, @HostParam("Endpoint") String endpoint);

        @DELETE("contentmoderator/lists/v1.0/termlists/{listId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<String>> delete(@PathParam("listId") String listId, @HostParam("Endpoint") String endpoint);

        @PUT("contentmoderator/lists/v1.0/termlists/{listId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<TermList>> update(@PathParam("listId") String listId, @HostParam("Endpoint") String endpoint, @HeaderParam("Content-Type") String contentType, @BodyParam("application/json; charset=utf-8") Body body);

        @POST("contentmoderator/lists/v1.0/termlists")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<TermList>> create(@HostParam("Endpoint") String endpoint, @HeaderParam("Content-Type") String contentType, @BodyParam("application/json; charset=utf-8") Body body);

        @GET("contentmoderator/lists/v1.0/termlists")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<List<TermList>>> getAllTermLists(@HostParam("Endpoint") String endpoint);

        @POST("contentmoderator/lists/v1.0/termlists/{listId}/RefreshIndex")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<RefreshIndex>> refreshIndexMethod(@PathParam("listId") String listId, @HostParam("Endpoint") String endpoint, @QueryParam("language") String language);
    }

    /**
     * Returns list Id details of the term list with list Id equal to list Id passed.
     *
     * @param listId List Id of the image list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the TermList object if successful.
     */
    public TermList getDetails(@NonNull String listId) {
        return getDetailsAsync(listId).block();
    }

    /**
     * Returns list Id details of the term list with list Id equal to list Id passed.
     *
     * @param listId List Id of the image list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<TermList>> getDetailsWithRestResponseAsync(@NonNull String listId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (listId == null) {
            throw new IllegalArgumentException("Parameter listId is required and cannot be null.");
        }
        return service.getDetails(listId, this.client.endpoint());
    }

    /**
     * Returns list Id details of the term list with list Id equal to list Id passed.
     *
     * @param listId List Id of the image list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<TermList> getDetailsAsync(@NonNull String listId) {
        return getDetailsWithRestResponseAsync(listId)
            .flatMap((SimpleResponse<TermList> res) -> Mono.just(res.value()));
    }

    /**
     * Deletes term list with the list Id equal to list Id passed.
     *
     * @param listId List Id of the image list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the String object if successful.
     */
    public String delete(@NonNull String listId) {
        return deleteAsync(listId).block();
    }

    /**
     * Deletes term list with the list Id equal to list Id passed.
     *
     * @param listId List Id of the image list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<String>> deleteWithRestResponseAsync(@NonNull String listId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (listId == null) {
            throw new IllegalArgumentException("Parameter listId is required and cannot be null.");
        }
        return service.delete(listId, this.client.endpoint());
    }

    /**
     * Deletes term list with the list Id equal to list Id passed.
     *
     * @param listId List Id of the image list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<String> deleteAsync(@NonNull String listId) {
        return deleteWithRestResponseAsync(listId)
            .flatMap((SimpleResponse<String> res) -> Mono.just(res.value()));
    }

    /**
     * Updates an Term List.
     *
     * @param listId List Id of the image list.
     * @param contentType The content type.
     * @param body Schema of the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the TermList object if successful.
     */
    public TermList update(@NonNull String listId, @NonNull String contentType, @NonNull Body body) {
        return updateAsync(listId, contentType, body).block();
    }

    /**
     * Updates an Term List.
     *
     * @param listId List Id of the image list.
     * @param contentType The content type.
     * @param body Schema of the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<TermList>> updateWithRestResponseAsync(@NonNull String listId, @NonNull String contentType, @NonNull Body body) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (listId == null) {
            throw new IllegalArgumentException("Parameter listId is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        Validator.validate(body);
        return service.update(listId, this.client.endpoint(), contentType, body);
    }

    /**
     * Updates an Term List.
     *
     * @param listId List Id of the image list.
     * @param contentType The content type.
     * @param body Schema of the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<TermList> updateAsync(@NonNull String listId, @NonNull String contentType, @NonNull Body body) {
        return updateWithRestResponseAsync(listId, contentType, body)
            .flatMap((SimpleResponse<TermList> res) -> Mono.just(res.value()));
    }

    /**
     * Creates a Term List.
     *
     * @param contentType The content type.
     * @param body Schema of the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the TermList object if successful.
     */
    public TermList create(@NonNull String contentType, @NonNull Body body) {
        return createAsync(contentType, body).block();
    }

    /**
     * Creates a Term List.
     *
     * @param contentType The content type.
     * @param body Schema of the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<TermList>> createWithRestResponseAsync(@NonNull String contentType, @NonNull Body body) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        Validator.validate(body);
        return service.create(this.client.endpoint(), contentType, body);
    }

    /**
     * Creates a Term List.
     *
     * @param contentType The content type.
     * @param body Schema of the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<TermList> createAsync(@NonNull String contentType, @NonNull Body body) {
        return createWithRestResponseAsync(contentType, body)
            .flatMap((SimpleResponse<TermList> res) -> Mono.just(res.value()));
    }

    /**
     * gets all the Term Lists.
     *
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;TermList&gt; object if successful.
     */
    public List<TermList> getAllTermLists() {
        return getAllTermListsAsync().block();
    }

    /**
     * gets all the Term Lists.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<List<TermList>>> getAllTermListsWithRestResponseAsync() {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        return service.getAllTermLists(this.client.endpoint());
    }

    /**
     * gets all the Term Lists.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<TermList>> getAllTermListsAsync() {
        return getAllTermListsWithRestResponseAsync()
            .flatMap((SimpleResponse<List<TermList>> res) -> Mono.just(res.value()));
    }

    /**
     * Refreshes the index of the list with list Id equal to list ID passed.
     *
     * @param listId List Id of the image list.
     * @param language Language of the terms.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the RefreshIndex object if successful.
     */
    public RefreshIndex refreshIndexMethod(@NonNull String listId, @NonNull String language) {
        return refreshIndexMethodAsync(listId, language).block();
    }

    /**
     * Refreshes the index of the list with list Id equal to list ID passed.
     *
     * @param listId List Id of the image list.
     * @param language Language of the terms.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleResponse<RefreshIndex>> refreshIndexMethodWithRestResponseAsync(@NonNull String listId, @NonNull String language) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (listId == null) {
            throw new IllegalArgumentException("Parameter listId is required and cannot be null.");
        }
        if (language == null) {
            throw new IllegalArgumentException("Parameter language is required and cannot be null.");
        }
        return service.refreshIndexMethod(listId, this.client.endpoint(), language);
    }

    /**
     * Refreshes the index of the list with list Id equal to list ID passed.
     *
     * @param listId List Id of the image list.
     * @param language Language of the terms.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RefreshIndex> refreshIndexMethodAsync(@NonNull String listId, @NonNull String language) {
        return refreshIndexMethodWithRestResponseAsync(listId, language)
            .flatMap((SimpleResponse<RefreshIndex> res) -> Mono.just(res.value()));
    }
}
