/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.contentmoderator;

import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.DetectedLanguage;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Screen;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in TextModerations.
 */
public interface TextModerations {
    /**
     * Detect profanity and match against custom and shared blacklists.
     * Detects profanity in more than 100 languages and match against custom and shared blacklists.
     *
     * @param textContentType The content type. Possible values include: 'text/plain', 'text/html', 'text/xml', 'text/markdown'
     * @param textContent Content to screen.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Screen object if successful.
     */
    Screen screenText(String textContentType, byte[] textContent);

    /**
     * Detect profanity and match against custom and shared blacklists.
     * Detects profanity in more than 100 languages and match against custom and shared blacklists.
     *
     * @param textContentType The content type. Possible values include: 'text/plain', 'text/html', 'text/xml', 'text/markdown'
     * @param textContent Content to screen.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Screen> screenTextAsync(String textContentType, byte[] textContent, final ServiceCallback<Screen> serviceCallback);

    /**
     * Detect profanity and match against custom and shared blacklists.
     * Detects profanity in more than 100 languages and match against custom and shared blacklists.
     *
     * @param textContentType The content type. Possible values include: 'text/plain', 'text/html', 'text/xml', 'text/markdown'
     * @param textContent Content to screen.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Screen object
     */
    Observable<Screen> screenTextAsync(String textContentType, byte[] textContent);

    /**
     * Detect profanity and match against custom and shared blacklists.
     * Detects profanity in more than 100 languages and match against custom and shared blacklists.
     *
     * @param textContentType The content type. Possible values include: 'text/plain', 'text/html', 'text/xml', 'text/markdown'
     * @param textContent Content to screen.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Screen object
     */
    Observable<ServiceResponse<Screen>> screenTextWithServiceResponseAsync(String textContentType, byte[] textContent);
    /**
     * Detect profanity and match against custom and shared blacklists.
     * Detects profanity in more than 100 languages and match against custom and shared blacklists.
     *
     * @param textContentType The content type. Possible values include: 'text/plain', 'text/html', 'text/xml', 'text/markdown'
     * @param textContent Content to screen.
     * @param language Language of the text.
     * @param autocorrect Autocorrect text.
     * @param pII Detect personal identifiable information.
     * @param listId The list Id.
     * @param classify Classify input.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Screen object if successful.
     */
    Screen screenText(String textContentType, byte[] textContent, String language, Boolean autocorrect, Boolean pII, String listId, Boolean classify);

    /**
     * Detect profanity and match against custom and shared blacklists.
     * Detects profanity in more than 100 languages and match against custom and shared blacklists.
     *
     * @param textContentType The content type. Possible values include: 'text/plain', 'text/html', 'text/xml', 'text/markdown'
     * @param textContent Content to screen.
     * @param language Language of the text.
     * @param autocorrect Autocorrect text.
     * @param pII Detect personal identifiable information.
     * @param listId The list Id.
     * @param classify Classify input.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Screen> screenTextAsync(String textContentType, byte[] textContent, String language, Boolean autocorrect, Boolean pII, String listId, Boolean classify, final ServiceCallback<Screen> serviceCallback);

    /**
     * Detect profanity and match against custom and shared blacklists.
     * Detects profanity in more than 100 languages and match against custom and shared blacklists.
     *
     * @param textContentType The content type. Possible values include: 'text/plain', 'text/html', 'text/xml', 'text/markdown'
     * @param textContent Content to screen.
     * @param language Language of the text.
     * @param autocorrect Autocorrect text.
     * @param pII Detect personal identifiable information.
     * @param listId The list Id.
     * @param classify Classify input.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Screen object
     */
    Observable<Screen> screenTextAsync(String textContentType, byte[] textContent, String language, Boolean autocorrect, Boolean pII, String listId, Boolean classify);

    /**
     * Detect profanity and match against custom and shared blacklists.
     * Detects profanity in more than 100 languages and match against custom and shared blacklists.
     *
     * @param textContentType The content type. Possible values include: 'text/plain', 'text/html', 'text/xml', 'text/markdown'
     * @param textContent Content to screen.
     * @param language Language of the text.
     * @param autocorrect Autocorrect text.
     * @param pII Detect personal identifiable information.
     * @param listId The list Id.
     * @param classify Classify input.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Screen object
     */
    Observable<ServiceResponse<Screen>> screenTextWithServiceResponseAsync(String textContentType, byte[] textContent, String language, Boolean autocorrect, Boolean pII, String listId, Boolean classify);

    /**
     * This operation will detect the language of given input content. Returns the &lt;a href="http://www-01.sil.org/iso639-3/codes.asp"&gt;ISO 639-3 code&lt;/a&gt; for the predominant language comprising the submitted text. Over 110 languages supported.
     *
     * @param textContentType The content type. Possible values include: 'text/plain', 'text/html', 'text/xml', 'text/markdown'
     * @param textContent Content to screen.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DetectedLanguage object if successful.
     */
    DetectedLanguage detectLanguage(String textContentType, byte[] textContent);

    /**
     * This operation will detect the language of given input content. Returns the &lt;a href="http://www-01.sil.org/iso639-3/codes.asp"&gt;ISO 639-3 code&lt;/a&gt; for the predominant language comprising the submitted text. Over 110 languages supported.
     *
     * @param textContentType The content type. Possible values include: 'text/plain', 'text/html', 'text/xml', 'text/markdown'
     * @param textContent Content to screen.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<DetectedLanguage> detectLanguageAsync(String textContentType, byte[] textContent, final ServiceCallback<DetectedLanguage> serviceCallback);

    /**
     * This operation will detect the language of given input content. Returns the &lt;a href="http://www-01.sil.org/iso639-3/codes.asp"&gt;ISO 639-3 code&lt;/a&gt; for the predominant language comprising the submitted text. Over 110 languages supported.
     *
     * @param textContentType The content type. Possible values include: 'text/plain', 'text/html', 'text/xml', 'text/markdown'
     * @param textContent Content to screen.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DetectedLanguage object
     */
    Observable<DetectedLanguage> detectLanguageAsync(String textContentType, byte[] textContent);

    /**
     * This operation will detect the language of given input content. Returns the &lt;a href="http://www-01.sil.org/iso639-3/codes.asp"&gt;ISO 639-3 code&lt;/a&gt; for the predominant language comprising the submitted text. Over 110 languages supported.
     *
     * @param textContentType The content type. Possible values include: 'text/plain', 'text/html', 'text/xml', 'text/markdown'
     * @param textContent Content to screen.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DetectedLanguage object
     */
    Observable<ServiceResponse<DetectedLanguage>> detectLanguageWithServiceResponseAsync(String textContentType, byte[] textContent);

}
