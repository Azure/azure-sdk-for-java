/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.contentmoderator;

import com.azure.common.http.rest.SimpleResponse;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModel;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Evaluate;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FoundFaces;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchResponse;
import com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCR;
import io.netty.buffer.ByteBuf;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * ImageModerations.
 */
public interface ImageModerations {
    /**
     * Returns the list of faces found.
     *
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the FoundFaces object if successful.
     */
    FoundFaces findFaces();

    /**
     * Returns the list of faces found.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<FoundFaces>> findFacesWithRestResponseAsync();

    /**
     * Returns the list of faces found.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<FoundFaces> findFacesAsync();

    /**
     * Returns the list of faces found.
     *
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the FoundFaces object if successful.
     */
    FoundFaces findFaces(Boolean cacheImage);

    /**
     * Returns the list of faces found.
     *
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<FoundFaces>> findFacesWithRestResponseAsync(Boolean cacheImage);

    /**
     * Returns the list of faces found.
     *
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<FoundFaces> findFacesAsync(Boolean cacheImage);

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OCR object if successful.
     */
    OCR oCRMethod(@NonNull String language);

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<OCR>> oCRMethodWithRestResponseAsync(@NonNull String language);

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<OCR> oCRMethodAsync(@NonNull String language);

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OCR object if successful.
     */
    OCR oCRMethod(@NonNull String language, Boolean cacheImage, Boolean enhanced);

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<OCR>> oCRMethodWithRestResponseAsync(@NonNull String language, Boolean cacheImage, Boolean enhanced);

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<OCR> oCRMethodAsync(@NonNull String language, Boolean cacheImage, Boolean enhanced);

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Evaluate object if successful.
     */
    Evaluate evaluateMethod();

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Evaluate>> evaluateMethodWithRestResponseAsync();

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Evaluate> evaluateMethodAsync();

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Evaluate object if successful.
     */
    Evaluate evaluateMethod(Boolean cacheImage);

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Evaluate>> evaluateMethodWithRestResponseAsync(Boolean cacheImage);

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Evaluate> evaluateMethodAsync(Boolean cacheImage);

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MatchResponse object if successful.
     */
    MatchResponse matchMethod();

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<MatchResponse>> matchMethodWithRestResponseAsync();

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<MatchResponse> matchMethodAsync();

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param listId The list Id.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MatchResponse object if successful.
     */
    MatchResponse matchMethod(String listId, Boolean cacheImage);

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param listId The list Id.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<MatchResponse>> matchMethodWithRestResponseAsync(String listId, Boolean cacheImage);

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param listId The list Id.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<MatchResponse> matchMethodAsync(String listId, Boolean cacheImage);

    /**
     * Returns the list of faces found.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the FoundFaces object if successful.
     */
    FoundFaces findFacesFileInput(@NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream);

    /**
     * Returns the list of faces found.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<FoundFaces>> findFacesFileInputWithRestResponseAsync(@NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream);

    /**
     * Returns the list of faces found.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<FoundFaces> findFacesFileInputAsync(@NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream);

    /**
     * Returns the list of faces found.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the FoundFaces object if successful.
     */
    FoundFaces findFacesFileInput(@NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream, Boolean cacheImage);

    /**
     * Returns the list of faces found.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<FoundFaces>> findFacesFileInputWithRestResponseAsync(@NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream, Boolean cacheImage);

    /**
     * Returns the list of faces found.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<FoundFaces> findFacesFileInputAsync(@NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream, Boolean cacheImage);

    /**
     * Returns the list of faces found.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the FoundFaces object if successful.
     */
    FoundFaces findFacesUrlInput(@NonNull String contentType, @NonNull BodyModel imageUrl);

    /**
     * Returns the list of faces found.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<FoundFaces>> findFacesUrlInputWithRestResponseAsync(@NonNull String contentType, @NonNull BodyModel imageUrl);

    /**
     * Returns the list of faces found.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<FoundFaces> findFacesUrlInputAsync(@NonNull String contentType, @NonNull BodyModel imageUrl);

    /**
     * Returns the list of faces found.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the FoundFaces object if successful.
     */
    FoundFaces findFacesUrlInput(@NonNull String contentType, @NonNull BodyModel imageUrl, Boolean cacheImage);

    /**
     * Returns the list of faces found.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<FoundFaces>> findFacesUrlInputWithRestResponseAsync(@NonNull String contentType, @NonNull BodyModel imageUrl, Boolean cacheImage);

    /**
     * Returns the list of faces found.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<FoundFaces> findFacesUrlInputAsync(@NonNull String contentType, @NonNull BodyModel imageUrl, Boolean cacheImage);

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OCR object if successful.
     */
    OCR oCRUrlInput(@NonNull String language, @NonNull String contentType, @NonNull BodyModel imageUrl);

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<OCR>> oCRUrlInputWithRestResponseAsync(@NonNull String language, @NonNull String contentType, @NonNull BodyModel imageUrl);

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<OCR> oCRUrlInputAsync(@NonNull String language, @NonNull String contentType, @NonNull BodyModel imageUrl);

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OCR object if successful.
     */
    OCR oCRUrlInput(@NonNull String language, @NonNull String contentType, @NonNull BodyModel imageUrl, Boolean cacheImage, Boolean enhanced);

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<OCR>> oCRUrlInputWithRestResponseAsync(@NonNull String language, @NonNull String contentType, @NonNull BodyModel imageUrl, Boolean cacheImage, Boolean enhanced);

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<OCR> oCRUrlInputAsync(@NonNull String language, @NonNull String contentType, @NonNull BodyModel imageUrl, Boolean cacheImage, Boolean enhanced);

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OCR object if successful.
     */
    OCR oCRFileInput(@NonNull String language, @NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream);

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<OCR>> oCRFileInputWithRestResponseAsync(@NonNull String language, @NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream);

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<OCR> oCRFileInputAsync(@NonNull String language, @NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream);

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OCR object if successful.
     */
    OCR oCRFileInput(@NonNull String language, @NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream, Boolean cacheImage, Boolean enhanced);

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<OCR>> oCRFileInputWithRestResponseAsync(@NonNull String language, @NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream, Boolean cacheImage, Boolean enhanced);

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     *
     * @param language Language of the terms.
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<OCR> oCRFileInputAsync(@NonNull String language, @NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream, Boolean cacheImage, Boolean enhanced);

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Evaluate object if successful.
     */
    Evaluate evaluateFileInput(@NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream);

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Evaluate>> evaluateFileInputWithRestResponseAsync(@NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream);

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Evaluate> evaluateFileInputAsync(@NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream);

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Evaluate object if successful.
     */
    Evaluate evaluateFileInput(@NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream, Boolean cacheImage);

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Evaluate>> evaluateFileInputWithRestResponseAsync(@NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream, Boolean cacheImage);

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Evaluate> evaluateFileInputAsync(@NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream, Boolean cacheImage);

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Evaluate object if successful.
     */
    Evaluate evaluateUrlInput(@NonNull String contentType, @NonNull BodyModel imageUrl);

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Evaluate>> evaluateUrlInputWithRestResponseAsync(@NonNull String contentType, @NonNull BodyModel imageUrl);

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Evaluate> evaluateUrlInputAsync(@NonNull String contentType, @NonNull BodyModel imageUrl);

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Evaluate object if successful.
     */
    Evaluate evaluateUrlInput(@NonNull String contentType, @NonNull BodyModel imageUrl, Boolean cacheImage);

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<Evaluate>> evaluateUrlInputWithRestResponseAsync(@NonNull String contentType, @NonNull BodyModel imageUrl, Boolean cacheImage);

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Evaluate> evaluateUrlInputAsync(@NonNull String contentType, @NonNull BodyModel imageUrl, Boolean cacheImage);

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MatchResponse object if successful.
     */
    MatchResponse matchUrlInput(@NonNull String contentType, @NonNull BodyModel imageUrl);

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<MatchResponse>> matchUrlInputWithRestResponseAsync(@NonNull String contentType, @NonNull BodyModel imageUrl);

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<MatchResponse> matchUrlInputAsync(@NonNull String contentType, @NonNull BodyModel imageUrl);

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param listId The list Id.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MatchResponse object if successful.
     */
    MatchResponse matchUrlInput(@NonNull String contentType, @NonNull BodyModel imageUrl, String listId, Boolean cacheImage);

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param listId The list Id.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<MatchResponse>> matchUrlInputWithRestResponseAsync(@NonNull String contentType, @NonNull BodyModel imageUrl, String listId, Boolean cacheImage);

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param listId The list Id.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<MatchResponse> matchUrlInputAsync(@NonNull String contentType, @NonNull BodyModel imageUrl, String listId, Boolean cacheImage);

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MatchResponse object if successful.
     */
    MatchResponse matchFileInput(@NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream);

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<MatchResponse>> matchFileInputWithRestResponseAsync(@NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream);

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<MatchResponse> matchFileInputAsync(@NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream);

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param listId The list Id.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MatchResponse object if successful.
     */
    MatchResponse matchFileInput(@NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream, String listId, Boolean cacheImage);

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param listId The list Id.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<MatchResponse>> matchFileInputWithRestResponseAsync(@NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream, String listId, Boolean cacheImage);

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API.
     *
     * Returns ID and tags of matching image.&lt;br/&gt;
     * &lt;br/&gt;
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     *
     * @param contentLength The content length.
     * @param imageStream The image file.
     * @param listId The list Id.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<MatchResponse> matchFileInputAsync(@NonNull long contentLength, @NonNull Flux<ByteBuf> imageStream, String listId, Boolean cacheImage);
}
