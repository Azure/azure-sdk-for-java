/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.anomalydetector;

import com.microsoft.azure.cognitiveservices.anomalydetector.models.AnomalyDetectOnTimestampRequest;
import com.microsoft.azure.cognitiveservices.anomalydetector.models.APIError;
import com.microsoft.azure.cognitiveservices.anomalydetector.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.anomalydetector.models.ChangePointDetectOnTimestampRequest;
import com.microsoft.azure.cognitiveservices.anomalydetector.models.InconsistencyDetectRequest;
import com.microsoft.azure.cognitiveservices.anomalydetector.models.LabelRequest;
import com.microsoft.azure.cognitiveservices.anomalydetector.models.Point;
import com.microsoft.azure.cognitiveservices.anomalydetector.models.TimeSeriesCreateRequest;
import com.microsoft.azure.cognitiveservices.anomalydetector.models.TimeSeriesList;
import com.microsoft.azure.cognitiveservices.anomalydetector.models.TimeSeriesQueryRequest;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in TimeSeries.
 */
public interface TimeSeries {
    /**
     * Get meta information of the specified timeseries.
     * corresponds to create series, get series meta with timeseries id.
     *
     * @param timeSeriesId Unique id for time series.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object get(String timeSeriesId);

    /**
     * Get meta information of the specified timeseries.
     * corresponds to create series, get series meta with timeseries id.
     *
     * @param timeSeriesId Unique id for time series.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAsync(String timeSeriesId, final ServiceCallback<Object> serviceCallback);

    /**
     * Get meta information of the specified timeseries.
     * corresponds to create series, get series meta with timeseries id.
     *
     * @param timeSeriesId Unique id for time series.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAsync(String timeSeriesId);

    /**
     * Get meta information of the specified timeseries.
     * corresponds to create series, get series meta with timeseries id.
     *
     * @param timeSeriesId Unique id for time series.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getWithServiceResponseAsync(String timeSeriesId);

    /**
     * Creat a timeseries.
     * Create series, user need to provide timeSeriesId and granularity, if the series has dimension or name, description can be provided through the interface.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body the TimeSeriesCreateRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the APIError object if successful.
     */
    APIError create(String timeSeriesId, TimeSeriesCreateRequest body);

    /**
     * Creat a timeseries.
     * Create series, user need to provide timeSeriesId and granularity, if the series has dimension or name, description can be provided through the interface.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body the TimeSeriesCreateRequest value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<APIError> createAsync(String timeSeriesId, TimeSeriesCreateRequest body, final ServiceCallback<APIError> serviceCallback);

    /**
     * Creat a timeseries.
     * Create series, user need to provide timeSeriesId and granularity, if the series has dimension or name, description can be provided through the interface.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body the TimeSeriesCreateRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the APIError object
     */
    Observable<APIError> createAsync(String timeSeriesId, TimeSeriesCreateRequest body);

    /**
     * Creat a timeseries.
     * Create series, user need to provide timeSeriesId and granularity, if the series has dimension or name, description can be provided through the interface.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body the TimeSeriesCreateRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the APIError object
     */
    Observable<ServiceResponse<APIError>> createWithServiceResponseAsync(String timeSeriesId, TimeSeriesCreateRequest body);

    /**
     * Delete the specified timeseries.
     * Delete the specified timeseries.
     *
     * @param timeSeriesId Unique id for time series.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String timeSeriesId);

    /**
     * Delete the specified timeseries.
     * Delete the specified timeseries.
     *
     * @param timeSeriesId Unique id for time series.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(String timeSeriesId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete the specified timeseries.
     * Delete the specified timeseries.
     *
     * @param timeSeriesId Unique id for time series.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteAsync(String timeSeriesId);

    /**
     * Delete the specified timeseries.
     * Delete the specified timeseries.
     *
     * @param timeSeriesId Unique id for time series.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String timeSeriesId);

    /**
     * List time series of each unique user.
     * List time series of each unique user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TimeSeriesList object if successful.
     */
    TimeSeriesList list();

    /**
     * List time series of each unique user.
     * List time series of each unique user.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TimeSeriesList> listAsync(final ServiceCallback<TimeSeriesList> serviceCallback);

    /**
     * List time series of each unique user.
     * List time series of each unique user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TimeSeriesList object
     */
    Observable<TimeSeriesList> listAsync();

    /**
     * List time series of each unique user.
     * List time series of each unique user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TimeSeriesList object
     */
    Observable<ServiceResponse<TimeSeriesList>> listWithServiceResponseAsync();
    /**
     * List time series of each unique user.
     * List time series of each unique user.
     *
     * @param next Use "next" as query parameter to get next page data.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TimeSeriesList object if successful.
     */
    TimeSeriesList list(String next);

    /**
     * List time series of each unique user.
     * List time series of each unique user.
     *
     * @param next Use "next" as query parameter to get next page data.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TimeSeriesList> listAsync(String next, final ServiceCallback<TimeSeriesList> serviceCallback);

    /**
     * List time series of each unique user.
     * List time series of each unique user.
     *
     * @param next Use "next" as query parameter to get next page data.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TimeSeriesList object
     */
    Observable<TimeSeriesList> listAsync(String next);

    /**
     * List time series of each unique user.
     * List time series of each unique user.
     *
     * @param next Use "next" as query parameter to get next page data.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TimeSeriesList object
     */
    Observable<ServiceResponse<TimeSeriesList>> listWithServiceResponseAsync(String next);

    /**
     * Insert or replace timeseries data for specified timeSeriesId. Note that this interface only stores data and do not detect these data.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body Request body for writing timeseries.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the APIError object if successful.
     */
    APIError write(String timeSeriesId, List<Point> body);

    /**
     * Insert or replace timeseries data for specified timeSeriesId. Note that this interface only stores data and do not detect these data.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body Request body for writing timeseries.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<APIError> writeAsync(String timeSeriesId, List<Point> body, final ServiceCallback<APIError> serviceCallback);

    /**
     * Insert or replace timeseries data for specified timeSeriesId. Note that this interface only stores data and do not detect these data.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body Request body for writing timeseries.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the APIError object
     */
    Observable<APIError> writeAsync(String timeSeriesId, List<Point> body);

    /**
     * Insert or replace timeseries data for specified timeSeriesId. Note that this interface only stores data and do not detect these data.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body Request body for writing timeseries.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the APIError object
     */
    Observable<ServiceResponse<APIError>> writeWithServiceResponseAsync(String timeSeriesId, List<Point> body);

    /**
     * Detect anomaly status on a given timestamp.
     * This operation can be used in streaming monitoring scenario, when user would like to monitor a time series, the user only need to provide a time range, last detect API will check where last detection ends and will return detection results between last detection and the end time.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body Timestamp is required in the request. Advanced model parameters (period, sensitivity, maxAnomalyRatio) can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object detectOnTimestamp(String timeSeriesId, AnomalyDetectOnTimestampRequest body);

    /**
     * Detect anomaly status on a given timestamp.
     * This operation can be used in streaming monitoring scenario, when user would like to monitor a time series, the user only need to provide a time range, last detect API will check where last detection ends and will return detection results between last detection and the end time.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body Timestamp is required in the request. Advanced model parameters (period, sensitivity, maxAnomalyRatio) can also be set in the request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> detectOnTimestampAsync(String timeSeriesId, AnomalyDetectOnTimestampRequest body, final ServiceCallback<Object> serviceCallback);

    /**
     * Detect anomaly status on a given timestamp.
     * This operation can be used in streaming monitoring scenario, when user would like to monitor a time series, the user only need to provide a time range, last detect API will check where last detection ends and will return detection results between last detection and the end time.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body Timestamp is required in the request. Advanced model parameters (period, sensitivity, maxAnomalyRatio) can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> detectOnTimestampAsync(String timeSeriesId, AnomalyDetectOnTimestampRequest body);

    /**
     * Detect anomaly status on a given timestamp.
     * This operation can be used in streaming monitoring scenario, when user would like to monitor a time series, the user only need to provide a time range, last detect API will check where last detection ends and will return detection results between last detection and the end time.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body Timestamp is required in the request. Advanced model parameters (period, sensitivity, maxAnomalyRatio) can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> detectOnTimestampWithServiceResponseAsync(String timeSeriesId, AnomalyDetectOnTimestampRequest body);

    /**
     * Detect the closest change point before the given timestamp.
     * Evaluate change point score before the given timestamp and give the closest change point.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body Timestamp is needed. Advanced model parameters can also be set in the request if needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object changePointDetectOnTimestamp(String timeSeriesId, ChangePointDetectOnTimestampRequest body);

    /**
     * Detect the closest change point before the given timestamp.
     * Evaluate change point score before the given timestamp and give the closest change point.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body Timestamp is needed. Advanced model parameters can also be set in the request if needed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> changePointDetectOnTimestampAsync(String timeSeriesId, ChangePointDetectOnTimestampRequest body, final ServiceCallback<Object> serviceCallback);

    /**
     * Detect the closest change point before the given timestamp.
     * Evaluate change point score before the given timestamp and give the closest change point.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body Timestamp is needed. Advanced model parameters can also be set in the request if needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> changePointDetectOnTimestampAsync(String timeSeriesId, ChangePointDetectOnTimestampRequest body);

    /**
     * Detect the closest change point before the given timestamp.
     * Evaluate change point score before the given timestamp and give the closest change point.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body Timestamp is needed. Advanced model parameters can also be set in the request if needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> changePointDetectOnTimestampWithServiceResponseAsync(String timeSeriesId, ChangePointDetectOnTimestampRequest body);

    /**
     * Label API is used for users to label detection status of a certain time stamp of a time series.
     * This operation is used for users to label Anomaly or ChangePoint states of a certain time stamp, these label will be used for regenerate detection model.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body In Label request, user can set Anomaly|ChangePoint state (true, false, unknown) for a time range
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the APIError object if successful.
     */
    APIError label(String timeSeriesId, LabelRequest body);

    /**
     * Label API is used for users to label detection status of a certain time stamp of a time series.
     * This operation is used for users to label Anomaly or ChangePoint states of a certain time stamp, these label will be used for regenerate detection model.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body In Label request, user can set Anomaly|ChangePoint state (true, false, unknown) for a time range
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<APIError> labelAsync(String timeSeriesId, LabelRequest body, final ServiceCallback<APIError> serviceCallback);

    /**
     * Label API is used for users to label detection status of a certain time stamp of a time series.
     * This operation is used for users to label Anomaly or ChangePoint states of a certain time stamp, these label will be used for regenerate detection model.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body In Label request, user can set Anomaly|ChangePoint state (true, false, unknown) for a time range
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the APIError object
     */
    Observable<APIError> labelAsync(String timeSeriesId, LabelRequest body);

    /**
     * Label API is used for users to label detection status of a certain time stamp of a time series.
     * This operation is used for users to label Anomaly or ChangePoint states of a certain time stamp, these label will be used for regenerate detection model.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body In Label request, user can set Anomaly|ChangePoint state (true, false, unknown) for a time range
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the APIError object
     */
    Observable<ServiceResponse<APIError>> labelWithServiceResponseAsync(String timeSeriesId, LabelRequest body);

    /**
     * Query timeseries with required field in each timestamp.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body Request body for querying timeseries.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object query(String timeSeriesId, TimeSeriesQueryRequest body);

    /**
     * Query timeseries with required field in each timestamp.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body Request body for querying timeseries.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> queryAsync(String timeSeriesId, TimeSeriesQueryRequest body, final ServiceCallback<Object> serviceCallback);

    /**
     * Query timeseries with required field in each timestamp.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body Request body for querying timeseries.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> queryAsync(String timeSeriesId, TimeSeriesQueryRequest body);

    /**
     * Query timeseries with required field in each timestamp.
     *
     * @param timeSeriesId Unique id for time series.
     * @param body Request body for querying timeseries.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> queryWithServiceResponseAsync(String timeSeriesId, TimeSeriesQueryRequest body);

    /**
     * Detect inconsistent time series from a group of similar time series.
     * This operation helps detect the inconsistent series among a group series with similar trend.
     *
     * @param body Timestamp is necessary, and a parameter called epsilon is needed to tune the result. Epsilon should be within 0 and 1. A list of time series ids need to be provided to the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object inconsistencyDetect(InconsistencyDetectRequest body);

    /**
     * Detect inconsistent time series from a group of similar time series.
     * This operation helps detect the inconsistent series among a group series with similar trend.
     *
     * @param body Timestamp is necessary, and a parameter called epsilon is needed to tune the result. Epsilon should be within 0 and 1. A list of time series ids need to be provided to the service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> inconsistencyDetectAsync(InconsistencyDetectRequest body, final ServiceCallback<Object> serviceCallback);

    /**
     * Detect inconsistent time series from a group of similar time series.
     * This operation helps detect the inconsistent series among a group series with similar trend.
     *
     * @param body Timestamp is necessary, and a parameter called epsilon is needed to tune the result. Epsilon should be within 0 and 1. A list of time series ids need to be provided to the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> inconsistencyDetectAsync(InconsistencyDetectRequest body);

    /**
     * Detect inconsistent time series from a group of similar time series.
     * This operation helps detect the inconsistent series among a group series with similar trend.
     *
     * @param body Timestamp is necessary, and a parameter called epsilon is needed to tune the result. Epsilon should be within 0 and 1. A list of time series ids need to be provided to the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> inconsistencyDetectWithServiceResponseAsync(InconsistencyDetectRequest body);

}
