/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.anomalydetector.models;

import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The AnomalyDetectOnTimestampResponse model.
 */
public class AnomalyDetectOnTimestampResponse {
    /**
     * Frequency extracted from the series, zero means no recurrent pattern has
     * been found.
     */
    @JsonProperty(value = "period", required = true)
    private int periodProperty;

    /**
     * Timestamp of a point.
     */
    @JsonProperty(value = "timestamp", required = true)
    private DateTime timestamp;

    /**
     * Value of a point.
     */
    @JsonProperty(value = "value", required = true)
    private double value;

    /**
     * ExpectedValue of a point on the timestamp.
     */
    @JsonProperty(value = "expectedValue", required = true)
    private double expectedValue;

    /**
     * UpperMargin of a point on the timestamp. UpperMargin is used to
     * calculate upperBoundary, which equals to expectedValue + (100 -
     * marginScale)*upperMargin. Anomalies in response can be filtered by
     * upperBoundary and lowerBoundary. By adjusting marginScale value, less
     * significant anomalies can be filtered in client side.
     */
    @JsonProperty(value = "upperMargin", required = true)
    private double upperMargin;

    /**
     * LowerMargin of a point on the timestamp. LowerMargin is used to
     * calculate lowerBoundary, which equals to expectedValue - (100 -
     * marginScale)*lowerMargin. Points between the boundary can be marked as
     * normal ones in client side.
     */
    @JsonProperty(value = "lowerMargin", required = true)
    private double lowerMargin;

    /**
     * Anomaly property of a point on the timestamp. True means an anomaly
     * either negative or positive has been detected.
     */
    @JsonProperty(value = "isAnomaly", required = true)
    private boolean isAnomaly;

    /**
     * Anomaly status in negative direction on the timestamp. True means a
     * negative anomaly has been detected. A negative anomaly means the point
     * is detected as an anomaly and its real value is smaller than the
     * expected one.
     */
    @JsonProperty(value = "isNegativeAnomaly", required = true)
    private boolean isNegativeAnomaly;

    /**
     * Anomaly status in positive direction on the timestamp. True means a
     * positive anomaly has been detected. A positive anomaly means the point
     * is detected as an anomaly and its real value is larger than the expected
     * one.
     */
    @JsonProperty(value = "isPositiveAnomaly", required = true)
    private boolean isPositiveAnomaly;

    /**
     * Confidence score of the anomaly, significiant anomalies will get higher
     * score.
     */
    @JsonProperty(value = "confidenceScore", required = true)
    private double confidenceScore;

    /**
     * Get frequency extracted from the series, zero means no recurrent pattern has been found.
     *
     * @return the periodProperty value
     */
    public int periodProperty() {
        return this.periodProperty;
    }

    /**
     * Set frequency extracted from the series, zero means no recurrent pattern has been found.
     *
     * @param periodProperty the periodProperty value to set
     * @return the AnomalyDetectOnTimestampResponse object itself.
     */
    public AnomalyDetectOnTimestampResponse withPeriodProperty(int periodProperty) {
        this.periodProperty = periodProperty;
        return this;
    }

    /**
     * Get timestamp of a point.
     *
     * @return the timestamp value
     */
    public DateTime timestamp() {
        return this.timestamp;
    }

    /**
     * Set timestamp of a point.
     *
     * @param timestamp the timestamp value to set
     * @return the AnomalyDetectOnTimestampResponse object itself.
     */
    public AnomalyDetectOnTimestampResponse withTimestamp(DateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get value of a point.
     *
     * @return the value value
     */
    public double value() {
        return this.value;
    }

    /**
     * Set value of a point.
     *
     * @param value the value value to set
     * @return the AnomalyDetectOnTimestampResponse object itself.
     */
    public AnomalyDetectOnTimestampResponse withValue(double value) {
        this.value = value;
        return this;
    }

    /**
     * Get expectedValue of a point on the timestamp.
     *
     * @return the expectedValue value
     */
    public double expectedValue() {
        return this.expectedValue;
    }

    /**
     * Set expectedValue of a point on the timestamp.
     *
     * @param expectedValue the expectedValue value to set
     * @return the AnomalyDetectOnTimestampResponse object itself.
     */
    public AnomalyDetectOnTimestampResponse withExpectedValue(double expectedValue) {
        this.expectedValue = expectedValue;
        return this;
    }

    /**
     * Get upperMargin of a point on the timestamp. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)*upperMargin. Anomalies in response can be filtered by upperBoundary and lowerBoundary. By adjusting marginScale value, less significant anomalies can be filtered in client side.
     *
     * @return the upperMargin value
     */
    public double upperMargin() {
        return this.upperMargin;
    }

    /**
     * Set upperMargin of a point on the timestamp. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)*upperMargin. Anomalies in response can be filtered by upperBoundary and lowerBoundary. By adjusting marginScale value, less significant anomalies can be filtered in client side.
     *
     * @param upperMargin the upperMargin value to set
     * @return the AnomalyDetectOnTimestampResponse object itself.
     */
    public AnomalyDetectOnTimestampResponse withUpperMargin(double upperMargin) {
        this.upperMargin = upperMargin;
        return this;
    }

    /**
     * Get lowerMargin of a point on the timestamp. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)*lowerMargin. Points between the boundary can be marked as normal ones in client side.
     *
     * @return the lowerMargin value
     */
    public double lowerMargin() {
        return this.lowerMargin;
    }

    /**
     * Set lowerMargin of a point on the timestamp. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)*lowerMargin. Points between the boundary can be marked as normal ones in client side.
     *
     * @param lowerMargin the lowerMargin value to set
     * @return the AnomalyDetectOnTimestampResponse object itself.
     */
    public AnomalyDetectOnTimestampResponse withLowerMargin(double lowerMargin) {
        this.lowerMargin = lowerMargin;
        return this;
    }

    /**
     * Get anomaly property of a point on the timestamp. True means an anomaly either negative or positive has been detected.
     *
     * @return the isAnomaly value
     */
    public boolean isAnomaly() {
        return this.isAnomaly;
    }

    /**
     * Set anomaly property of a point on the timestamp. True means an anomaly either negative or positive has been detected.
     *
     * @param isAnomaly the isAnomaly value to set
     * @return the AnomalyDetectOnTimestampResponse object itself.
     */
    public AnomalyDetectOnTimestampResponse withIsAnomaly(boolean isAnomaly) {
        this.isAnomaly = isAnomaly;
        return this;
    }

    /**
     * Get anomaly status in negative direction on the timestamp. True means a negative anomaly has been detected. A negative anomaly means the point is detected as an anomaly and its real value is smaller than the expected one.
     *
     * @return the isNegativeAnomaly value
     */
    public boolean isNegativeAnomaly() {
        return this.isNegativeAnomaly;
    }

    /**
     * Set anomaly status in negative direction on the timestamp. True means a negative anomaly has been detected. A negative anomaly means the point is detected as an anomaly and its real value is smaller than the expected one.
     *
     * @param isNegativeAnomaly the isNegativeAnomaly value to set
     * @return the AnomalyDetectOnTimestampResponse object itself.
     */
    public AnomalyDetectOnTimestampResponse withIsNegativeAnomaly(boolean isNegativeAnomaly) {
        this.isNegativeAnomaly = isNegativeAnomaly;
        return this;
    }

    /**
     * Get anomaly status in positive direction on the timestamp. True means a positive anomaly has been detected. A positive anomaly means the point is detected as an anomaly and its real value is larger than the expected one.
     *
     * @return the isPositiveAnomaly value
     */
    public boolean isPositiveAnomaly() {
        return this.isPositiveAnomaly;
    }

    /**
     * Set anomaly status in positive direction on the timestamp. True means a positive anomaly has been detected. A positive anomaly means the point is detected as an anomaly and its real value is larger than the expected one.
     *
     * @param isPositiveAnomaly the isPositiveAnomaly value to set
     * @return the AnomalyDetectOnTimestampResponse object itself.
     */
    public AnomalyDetectOnTimestampResponse withIsPositiveAnomaly(boolean isPositiveAnomaly) {
        this.isPositiveAnomaly = isPositiveAnomaly;
        return this;
    }

    /**
     * Get confidence score of the anomaly, significiant anomalies will get higher score.
     *
     * @return the confidenceScore value
     */
    public double confidenceScore() {
        return this.confidenceScore;
    }

    /**
     * Set confidence score of the anomaly, significiant anomalies will get higher score.
     *
     * @param confidenceScore the confidenceScore value to set
     * @return the AnomalyDetectOnTimestampResponse object itself.
     */
    public AnomalyDetectOnTimestampResponse withConfidenceScore(double confidenceScore) {
        this.confidenceScore = confidenceScore;
        return this;
    }

}
