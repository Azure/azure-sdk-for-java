/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.anomalydetector;

import com.azure.common.http.rest.SimpleResponse;
import com.microsoft.azure.cognitiveservices.anomalydetector.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.anomalydetector.models.EntireDetectResponse;
import com.microsoft.azure.cognitiveservices.anomalydetector.models.LastDetectResponse;
import com.microsoft.azure.cognitiveservices.anomalydetector.models.Request;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * The interface for AnomalyDetectorClient class.
 */
public interface AnomalyDetectorClient {
    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com).
     *
     * @return the endpoint value.
     */
    String endpoint();

    /**
     * Sets Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com).
     *
     * @param endpoint the endpoint value.
     * @return the service client itself.
     */
    AnomalyDetectorClient withEndpoint(String endpoint);

    /**
     * Detect anomalies for the entire series in batch.
     * This operation generates a model using an entire series, each point is detected with the same model. With this method, points before and after a certain point are used to determine whether it is an anomaly. The entire detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the EntireDetectResponse object if successful.
     */
    EntireDetectResponse entireDetect(@NonNull Request body);

    /**
     * Detect anomalies for the entire series in batch.
     * This operation generates a model using an entire series, each point is detected with the same model. With this method, points before and after a certain point are used to determine whether it is an anomaly. The entire detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<EntireDetectResponse>> entireDetectWithRestResponseAsync(@NonNull Request body);

    /**
     * Detect anomalies for the entire series in batch.
     * This operation generates a model using an entire series, each point is detected with the same model. With this method, points before and after a certain point are used to determine whether it is an anomaly. The entire detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<EntireDetectResponse> entireDetectAsync(@NonNull Request body);

    /**
     * Detect anomaly status of the latest point in time series.
     * This operation generates a model using points before the latest one. With this method, only historical points are used to determine whether the target point is an anomaly. The latest point detecting operation matches the scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the LastDetectResponse object if successful.
     */
    LastDetectResponse lastDetect(@NonNull Request body);

    /**
     * Detect anomaly status of the latest point in time series.
     * This operation generates a model using points before the latest one. With this method, only historical points are used to determine whether the target point is an anomaly. The latest point detecting operation matches the scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleResponse<LastDetectResponse>> lastDetectWithRestResponseAsync(@NonNull Request body);

    /**
     * Detect anomaly status of the latest point in time series.
     * This operation generates a model using points before the latest one. With this method, only historical points are used to determine whether the target point is an anomaly. The latest point detecting operation matches the scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<LastDetectResponse> lastDetectAsync(@NonNull Request body);
}
