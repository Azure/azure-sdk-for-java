/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.anomalydetector.models;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The EntireDetectResponse model.
 */
public class EntireDetectResponse {
    /**
     * Frequency extracted from the series, zero means no recurrent pattern has
     * been found.
     */
    @JsonProperty(value = "period", required = true)
    private int periodProperty;

    /**
     * ExpectedValues contain expected value for each input point. The index of
     * the array is consistent with the input series.
     */
    @JsonProperty(value = "expectedValues", required = true)
    private List<Double> expectedValues;

    /**
     * UpperMargins contain upper margin of each input point. UpperMargin is
     * used to calculate upperBoundary, which equals to expectedValue + (100 -
     * marginScale)*upperMargin. Anomalies in response can be filtered by
     * upperBoundary and lowerBoundary. By adjusting marginScale value, less
     * significant anomalies can be filtered in client side. The index of the
     * array is consistent with the input series.
     */
    @JsonProperty(value = "upperMargins", required = true)
    private List<Double> upperMargins;

    /**
     * LowerMargins contain lower margin of each input point. LowerMargin is
     * used to calculate lowerBoundary, which equals to expectedValue - (100 -
     * marginScale)*lowerMargin. Points between the boundary can be marked as
     * normal ones in client side. The index of the array is consistent with
     * the input series.
     */
    @JsonProperty(value = "lowerMargins", required = true)
    private List<Double> lowerMargins;

    /**
     * IsAnomaly contains anomaly properties for each input point. True means
     * an anomaly either negative or positive has been detected. The index of
     * the array is consistent with the input series.
     */
    @JsonProperty(value = "isAnomaly", required = true)
    private List<Boolean> isAnomaly;

    /**
     * IsNegativeAnomaly contains anomaly status in negative direction for each
     * input point. True means a negative anomaly has been detected. A negative
     * anomaly means the point is detected as an anomaly and its real value is
     * smaller than the expected one. The index of the array is consistent with
     * the input series.
     */
    @JsonProperty(value = "isNegativeAnomaly", required = true)
    private List<Boolean> isNegativeAnomaly;

    /**
     * IsPositiveAnomaly contain anomaly status in positive direction for each
     * input point. True means a positive anomaly has been detected. A positive
     * anomaly means the point is detected as an anomaly and its real value is
     * larger than the expected one. The index of the array is consistent with
     * the input series.
     */
    @JsonProperty(value = "isPositiveAnomaly", required = true)
    private List<Boolean> isPositiveAnomaly;

    /**
     * Get frequency extracted from the series, zero means no recurrent pattern has been found.
     *
     * @return the periodProperty value
     */
    public int periodProperty() {
        return this.periodProperty;
    }

    /**
     * Set frequency extracted from the series, zero means no recurrent pattern has been found.
     *
     * @param periodProperty the periodProperty value to set
     * @return the EntireDetectResponse object itself.
     */
    public EntireDetectResponse withPeriodProperty(int periodProperty) {
        this.periodProperty = periodProperty;
        return this;
    }

    /**
     * Get expectedValues contain expected value for each input point. The index of the array is consistent with the input series.
     *
     * @return the expectedValues value
     */
    public List<Double> expectedValues() {
        return this.expectedValues;
    }

    /**
     * Set expectedValues contain expected value for each input point. The index of the array is consistent with the input series.
     *
     * @param expectedValues the expectedValues value to set
     * @return the EntireDetectResponse object itself.
     */
    public EntireDetectResponse withExpectedValues(List<Double> expectedValues) {
        this.expectedValues = expectedValues;
        return this;
    }

    /**
     * Get upperMargins contain upper margin of each input point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)*upperMargin. Anomalies in response can be filtered by upperBoundary and lowerBoundary. By adjusting marginScale value, less significant anomalies can be filtered in client side. The index of the array is consistent with the input series.
     *
     * @return the upperMargins value
     */
    public List<Double> upperMargins() {
        return this.upperMargins;
    }

    /**
     * Set upperMargins contain upper margin of each input point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)*upperMargin. Anomalies in response can be filtered by upperBoundary and lowerBoundary. By adjusting marginScale value, less significant anomalies can be filtered in client side. The index of the array is consistent with the input series.
     *
     * @param upperMargins the upperMargins value to set
     * @return the EntireDetectResponse object itself.
     */
    public EntireDetectResponse withUpperMargins(List<Double> upperMargins) {
        this.upperMargins = upperMargins;
        return this;
    }

    /**
     * Get lowerMargins contain lower margin of each input point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)*lowerMargin. Points between the boundary can be marked as normal ones in client side. The index of the array is consistent with the input series.
     *
     * @return the lowerMargins value
     */
    public List<Double> lowerMargins() {
        return this.lowerMargins;
    }

    /**
     * Set lowerMargins contain lower margin of each input point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)*lowerMargin. Points between the boundary can be marked as normal ones in client side. The index of the array is consistent with the input series.
     *
     * @param lowerMargins the lowerMargins value to set
     * @return the EntireDetectResponse object itself.
     */
    public EntireDetectResponse withLowerMargins(List<Double> lowerMargins) {
        this.lowerMargins = lowerMargins;
        return this;
    }

    /**
     * Get isAnomaly contains anomaly properties for each input point. True means an anomaly either negative or positive has been detected. The index of the array is consistent with the input series.
     *
     * @return the isAnomaly value
     */
    public List<Boolean> isAnomaly() {
        return this.isAnomaly;
    }

    /**
     * Set isAnomaly contains anomaly properties for each input point. True means an anomaly either negative or positive has been detected. The index of the array is consistent with the input series.
     *
     * @param isAnomaly the isAnomaly value to set
     * @return the EntireDetectResponse object itself.
     */
    public EntireDetectResponse withIsAnomaly(List<Boolean> isAnomaly) {
        this.isAnomaly = isAnomaly;
        return this;
    }

    /**
     * Get isNegativeAnomaly contains anomaly status in negative direction for each input point. True means a negative anomaly has been detected. A negative anomaly means the point is detected as an anomaly and its real value is smaller than the expected one. The index of the array is consistent with the input series.
     *
     * @return the isNegativeAnomaly value
     */
    public List<Boolean> isNegativeAnomaly() {
        return this.isNegativeAnomaly;
    }

    /**
     * Set isNegativeAnomaly contains anomaly status in negative direction for each input point. True means a negative anomaly has been detected. A negative anomaly means the point is detected as an anomaly and its real value is smaller than the expected one. The index of the array is consistent with the input series.
     *
     * @param isNegativeAnomaly the isNegativeAnomaly value to set
     * @return the EntireDetectResponse object itself.
     */
    public EntireDetectResponse withIsNegativeAnomaly(List<Boolean> isNegativeAnomaly) {
        this.isNegativeAnomaly = isNegativeAnomaly;
        return this;
    }

    /**
     * Get isPositiveAnomaly contain anomaly status in positive direction for each input point. True means a positive anomaly has been detected. A positive anomaly means the point is detected as an anomaly and its real value is larger than the expected one. The index of the array is consistent with the input series.
     *
     * @return the isPositiveAnomaly value
     */
    public List<Boolean> isPositiveAnomaly() {
        return this.isPositiveAnomaly;
    }

    /**
     * Set isPositiveAnomaly contain anomaly status in positive direction for each input point. True means a positive anomaly has been detected. A positive anomaly means the point is detected as an anomaly and its real value is larger than the expected one. The index of the array is consistent with the input series.
     *
     * @param isPositiveAnomaly the isPositiveAnomaly value to set
     * @return the EntireDetectResponse object itself.
     */
    public EntireDetectResponse withIsPositiveAnomaly(List<Boolean> isPositiveAnomaly) {
        this.isPositiveAnomaly = isPositiveAnomaly;
        return this;
    }

}
