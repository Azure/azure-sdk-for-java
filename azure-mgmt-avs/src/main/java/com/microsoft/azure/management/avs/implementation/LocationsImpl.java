/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.avs.implementation;

import retrofit2.Retrofit;
import com.microsoft.azure.management.avs.Locations;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.avs.models.ApiErrorException;
import com.microsoft.azure.management.avs.models.Quota;
import com.microsoft.azure.management.avs.models.Trial;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Locations.
 */
public class LocationsImpl implements Locations {
    /** The Retrofit service to perform REST calls. */
    private LocationsService service;
    /** The service client containing this operation class. */
    private AvsClientImpl client;

    /**
     * Initializes an instance of LocationsImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public LocationsImpl(Retrofit retrofit, AvsClientImpl client) {
        this.service = retrofit.create(LocationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Locations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface LocationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.Locations checkTrialAvailability" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.AVS/locations/{location}/checkTrialAvailability")
        Observable<Response<ResponseBody>> checkTrialAvailability(@Path("subscriptionId") String subscriptionId, @Path("location") String location, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.Locations checkQuotaAvailability" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.AVS/locations/{location}/checkQuotaAvailability")
        Observable<Response<ResponseBody>> checkQuotaAvailability(@Path("subscriptionId") String subscriptionId, @Path("location") String location, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Return trial status for subscription by region.
     *
     * @param location Azure region
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Trial object if successful.
     */
    public Trial checkTrialAvailability(String location) {
        return checkTrialAvailabilityWithServiceResponseAsync(location).toBlocking().single().body();
    }

    /**
     * Return trial status for subscription by region.
     *
     * @param location Azure region
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Trial> checkTrialAvailabilityAsync(String location, final ServiceCallback<Trial> serviceCallback) {
        return ServiceFuture.fromResponse(checkTrialAvailabilityWithServiceResponseAsync(location), serviceCallback);
    }

    /**
     * Return trial status for subscription by region.
     *
     * @param location Azure region
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Trial object
     */
    public Observable<Trial> checkTrialAvailabilityAsync(String location) {
        return checkTrialAvailabilityWithServiceResponseAsync(location).map(new Func1<ServiceResponse<Trial>, Trial>() {
            @Override
            public Trial call(ServiceResponse<Trial> response) {
                return response.body();
            }
        });
    }

    /**
     * Return trial status for subscription by region.
     *
     * @param location Azure region
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Trial object
     */
    public Observable<ServiceResponse<Trial>> checkTrialAvailabilityWithServiceResponseAsync(String location) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.checkTrialAvailability(this.client.subscriptionId(), location, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Trial>>>() {
                @Override
                public Observable<ServiceResponse<Trial>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Trial> clientResponse = checkTrialAvailabilityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Trial> checkTrialAvailabilityDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Trial, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Trial>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Return quota for subscription by region.
     *
     * @param location Azure region
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Quota object if successful.
     */
    public Quota checkQuotaAvailability(String location) {
        return checkQuotaAvailabilityWithServiceResponseAsync(location).toBlocking().single().body();
    }

    /**
     * Return quota for subscription by region.
     *
     * @param location Azure region
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Quota> checkQuotaAvailabilityAsync(String location, final ServiceCallback<Quota> serviceCallback) {
        return ServiceFuture.fromResponse(checkQuotaAvailabilityWithServiceResponseAsync(location), serviceCallback);
    }

    /**
     * Return quota for subscription by region.
     *
     * @param location Azure region
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Quota object
     */
    public Observable<Quota> checkQuotaAvailabilityAsync(String location) {
        return checkQuotaAvailabilityWithServiceResponseAsync(location).map(new Func1<ServiceResponse<Quota>, Quota>() {
            @Override
            public Quota call(ServiceResponse<Quota> response) {
                return response.body();
            }
        });
    }

    /**
     * Return quota for subscription by region.
     *
     * @param location Azure region
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Quota object
     */
    public Observable<ServiceResponse<Quota>> checkQuotaAvailabilityWithServiceResponseAsync(String location) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.checkQuotaAvailability(this.client.subscriptionId(), location, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Quota>>>() {
                @Override
                public Observable<ServiceResponse<Quota>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Quota> clientResponse = checkQuotaAvailabilityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Quota> checkQuotaAvailabilityDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Quota, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Quota>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

}
