/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.policy.v2018_05_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.policy.v2018_05_01.PolicySetDefinitions;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.policy.v2018_05_01.PolicySetDefinition;

class PolicySetDefinitionsImpl extends WrapperImpl<PolicySetDefinitionsInner> implements PolicySetDefinitions {
    private final PolicyManager manager;

    PolicySetDefinitionsImpl(PolicyManager manager) {
        super(manager.inner().policySetDefinitions());
        this.manager = manager;
    }

    public PolicyManager manager() {
        return this.manager;
    }

    @Override
    public PolicySetDefinitionImpl define(String name) {
        return wrapModel(name);
    }

    private PolicySetDefinitionImpl wrapModel(PolicySetDefinitionInner inner) {
        return  new PolicySetDefinitionImpl(inner, manager());
    }

    private PolicySetDefinitionImpl wrapModel(String name) {
        return new PolicySetDefinitionImpl(name, this.manager());
    }

    @Override
    public Completable deleteAsync(String policySetDefinitionName, String subscriptionId) {
        PolicySetDefinitionsInner client = this.inner();
        return client.deleteAsync(policySetDefinitionName, subscriptionId).toCompletable();
    }

    @Override
    public Observable<PolicySetDefinition> getAsync(String policySetDefinitionName, String subscriptionId) {
        PolicySetDefinitionsInner client = this.inner();
        return client.getAsync(policySetDefinitionName, subscriptionId)
        .map(new Func1<PolicySetDefinitionInner, PolicySetDefinition>() {
            @Override
            public PolicySetDefinition call(PolicySetDefinitionInner inner) {
                return new PolicySetDefinitionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PolicySetDefinition> getBuiltInAsync(String policySetDefinitionName) {
        PolicySetDefinitionsInner client = this.inner();
        return client.getBuiltInAsync(policySetDefinitionName)
        .map(new Func1<PolicySetDefinitionInner, PolicySetDefinition>() {
            @Override
            public PolicySetDefinition call(PolicySetDefinitionInner inner) {
                return new PolicySetDefinitionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PolicySetDefinition> createOrUpdateAtManagementGroupAsync(String policySetDefinitionName, String managementGroupId, PolicySetDefinitionInner parameters) {
        PolicySetDefinitionsInner client = this.inner();
        return client.createOrUpdateAtManagementGroupAsync(policySetDefinitionName, managementGroupId, parameters)
        .map(new Func1<PolicySetDefinitionInner, PolicySetDefinition>() {
            @Override
            public PolicySetDefinition call(PolicySetDefinitionInner inner) {
                return new PolicySetDefinitionImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAtManagementGroupAsync(String policySetDefinitionName, String managementGroupId) {
        PolicySetDefinitionsInner client = this.inner();
        return client.deleteAtManagementGroupAsync(policySetDefinitionName, managementGroupId).toCompletable();
    }

    @Override
    public Observable<PolicySetDefinition> getAtManagementGroupAsync(String policySetDefinitionName, String managementGroupId) {
        PolicySetDefinitionsInner client = this.inner();
        return client.getAtManagementGroupAsync(policySetDefinitionName, managementGroupId)
        .map(new Func1<PolicySetDefinitionInner, PolicySetDefinition>() {
            @Override
            public PolicySetDefinition call(PolicySetDefinitionInner inner) {
                return new PolicySetDefinitionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PolicySetDefinition> listByManagementGroupAsync(final String managementGroupId) {
        PolicySetDefinitionsInner client = this.inner();
        return client.listByManagementGroupAsync(managementGroupId)
        .flatMapIterable(new Func1<Page<PolicySetDefinitionInner>, Iterable<PolicySetDefinitionInner>>() {
            @Override
            public Iterable<PolicySetDefinitionInner> call(Page<PolicySetDefinitionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<PolicySetDefinitionInner, PolicySetDefinition>() {
            @Override
            public PolicySetDefinition call(PolicySetDefinitionInner inner) {
                return new PolicySetDefinitionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PolicySetDefinition> listAsync(final String subscriptionId) {
        PolicySetDefinitionsInner client = this.inner();
        return client.listAsync(subscriptionId)
        .flatMapIterable(new Func1<Page<PolicySetDefinitionInner>, Iterable<PolicySetDefinitionInner>>() {
            @Override
            public Iterable<PolicySetDefinitionInner> call(Page<PolicySetDefinitionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<PolicySetDefinitionInner, PolicySetDefinition>() {
            @Override
            public PolicySetDefinition call(PolicySetDefinitionInner inner) {
                return new PolicySetDefinitionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PolicySetDefinition> listBuiltInAsync() {
        PolicySetDefinitionsInner client = this.inner();
        return client.listBuiltInAsync()
        .flatMapIterable(new Func1<Page<PolicySetDefinitionInner>, Iterable<PolicySetDefinitionInner>>() {
            @Override
            public Iterable<PolicySetDefinitionInner> call(Page<PolicySetDefinitionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<PolicySetDefinitionInner, PolicySetDefinition>() {
            @Override
            public PolicySetDefinition call(PolicySetDefinitionInner inner) {
                return new PolicySetDefinitionImpl(inner, manager());
            }
        });
    }

}
