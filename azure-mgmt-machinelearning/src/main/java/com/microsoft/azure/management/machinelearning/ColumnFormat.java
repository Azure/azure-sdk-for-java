/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.machinelearning;

import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Defines values for ColumnFormat.
 */
public final class ColumnFormat {
    /** Static value Byte for ColumnFormat. */
    public static final ColumnFormat BYTE = new ColumnFormat("Byte");

    /** Static value Char for ColumnFormat. */
    public static final ColumnFormat CHAR = new ColumnFormat("Char");

    /** Static value Complex64 for ColumnFormat. */
    public static final ColumnFormat COMPLEX64 = new ColumnFormat("Complex64");

    /** Static value Complex128 for ColumnFormat. */
    public static final ColumnFormat COMPLEX128 = new ColumnFormat("Complex128");

    /** Static value Date-time for ColumnFormat. */
    public static final ColumnFormat DATE_TIME = new ColumnFormat("Date-time");

    /** Static value Date-timeOffset for ColumnFormat. */
    public static final ColumnFormat DATE_TIME_OFFSET = new ColumnFormat("Date-timeOffset");

    /** Static value Double for ColumnFormat. */
    public static final ColumnFormat DOUBLE = new ColumnFormat("Double");

    /** Static value Duration for ColumnFormat. */
    public static final ColumnFormat DURATION = new ColumnFormat("Duration");

    /** Static value Float for ColumnFormat. */
    public static final ColumnFormat FLOAT = new ColumnFormat("Float");

    /** Static value Int8 for ColumnFormat. */
    public static final ColumnFormat INT8 = new ColumnFormat("Int8");

    /** Static value Int16 for ColumnFormat. */
    public static final ColumnFormat INT16 = new ColumnFormat("Int16");

    /** Static value Int32 for ColumnFormat. */
    public static final ColumnFormat INT32 = new ColumnFormat("Int32");

    /** Static value Int64 for ColumnFormat. */
    public static final ColumnFormat INT64 = new ColumnFormat("Int64");

    /** Static value Uint8 for ColumnFormat. */
    public static final ColumnFormat UINT8 = new ColumnFormat("Uint8");

    /** Static value Uint16 for ColumnFormat. */
    public static final ColumnFormat UINT16 = new ColumnFormat("Uint16");

    /** Static value Uint32 for ColumnFormat. */
    public static final ColumnFormat UINT32 = new ColumnFormat("Uint32");

    /** Static value Uint64 for ColumnFormat. */
    public static final ColumnFormat UINT64 = new ColumnFormat("Uint64");

    private String value;

    /**
     * Creates a custom value for ColumnFormat.
     * @param value the custom value
     */
    public ColumnFormat(String value) {
        this.value = value;
    }

    @JsonValue
    @Override
    public String toString() {
        return value;
    }

    @Override
    public int hashCode() {
        return value.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof ColumnFormat)) {
            return false;
        }
        if (obj == this) {
            return true;
        }
        ColumnFormat rhs = (ColumnFormat) obj;
        if (value == null) {
            return rhs.value == null;
        } else {
            return value.equals(rhs.value);
        }
    }
}
