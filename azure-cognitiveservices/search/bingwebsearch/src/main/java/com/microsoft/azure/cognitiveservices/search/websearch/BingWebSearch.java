/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.search.websearch;

import com.microsoft.azure.cognitiveservices.search.websearch.models.SearchOptionalParameter;
import com.microsoft.azure.cognitiveservices.search.websearch.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.search.websearch.models.SearchResponse;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in BingWebSearch.
 */
public interface BingWebSearch {
    /**
     * The Web Search API lets you send a search query to Bing and get back search results that include links to
     *  webpages, images, and more.
     *
     * @param query The user's search query term. The term may not be empty. The term may contain Bing Advanced Operators. For
     *  example, to limit results to a specific domain, use the site: operator.
     * @param searchOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SearchResponse object if successful.
     */
    SearchResponse search(String query, SearchOptionalParameter searchOptionalParameter);

    /**
     * The Web Search API lets you send a search query to Bing and get back search results that include links to
     *  webpages, images, and more.
     *
     * @param query The user's search query term. The term may not be empty. The term may contain Bing Advanced Operators. For
     *  example, to limit results to a specific domain, use the site: operator.
     * @param searchOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SearchResponse object
     */
    Observable<SearchResponse> searchAsync(String query, SearchOptionalParameter searchOptionalParameter);

}
