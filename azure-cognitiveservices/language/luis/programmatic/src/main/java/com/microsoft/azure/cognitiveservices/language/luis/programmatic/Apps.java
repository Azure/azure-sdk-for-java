/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.language.luis.programmatic;

import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ListAppsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ImportAppsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.UpdateSettingsOptionalParameter;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ApplicationCreateObject;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ApplicationInfoResponse;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ApplicationPublishObject;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ApplicationSettings;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ApplicationUpdateObject;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.AvailableCulture;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.AzureRegions;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.LuisApp;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.OperationStatus;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.PersonalAssistantsResponse;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.PrebuiltDomain;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.PrebuiltDomainCreateObject;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ProductionOrStagingEndpointInfo;
import java.io.InputStream;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Apps.
 */
public interface Apps {
    /**
     * Creates a new LUIS app.
     *
     * @param applicationCreateObject A model containing Name, Description (optional), Culture, Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the application. Default value for the version ID is 0.1. Note: the culture cannot be changed after the app is created.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID add(ApplicationCreateObject applicationCreateObject);

    /**
     * Creates a new LUIS app.
     *
     * @param applicationCreateObject A model containing Name, Description (optional), Culture, Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the application. Default value for the version ID is 0.1. Note: the culture cannot be changed after the app is created.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<UUID> addAsync(ApplicationCreateObject applicationCreateObject, final ServiceCallback<UUID> serviceCallback);

    /**
     * Creates a new LUIS app.
     *
     * @param applicationCreateObject A model containing Name, Description (optional), Culture, Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the application. Default value for the version ID is 0.1. Note: the culture cannot be changed after the app is created.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> addAsync(ApplicationCreateObject applicationCreateObject);

    /**
     * Creates a new LUIS app.
     *
     * @param applicationCreateObject A model containing Name, Description (optional), Culture, Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the application. Default value for the version ID is 0.1. Note: the culture cannot be changed after the app is created.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<ServiceResponse<UUID>> addWithServiceResponseAsync(ApplicationCreateObject applicationCreateObject);

    /**
     * Lists all of the user applications.
     *
     * @param listAppsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ApplicationInfoResponse&gt; object if successful.
     */
    List<ApplicationInfoResponse> listApps(ListAppsOptionalParameter listAppsOptionalParameter);

    /**
     * Lists all of the user applications.
     *
     * @param listAppsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ApplicationInfoResponse&gt; object
     */
    Observable<List<ApplicationInfoResponse>> listAppsAsync(ListAppsOptionalParameter listAppsOptionalParameter);

    /**
     * Imports an application to LUIS, the application's structure should be included in in the request body.
     *
     * @param luisApp A LUIS application structure.
     * @param importAppsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID importApps(LuisApp luisApp, ImportAppsOptionalParameter importAppsOptionalParameter);

    /**
     * Imports an application to LUIS, the application's structure should be included in in the request body.
     *
     * @param luisApp A LUIS application structure.
     * @param importAppsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> importAppsAsync(LuisApp luisApp, ImportAppsOptionalParameter importAppsOptionalParameter);

    /**
     * Gets the endpoint URLs for the prebuilt Cortana applications.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersonalAssistantsResponse object if successful.
     */
    PersonalAssistantsResponse listCortanaEndpoints();

    /**
     * Gets the endpoint URLs for the prebuilt Cortana applications.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PersonalAssistantsResponse> listCortanaEndpointsAsync(final ServiceCallback<PersonalAssistantsResponse> serviceCallback);

    /**
     * Gets the endpoint URLs for the prebuilt Cortana applications.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersonalAssistantsResponse object
     */
    Observable<PersonalAssistantsResponse> listCortanaEndpointsAsync();

    /**
     * Gets the endpoint URLs for the prebuilt Cortana applications.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersonalAssistantsResponse object
     */
    Observable<ServiceResponse<PersonalAssistantsResponse>> listCortanaEndpointsWithServiceResponseAsync();

    /**
     * Gets the available application domains.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;String&gt; object if successful.
     */
    List<String> listDomains();

    /**
     * Gets the available application domains.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<String>> listDomainsAsync(final ServiceCallback<List<String>> serviceCallback);

    /**
     * Gets the available application domains.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;String&gt; object
     */
    Observable<List<String>> listDomainsAsync();

    /**
     * Gets the available application domains.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;String&gt; object
     */
    Observable<ServiceResponse<List<String>>> listDomainsWithServiceResponseAsync();

    /**
     * Gets the application available usage scenarios.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;String&gt; object if successful.
     */
    List<String> listUsageScenarios();

    /**
     * Gets the application available usage scenarios.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<String>> listUsageScenariosAsync(final ServiceCallback<List<String>> serviceCallback);

    /**
     * Gets the application available usage scenarios.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;String&gt; object
     */
    Observable<List<String>> listUsageScenariosAsync();

    /**
     * Gets the application available usage scenarios.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;String&gt; object
     */
    Observable<ServiceResponse<List<String>>> listUsageScenariosWithServiceResponseAsync();

    /**
     * Gets the supported application cultures.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;AvailableCulture&gt; object if successful.
     */
    List<AvailableCulture> listSupportedCultures();

    /**
     * Gets the supported application cultures.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<AvailableCulture>> listSupportedCulturesAsync(final ServiceCallback<List<AvailableCulture>> serviceCallback);

    /**
     * Gets the supported application cultures.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AvailableCulture&gt; object
     */
    Observable<List<AvailableCulture>> listSupportedCulturesAsync();

    /**
     * Gets the supported application cultures.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AvailableCulture&gt; object
     */
    Observable<ServiceResponse<List<AvailableCulture>>> listSupportedCulturesWithServiceResponseAsync();

    /**
     * Gets the query logs of the past month for the application.
     *
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    InputStream downloadQueryLogs(UUID appId);

    /**
     * Gets the query logs of the past month for the application.
     *
     * @param appId The application ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<InputStream> downloadQueryLogsAsync(UUID appId, final ServiceCallback<InputStream> serviceCallback);

    /**
     * Gets the query logs of the past month for the application.
     *
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    Observable<InputStream> downloadQueryLogsAsync(UUID appId);

    /**
     * Gets the query logs of the past month for the application.
     *
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    Observable<ServiceResponse<InputStream>> downloadQueryLogsWithServiceResponseAsync(UUID appId);

    /**
     * Gets the application info.
     *
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationInfoResponse object if successful.
     */
    ApplicationInfoResponse get(UUID appId);

    /**
     * Gets the application info.
     *
     * @param appId The application ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ApplicationInfoResponse> getAsync(UUID appId, final ServiceCallback<ApplicationInfoResponse> serviceCallback);

    /**
     * Gets the application info.
     *
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInfoResponse object
     */
    Observable<ApplicationInfoResponse> getAsync(UUID appId);

    /**
     * Gets the application info.
     *
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInfoResponse object
     */
    Observable<ServiceResponse<ApplicationInfoResponse>> getWithServiceResponseAsync(UUID appId);

    /**
     * Updates the name or description of the application.
     *
     * @param appId The application ID.
     * @param applicationUpdateObject A model containing Name and Description of the application.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateApps(UUID appId, ApplicationUpdateObject applicationUpdateObject);

    /**
     * Updates the name or description of the application.
     *
     * @param appId The application ID.
     * @param applicationUpdateObject A model containing Name and Description of the application.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<OperationStatus> updateAppsAsync(UUID appId, ApplicationUpdateObject applicationUpdateObject, final ServiceCallback<OperationStatus> serviceCallback);

    /**
     * Updates the name or description of the application.
     *
     * @param appId The application ID.
     * @param applicationUpdateObject A model containing Name and Description of the application.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateAppsAsync(UUID appId, ApplicationUpdateObject applicationUpdateObject);

    /**
     * Updates the name or description of the application.
     *
     * @param appId The application ID.
     * @param applicationUpdateObject A model containing Name and Description of the application.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<ServiceResponse<OperationStatus>> updateAppsWithServiceResponseAsync(UUID appId, ApplicationUpdateObject applicationUpdateObject);

    /**
     * Deletes an application.
     *
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus delete(UUID appId);

    /**
     * Deletes an application.
     *
     * @param appId The application ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<OperationStatus> deleteAsync(UUID appId, final ServiceCallback<OperationStatus> serviceCallback);

    /**
     * Deletes an application.
     *
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteAsync(UUID appId);

    /**
     * Deletes an application.
     *
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<ServiceResponse<OperationStatus>> deleteWithServiceResponseAsync(UUID appId);

    /**
     * Publishes a specific version of the application.
     *
     * @param appId The application ID.
     * @param applicationPublishObject The application publish object. The region is the target region that the application is published to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProductionOrStagingEndpointInfo object if successful.
     */
    ProductionOrStagingEndpointInfo publish(UUID appId, ApplicationPublishObject applicationPublishObject);

    /**
     * Publishes a specific version of the application.
     *
     * @param appId The application ID.
     * @param applicationPublishObject The application publish object. The region is the target region that the application is published to.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ProductionOrStagingEndpointInfo> publishAsync(UUID appId, ApplicationPublishObject applicationPublishObject, final ServiceCallback<ProductionOrStagingEndpointInfo> serviceCallback);

    /**
     * Publishes a specific version of the application.
     *
     * @param appId The application ID.
     * @param applicationPublishObject The application publish object. The region is the target region that the application is published to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProductionOrStagingEndpointInfo object
     */
    Observable<ProductionOrStagingEndpointInfo> publishAsync(UUID appId, ApplicationPublishObject applicationPublishObject);

    /**
     * Publishes a specific version of the application.
     *
     * @param appId The application ID.
     * @param applicationPublishObject The application publish object. The region is the target region that the application is published to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProductionOrStagingEndpointInfo object
     */
    Observable<ServiceResponse<ProductionOrStagingEndpointInfo>> publishWithServiceResponseAsync(UUID appId, ApplicationPublishObject applicationPublishObject);

    /**
     * Get the application settings.
     *
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationSettings object if successful.
     */
    ApplicationSettings getSettings(UUID appId);

    /**
     * Get the application settings.
     *
     * @param appId The application ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ApplicationSettings> getSettingsAsync(UUID appId, final ServiceCallback<ApplicationSettings> serviceCallback);

    /**
     * Get the application settings.
     *
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationSettings object
     */
    Observable<ApplicationSettings> getSettingsAsync(UUID appId);

    /**
     * Get the application settings.
     *
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationSettings object
     */
    Observable<ServiceResponse<ApplicationSettings>> getSettingsWithServiceResponseAsync(UUID appId);

    /**
     * Updates the application settings.
     *
     * @param appId The application ID.
     * @param updateSettingsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateSettings(UUID appId, UpdateSettingsOptionalParameter updateSettingsOptionalParameter);

    /**
     * Updates the application settings.
     *
     * @param appId The application ID.
     * @param updateSettingsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateSettingsAsync(UUID appId, UpdateSettingsOptionalParameter updateSettingsOptionalParameter);

    /**
     * Returns the available endpoint deployment regions and URLs.
     *
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Map&lt;String, String&gt; object if successful.
     */
    Map<String, String> listEndpoints(UUID appId);

    /**
     * Returns the available endpoint deployment regions and URLs.
     *
     * @param appId The application ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Map<String, String>> listEndpointsAsync(UUID appId, final ServiceCallback<Map<String, String>> serviceCallback);

    /**
     * Returns the available endpoint deployment regions and URLs.
     *
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Map&lt;String, String&gt; object
     */
    Observable<Map<String, String>> listEndpointsAsync(UUID appId);

    /**
     * Returns the available endpoint deployment regions and URLs.
     *
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Map&lt;String, String&gt; object
     */
    Observable<ServiceResponse<Map<String, String>>> listEndpointsWithServiceResponseAsync(UUID appId);

    /**
     * Gets all the available custom prebuilt domains for all cultures.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PrebuiltDomain&gt; object if successful.
     */
    List<PrebuiltDomain> listAvailableCustomPrebuiltDomains();

    /**
     * Gets all the available custom prebuilt domains for all cultures.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<PrebuiltDomain>> listAvailableCustomPrebuiltDomainsAsync(final ServiceCallback<List<PrebuiltDomain>> serviceCallback);

    /**
     * Gets all the available custom prebuilt domains for all cultures.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PrebuiltDomain&gt; object
     */
    Observable<List<PrebuiltDomain>> listAvailableCustomPrebuiltDomainsAsync();

    /**
     * Gets all the available custom prebuilt domains for all cultures.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PrebuiltDomain&gt; object
     */
    Observable<ServiceResponse<List<PrebuiltDomain>>> listAvailableCustomPrebuiltDomainsWithServiceResponseAsync();

    /**
     * Adds a prebuilt domain along with its models as a new application.
     *
     * @param prebuiltDomainCreateObject A prebuilt domain create object containing the name and culture of the domain.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID addCustomPrebuiltDomain(PrebuiltDomainCreateObject prebuiltDomainCreateObject);

    /**
     * Adds a prebuilt domain along with its models as a new application.
     *
     * @param prebuiltDomainCreateObject A prebuilt domain create object containing the name and culture of the domain.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<UUID> addCustomPrebuiltDomainAsync(PrebuiltDomainCreateObject prebuiltDomainCreateObject, final ServiceCallback<UUID> serviceCallback);

    /**
     * Adds a prebuilt domain along with its models as a new application.
     *
     * @param prebuiltDomainCreateObject A prebuilt domain create object containing the name and culture of the domain.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> addCustomPrebuiltDomainAsync(PrebuiltDomainCreateObject prebuiltDomainCreateObject);

    /**
     * Adds a prebuilt domain along with its models as a new application.
     *
     * @param prebuiltDomainCreateObject A prebuilt domain create object containing the name and culture of the domain.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<ServiceResponse<UUID>> addCustomPrebuiltDomainWithServiceResponseAsync(PrebuiltDomainCreateObject prebuiltDomainCreateObject);

    /**
     * Gets all the available custom prebuilt domains for a specific culture.
     *
     * @param culture Culture.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PrebuiltDomain&gt; object if successful.
     */
    List<PrebuiltDomain> listAvailableCustomPrebuiltDomainsForCulture(String culture);

    /**
     * Gets all the available custom prebuilt domains for a specific culture.
     *
     * @param culture Culture.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<PrebuiltDomain>> listAvailableCustomPrebuiltDomainsForCultureAsync(String culture, final ServiceCallback<List<PrebuiltDomain>> serviceCallback);

    /**
     * Gets all the available custom prebuilt domains for a specific culture.
     *
     * @param culture Culture.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PrebuiltDomain&gt; object
     */
    Observable<List<PrebuiltDomain>> listAvailableCustomPrebuiltDomainsForCultureAsync(String culture);

    /**
     * Gets all the available custom prebuilt domains for a specific culture.
     *
     * @param culture Culture.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PrebuiltDomain&gt; object
     */
    Observable<ServiceResponse<List<PrebuiltDomain>>> listAvailableCustomPrebuiltDomainsForCultureWithServiceResponseAsync(String culture);

}
