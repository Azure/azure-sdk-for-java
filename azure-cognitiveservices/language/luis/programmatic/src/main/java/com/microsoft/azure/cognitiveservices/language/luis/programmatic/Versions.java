/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.language.luis.programmatic;

import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.CloneOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ListVersionsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.UpdateVersionsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ImportVersionsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.AzureRegions;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.LuisApp;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.OperationStatus;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.VersionInfo;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Versions.
 */
public interface Versions {
    /**
     * Creates a new version using the current snapshot of the selected application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cloneOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String clone(UUID appId, String versionId, CloneOptionalParameter cloneOptionalParameter);

    /**
     * Creates a new version using the current snapshot of the selected application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cloneOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> cloneAsync(UUID appId, String versionId, CloneOptionalParameter cloneOptionalParameter);

    /**
     * Gets the application versions info.
     *
     * @param appId The application ID.
     * @param listVersionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;VersionInfo&gt; object if successful.
     */
    List<VersionInfo> listVersions(UUID appId, ListVersionsOptionalParameter listVersionsOptionalParameter);

    /**
     * Gets the application versions info.
     *
     * @param appId The application ID.
     * @param listVersionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;VersionInfo&gt; object
     */
    Observable<List<VersionInfo>> listVersionsAsync(UUID appId, ListVersionsOptionalParameter listVersionsOptionalParameter);

    /**
     * Gets the version info.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VersionInfo object if successful.
     */
    VersionInfo get(UUID appId, String versionId);

    /**
     * Gets the version info.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<VersionInfo> getAsync(UUID appId, String versionId, final ServiceCallback<VersionInfo> serviceCallback);

    /**
     * Gets the version info.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VersionInfo object
     */
    Observable<VersionInfo> getAsync(UUID appId, String versionId);

    /**
     * Gets the version info.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VersionInfo object
     */
    Observable<ServiceResponse<VersionInfo>> getWithServiceResponseAsync(UUID appId, String versionId);

    /**
     * Updates the name or description of the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param updateVersionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateVersions(UUID appId, String versionId, UpdateVersionsOptionalParameter updateVersionsOptionalParameter);

    /**
     * Updates the name or description of the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param updateVersionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateVersionsAsync(UUID appId, String versionId, UpdateVersionsOptionalParameter updateVersionsOptionalParameter);

    /**
     * Deletes an application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus delete(UUID appId, String versionId);

    /**
     * Deletes an application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<OperationStatus> deleteAsync(UUID appId, String versionId, final ServiceCallback<OperationStatus> serviceCallback);

    /**
     * Deletes an application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteAsync(UUID appId, String versionId);

    /**
     * Deletes an application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<ServiceResponse<OperationStatus>> deleteWithServiceResponseAsync(UUID appId, String versionId);

    /**
     * Exports a LUIS application to JSON format.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LuisApp object if successful.
     */
    LuisApp export(UUID appId, String versionId);

    /**
     * Exports a LUIS application to JSON format.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<LuisApp> exportAsync(UUID appId, String versionId, final ServiceCallback<LuisApp> serviceCallback);

    /**
     * Exports a LUIS application to JSON format.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LuisApp object
     */
    Observable<LuisApp> exportAsync(UUID appId, String versionId);

    /**
     * Exports a LUIS application to JSON format.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LuisApp object
     */
    Observable<ServiceResponse<LuisApp>> exportWithServiceResponseAsync(UUID appId, String versionId);

    /**
     * Imports a new version into a LUIS application.
     *
     * @param appId The application ID.
     * @param luisApp A LUIS application structure.
     * @param importVersionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String importVersions(UUID appId, LuisApp luisApp, ImportVersionsOptionalParameter importVersionsOptionalParameter);

    /**
     * Imports a new version into a LUIS application.
     *
     * @param appId The application ID.
     * @param luisApp A LUIS application structure.
     * @param importVersionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> importVersionsAsync(UUID appId, LuisApp luisApp, ImportVersionsOptionalParameter importVersionsOptionalParameter);

    /**
     * Deleted an unlabelled utterance.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param utterance The utterance text to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteUnlabelledUtterance(UUID appId, String versionId, String utterance);

    /**
     * Deleted an unlabelled utterance.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param utterance The utterance text to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<OperationStatus> deleteUnlabelledUtteranceAsync(UUID appId, String versionId, String utterance, final ServiceCallback<OperationStatus> serviceCallback);

    /**
     * Deleted an unlabelled utterance.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param utterance The utterance text to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteUnlabelledUtteranceAsync(UUID appId, String versionId, String utterance);

    /**
     * Deleted an unlabelled utterance.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param utterance The utterance text to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<ServiceResponse<OperationStatus>> deleteUnlabelledUtteranceWithServiceResponseAsync(UUID appId, String versionId, String utterance);

}
