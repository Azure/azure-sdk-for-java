/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.language.luis.programmatic;

import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ListPhraseListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ListFeaturesOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.UpdatePhraseListOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.AzureRegions;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.FeaturesResponseObject;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.OperationStatus;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.PhraselistCreateObject;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.PhraseListFeatureInfo;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.PhraselistUpdateObject;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Features.
 */
public interface Features {
    /**
     * Creates a new phraselist feature.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistCreateObject A Phraselist object containing Name, comma-separated Phrases and the isExchangeable boolean. Default value for isExchangeable is true.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the int object if successful.
     */
    int addPhraseList(UUID appId, String versionId, PhraselistCreateObject phraselistCreateObject);

    /**
     * Creates a new phraselist feature.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistCreateObject A Phraselist object containing Name, comma-separated Phrases and the isExchangeable boolean. Default value for isExchangeable is true.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Integer> addPhraseListAsync(UUID appId, String versionId, PhraselistCreateObject phraselistCreateObject, final ServiceCallback<Integer> serviceCallback);

    /**
     * Creates a new phraselist feature.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistCreateObject A Phraselist object containing Name, comma-separated Phrases and the isExchangeable boolean. Default value for isExchangeable is true.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    Observable<Integer> addPhraseListAsync(UUID appId, String versionId, PhraselistCreateObject phraselistCreateObject);

    /**
     * Creates a new phraselist feature.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistCreateObject A Phraselist object containing Name, comma-separated Phrases and the isExchangeable boolean. Default value for isExchangeable is true.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    Observable<ServiceResponse<Integer>> addPhraseListWithServiceResponseAsync(UUID appId, String versionId, PhraselistCreateObject phraselistCreateObject);

    /**
     * Gets all the phraselist features.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listPhraseListsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PhraseListFeatureInfo&gt; object if successful.
     */
    List<PhraseListFeatureInfo> listPhraseLists(UUID appId, String versionId, ListPhraseListsOptionalParameter listPhraseListsOptionalParameter);

    /**
     * Gets all the phraselist features.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listPhraseListsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PhraseListFeatureInfo&gt; object
     */
    Observable<List<PhraseListFeatureInfo>> listPhraseListsAsync(UUID appId, String versionId, ListPhraseListsOptionalParameter listPhraseListsOptionalParameter);

    /**
     * Gets all the extraction features for the specified application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listFeaturesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FeaturesResponseObject object if successful.
     */
    FeaturesResponseObject listFeatures(UUID appId, String versionId, ListFeaturesOptionalParameter listFeaturesOptionalParameter);

    /**
     * Gets all the extraction features for the specified application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listFeaturesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FeaturesResponseObject object
     */
    Observable<FeaturesResponseObject> listFeaturesAsync(UUID appId, String versionId, ListFeaturesOptionalParameter listFeaturesOptionalParameter);

    /**
     * Gets phraselist feature info.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistId The ID of the feature to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PhraseListFeatureInfo object if successful.
     */
    PhraseListFeatureInfo getPhraseList(UUID appId, String versionId, int phraselistId);

    /**
     * Gets phraselist feature info.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistId The ID of the feature to be retrieved.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PhraseListFeatureInfo> getPhraseListAsync(UUID appId, String versionId, int phraselistId, final ServiceCallback<PhraseListFeatureInfo> serviceCallback);

    /**
     * Gets phraselist feature info.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistId The ID of the feature to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PhraseListFeatureInfo object
     */
    Observable<PhraseListFeatureInfo> getPhraseListAsync(UUID appId, String versionId, int phraselistId);

    /**
     * Gets phraselist feature info.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistId The ID of the feature to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PhraseListFeatureInfo object
     */
    Observable<ServiceResponse<PhraseListFeatureInfo>> getPhraseListWithServiceResponseAsync(UUID appId, String versionId, int phraselistId);

    /**
     * Updates the phrases, the state and the name of the phraselist feature.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistId The ID of the feature to be updated.
     * @param updatePhraseListOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updatePhraseList(UUID appId, String versionId, int phraselistId, UpdatePhraseListOptionalParameter updatePhraseListOptionalParameter);

    /**
     * Updates the phrases, the state and the name of the phraselist feature.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistId The ID of the feature to be updated.
     * @param updatePhraseListOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updatePhraseListAsync(UUID appId, String versionId, int phraselistId, UpdatePhraseListOptionalParameter updatePhraseListOptionalParameter);

    /**
     * Deletes a phraselist feature.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistId The ID of the feature to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deletePhraseList(UUID appId, String versionId, int phraselistId);

    /**
     * Deletes a phraselist feature.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistId The ID of the feature to be deleted.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<OperationStatus> deletePhraseListAsync(UUID appId, String versionId, int phraselistId, final ServiceCallback<OperationStatus> serviceCallback);

    /**
     * Deletes a phraselist feature.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistId The ID of the feature to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deletePhraseListAsync(UUID appId, String versionId, int phraselistId);

    /**
     * Deletes a phraselist feature.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistId The ID of the feature to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<ServiceResponse<OperationStatus>> deletePhraseListWithServiceResponseAsync(UUID appId, String versionId, int phraselistId);

}
