/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.language.luis.programmatic;

import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ListExamplesOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.AzureRegions;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.BatchLabelExample;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ExampleLabelObject;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.LabeledUtterance;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.LabelExampleResponse;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.OperationStatus;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Examples.
 */
public interface Examples {
    /**
     * Adds a labeled example to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param exampleLabelObject An example label with the expected intent and entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LabelExampleResponse object if successful.
     */
    LabelExampleResponse add(UUID appId, String versionId, ExampleLabelObject exampleLabelObject);

    /**
     * Adds a labeled example to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param exampleLabelObject An example label with the expected intent and entities.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<LabelExampleResponse> addAsync(UUID appId, String versionId, ExampleLabelObject exampleLabelObject, final ServiceCallback<LabelExampleResponse> serviceCallback);

    /**
     * Adds a labeled example to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param exampleLabelObject An example label with the expected intent and entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LabelExampleResponse object
     */
    Observable<LabelExampleResponse> addAsync(UUID appId, String versionId, ExampleLabelObject exampleLabelObject);

    /**
     * Adds a labeled example to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param exampleLabelObject An example label with the expected intent and entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LabelExampleResponse object
     */
    Observable<ServiceResponse<LabelExampleResponse>> addWithServiceResponseAsync(UUID appId, String versionId, ExampleLabelObject exampleLabelObject);

    /**
     * Adds a batch of labeled examples to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param exampleLabelObjectArray Array of examples.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;BatchLabelExample&gt; object if successful.
     */
    List<BatchLabelExample> batch(UUID appId, String versionId, List<ExampleLabelObject> exampleLabelObjectArray);

    /**
     * Adds a batch of labeled examples to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param exampleLabelObjectArray Array of examples.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<BatchLabelExample>> batchAsync(UUID appId, String versionId, List<ExampleLabelObject> exampleLabelObjectArray, final ServiceCallback<List<BatchLabelExample>> serviceCallback);

    /**
     * Adds a batch of labeled examples to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param exampleLabelObjectArray Array of examples.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BatchLabelExample&gt; object
     */
    Observable<List<BatchLabelExample>> batchAsync(UUID appId, String versionId, List<ExampleLabelObject> exampleLabelObjectArray);

    /**
     * Adds a batch of labeled examples to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param exampleLabelObjectArray Array of examples.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BatchLabelExample&gt; object
     */
    Observable<ServiceResponse<List<BatchLabelExample>>> batchWithServiceResponseAsync(UUID appId, String versionId, List<ExampleLabelObject> exampleLabelObjectArray);

    /**
     * Returns examples to be reviewed.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listExamplesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;LabeledUtterance&gt; object if successful.
     */
    List<LabeledUtterance> listExamples(UUID appId, String versionId, ListExamplesOptionalParameter listExamplesOptionalParameter);

    /**
     * Returns examples to be reviewed.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listExamplesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LabeledUtterance&gt; object
     */
    Observable<List<LabeledUtterance>> listExamplesAsync(UUID appId, String versionId, ListExamplesOptionalParameter listExamplesOptionalParameter);

    /**
     * Deletes the labeled example with the specified ID.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param exampleId The example ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus delete(UUID appId, String versionId, int exampleId);

    /**
     * Deletes the labeled example with the specified ID.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param exampleId The example ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<OperationStatus> deleteAsync(UUID appId, String versionId, int exampleId, final ServiceCallback<OperationStatus> serviceCallback);

    /**
     * Deletes the labeled example with the specified ID.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param exampleId The example ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteAsync(UUID appId, String versionId, int exampleId);

    /**
     * Deletes the labeled example with the specified ID.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param exampleId The example ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<ServiceResponse<OperationStatus>> deleteWithServiceResponseAsync(UUID appId, String versionId, int exampleId);

}
