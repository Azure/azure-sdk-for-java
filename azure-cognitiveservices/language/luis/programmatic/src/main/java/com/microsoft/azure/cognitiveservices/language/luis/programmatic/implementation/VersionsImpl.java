/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.language.luis.programmatic.implementation;

import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.CloneOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ListVersionsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.UpdateVersionsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ImportVersionsOptionalParameter;
import retrofit2.Retrofit;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.Versions;
import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.AzureRegions;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.LuisApp;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.OperationStatus;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.TaskUpdateObject;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.VersionInfo;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Versions.
 */
public class VersionsImpl implements Versions {
    /** The Retrofit service to perform REST calls. */
    private VersionsService service;
    /** The service client containing this operation class. */
    private LUISProgrammaticAPIImpl client;

    /**
     * Initializes an instance of VersionsImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public VersionsImpl(Retrofit retrofit, LUISProgrammaticAPIImpl client) {
        this.service = retrofit.create(VersionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Versions to be
     * used by Retrofit to perform actually REST calls.
     */
    interface VersionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Versions clone" })
        @POST("apps/{appId}/versions/{versionId}/clone")
        Observable<Response<ResponseBody>> clone(@Path("appId") UUID appId, @Path("versionId") String versionId, @Header("accept-language") String acceptLanguage, @Body TaskUpdateObject versionCloneObject, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Versions listVersions" })
        @GET("apps/{appId}/versions")
        Observable<Response<ResponseBody>> listVersions(@Path("appId") UUID appId, @Query("skip") Integer skip, @Query("take") Integer take, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Versions get" })
        @GET("apps/{appId}/versions/{versionId}/")
        Observable<Response<ResponseBody>> get(@Path("appId") UUID appId, @Path("versionId") String versionId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Versions updateVersions" })
        @PUT("apps/{appId}/versions/{versionId}/")
        Observable<Response<ResponseBody>> updateVersions(@Path("appId") UUID appId, @Path("versionId") String versionId, @Header("accept-language") String acceptLanguage, @Body TaskUpdateObject versionUpdateObject, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Versions delete" })
        @HTTP(path = "apps/{appId}/versions/{versionId}/", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("appId") UUID appId, @Path("versionId") String versionId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Versions export" })
        @GET("apps/{appId}/versions/{versionId}/export")
        Observable<Response<ResponseBody>> export(@Path("appId") UUID appId, @Path("versionId") String versionId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Versions importVersions" })
        @POST("apps/{appId}/versions/import")
        Observable<Response<ResponseBody>> importVersions(@Path("appId") UUID appId, @Query("versionId") String versionId, @Body LuisApp luisApp, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Versions deleteUnlabelledUtterance" })
        @HTTP(path = "apps/{appId}/versions/{versionId}/suggest", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteUnlabelledUtterance(@Path("appId") UUID appId, @Path("versionId") String versionId, @Body String utterance, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

    }


    /**
     * Creates a new version using the current snapshot of the selected application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cloneOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    public String clone(UUID appId, String versionId, CloneOptionalParameter cloneOptionalParameter) {
        return cloneWithServiceResponseAsync(appId, versionId, cloneOptionalParameter).toBlocking().single().body();
    }

    /**
     * Creates a new version using the current snapshot of the selected application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cloneOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<String> cloneAsync(UUID appId, String versionId, CloneOptionalParameter cloneOptionalParameter, final ServiceCallback<String> serviceCallback) {
        return ServiceFuture.fromResponse(cloneWithServiceResponseAsync(appId, versionId, cloneOptionalParameter), serviceCallback);
    }

    /**
     * Creates a new version using the current snapshot of the selected application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cloneOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<String> cloneAsync(UUID appId, String versionId, CloneOptionalParameter cloneOptionalParameter) {
        return cloneWithServiceResponseAsync(appId, versionId, cloneOptionalParameter).map(new Func1<ServiceResponse<String>, String>() {
            @Override
            public String call(ServiceResponse<String> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new version using the current snapshot of the selected application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cloneOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<ServiceResponse<String>> cloneWithServiceResponseAsync(UUID appId, String versionId, CloneOptionalParameter cloneOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        final String version = cloneOptionalParameter != null ? cloneOptionalParameter.version() : null;
        TaskUpdateObject versionCloneObject = new TaskUpdateObject();
        versionCloneObject.withVersion(null);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return cloneWithServiceResponseAsync(appId, versionId, version);
    }

    /**
     * Creates a new version using the current snapshot of the selected application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param version The new version for the cloned model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<ServiceResponse<String>> cloneWithServiceResponseAsync(UUID appId, String versionId, String version) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        TaskUpdateObject versionCloneObject = null;
        if (version != null) {
            versionCloneObject = new TaskUpdateObject();
            versionCloneObject.withVersion(version);
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.clone(appId, versionId, this.client.acceptLanguage(), versionCloneObject, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<String>>>() {
                @Override
                public Observable<ServiceResponse<String>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<String> clientResponse = cloneDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<String> cloneDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<String, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<String>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Gets the application versions info.
     *
     * @param appId The application ID.
     * @param listVersionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;VersionInfo&gt; object if successful.
     */
    public List<VersionInfo> listVersions(UUID appId, ListVersionsOptionalParameter listVersionsOptionalParameter) {
        return listVersionsWithServiceResponseAsync(appId, listVersionsOptionalParameter).toBlocking().single().body();
    }

    /**
     * Gets the application versions info.
     *
     * @param appId The application ID.
     * @param listVersionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<VersionInfo>> listVersionsAsync(UUID appId, ListVersionsOptionalParameter listVersionsOptionalParameter, final ServiceCallback<List<VersionInfo>> serviceCallback) {
        return ServiceFuture.fromResponse(listVersionsWithServiceResponseAsync(appId, listVersionsOptionalParameter), serviceCallback);
    }

    /**
     * Gets the application versions info.
     *
     * @param appId The application ID.
     * @param listVersionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;VersionInfo&gt; object
     */
    public Observable<List<VersionInfo>> listVersionsAsync(UUID appId, ListVersionsOptionalParameter listVersionsOptionalParameter) {
        return listVersionsWithServiceResponseAsync(appId, listVersionsOptionalParameter).map(new Func1<ServiceResponse<List<VersionInfo>>, List<VersionInfo>>() {
            @Override
            public List<VersionInfo> call(ServiceResponse<List<VersionInfo>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the application versions info.
     *
     * @param appId The application ID.
     * @param listVersionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;VersionInfo&gt; object
     */
    public Observable<ServiceResponse<List<VersionInfo>>> listVersionsWithServiceResponseAsync(UUID appId, ListVersionsOptionalParameter listVersionsOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        final Integer skip = listVersionsOptionalParameter != null ? listVersionsOptionalParameter.skip() : null;
        final Integer take = listVersionsOptionalParameter != null ? listVersionsOptionalParameter.take() : null;
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return listVersionsWithServiceResponseAsync(appId, skip, take);
    }

    /**
     * Gets the application versions info.
     *
     * @param appId The application ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;VersionInfo&gt; object
     */
    public Observable<ServiceResponse<List<VersionInfo>>> listVersionsWithServiceResponseAsync(UUID appId, Integer skip, Integer take) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.listVersions(appId, skip, take, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<VersionInfo>>>>() {
                @Override
                public Observable<ServiceResponse<List<VersionInfo>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<VersionInfo>> clientResponse = listVersionsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<VersionInfo>> listVersionsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<VersionInfo>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<VersionInfo>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the version info.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VersionInfo object if successful.
     */
    public VersionInfo get(UUID appId, String versionId) {
        return getWithServiceResponseAsync(appId, versionId).toBlocking().single().body();
    }

    /**
     * Gets the version info.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VersionInfo> getAsync(UUID appId, String versionId, final ServiceCallback<VersionInfo> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(appId, versionId), serviceCallback);
    }

    /**
     * Gets the version info.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VersionInfo object
     */
    public Observable<VersionInfo> getAsync(UUID appId, String versionId) {
        return getWithServiceResponseAsync(appId, versionId).map(new Func1<ServiceResponse<VersionInfo>, VersionInfo>() {
            @Override
            public VersionInfo call(ServiceResponse<VersionInfo> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the version info.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VersionInfo object
     */
    public Observable<ServiceResponse<VersionInfo>> getWithServiceResponseAsync(UUID appId, String versionId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.get(appId, versionId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<VersionInfo>>>() {
                @Override
                public Observable<ServiceResponse<VersionInfo>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<VersionInfo> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<VersionInfo> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<VersionInfo, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<VersionInfo>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Updates the name or description of the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param updateVersionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus updateVersions(UUID appId, String versionId, UpdateVersionsOptionalParameter updateVersionsOptionalParameter) {
        return updateVersionsWithServiceResponseAsync(appId, versionId, updateVersionsOptionalParameter).toBlocking().single().body();
    }

    /**
     * Updates the name or description of the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param updateVersionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> updateVersionsAsync(UUID appId, String versionId, UpdateVersionsOptionalParameter updateVersionsOptionalParameter, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(updateVersionsWithServiceResponseAsync(appId, versionId, updateVersionsOptionalParameter), serviceCallback);
    }

    /**
     * Updates the name or description of the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param updateVersionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> updateVersionsAsync(UUID appId, String versionId, UpdateVersionsOptionalParameter updateVersionsOptionalParameter) {
        return updateVersionsWithServiceResponseAsync(appId, versionId, updateVersionsOptionalParameter).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the name or description of the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param updateVersionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> updateVersionsWithServiceResponseAsync(UUID appId, String versionId, UpdateVersionsOptionalParameter updateVersionsOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        final String version = updateVersionsOptionalParameter != null ? updateVersionsOptionalParameter.version() : null;
        TaskUpdateObject versionUpdateObject = new TaskUpdateObject();
        versionUpdateObject.withVersion(null);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return updateVersionsWithServiceResponseAsync(appId, versionId, version);
    }

    /**
     * Updates the name or description of the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param version The new version for the cloned model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> updateVersionsWithServiceResponseAsync(UUID appId, String versionId, String version) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        TaskUpdateObject versionUpdateObject = new TaskUpdateObject();
        versionUpdateObject.withVersion(version);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.updateVersions(appId, versionId, this.client.acceptLanguage(), versionUpdateObject, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = updateVersionsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> updateVersionsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes an application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus delete(UUID appId, String versionId) {
        return deleteWithServiceResponseAsync(appId, versionId).toBlocking().single().body();
    }

    /**
     * Deletes an application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> deleteAsync(UUID appId, String versionId, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(appId, versionId), serviceCallback);
    }

    /**
     * Deletes an application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> deleteAsync(UUID appId, String versionId) {
        return deleteWithServiceResponseAsync(appId, versionId).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> deleteWithServiceResponseAsync(UUID appId, String versionId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.delete(appId, versionId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Exports a LUIS application to JSON format.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LuisApp object if successful.
     */
    public LuisApp export(UUID appId, String versionId) {
        return exportWithServiceResponseAsync(appId, versionId).toBlocking().single().body();
    }

    /**
     * Exports a LUIS application to JSON format.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LuisApp> exportAsync(UUID appId, String versionId, final ServiceCallback<LuisApp> serviceCallback) {
        return ServiceFuture.fromResponse(exportWithServiceResponseAsync(appId, versionId), serviceCallback);
    }

    /**
     * Exports a LUIS application to JSON format.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LuisApp object
     */
    public Observable<LuisApp> exportAsync(UUID appId, String versionId) {
        return exportWithServiceResponseAsync(appId, versionId).map(new Func1<ServiceResponse<LuisApp>, LuisApp>() {
            @Override
            public LuisApp call(ServiceResponse<LuisApp> response) {
                return response.body();
            }
        });
    }

    /**
     * Exports a LUIS application to JSON format.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LuisApp object
     */
    public Observable<ServiceResponse<LuisApp>> exportWithServiceResponseAsync(UUID appId, String versionId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.export(appId, versionId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LuisApp>>>() {
                @Override
                public Observable<ServiceResponse<LuisApp>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LuisApp> clientResponse = exportDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LuisApp> exportDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<LuisApp, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<LuisApp>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Imports a new version into a LUIS application.
     *
     * @param appId The application ID.
     * @param luisApp A LUIS application structure.
     * @param importVersionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    public String importVersions(UUID appId, LuisApp luisApp, ImportVersionsOptionalParameter importVersionsOptionalParameter) {
        return importVersionsWithServiceResponseAsync(appId, luisApp, importVersionsOptionalParameter).toBlocking().single().body();
    }

    /**
     * Imports a new version into a LUIS application.
     *
     * @param appId The application ID.
     * @param luisApp A LUIS application structure.
     * @param importVersionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<String> importVersionsAsync(UUID appId, LuisApp luisApp, ImportVersionsOptionalParameter importVersionsOptionalParameter, final ServiceCallback<String> serviceCallback) {
        return ServiceFuture.fromResponse(importVersionsWithServiceResponseAsync(appId, luisApp, importVersionsOptionalParameter), serviceCallback);
    }

    /**
     * Imports a new version into a LUIS application.
     *
     * @param appId The application ID.
     * @param luisApp A LUIS application structure.
     * @param importVersionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<String> importVersionsAsync(UUID appId, LuisApp luisApp, ImportVersionsOptionalParameter importVersionsOptionalParameter) {
        return importVersionsWithServiceResponseAsync(appId, luisApp, importVersionsOptionalParameter).map(new Func1<ServiceResponse<String>, String>() {
            @Override
            public String call(ServiceResponse<String> response) {
                return response.body();
            }
        });
    }

    /**
     * Imports a new version into a LUIS application.
     *
     * @param appId The application ID.
     * @param luisApp A LUIS application structure.
     * @param importVersionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<ServiceResponse<String>> importVersionsWithServiceResponseAsync(UUID appId, LuisApp luisApp, ImportVersionsOptionalParameter importVersionsOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (luisApp == null) {
            throw new IllegalArgumentException("Parameter luisApp is required and cannot be null.");
        }
        Validator.validate(luisApp);
        final String versionId = importVersionsOptionalParameter != null ? importVersionsOptionalParameter.versionId() : null;
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return importVersionsWithServiceResponseAsync(appId, luisApp, versionId);
    }

    /**
     * Imports a new version into a LUIS application.
     *
     * @param appId The application ID.
     * @param luisApp A LUIS application structure.
     * @param versionId The new versionId to import. If not specified, the versionId will be read from the imported object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<ServiceResponse<String>> importVersionsWithServiceResponseAsync(UUID appId, LuisApp luisApp, String versionId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (luisApp == null) {
            throw new IllegalArgumentException("Parameter luisApp is required and cannot be null.");
        }
        Validator.validate(luisApp);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.importVersions(appId, versionId, luisApp, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<String>>>() {
                @Override
                public Observable<ServiceResponse<String>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<String> clientResponse = importVersionsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<String> importVersionsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<String, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<String>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deleted an unlabelled utterance.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param utterance The utterance text to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus deleteUnlabelledUtterance(UUID appId, String versionId, String utterance) {
        return deleteUnlabelledUtteranceWithServiceResponseAsync(appId, versionId, utterance).toBlocking().single().body();
    }

    /**
     * Deleted an unlabelled utterance.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param utterance The utterance text to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> deleteUnlabelledUtteranceAsync(UUID appId, String versionId, String utterance, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(deleteUnlabelledUtteranceWithServiceResponseAsync(appId, versionId, utterance), serviceCallback);
    }

    /**
     * Deleted an unlabelled utterance.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param utterance The utterance text to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> deleteUnlabelledUtteranceAsync(UUID appId, String versionId, String utterance) {
        return deleteUnlabelledUtteranceWithServiceResponseAsync(appId, versionId, utterance).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Deleted an unlabelled utterance.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param utterance The utterance text to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> deleteUnlabelledUtteranceWithServiceResponseAsync(UUID appId, String versionId, String utterance) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (utterance == null) {
            throw new IllegalArgumentException("Parameter utterance is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.deleteUnlabelledUtterance(appId, versionId, utterance, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = deleteUnlabelledUtteranceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> deleteUnlabelledUtteranceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
