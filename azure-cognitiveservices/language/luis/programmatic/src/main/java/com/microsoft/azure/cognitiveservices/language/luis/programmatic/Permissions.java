/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.language.luis.programmatic;

import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.AddOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.DeleteOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.UpdatePermissionsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.AzureRegions;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.OperationStatus;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.UserAccessList;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Permissions.
 */
public interface Permissions {
    /**
     * Gets the list of user emails that have permissions to access your application.
     *
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UserAccessList object if successful.
     */
    UserAccessList listPermissions(UUID appId);

    /**
     * Gets the list of user emails that have permissions to access your application.
     *
     * @param appId The application ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<UserAccessList> listPermissionsAsync(UUID appId, final ServiceCallback<UserAccessList> serviceCallback);

    /**
     * Gets the list of user emails that have permissions to access your application.
     *
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserAccessList object
     */
    Observable<UserAccessList> listPermissionsAsync(UUID appId);

    /**
     * Gets the list of user emails that have permissions to access your application.
     *
     * @param appId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserAccessList object
     */
    Observable<ServiceResponse<UserAccessList>> listPermissionsWithServiceResponseAsync(UUID appId);

    /**
     * Adds a user to the allowed list of users to access this LUIS application. Users are added using their email
     *  address.
     *
     * @param appId The application ID.
     * @param addOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus add(UUID appId, AddOptionalParameter addOptionalParameter);

    /**
     * Adds a user to the allowed list of users to access this LUIS application. Users are added using their email
     *  address.
     *
     * @param appId The application ID.
     * @param addOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> addAsync(UUID appId, AddOptionalParameter addOptionalParameter);

    /**
     * Removes a user from the allowed list of users to access this LUIS application. Users are removed using their
     *  email address.
     *
     * @param appId The application ID.
     * @param deleteOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus delete(UUID appId, DeleteOptionalParameter deleteOptionalParameter);

    /**
     * Removes a user from the allowed list of users to access this LUIS application. Users are removed using their
     *  email address.
     *
     * @param appId The application ID.
     * @param deleteOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteAsync(UUID appId, DeleteOptionalParameter deleteOptionalParameter);

    /**
     * Replaces the current users access list with the one sent in the body. If an empty list is sent, all access
     *  to other users will be removed.
     *
     * @param appId The application ID.
     * @param updatePermissionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updatePermissions(UUID appId, UpdatePermissionsOptionalParameter updatePermissionsOptionalParameter);

    /**
     * Replaces the current users access list with the one sent in the body. If an empty list is sent, all access
     *  to other users will be removed.
     *
     * @param appId The application ID.
     * @param updatePermissionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updatePermissionsAsync(UUID appId, UpdatePermissionsOptionalParameter updatePermissionsOptionalParameter);

}
