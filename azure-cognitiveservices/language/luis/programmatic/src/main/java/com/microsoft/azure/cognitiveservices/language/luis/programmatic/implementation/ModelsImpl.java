/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.language.luis.programmatic.implementation;

import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.AddIntentOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ListIntentsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.AddEntityOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ListEntitiesOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ListHierarchicalEntitiesOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ListCompositeEntitiesOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ListClosedListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ListPrebuiltsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ListModelsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.UpdateIntentOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.DeleteIntentOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.UpdateEntityOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.PatchClosedListOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.GetIntentSuggestionsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.GetEntitySuggestionsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.AddCustomPrebuiltDomainOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.UpdateHierarchicalEntityChildOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.AddHierarchicalEntityChildOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.AddCompositeEntityChildOptionalParameter;
import retrofit2.Retrofit;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models;
import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.AvailablePrebuiltEntityModel;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.AzureRegions;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ClosedListEntityExtractor;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ClosedListModelCreateObject;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ClosedListModelPatchObject;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ClosedListModelUpdateObject;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.CompositeChildModelCreateObject;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.CompositeEntityExtractor;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.CompositeEntityModel;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.CustomPrebuiltModel;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.EntitiesSuggestionExample;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.EntityExtractor;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.HierarchicalChildEntity;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.HierarchicalChildModelCreateObject;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.HierarchicalChildModelUpdateObject;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.HierarchicalEntityExtractor;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.HierarchicalEntityModel;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.IntentClassifier;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.IntentsSuggestionExample;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ModelCreateObject;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ModelInfoResponse;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.ModelUpdateObject;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.OperationStatus;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.PrebuiltDomainCreateBaseObject;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.PrebuiltDomainModelCreateObject;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.PrebuiltEntityExtractor;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.WordListBaseUpdateObject;
import com.microsoft.azure.cognitiveservices.language.luis.programmatic.models.WordListObject;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Models.
 */
public class ModelsImpl implements Models {
    /** The Retrofit service to perform REST calls. */
    private ModelsService service;
    /** The service client containing this operation class. */
    private LUISProgrammaticAPIImpl client;

    /**
     * Initializes an instance of ModelsImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ModelsImpl(Retrofit retrofit, LUISProgrammaticAPIImpl client) {
        this.service = retrofit.create(ModelsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Models to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ModelsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models addIntent" })
        @POST("apps/{appId}/versions/{versionId}/intents")
        Observable<Response<ResponseBody>> addIntent(@Path("appId") UUID appId, @Path("versionId") String versionId, @Header("accept-language") String acceptLanguage, @Body ModelCreateObject intentCreateObject, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models listIntents" })
        @GET("apps/{appId}/versions/{versionId}/intents")
        Observable<Response<ResponseBody>> listIntents(@Path("appId") UUID appId, @Path("versionId") String versionId, @Query("skip") Integer skip, @Query("take") Integer take, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models addEntity" })
        @POST("apps/{appId}/versions/{versionId}/entities")
        Observable<Response<ResponseBody>> addEntity(@Path("appId") UUID appId, @Path("versionId") String versionId, @Header("accept-language") String acceptLanguage, @Body ModelCreateObject modelCreateObject, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models listEntities" })
        @GET("apps/{appId}/versions/{versionId}/entities")
        Observable<Response<ResponseBody>> listEntities(@Path("appId") UUID appId, @Path("versionId") String versionId, @Query("skip") Integer skip, @Query("take") Integer take, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models addHierarchicalEntity" })
        @POST("apps/{appId}/versions/{versionId}/hierarchicalentities")
        Observable<Response<ResponseBody>> addHierarchicalEntity(@Path("appId") UUID appId, @Path("versionId") String versionId, @Body HierarchicalEntityModel hierarchicalModelCreateObject, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models listHierarchicalEntities" })
        @GET("apps/{appId}/versions/{versionId}/hierarchicalentities")
        Observable<Response<ResponseBody>> listHierarchicalEntities(@Path("appId") UUID appId, @Path("versionId") String versionId, @Query("skip") Integer skip, @Query("take") Integer take, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models addCompositeEntity" })
        @POST("apps/{appId}/versions/{versionId}/compositeentities")
        Observable<Response<ResponseBody>> addCompositeEntity(@Path("appId") UUID appId, @Path("versionId") String versionId, @Body CompositeEntityModel compositeModelCreateObject, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models listCompositeEntities" })
        @GET("apps/{appId}/versions/{versionId}/compositeentities")
        Observable<Response<ResponseBody>> listCompositeEntities(@Path("appId") UUID appId, @Path("versionId") String versionId, @Query("skip") Integer skip, @Query("take") Integer take, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models listClosedLists" })
        @GET("apps/{appId}/versions/{versionId}/closedlists")
        Observable<Response<ResponseBody>> listClosedLists(@Path("appId") UUID appId, @Path("versionId") String versionId, @Query("skip") Integer skip, @Query("take") Integer take, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models addClosedList" })
        @POST("apps/{appId}/versions/{versionId}/closedlists")
        Observable<Response<ResponseBody>> addClosedList(@Path("appId") UUID appId, @Path("versionId") String versionId, @Body ClosedListModelCreateObject closedListModelCreateObject, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models addPrebuilt" })
        @POST("apps/{appId}/versions/{versionId}/prebuilts")
        Observable<Response<ResponseBody>> addPrebuilt(@Path("appId") UUID appId, @Path("versionId") String versionId, @Body List<String> prebuiltExtractorNames, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models listPrebuilts" })
        @GET("apps/{appId}/versions/{versionId}/prebuilts")
        Observable<Response<ResponseBody>> listPrebuilts(@Path("appId") UUID appId, @Path("versionId") String versionId, @Query("skip") Integer skip, @Query("take") Integer take, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models listPrebuiltEntities" })
        @GET("apps/{appId}/versions/{versionId}/listprebuilts")
        Observable<Response<ResponseBody>> listPrebuiltEntities(@Path("appId") UUID appId, @Path("versionId") String versionId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models listModels" })
        @GET("apps/{appId}/versions/{versionId}/models")
        Observable<Response<ResponseBody>> listModels(@Path("appId") UUID appId, @Path("versionId") String versionId, @Query("skip") Integer skip, @Query("take") Integer take, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models getIntent" })
        @GET("apps/{appId}/versions/{versionId}/intents/{intentId}")
        Observable<Response<ResponseBody>> getIntent(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("intentId") UUID intentId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models updateIntent" })
        @PUT("apps/{appId}/versions/{versionId}/intents/{intentId}")
        Observable<Response<ResponseBody>> updateIntent(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("intentId") UUID intentId, @Header("accept-language") String acceptLanguage, @Body ModelUpdateObject modelUpdateObject, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models deleteIntent" })
        @HTTP(path = "apps/{appId}/versions/{versionId}/intents/{intentId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteIntent(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("intentId") UUID intentId, @Query("deleteUtterances") Boolean deleteUtterances, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models getEntity" })
        @GET("apps/{appId}/versions/{versionId}/entities/{entityId}")
        Observable<Response<ResponseBody>> getEntity(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("entityId") UUID entityId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models updateEntity" })
        @PUT("apps/{appId}/versions/{versionId}/entities/{entityId}")
        Observable<Response<ResponseBody>> updateEntity(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("entityId") UUID entityId, @Header("accept-language") String acceptLanguage, @Body ModelUpdateObject modelUpdateObject, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models deleteEntity" })
        @HTTP(path = "apps/{appId}/versions/{versionId}/entities/{entityId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteEntity(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("entityId") UUID entityId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models getHierarchicalEntity" })
        @GET("apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}")
        Observable<Response<ResponseBody>> getHierarchicalEntity(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("hEntityId") UUID hEntityId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models updateHierarchicalEntity" })
        @PUT("apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}")
        Observable<Response<ResponseBody>> updateHierarchicalEntity(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("hEntityId") UUID hEntityId, @Body HierarchicalEntityModel hierarchicalModelUpdateObject, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models deleteHierarchicalEntity" })
        @HTTP(path = "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteHierarchicalEntity(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("hEntityId") UUID hEntityId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models getCompositeEntity" })
        @GET("apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}")
        Observable<Response<ResponseBody>> getCompositeEntity(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("cEntityId") UUID cEntityId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models updateCompositeEntity" })
        @PUT("apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}")
        Observable<Response<ResponseBody>> updateCompositeEntity(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("cEntityId") UUID cEntityId, @Body CompositeEntityModel compositeModelUpdateObject, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models deleteCompositeEntity" })
        @HTTP(path = "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteCompositeEntity(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("cEntityId") UUID cEntityId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models getClosedList" })
        @GET("apps/{appId}/versions/{versionId}/closedlists/{clEntityId}")
        Observable<Response<ResponseBody>> getClosedList(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("clEntityId") UUID clEntityId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models updateClosedList" })
        @PUT("apps/{appId}/versions/{versionId}/closedlists/{clEntityId}")
        Observable<Response<ResponseBody>> updateClosedList(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("clEntityId") UUID clEntityId, @Body ClosedListModelUpdateObject closedListModelUpdateObject, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models patchClosedList" })
        @PATCH("apps/{appId}/versions/{versionId}/closedlists/{clEntityId}")
        Observable<Response<ResponseBody>> patchClosedList(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("clEntityId") UUID clEntityId, @Header("accept-language") String acceptLanguage, @Body ClosedListModelPatchObject closedListModelPatchObject, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models deleteClosedList" })
        @HTTP(path = "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteClosedList(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("clEntityId") UUID clEntityId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models getPrebuilt" })
        @GET("apps/{appId}/versions/{versionId}/prebuilts/{prebuiltId}")
        Observable<Response<ResponseBody>> getPrebuilt(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("prebuiltId") UUID prebuiltId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models deletePrebuilt" })
        @HTTP(path = "apps/{appId}/versions/{versionId}/prebuilts/{prebuiltId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deletePrebuilt(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("prebuiltId") UUID prebuiltId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models deleteSubList" })
        @HTTP(path = "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists/{subListId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteSubList(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("clEntityId") UUID clEntityId, @Path("subListId") int subListId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models updateSubList" })
        @PUT("apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists/{subListId}")
        Observable<Response<ResponseBody>> updateSubList(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("clEntityId") UUID clEntityId, @Path("subListId") int subListId, @Body WordListBaseUpdateObject wordListBaseUpdateObject, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models getIntentSuggestions" })
        @GET("apps/{appId}/versions/{versionId}/intents/{intentId}/suggest")
        Observable<Response<ResponseBody>> getIntentSuggestions(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("intentId") UUID intentId, @Query("take") Integer take, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models getEntitySuggestions" })
        @GET("apps/{appId}/versions/{versionId}/entities/{entityId}/suggest")
        Observable<Response<ResponseBody>> getEntitySuggestions(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("entityId") UUID entityId, @Query("take") Integer take, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models addSubList" })
        @POST("apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists")
        Observable<Response<ResponseBody>> addSubList(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("clEntityId") UUID clEntityId, @Body WordListObject wordListCreateObject, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models addCustomPrebuiltDomain" })
        @POST("apps/{appId}/versions/{versionId}/customprebuiltdomains")
        Observable<Response<ResponseBody>> addCustomPrebuiltDomain(@Path("appId") UUID appId, @Path("versionId") String versionId, @Header("accept-language") String acceptLanguage, @Body PrebuiltDomainCreateBaseObject prebuiltDomainObject, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models addCustomPrebuiltIntent" })
        @POST("apps/{appId}/versions/{versionId}/customprebuiltintents")
        Observable<Response<ResponseBody>> addCustomPrebuiltIntent(@Path("appId") UUID appId, @Path("versionId") String versionId, @Body PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models listCustomPrebuiltIntents" })
        @GET("apps/{appId}/versions/{versionId}/customprebuiltintents")
        Observable<Response<ResponseBody>> listCustomPrebuiltIntents(@Path("appId") UUID appId, @Path("versionId") String versionId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models addCustomPrebuiltEntity" })
        @POST("apps/{appId}/versions/{versionId}/customprebuiltentities")
        Observable<Response<ResponseBody>> addCustomPrebuiltEntity(@Path("appId") UUID appId, @Path("versionId") String versionId, @Body PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models listCustomPrebuiltEntities" })
        @GET("apps/{appId}/versions/{versionId}/customprebuiltentities")
        Observable<Response<ResponseBody>> listCustomPrebuiltEntities(@Path("appId") UUID appId, @Path("versionId") String versionId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models listCustomPrebuiltModels" })
        @GET("apps/{appId}/versions/{versionId}/customprebuiltmodels")
        Observable<Response<ResponseBody>> listCustomPrebuiltModels(@Path("appId") UUID appId, @Path("versionId") String versionId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models deleteCustomPrebuiltDomain" })
        @HTTP(path = "apps/{appId}/versions/{versionId}/customprebuiltdomains/{domainName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteCustomPrebuiltDomain(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("domainName") String domainName, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models getHierarchicalEntityChild" })
        @GET("apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}")
        Observable<Response<ResponseBody>> getHierarchicalEntityChild(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("hEntityId") UUID hEntityId, @Path("hChildId") UUID hChildId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models updateHierarchicalEntityChild" })
        @PUT("apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}")
        Observable<Response<ResponseBody>> updateHierarchicalEntityChild(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("hEntityId") UUID hEntityId, @Path("hChildId") UUID hChildId, @Header("accept-language") String acceptLanguage, @Body HierarchicalChildModelUpdateObject hierarchicalChildModelUpdateObject, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models deleteHierarchicalEntityChild" })
        @HTTP(path = "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteHierarchicalEntityChild(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("hEntityId") UUID hEntityId, @Path("hChildId") UUID hChildId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models addHierarchicalEntityChild" })
        @POST("apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children")
        Observable<Response<ResponseBody>> addHierarchicalEntityChild(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("hEntityId") UUID hEntityId, @Header("accept-language") String acceptLanguage, @Body HierarchicalChildModelCreateObject hierarchicalChildModelCreateObject, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models addCompositeEntityChild" })
        @POST("apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/children")
        Observable<Response<ResponseBody>> addCompositeEntityChild(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("cEntityId") UUID cEntityId, @Header("accept-language") String acceptLanguage, @Body CompositeChildModelCreateObject compositeChildModelCreateObject, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.language.luis.programmatic.Models deleteCompositeEntityChild" })
        @HTTP(path = "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/children/{cChildId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteCompositeEntityChild(@Path("appId") UUID appId, @Path("versionId") String versionId, @Path("cEntityId") UUID cEntityId, @Path("cChildId") UUID cChildId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

    }


    /**
     * Adds an intent classifier to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    public UUID addIntent(UUID appId, String versionId, AddIntentOptionalParameter addIntentOptionalParameter) {
        return addIntentWithServiceResponseAsync(appId, versionId, addIntentOptionalParameter).toBlocking().single().body();
    }

    /**
     * Adds an intent classifier to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UUID> addIntentAsync(UUID appId, String versionId, AddIntentOptionalParameter addIntentOptionalParameter, final ServiceCallback<UUID> serviceCallback) {
        return ServiceFuture.fromResponse(addIntentWithServiceResponseAsync(appId, versionId, addIntentOptionalParameter), serviceCallback);
    }

    /**
     * Adds an intent classifier to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<UUID> addIntentAsync(UUID appId, String versionId, AddIntentOptionalParameter addIntentOptionalParameter) {
        return addIntentWithServiceResponseAsync(appId, versionId, addIntentOptionalParameter).map(new Func1<ServiceResponse<UUID>, UUID>() {
            @Override
            public UUID call(ServiceResponse<UUID> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds an intent classifier to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<ServiceResponse<UUID>> addIntentWithServiceResponseAsync(UUID appId, String versionId, AddIntentOptionalParameter addIntentOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        final String name = addIntentOptionalParameter != null ? addIntentOptionalParameter.name() : null;
        ModelCreateObject intentCreateObject = new ModelCreateObject();
        intentCreateObject.withName(null);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return addIntentWithServiceResponseAsync(appId, versionId, name);
    }

    /**
     * Adds an intent classifier to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param name Name of the new entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<ServiceResponse<UUID>> addIntentWithServiceResponseAsync(UUID appId, String versionId, String name) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        ModelCreateObject intentCreateObject = new ModelCreateObject();
        intentCreateObject.withName(name);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.addIntent(appId, versionId, this.client.acceptLanguage(), intentCreateObject, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UUID>>>() {
                @Override
                public Observable<ServiceResponse<UUID>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UUID> clientResponse = addIntentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UUID> addIntentDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UUID, CloudException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<UUID>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }


    /**
     * Gets information about the intent models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listIntentsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;IntentClassifier&gt; object if successful.
     */
    public List<IntentClassifier> listIntents(UUID appId, String versionId, ListIntentsOptionalParameter listIntentsOptionalParameter) {
        return listIntentsWithServiceResponseAsync(appId, versionId, listIntentsOptionalParameter).toBlocking().single().body();
    }

    /**
     * Gets information about the intent models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listIntentsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IntentClassifier>> listIntentsAsync(UUID appId, String versionId, ListIntentsOptionalParameter listIntentsOptionalParameter, final ServiceCallback<List<IntentClassifier>> serviceCallback) {
        return ServiceFuture.fromResponse(listIntentsWithServiceResponseAsync(appId, versionId, listIntentsOptionalParameter), serviceCallback);
    }

    /**
     * Gets information about the intent models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listIntentsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;IntentClassifier&gt; object
     */
    public Observable<List<IntentClassifier>> listIntentsAsync(UUID appId, String versionId, ListIntentsOptionalParameter listIntentsOptionalParameter) {
        return listIntentsWithServiceResponseAsync(appId, versionId, listIntentsOptionalParameter).map(new Func1<ServiceResponse<List<IntentClassifier>>, List<IntentClassifier>>() {
            @Override
            public List<IntentClassifier> call(ServiceResponse<List<IntentClassifier>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about the intent models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listIntentsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;IntentClassifier&gt; object
     */
    public Observable<ServiceResponse<List<IntentClassifier>>> listIntentsWithServiceResponseAsync(UUID appId, String versionId, ListIntentsOptionalParameter listIntentsOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        final Integer skip = listIntentsOptionalParameter != null ? listIntentsOptionalParameter.skip() : null;
        final Integer take = listIntentsOptionalParameter != null ? listIntentsOptionalParameter.take() : null;
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return listIntentsWithServiceResponseAsync(appId, versionId, skip, take);
    }

    /**
     * Gets information about the intent models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;IntentClassifier&gt; object
     */
    public Observable<ServiceResponse<List<IntentClassifier>>> listIntentsWithServiceResponseAsync(UUID appId, String versionId, Integer skip, Integer take) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.listIntents(appId, versionId, skip, take, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<IntentClassifier>>>>() {
                @Override
                public Observable<ServiceResponse<List<IntentClassifier>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<IntentClassifier>> clientResponse = listIntentsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<IntentClassifier>> listIntentsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<IntentClassifier>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<IntentClassifier>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Adds an entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addEntityOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    public UUID addEntity(UUID appId, String versionId, AddEntityOptionalParameter addEntityOptionalParameter) {
        return addEntityWithServiceResponseAsync(appId, versionId, addEntityOptionalParameter).toBlocking().single().body();
    }

    /**
     * Adds an entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addEntityOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UUID> addEntityAsync(UUID appId, String versionId, AddEntityOptionalParameter addEntityOptionalParameter, final ServiceCallback<UUID> serviceCallback) {
        return ServiceFuture.fromResponse(addEntityWithServiceResponseAsync(appId, versionId, addEntityOptionalParameter), serviceCallback);
    }

    /**
     * Adds an entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addEntityOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<UUID> addEntityAsync(UUID appId, String versionId, AddEntityOptionalParameter addEntityOptionalParameter) {
        return addEntityWithServiceResponseAsync(appId, versionId, addEntityOptionalParameter).map(new Func1<ServiceResponse<UUID>, UUID>() {
            @Override
            public UUID call(ServiceResponse<UUID> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds an entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addEntityOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<ServiceResponse<UUID>> addEntityWithServiceResponseAsync(UUID appId, String versionId, AddEntityOptionalParameter addEntityOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        final String name = addEntityOptionalParameter != null ? addEntityOptionalParameter.name() : null;
        ModelCreateObject modelCreateObject = new ModelCreateObject();
        modelCreateObject.withName(null);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return addEntityWithServiceResponseAsync(appId, versionId, name);
    }

    /**
     * Adds an entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param name Name of the new entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<ServiceResponse<UUID>> addEntityWithServiceResponseAsync(UUID appId, String versionId, String name) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        ModelCreateObject modelCreateObject = new ModelCreateObject();
        modelCreateObject.withName(name);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.addEntity(appId, versionId, this.client.acceptLanguage(), modelCreateObject, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UUID>>>() {
                @Override
                public Observable<ServiceResponse<UUID>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UUID> clientResponse = addEntityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UUID> addEntityDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UUID, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<UUID>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Gets information about the entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityExtractor&gt; object if successful.
     */
    public List<EntityExtractor> listEntities(UUID appId, String versionId, ListEntitiesOptionalParameter listEntitiesOptionalParameter) {
        return listEntitiesWithServiceResponseAsync(appId, versionId, listEntitiesOptionalParameter).toBlocking().single().body();
    }

    /**
     * Gets information about the entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EntityExtractor>> listEntitiesAsync(UUID appId, String versionId, ListEntitiesOptionalParameter listEntitiesOptionalParameter, final ServiceCallback<List<EntityExtractor>> serviceCallback) {
        return ServiceFuture.fromResponse(listEntitiesWithServiceResponseAsync(appId, versionId, listEntitiesOptionalParameter), serviceCallback);
    }

    /**
     * Gets information about the entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityExtractor&gt; object
     */
    public Observable<List<EntityExtractor>> listEntitiesAsync(UUID appId, String versionId, ListEntitiesOptionalParameter listEntitiesOptionalParameter) {
        return listEntitiesWithServiceResponseAsync(appId, versionId, listEntitiesOptionalParameter).map(new Func1<ServiceResponse<List<EntityExtractor>>, List<EntityExtractor>>() {
            @Override
            public List<EntityExtractor> call(ServiceResponse<List<EntityExtractor>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about the entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityExtractor&gt; object
     */
    public Observable<ServiceResponse<List<EntityExtractor>>> listEntitiesWithServiceResponseAsync(UUID appId, String versionId, ListEntitiesOptionalParameter listEntitiesOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        final Integer skip = listEntitiesOptionalParameter != null ? listEntitiesOptionalParameter.skip() : null;
        final Integer take = listEntitiesOptionalParameter != null ? listEntitiesOptionalParameter.take() : null;
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return listEntitiesWithServiceResponseAsync(appId, versionId, skip, take);
    }

    /**
     * Gets information about the entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityExtractor&gt; object
     */
    public Observable<ServiceResponse<List<EntityExtractor>>> listEntitiesWithServiceResponseAsync(UUID appId, String versionId, Integer skip, Integer take) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.listEntities(appId, versionId, skip, take, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<EntityExtractor>>>>() {
                @Override
                public Observable<ServiceResponse<List<EntityExtractor>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<EntityExtractor>> clientResponse = listEntitiesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<EntityExtractor>> listEntitiesDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<EntityExtractor>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<EntityExtractor>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Adds a hierarchical entity extractor to the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hierarchicalModelCreateObject A model containing the name and children of the new entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    public UUID addHierarchicalEntity(UUID appId, String versionId, HierarchicalEntityModel hierarchicalModelCreateObject) {
        return addHierarchicalEntityWithServiceResponseAsync(appId, versionId, hierarchicalModelCreateObject).toBlocking().single().body();
    }

    /**
     * Adds a hierarchical entity extractor to the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hierarchicalModelCreateObject A model containing the name and children of the new entity extractor.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UUID> addHierarchicalEntityAsync(UUID appId, String versionId, HierarchicalEntityModel hierarchicalModelCreateObject, final ServiceCallback<UUID> serviceCallback) {
        return ServiceFuture.fromResponse(addHierarchicalEntityWithServiceResponseAsync(appId, versionId, hierarchicalModelCreateObject), serviceCallback);
    }

    /**
     * Adds a hierarchical entity extractor to the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hierarchicalModelCreateObject A model containing the name and children of the new entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<UUID> addHierarchicalEntityAsync(UUID appId, String versionId, HierarchicalEntityModel hierarchicalModelCreateObject) {
        return addHierarchicalEntityWithServiceResponseAsync(appId, versionId, hierarchicalModelCreateObject).map(new Func1<ServiceResponse<UUID>, UUID>() {
            @Override
            public UUID call(ServiceResponse<UUID> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds a hierarchical entity extractor to the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hierarchicalModelCreateObject A model containing the name and children of the new entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<ServiceResponse<UUID>> addHierarchicalEntityWithServiceResponseAsync(UUID appId, String versionId, HierarchicalEntityModel hierarchicalModelCreateObject) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (hierarchicalModelCreateObject == null) {
            throw new IllegalArgumentException("Parameter hierarchicalModelCreateObject is required and cannot be null.");
        }
        Validator.validate(hierarchicalModelCreateObject);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.addHierarchicalEntity(appId, versionId, hierarchicalModelCreateObject, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UUID>>>() {
                @Override
                public Observable<ServiceResponse<UUID>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UUID> clientResponse = addHierarchicalEntityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UUID> addHierarchicalEntityDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UUID, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<UUID>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Gets information about the hierarchical entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listHierarchicalEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;HierarchicalEntityExtractor&gt; object if successful.
     */
    public List<HierarchicalEntityExtractor> listHierarchicalEntities(UUID appId, String versionId, ListHierarchicalEntitiesOptionalParameter listHierarchicalEntitiesOptionalParameter) {
        return listHierarchicalEntitiesWithServiceResponseAsync(appId, versionId, listHierarchicalEntitiesOptionalParameter).toBlocking().single().body();
    }

    /**
     * Gets information about the hierarchical entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listHierarchicalEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<HierarchicalEntityExtractor>> listHierarchicalEntitiesAsync(UUID appId, String versionId, ListHierarchicalEntitiesOptionalParameter listHierarchicalEntitiesOptionalParameter, final ServiceCallback<List<HierarchicalEntityExtractor>> serviceCallback) {
        return ServiceFuture.fromResponse(listHierarchicalEntitiesWithServiceResponseAsync(appId, versionId, listHierarchicalEntitiesOptionalParameter), serviceCallback);
    }

    /**
     * Gets information about the hierarchical entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listHierarchicalEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;HierarchicalEntityExtractor&gt; object
     */
    public Observable<List<HierarchicalEntityExtractor>> listHierarchicalEntitiesAsync(UUID appId, String versionId, ListHierarchicalEntitiesOptionalParameter listHierarchicalEntitiesOptionalParameter) {
        return listHierarchicalEntitiesWithServiceResponseAsync(appId, versionId, listHierarchicalEntitiesOptionalParameter).map(new Func1<ServiceResponse<List<HierarchicalEntityExtractor>>, List<HierarchicalEntityExtractor>>() {
            @Override
            public List<HierarchicalEntityExtractor> call(ServiceResponse<List<HierarchicalEntityExtractor>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about the hierarchical entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listHierarchicalEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;HierarchicalEntityExtractor&gt; object
     */
    public Observable<ServiceResponse<List<HierarchicalEntityExtractor>>> listHierarchicalEntitiesWithServiceResponseAsync(UUID appId, String versionId, ListHierarchicalEntitiesOptionalParameter listHierarchicalEntitiesOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        final Integer skip = listHierarchicalEntitiesOptionalParameter != null ? listHierarchicalEntitiesOptionalParameter.skip() : null;
        final Integer take = listHierarchicalEntitiesOptionalParameter != null ? listHierarchicalEntitiesOptionalParameter.take() : null;
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return listHierarchicalEntitiesWithServiceResponseAsync(appId, versionId, skip, take);
    }

    /**
     * Gets information about the hierarchical entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;HierarchicalEntityExtractor&gt; object
     */
    public Observable<ServiceResponse<List<HierarchicalEntityExtractor>>> listHierarchicalEntitiesWithServiceResponseAsync(UUID appId, String versionId, Integer skip, Integer take) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.listHierarchicalEntities(appId, versionId, skip, take, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<HierarchicalEntityExtractor>>>>() {
                @Override
                public Observable<ServiceResponse<List<HierarchicalEntityExtractor>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<HierarchicalEntityExtractor>> clientResponse = listHierarchicalEntitiesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<HierarchicalEntityExtractor>> listHierarchicalEntitiesDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<HierarchicalEntityExtractor>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<HierarchicalEntityExtractor>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Adds a composite entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param compositeModelCreateObject A model containing the name and children of the new entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    public UUID addCompositeEntity(UUID appId, String versionId, CompositeEntityModel compositeModelCreateObject) {
        return addCompositeEntityWithServiceResponseAsync(appId, versionId, compositeModelCreateObject).toBlocking().single().body();
    }

    /**
     * Adds a composite entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param compositeModelCreateObject A model containing the name and children of the new entity extractor.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UUID> addCompositeEntityAsync(UUID appId, String versionId, CompositeEntityModel compositeModelCreateObject, final ServiceCallback<UUID> serviceCallback) {
        return ServiceFuture.fromResponse(addCompositeEntityWithServiceResponseAsync(appId, versionId, compositeModelCreateObject), serviceCallback);
    }

    /**
     * Adds a composite entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param compositeModelCreateObject A model containing the name and children of the new entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<UUID> addCompositeEntityAsync(UUID appId, String versionId, CompositeEntityModel compositeModelCreateObject) {
        return addCompositeEntityWithServiceResponseAsync(appId, versionId, compositeModelCreateObject).map(new Func1<ServiceResponse<UUID>, UUID>() {
            @Override
            public UUID call(ServiceResponse<UUID> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds a composite entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param compositeModelCreateObject A model containing the name and children of the new entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<ServiceResponse<UUID>> addCompositeEntityWithServiceResponseAsync(UUID appId, String versionId, CompositeEntityModel compositeModelCreateObject) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (compositeModelCreateObject == null) {
            throw new IllegalArgumentException("Parameter compositeModelCreateObject is required and cannot be null.");
        }
        Validator.validate(compositeModelCreateObject);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.addCompositeEntity(appId, versionId, compositeModelCreateObject, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UUID>>>() {
                @Override
                public Observable<ServiceResponse<UUID>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UUID> clientResponse = addCompositeEntityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UUID> addCompositeEntityDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UUID, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<UUID>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Gets information about the composite entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listCompositeEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;CompositeEntityExtractor&gt; object if successful.
     */
    public List<CompositeEntityExtractor> listCompositeEntities(UUID appId, String versionId, ListCompositeEntitiesOptionalParameter listCompositeEntitiesOptionalParameter) {
        return listCompositeEntitiesWithServiceResponseAsync(appId, versionId, listCompositeEntitiesOptionalParameter).toBlocking().single().body();
    }

    /**
     * Gets information about the composite entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listCompositeEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CompositeEntityExtractor>> listCompositeEntitiesAsync(UUID appId, String versionId, ListCompositeEntitiesOptionalParameter listCompositeEntitiesOptionalParameter, final ServiceCallback<List<CompositeEntityExtractor>> serviceCallback) {
        return ServiceFuture.fromResponse(listCompositeEntitiesWithServiceResponseAsync(appId, versionId, listCompositeEntitiesOptionalParameter), serviceCallback);
    }

    /**
     * Gets information about the composite entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listCompositeEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CompositeEntityExtractor&gt; object
     */
    public Observable<List<CompositeEntityExtractor>> listCompositeEntitiesAsync(UUID appId, String versionId, ListCompositeEntitiesOptionalParameter listCompositeEntitiesOptionalParameter) {
        return listCompositeEntitiesWithServiceResponseAsync(appId, versionId, listCompositeEntitiesOptionalParameter).map(new Func1<ServiceResponse<List<CompositeEntityExtractor>>, List<CompositeEntityExtractor>>() {
            @Override
            public List<CompositeEntityExtractor> call(ServiceResponse<List<CompositeEntityExtractor>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about the composite entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listCompositeEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CompositeEntityExtractor&gt; object
     */
    public Observable<ServiceResponse<List<CompositeEntityExtractor>>> listCompositeEntitiesWithServiceResponseAsync(UUID appId, String versionId, ListCompositeEntitiesOptionalParameter listCompositeEntitiesOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        final Integer skip = listCompositeEntitiesOptionalParameter != null ? listCompositeEntitiesOptionalParameter.skip() : null;
        final Integer take = listCompositeEntitiesOptionalParameter != null ? listCompositeEntitiesOptionalParameter.take() : null;
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return listCompositeEntitiesWithServiceResponseAsync(appId, versionId, skip, take);
    }

    /**
     * Gets information about the composite entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CompositeEntityExtractor&gt; object
     */
    public Observable<ServiceResponse<List<CompositeEntityExtractor>>> listCompositeEntitiesWithServiceResponseAsync(UUID appId, String versionId, Integer skip, Integer take) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.listCompositeEntities(appId, versionId, skip, take, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<CompositeEntityExtractor>>>>() {
                @Override
                public Observable<ServiceResponse<List<CompositeEntityExtractor>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<CompositeEntityExtractor>> clientResponse = listCompositeEntitiesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<CompositeEntityExtractor>> listCompositeEntitiesDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<CompositeEntityExtractor>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<CompositeEntityExtractor>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Gets information about the closedlist models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listClosedListsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ClosedListEntityExtractor&gt; object if successful.
     */
    public List<ClosedListEntityExtractor> listClosedLists(UUID appId, String versionId, ListClosedListsOptionalParameter listClosedListsOptionalParameter) {
        return listClosedListsWithServiceResponseAsync(appId, versionId, listClosedListsOptionalParameter).toBlocking().single().body();
    }

    /**
     * Gets information about the closedlist models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listClosedListsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ClosedListEntityExtractor>> listClosedListsAsync(UUID appId, String versionId, ListClosedListsOptionalParameter listClosedListsOptionalParameter, final ServiceCallback<List<ClosedListEntityExtractor>> serviceCallback) {
        return ServiceFuture.fromResponse(listClosedListsWithServiceResponseAsync(appId, versionId, listClosedListsOptionalParameter), serviceCallback);
    }

    /**
     * Gets information about the closedlist models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listClosedListsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ClosedListEntityExtractor&gt; object
     */
    public Observable<List<ClosedListEntityExtractor>> listClosedListsAsync(UUID appId, String versionId, ListClosedListsOptionalParameter listClosedListsOptionalParameter) {
        return listClosedListsWithServiceResponseAsync(appId, versionId, listClosedListsOptionalParameter).map(new Func1<ServiceResponse<List<ClosedListEntityExtractor>>, List<ClosedListEntityExtractor>>() {
            @Override
            public List<ClosedListEntityExtractor> call(ServiceResponse<List<ClosedListEntityExtractor>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about the closedlist models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listClosedListsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ClosedListEntityExtractor&gt; object
     */
    public Observable<ServiceResponse<List<ClosedListEntityExtractor>>> listClosedListsWithServiceResponseAsync(UUID appId, String versionId, ListClosedListsOptionalParameter listClosedListsOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        final Integer skip = listClosedListsOptionalParameter != null ? listClosedListsOptionalParameter.skip() : null;
        final Integer take = listClosedListsOptionalParameter != null ? listClosedListsOptionalParameter.take() : null;
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return listClosedListsWithServiceResponseAsync(appId, versionId, skip, take);
    }

    /**
     * Gets information about the closedlist models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ClosedListEntityExtractor&gt; object
     */
    public Observable<ServiceResponse<List<ClosedListEntityExtractor>>> listClosedListsWithServiceResponseAsync(UUID appId, String versionId, Integer skip, Integer take) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.listClosedLists(appId, versionId, skip, take, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ClosedListEntityExtractor>>>>() {
                @Override
                public Observable<ServiceResponse<List<ClosedListEntityExtractor>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<ClosedListEntityExtractor>> clientResponse = listClosedListsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<ClosedListEntityExtractor>> listClosedListsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<ClosedListEntityExtractor>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<ClosedListEntityExtractor>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Adds a closed list model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param closedListModelCreateObject A model containing the name and words for the new closed list entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    public UUID addClosedList(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject) {
        return addClosedListWithServiceResponseAsync(appId, versionId, closedListModelCreateObject).toBlocking().single().body();
    }

    /**
     * Adds a closed list model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param closedListModelCreateObject A model containing the name and words for the new closed list entity extractor.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UUID> addClosedListAsync(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject, final ServiceCallback<UUID> serviceCallback) {
        return ServiceFuture.fromResponse(addClosedListWithServiceResponseAsync(appId, versionId, closedListModelCreateObject), serviceCallback);
    }

    /**
     * Adds a closed list model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param closedListModelCreateObject A model containing the name and words for the new closed list entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<UUID> addClosedListAsync(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject) {
        return addClosedListWithServiceResponseAsync(appId, versionId, closedListModelCreateObject).map(new Func1<ServiceResponse<UUID>, UUID>() {
            @Override
            public UUID call(ServiceResponse<UUID> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds a closed list model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param closedListModelCreateObject A model containing the name and words for the new closed list entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<ServiceResponse<UUID>> addClosedListWithServiceResponseAsync(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (closedListModelCreateObject == null) {
            throw new IllegalArgumentException("Parameter closedListModelCreateObject is required and cannot be null.");
        }
        Validator.validate(closedListModelCreateObject);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.addClosedList(appId, versionId, closedListModelCreateObject, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UUID>>>() {
                @Override
                public Observable<ServiceResponse<UUID>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UUID> clientResponse = addClosedListDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UUID> addClosedListDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UUID, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<UUID>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Adds a list of prebuilt entity extractors to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltExtractorNames An array of prebuilt entity extractor names.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PrebuiltEntityExtractor&gt; object if successful.
     */
    public List<PrebuiltEntityExtractor> addPrebuilt(UUID appId, String versionId, List<String> prebuiltExtractorNames) {
        return addPrebuiltWithServiceResponseAsync(appId, versionId, prebuiltExtractorNames).toBlocking().single().body();
    }

    /**
     * Adds a list of prebuilt entity extractors to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltExtractorNames An array of prebuilt entity extractor names.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PrebuiltEntityExtractor>> addPrebuiltAsync(UUID appId, String versionId, List<String> prebuiltExtractorNames, final ServiceCallback<List<PrebuiltEntityExtractor>> serviceCallback) {
        return ServiceFuture.fromResponse(addPrebuiltWithServiceResponseAsync(appId, versionId, prebuiltExtractorNames), serviceCallback);
    }

    /**
     * Adds a list of prebuilt entity extractors to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltExtractorNames An array of prebuilt entity extractor names.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PrebuiltEntityExtractor&gt; object
     */
    public Observable<List<PrebuiltEntityExtractor>> addPrebuiltAsync(UUID appId, String versionId, List<String> prebuiltExtractorNames) {
        return addPrebuiltWithServiceResponseAsync(appId, versionId, prebuiltExtractorNames).map(new Func1<ServiceResponse<List<PrebuiltEntityExtractor>>, List<PrebuiltEntityExtractor>>() {
            @Override
            public List<PrebuiltEntityExtractor> call(ServiceResponse<List<PrebuiltEntityExtractor>> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds a list of prebuilt entity extractors to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltExtractorNames An array of prebuilt entity extractor names.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PrebuiltEntityExtractor&gt; object
     */
    public Observable<ServiceResponse<List<PrebuiltEntityExtractor>>> addPrebuiltWithServiceResponseAsync(UUID appId, String versionId, List<String> prebuiltExtractorNames) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (prebuiltExtractorNames == null) {
            throw new IllegalArgumentException("Parameter prebuiltExtractorNames is required and cannot be null.");
        }
        Validator.validate(prebuiltExtractorNames);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.addPrebuilt(appId, versionId, prebuiltExtractorNames, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<PrebuiltEntityExtractor>>>>() {
                @Override
                public Observable<ServiceResponse<List<PrebuiltEntityExtractor>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<PrebuiltEntityExtractor>> clientResponse = addPrebuiltDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<PrebuiltEntityExtractor>> addPrebuiltDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<PrebuiltEntityExtractor>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<List<PrebuiltEntityExtractor>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Gets information about the prebuilt entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listPrebuiltsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PrebuiltEntityExtractor&gt; object if successful.
     */
    public List<PrebuiltEntityExtractor> listPrebuilts(UUID appId, String versionId, ListPrebuiltsOptionalParameter listPrebuiltsOptionalParameter) {
        return listPrebuiltsWithServiceResponseAsync(appId, versionId, listPrebuiltsOptionalParameter).toBlocking().single().body();
    }

    /**
     * Gets information about the prebuilt entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listPrebuiltsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PrebuiltEntityExtractor>> listPrebuiltsAsync(UUID appId, String versionId, ListPrebuiltsOptionalParameter listPrebuiltsOptionalParameter, final ServiceCallback<List<PrebuiltEntityExtractor>> serviceCallback) {
        return ServiceFuture.fromResponse(listPrebuiltsWithServiceResponseAsync(appId, versionId, listPrebuiltsOptionalParameter), serviceCallback);
    }

    /**
     * Gets information about the prebuilt entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listPrebuiltsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PrebuiltEntityExtractor&gt; object
     */
    public Observable<List<PrebuiltEntityExtractor>> listPrebuiltsAsync(UUID appId, String versionId, ListPrebuiltsOptionalParameter listPrebuiltsOptionalParameter) {
        return listPrebuiltsWithServiceResponseAsync(appId, versionId, listPrebuiltsOptionalParameter).map(new Func1<ServiceResponse<List<PrebuiltEntityExtractor>>, List<PrebuiltEntityExtractor>>() {
            @Override
            public List<PrebuiltEntityExtractor> call(ServiceResponse<List<PrebuiltEntityExtractor>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about the prebuilt entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listPrebuiltsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PrebuiltEntityExtractor&gt; object
     */
    public Observable<ServiceResponse<List<PrebuiltEntityExtractor>>> listPrebuiltsWithServiceResponseAsync(UUID appId, String versionId, ListPrebuiltsOptionalParameter listPrebuiltsOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        final Integer skip = listPrebuiltsOptionalParameter != null ? listPrebuiltsOptionalParameter.skip() : null;
        final Integer take = listPrebuiltsOptionalParameter != null ? listPrebuiltsOptionalParameter.take() : null;
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return listPrebuiltsWithServiceResponseAsync(appId, versionId, skip, take);
    }

    /**
     * Gets information about the prebuilt entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PrebuiltEntityExtractor&gt; object
     */
    public Observable<ServiceResponse<List<PrebuiltEntityExtractor>>> listPrebuiltsWithServiceResponseAsync(UUID appId, String versionId, Integer skip, Integer take) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.listPrebuilts(appId, versionId, skip, take, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<PrebuiltEntityExtractor>>>>() {
                @Override
                public Observable<ServiceResponse<List<PrebuiltEntityExtractor>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<PrebuiltEntityExtractor>> clientResponse = listPrebuiltsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<PrebuiltEntityExtractor>> listPrebuiltsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<PrebuiltEntityExtractor>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<PrebuiltEntityExtractor>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all the available prebuilt entity extractors for the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;AvailablePrebuiltEntityModel&gt; object if successful.
     */
    public List<AvailablePrebuiltEntityModel> listPrebuiltEntities(UUID appId, String versionId) {
        return listPrebuiltEntitiesWithServiceResponseAsync(appId, versionId).toBlocking().single().body();
    }

    /**
     * Gets all the available prebuilt entity extractors for the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AvailablePrebuiltEntityModel>> listPrebuiltEntitiesAsync(UUID appId, String versionId, final ServiceCallback<List<AvailablePrebuiltEntityModel>> serviceCallback) {
        return ServiceFuture.fromResponse(listPrebuiltEntitiesWithServiceResponseAsync(appId, versionId), serviceCallback);
    }

    /**
     * Gets all the available prebuilt entity extractors for the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AvailablePrebuiltEntityModel&gt; object
     */
    public Observable<List<AvailablePrebuiltEntityModel>> listPrebuiltEntitiesAsync(UUID appId, String versionId) {
        return listPrebuiltEntitiesWithServiceResponseAsync(appId, versionId).map(new Func1<ServiceResponse<List<AvailablePrebuiltEntityModel>>, List<AvailablePrebuiltEntityModel>>() {
            @Override
            public List<AvailablePrebuiltEntityModel> call(ServiceResponse<List<AvailablePrebuiltEntityModel>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets all the available prebuilt entity extractors for the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AvailablePrebuiltEntityModel&gt; object
     */
    public Observable<ServiceResponse<List<AvailablePrebuiltEntityModel>>> listPrebuiltEntitiesWithServiceResponseAsync(UUID appId, String versionId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.listPrebuiltEntities(appId, versionId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<AvailablePrebuiltEntityModel>>>>() {
                @Override
                public Observable<ServiceResponse<List<AvailablePrebuiltEntityModel>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<AvailablePrebuiltEntityModel>> clientResponse = listPrebuiltEntitiesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<AvailablePrebuiltEntityModel>> listPrebuiltEntitiesDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<AvailablePrebuiltEntityModel>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<AvailablePrebuiltEntityModel>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Gets information about the application version models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listModelsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ModelInfoResponse&gt; object if successful.
     */
    public List<ModelInfoResponse> listModels(UUID appId, String versionId, ListModelsOptionalParameter listModelsOptionalParameter) {
        return listModelsWithServiceResponseAsync(appId, versionId, listModelsOptionalParameter).toBlocking().single().body();
    }

    /**
     * Gets information about the application version models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listModelsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ModelInfoResponse>> listModelsAsync(UUID appId, String versionId, ListModelsOptionalParameter listModelsOptionalParameter, final ServiceCallback<List<ModelInfoResponse>> serviceCallback) {
        return ServiceFuture.fromResponse(listModelsWithServiceResponseAsync(appId, versionId, listModelsOptionalParameter), serviceCallback);
    }

    /**
     * Gets information about the application version models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listModelsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ModelInfoResponse&gt; object
     */
    public Observable<List<ModelInfoResponse>> listModelsAsync(UUID appId, String versionId, ListModelsOptionalParameter listModelsOptionalParameter) {
        return listModelsWithServiceResponseAsync(appId, versionId, listModelsOptionalParameter).map(new Func1<ServiceResponse<List<ModelInfoResponse>>, List<ModelInfoResponse>>() {
            @Override
            public List<ModelInfoResponse> call(ServiceResponse<List<ModelInfoResponse>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about the application version models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listModelsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ModelInfoResponse&gt; object
     */
    public Observable<ServiceResponse<List<ModelInfoResponse>>> listModelsWithServiceResponseAsync(UUID appId, String versionId, ListModelsOptionalParameter listModelsOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        final Integer skip = listModelsOptionalParameter != null ? listModelsOptionalParameter.skip() : null;
        final Integer take = listModelsOptionalParameter != null ? listModelsOptionalParameter.take() : null;
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return listModelsWithServiceResponseAsync(appId, versionId, skip, take);
    }

    /**
     * Gets information about the application version models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param skip The number of entries to skip. Default value is 0.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ModelInfoResponse&gt; object
     */
    public Observable<ServiceResponse<List<ModelInfoResponse>>> listModelsWithServiceResponseAsync(UUID appId, String versionId, Integer skip, Integer take) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.listModels(appId, versionId, skip, take, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ModelInfoResponse>>>>() {
                @Override
                public Observable<ServiceResponse<List<ModelInfoResponse>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<ModelInfoResponse>> clientResponse = listModelsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<ModelInfoResponse>> listModelsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<ModelInfoResponse>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<ModelInfoResponse>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets information about the intent model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IntentClassifier object if successful.
     */
    public IntentClassifier getIntent(UUID appId, String versionId, UUID intentId) {
        return getIntentWithServiceResponseAsync(appId, versionId, intentId).toBlocking().single().body();
    }

    /**
     * Gets information about the intent model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IntentClassifier> getIntentAsync(UUID appId, String versionId, UUID intentId, final ServiceCallback<IntentClassifier> serviceCallback) {
        return ServiceFuture.fromResponse(getIntentWithServiceResponseAsync(appId, versionId, intentId), serviceCallback);
    }

    /**
     * Gets information about the intent model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntentClassifier object
     */
    public Observable<IntentClassifier> getIntentAsync(UUID appId, String versionId, UUID intentId) {
        return getIntentWithServiceResponseAsync(appId, versionId, intentId).map(new Func1<ServiceResponse<IntentClassifier>, IntentClassifier>() {
            @Override
            public IntentClassifier call(ServiceResponse<IntentClassifier> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about the intent model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntentClassifier object
     */
    public Observable<ServiceResponse<IntentClassifier>> getIntentWithServiceResponseAsync(UUID appId, String versionId, UUID intentId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (intentId == null) {
            throw new IllegalArgumentException("Parameter intentId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.getIntent(appId, versionId, intentId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IntentClassifier>>>() {
                @Override
                public Observable<ServiceResponse<IntentClassifier>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IntentClassifier> clientResponse = getIntentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<IntentClassifier> getIntentDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<IntentClassifier, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<IntentClassifier>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Updates the name of an intent classifier.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param updateIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus updateIntent(UUID appId, String versionId, UUID intentId, UpdateIntentOptionalParameter updateIntentOptionalParameter) {
        return updateIntentWithServiceResponseAsync(appId, versionId, intentId, updateIntentOptionalParameter).toBlocking().single().body();
    }

    /**
     * Updates the name of an intent classifier.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param updateIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> updateIntentAsync(UUID appId, String versionId, UUID intentId, UpdateIntentOptionalParameter updateIntentOptionalParameter, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(updateIntentWithServiceResponseAsync(appId, versionId, intentId, updateIntentOptionalParameter), serviceCallback);
    }

    /**
     * Updates the name of an intent classifier.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param updateIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> updateIntentAsync(UUID appId, String versionId, UUID intentId, UpdateIntentOptionalParameter updateIntentOptionalParameter) {
        return updateIntentWithServiceResponseAsync(appId, versionId, intentId, updateIntentOptionalParameter).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the name of an intent classifier.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param updateIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> updateIntentWithServiceResponseAsync(UUID appId, String versionId, UUID intentId, UpdateIntentOptionalParameter updateIntentOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (intentId == null) {
            throw new IllegalArgumentException("Parameter intentId is required and cannot be null.");
        }
        final String name = updateIntentOptionalParameter != null ? updateIntentOptionalParameter.name() : null;
        ModelUpdateObject modelUpdateObject = new ModelUpdateObject();
        modelUpdateObject.withName(null);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return updateIntentWithServiceResponseAsync(appId, versionId, intentId, name);
    }

    /**
     * Updates the name of an intent classifier.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param name The entity's new name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> updateIntentWithServiceResponseAsync(UUID appId, String versionId, UUID intentId, String name) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (intentId == null) {
            throw new IllegalArgumentException("Parameter intentId is required and cannot be null.");
        }
        ModelUpdateObject modelUpdateObject = new ModelUpdateObject();
        modelUpdateObject.withName(name);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.updateIntent(appId, versionId, intentId, this.client.acceptLanguage(), modelUpdateObject, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = updateIntentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> updateIntentDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Deletes an intent classifier from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param deleteIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus deleteIntent(UUID appId, String versionId, UUID intentId, DeleteIntentOptionalParameter deleteIntentOptionalParameter) {
        return deleteIntentWithServiceResponseAsync(appId, versionId, intentId, deleteIntentOptionalParameter).toBlocking().single().body();
    }

    /**
     * Deletes an intent classifier from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param deleteIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> deleteIntentAsync(UUID appId, String versionId, UUID intentId, DeleteIntentOptionalParameter deleteIntentOptionalParameter, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(deleteIntentWithServiceResponseAsync(appId, versionId, intentId, deleteIntentOptionalParameter), serviceCallback);
    }

    /**
     * Deletes an intent classifier from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param deleteIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> deleteIntentAsync(UUID appId, String versionId, UUID intentId, DeleteIntentOptionalParameter deleteIntentOptionalParameter) {
        return deleteIntentWithServiceResponseAsync(appId, versionId, intentId, deleteIntentOptionalParameter).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an intent classifier from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param deleteIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> deleteIntentWithServiceResponseAsync(UUID appId, String versionId, UUID intentId, DeleteIntentOptionalParameter deleteIntentOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (intentId == null) {
            throw new IllegalArgumentException("Parameter intentId is required and cannot be null.");
        }
        final Boolean deleteUtterances = deleteIntentOptionalParameter != null ? deleteIntentOptionalParameter.deleteUtterances() : null;
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return deleteIntentWithServiceResponseAsync(appId, versionId, intentId, deleteUtterances);
    }

    /**
     * Deletes an intent classifier from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param deleteUtterances Also delete the intent's utterances (true). Or move the utterances to the None intent (false - the default value).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> deleteIntentWithServiceResponseAsync(UUID appId, String versionId, UUID intentId, Boolean deleteUtterances) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (intentId == null) {
            throw new IllegalArgumentException("Parameter intentId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.deleteIntent(appId, versionId, intentId, deleteUtterances, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = deleteIntentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> deleteIntentDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets information about the entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityExtractor object if successful.
     */
    public EntityExtractor getEntity(UUID appId, String versionId, UUID entityId) {
        return getEntityWithServiceResponseAsync(appId, versionId, entityId).toBlocking().single().body();
    }

    /**
     * Gets information about the entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EntityExtractor> getEntityAsync(UUID appId, String versionId, UUID entityId, final ServiceCallback<EntityExtractor> serviceCallback) {
        return ServiceFuture.fromResponse(getEntityWithServiceResponseAsync(appId, versionId, entityId), serviceCallback);
    }

    /**
     * Gets information about the entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityExtractor object
     */
    public Observable<EntityExtractor> getEntityAsync(UUID appId, String versionId, UUID entityId) {
        return getEntityWithServiceResponseAsync(appId, versionId, entityId).map(new Func1<ServiceResponse<EntityExtractor>, EntityExtractor>() {
            @Override
            public EntityExtractor call(ServiceResponse<EntityExtractor> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about the entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityExtractor object
     */
    public Observable<ServiceResponse<EntityExtractor>> getEntityWithServiceResponseAsync(UUID appId, String versionId, UUID entityId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (entityId == null) {
            throw new IllegalArgumentException("Parameter entityId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.getEntity(appId, versionId, entityId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EntityExtractor>>>() {
                @Override
                public Observable<ServiceResponse<EntityExtractor>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EntityExtractor> clientResponse = getEntityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EntityExtractor> getEntityDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EntityExtractor, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EntityExtractor>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Updates the name of an entity extractor.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param updateEntityOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus updateEntity(UUID appId, String versionId, UUID entityId, UpdateEntityOptionalParameter updateEntityOptionalParameter) {
        return updateEntityWithServiceResponseAsync(appId, versionId, entityId, updateEntityOptionalParameter).toBlocking().single().body();
    }

    /**
     * Updates the name of an entity extractor.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param updateEntityOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> updateEntityAsync(UUID appId, String versionId, UUID entityId, UpdateEntityOptionalParameter updateEntityOptionalParameter, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(updateEntityWithServiceResponseAsync(appId, versionId, entityId, updateEntityOptionalParameter), serviceCallback);
    }

    /**
     * Updates the name of an entity extractor.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param updateEntityOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> updateEntityAsync(UUID appId, String versionId, UUID entityId, UpdateEntityOptionalParameter updateEntityOptionalParameter) {
        return updateEntityWithServiceResponseAsync(appId, versionId, entityId, updateEntityOptionalParameter).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the name of an entity extractor.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param updateEntityOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> updateEntityWithServiceResponseAsync(UUID appId, String versionId, UUID entityId, UpdateEntityOptionalParameter updateEntityOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (entityId == null) {
            throw new IllegalArgumentException("Parameter entityId is required and cannot be null.");
        }
        final String name = updateEntityOptionalParameter != null ? updateEntityOptionalParameter.name() : null;
        ModelUpdateObject modelUpdateObject = new ModelUpdateObject();
        modelUpdateObject.withName(null);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return updateEntityWithServiceResponseAsync(appId, versionId, entityId, name);
    }

    /**
     * Updates the name of an entity extractor.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param name The entity's new name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> updateEntityWithServiceResponseAsync(UUID appId, String versionId, UUID entityId, String name) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (entityId == null) {
            throw new IllegalArgumentException("Parameter entityId is required and cannot be null.");
        }
        ModelUpdateObject modelUpdateObject = new ModelUpdateObject();
        modelUpdateObject.withName(name);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.updateEntity(appId, versionId, entityId, this.client.acceptLanguage(), modelUpdateObject, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = updateEntityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> updateEntityDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes an entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus deleteEntity(UUID appId, String versionId, UUID entityId) {
        return deleteEntityWithServiceResponseAsync(appId, versionId, entityId).toBlocking().single().body();
    }

    /**
     * Deletes an entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> deleteEntityAsync(UUID appId, String versionId, UUID entityId, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(deleteEntityWithServiceResponseAsync(appId, versionId, entityId), serviceCallback);
    }

    /**
     * Deletes an entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> deleteEntityAsync(UUID appId, String versionId, UUID entityId) {
        return deleteEntityWithServiceResponseAsync(appId, versionId, entityId).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> deleteEntityWithServiceResponseAsync(UUID appId, String versionId, UUID entityId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (entityId == null) {
            throw new IllegalArgumentException("Parameter entityId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.deleteEntity(appId, versionId, entityId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = deleteEntityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> deleteEntityDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets information about the hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HierarchicalEntityExtractor object if successful.
     */
    public HierarchicalEntityExtractor getHierarchicalEntity(UUID appId, String versionId, UUID hEntityId) {
        return getHierarchicalEntityWithServiceResponseAsync(appId, versionId, hEntityId).toBlocking().single().body();
    }

    /**
     * Gets information about the hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<HierarchicalEntityExtractor> getHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId, final ServiceCallback<HierarchicalEntityExtractor> serviceCallback) {
        return ServiceFuture.fromResponse(getHierarchicalEntityWithServiceResponseAsync(appId, versionId, hEntityId), serviceCallback);
    }

    /**
     * Gets information about the hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HierarchicalEntityExtractor object
     */
    public Observable<HierarchicalEntityExtractor> getHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId) {
        return getHierarchicalEntityWithServiceResponseAsync(appId, versionId, hEntityId).map(new Func1<ServiceResponse<HierarchicalEntityExtractor>, HierarchicalEntityExtractor>() {
            @Override
            public HierarchicalEntityExtractor call(ServiceResponse<HierarchicalEntityExtractor> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about the hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HierarchicalEntityExtractor object
     */
    public Observable<ServiceResponse<HierarchicalEntityExtractor>> getHierarchicalEntityWithServiceResponseAsync(UUID appId, String versionId, UUID hEntityId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (hEntityId == null) {
            throw new IllegalArgumentException("Parameter hEntityId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.getHierarchicalEntity(appId, versionId, hEntityId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<HierarchicalEntityExtractor>>>() {
                @Override
                public Observable<ServiceResponse<HierarchicalEntityExtractor>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<HierarchicalEntityExtractor> clientResponse = getHierarchicalEntityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<HierarchicalEntityExtractor> getHierarchicalEntityDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<HierarchicalEntityExtractor, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<HierarchicalEntityExtractor>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Updates the name and children of a hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hierarchicalModelUpdateObject Model containing names of the children of the hierarchical entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus updateHierarchicalEntity(UUID appId, String versionId, UUID hEntityId, HierarchicalEntityModel hierarchicalModelUpdateObject) {
        return updateHierarchicalEntityWithServiceResponseAsync(appId, versionId, hEntityId, hierarchicalModelUpdateObject).toBlocking().single().body();
    }

    /**
     * Updates the name and children of a hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hierarchicalModelUpdateObject Model containing names of the children of the hierarchical entity.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> updateHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId, HierarchicalEntityModel hierarchicalModelUpdateObject, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(updateHierarchicalEntityWithServiceResponseAsync(appId, versionId, hEntityId, hierarchicalModelUpdateObject), serviceCallback);
    }

    /**
     * Updates the name and children of a hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hierarchicalModelUpdateObject Model containing names of the children of the hierarchical entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> updateHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId, HierarchicalEntityModel hierarchicalModelUpdateObject) {
        return updateHierarchicalEntityWithServiceResponseAsync(appId, versionId, hEntityId, hierarchicalModelUpdateObject).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the name and children of a hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hierarchicalModelUpdateObject Model containing names of the children of the hierarchical entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> updateHierarchicalEntityWithServiceResponseAsync(UUID appId, String versionId, UUID hEntityId, HierarchicalEntityModel hierarchicalModelUpdateObject) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (hEntityId == null) {
            throw new IllegalArgumentException("Parameter hEntityId is required and cannot be null.");
        }
        if (hierarchicalModelUpdateObject == null) {
            throw new IllegalArgumentException("Parameter hierarchicalModelUpdateObject is required and cannot be null.");
        }
        Validator.validate(hierarchicalModelUpdateObject);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.updateHierarchicalEntity(appId, versionId, hEntityId, hierarchicalModelUpdateObject, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = updateHierarchicalEntityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> updateHierarchicalEntityDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes a hierarchical entity extractor from the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus deleteHierarchicalEntity(UUID appId, String versionId, UUID hEntityId) {
        return deleteHierarchicalEntityWithServiceResponseAsync(appId, versionId, hEntityId).toBlocking().single().body();
    }

    /**
     * Deletes a hierarchical entity extractor from the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> deleteHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(deleteHierarchicalEntityWithServiceResponseAsync(appId, versionId, hEntityId), serviceCallback);
    }

    /**
     * Deletes a hierarchical entity extractor from the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> deleteHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId) {
        return deleteHierarchicalEntityWithServiceResponseAsync(appId, versionId, hEntityId).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a hierarchical entity extractor from the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> deleteHierarchicalEntityWithServiceResponseAsync(UUID appId, String versionId, UUID hEntityId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (hEntityId == null) {
            throw new IllegalArgumentException("Parameter hEntityId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.deleteHierarchicalEntity(appId, versionId, hEntityId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = deleteHierarchicalEntityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> deleteHierarchicalEntityDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets information about the composite entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CompositeEntityExtractor object if successful.
     */
    public CompositeEntityExtractor getCompositeEntity(UUID appId, String versionId, UUID cEntityId) {
        return getCompositeEntityWithServiceResponseAsync(appId, versionId, cEntityId).toBlocking().single().body();
    }

    /**
     * Gets information about the composite entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CompositeEntityExtractor> getCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId, final ServiceCallback<CompositeEntityExtractor> serviceCallback) {
        return ServiceFuture.fromResponse(getCompositeEntityWithServiceResponseAsync(appId, versionId, cEntityId), serviceCallback);
    }

    /**
     * Gets information about the composite entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompositeEntityExtractor object
     */
    public Observable<CompositeEntityExtractor> getCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId) {
        return getCompositeEntityWithServiceResponseAsync(appId, versionId, cEntityId).map(new Func1<ServiceResponse<CompositeEntityExtractor>, CompositeEntityExtractor>() {
            @Override
            public CompositeEntityExtractor call(ServiceResponse<CompositeEntityExtractor> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about the composite entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompositeEntityExtractor object
     */
    public Observable<ServiceResponse<CompositeEntityExtractor>> getCompositeEntityWithServiceResponseAsync(UUID appId, String versionId, UUID cEntityId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (cEntityId == null) {
            throw new IllegalArgumentException("Parameter cEntityId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.getCompositeEntity(appId, versionId, cEntityId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CompositeEntityExtractor>>>() {
                @Override
                public Observable<ServiceResponse<CompositeEntityExtractor>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CompositeEntityExtractor> clientResponse = getCompositeEntityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CompositeEntityExtractor> getCompositeEntityDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CompositeEntityExtractor, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CompositeEntityExtractor>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Updates the composite entity extractor.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param compositeModelUpdateObject A model object containing the new entity extractor name and children.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus updateCompositeEntity(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject) {
        return updateCompositeEntityWithServiceResponseAsync(appId, versionId, cEntityId, compositeModelUpdateObject).toBlocking().single().body();
    }

    /**
     * Updates the composite entity extractor.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param compositeModelUpdateObject A model object containing the new entity extractor name and children.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> updateCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(updateCompositeEntityWithServiceResponseAsync(appId, versionId, cEntityId, compositeModelUpdateObject), serviceCallback);
    }

    /**
     * Updates the composite entity extractor.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param compositeModelUpdateObject A model object containing the new entity extractor name and children.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> updateCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject) {
        return updateCompositeEntityWithServiceResponseAsync(appId, versionId, cEntityId, compositeModelUpdateObject).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the composite entity extractor.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param compositeModelUpdateObject A model object containing the new entity extractor name and children.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> updateCompositeEntityWithServiceResponseAsync(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (cEntityId == null) {
            throw new IllegalArgumentException("Parameter cEntityId is required and cannot be null.");
        }
        if (compositeModelUpdateObject == null) {
            throw new IllegalArgumentException("Parameter compositeModelUpdateObject is required and cannot be null.");
        }
        Validator.validate(compositeModelUpdateObject);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.updateCompositeEntity(appId, versionId, cEntityId, compositeModelUpdateObject, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = updateCompositeEntityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> updateCompositeEntityDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes a composite entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus deleteCompositeEntity(UUID appId, String versionId, UUID cEntityId) {
        return deleteCompositeEntityWithServiceResponseAsync(appId, versionId, cEntityId).toBlocking().single().body();
    }

    /**
     * Deletes a composite entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> deleteCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(deleteCompositeEntityWithServiceResponseAsync(appId, versionId, cEntityId), serviceCallback);
    }

    /**
     * Deletes a composite entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> deleteCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId) {
        return deleteCompositeEntityWithServiceResponseAsync(appId, versionId, cEntityId).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a composite entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> deleteCompositeEntityWithServiceResponseAsync(UUID appId, String versionId, UUID cEntityId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (cEntityId == null) {
            throw new IllegalArgumentException("Parameter cEntityId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.deleteCompositeEntity(appId, versionId, cEntityId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = deleteCompositeEntityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> deleteCompositeEntityDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets information of a closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClosedListEntityExtractor object if successful.
     */
    public ClosedListEntityExtractor getClosedList(UUID appId, String versionId, UUID clEntityId) {
        return getClosedListWithServiceResponseAsync(appId, versionId, clEntityId).toBlocking().single().body();
    }

    /**
     * Gets information of a closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ClosedListEntityExtractor> getClosedListAsync(UUID appId, String versionId, UUID clEntityId, final ServiceCallback<ClosedListEntityExtractor> serviceCallback) {
        return ServiceFuture.fromResponse(getClosedListWithServiceResponseAsync(appId, versionId, clEntityId), serviceCallback);
    }

    /**
     * Gets information of a closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClosedListEntityExtractor object
     */
    public Observable<ClosedListEntityExtractor> getClosedListAsync(UUID appId, String versionId, UUID clEntityId) {
        return getClosedListWithServiceResponseAsync(appId, versionId, clEntityId).map(new Func1<ServiceResponse<ClosedListEntityExtractor>, ClosedListEntityExtractor>() {
            @Override
            public ClosedListEntityExtractor call(ServiceResponse<ClosedListEntityExtractor> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information of a closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClosedListEntityExtractor object
     */
    public Observable<ServiceResponse<ClosedListEntityExtractor>> getClosedListWithServiceResponseAsync(UUID appId, String versionId, UUID clEntityId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (clEntityId == null) {
            throw new IllegalArgumentException("Parameter clEntityId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.getClosedList(appId, versionId, clEntityId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ClosedListEntityExtractor>>>() {
                @Override
                public Observable<ServiceResponse<ClosedListEntityExtractor>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ClosedListEntityExtractor> clientResponse = getClosedListDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ClosedListEntityExtractor> getClosedListDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ClosedListEntityExtractor, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ClosedListEntityExtractor>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Updates the closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @param closedListModelUpdateObject The new entity name and words list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus updateClosedList(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject) {
        return updateClosedListWithServiceResponseAsync(appId, versionId, clEntityId, closedListModelUpdateObject).toBlocking().single().body();
    }

    /**
     * Updates the closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @param closedListModelUpdateObject The new entity name and words list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> updateClosedListAsync(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(updateClosedListWithServiceResponseAsync(appId, versionId, clEntityId, closedListModelUpdateObject), serviceCallback);
    }

    /**
     * Updates the closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @param closedListModelUpdateObject The new entity name and words list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> updateClosedListAsync(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject) {
        return updateClosedListWithServiceResponseAsync(appId, versionId, clEntityId, closedListModelUpdateObject).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @param closedListModelUpdateObject The new entity name and words list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> updateClosedListWithServiceResponseAsync(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (clEntityId == null) {
            throw new IllegalArgumentException("Parameter clEntityId is required and cannot be null.");
        }
        if (closedListModelUpdateObject == null) {
            throw new IllegalArgumentException("Parameter closedListModelUpdateObject is required and cannot be null.");
        }
        Validator.validate(closedListModelUpdateObject);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.updateClosedList(appId, versionId, clEntityId, closedListModelUpdateObject, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = updateClosedListDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> updateClosedListDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Adds a batch of sublists to an existing closedlist.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @param patchClosedListOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus patchClosedList(UUID appId, String versionId, UUID clEntityId, PatchClosedListOptionalParameter patchClosedListOptionalParameter) {
        return patchClosedListWithServiceResponseAsync(appId, versionId, clEntityId, patchClosedListOptionalParameter).toBlocking().single().body();
    }

    /**
     * Adds a batch of sublists to an existing closedlist.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @param patchClosedListOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> patchClosedListAsync(UUID appId, String versionId, UUID clEntityId, PatchClosedListOptionalParameter patchClosedListOptionalParameter, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(patchClosedListWithServiceResponseAsync(appId, versionId, clEntityId, patchClosedListOptionalParameter), serviceCallback);
    }

    /**
     * Adds a batch of sublists to an existing closedlist.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @param patchClosedListOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> patchClosedListAsync(UUID appId, String versionId, UUID clEntityId, PatchClosedListOptionalParameter patchClosedListOptionalParameter) {
        return patchClosedListWithServiceResponseAsync(appId, versionId, clEntityId, patchClosedListOptionalParameter).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds a batch of sublists to an existing closedlist.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @param patchClosedListOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> patchClosedListWithServiceResponseAsync(UUID appId, String versionId, UUID clEntityId, PatchClosedListOptionalParameter patchClosedListOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (clEntityId == null) {
            throw new IllegalArgumentException("Parameter clEntityId is required and cannot be null.");
        }
        final List<WordListObject> subLists = patchClosedListOptionalParameter != null ? patchClosedListOptionalParameter.subLists() : null;
        ClosedListModelPatchObject closedListModelPatchObject = new ClosedListModelPatchObject();
        closedListModelPatchObject.withSubLists(null);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return patchClosedListWithServiceResponseAsync(appId, versionId, clEntityId, subLists);
    }

    /**
     * Adds a batch of sublists to an existing closedlist.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @param subLists Sublists to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> patchClosedListWithServiceResponseAsync(UUID appId, String versionId, UUID clEntityId, List<WordListObject> subLists) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (clEntityId == null) {
            throw new IllegalArgumentException("Parameter clEntityId is required and cannot be null.");
        }
        Validator.validate(subLists);
        ClosedListModelPatchObject closedListModelPatchObject = new ClosedListModelPatchObject();
        closedListModelPatchObject.withSubLists(subLists);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.patchClosedList(appId, versionId, clEntityId, this.client.acceptLanguage(), closedListModelPatchObject, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = patchClosedListDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> patchClosedListDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes a closed list model from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus deleteClosedList(UUID appId, String versionId, UUID clEntityId) {
        return deleteClosedListWithServiceResponseAsync(appId, versionId, clEntityId).toBlocking().single().body();
    }

    /**
     * Deletes a closed list model from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> deleteClosedListAsync(UUID appId, String versionId, UUID clEntityId, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(deleteClosedListWithServiceResponseAsync(appId, versionId, clEntityId), serviceCallback);
    }

    /**
     * Deletes a closed list model from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> deleteClosedListAsync(UUID appId, String versionId, UUID clEntityId) {
        return deleteClosedListWithServiceResponseAsync(appId, versionId, clEntityId).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a closed list model from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> deleteClosedListWithServiceResponseAsync(UUID appId, String versionId, UUID clEntityId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (clEntityId == null) {
            throw new IllegalArgumentException("Parameter clEntityId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.deleteClosedList(appId, versionId, clEntityId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = deleteClosedListDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> deleteClosedListDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets information about the prebuilt entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PrebuiltEntityExtractor object if successful.
     */
    public PrebuiltEntityExtractor getPrebuilt(UUID appId, String versionId, UUID prebuiltId) {
        return getPrebuiltWithServiceResponseAsync(appId, versionId, prebuiltId).toBlocking().single().body();
    }

    /**
     * Gets information about the prebuilt entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PrebuiltEntityExtractor> getPrebuiltAsync(UUID appId, String versionId, UUID prebuiltId, final ServiceCallback<PrebuiltEntityExtractor> serviceCallback) {
        return ServiceFuture.fromResponse(getPrebuiltWithServiceResponseAsync(appId, versionId, prebuiltId), serviceCallback);
    }

    /**
     * Gets information about the prebuilt entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrebuiltEntityExtractor object
     */
    public Observable<PrebuiltEntityExtractor> getPrebuiltAsync(UUID appId, String versionId, UUID prebuiltId) {
        return getPrebuiltWithServiceResponseAsync(appId, versionId, prebuiltId).map(new Func1<ServiceResponse<PrebuiltEntityExtractor>, PrebuiltEntityExtractor>() {
            @Override
            public PrebuiltEntityExtractor call(ServiceResponse<PrebuiltEntityExtractor> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about the prebuilt entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrebuiltEntityExtractor object
     */
    public Observable<ServiceResponse<PrebuiltEntityExtractor>> getPrebuiltWithServiceResponseAsync(UUID appId, String versionId, UUID prebuiltId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (prebuiltId == null) {
            throw new IllegalArgumentException("Parameter prebuiltId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.getPrebuilt(appId, versionId, prebuiltId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PrebuiltEntityExtractor>>>() {
                @Override
                public Observable<ServiceResponse<PrebuiltEntityExtractor>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PrebuiltEntityExtractor> clientResponse = getPrebuiltDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PrebuiltEntityExtractor> getPrebuiltDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PrebuiltEntityExtractor, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PrebuiltEntityExtractor>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes a prebuilt entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus deletePrebuilt(UUID appId, String versionId, UUID prebuiltId) {
        return deletePrebuiltWithServiceResponseAsync(appId, versionId, prebuiltId).toBlocking().single().body();
    }

    /**
     * Deletes a prebuilt entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> deletePrebuiltAsync(UUID appId, String versionId, UUID prebuiltId, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(deletePrebuiltWithServiceResponseAsync(appId, versionId, prebuiltId), serviceCallback);
    }

    /**
     * Deletes a prebuilt entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> deletePrebuiltAsync(UUID appId, String versionId, UUID prebuiltId) {
        return deletePrebuiltWithServiceResponseAsync(appId, versionId, prebuiltId).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a prebuilt entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> deletePrebuiltWithServiceResponseAsync(UUID appId, String versionId, UUID prebuiltId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (prebuiltId == null) {
            throw new IllegalArgumentException("Parameter prebuiltId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.deletePrebuilt(appId, versionId, prebuiltId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = deletePrebuiltDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> deletePrebuiltDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes a sublist of a specific closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param subListId The sublist ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus deleteSubList(UUID appId, String versionId, UUID clEntityId, int subListId) {
        return deleteSubListWithServiceResponseAsync(appId, versionId, clEntityId, subListId).toBlocking().single().body();
    }

    /**
     * Deletes a sublist of a specific closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param subListId The sublist ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> deleteSubListAsync(UUID appId, String versionId, UUID clEntityId, int subListId, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(deleteSubListWithServiceResponseAsync(appId, versionId, clEntityId, subListId), serviceCallback);
    }

    /**
     * Deletes a sublist of a specific closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param subListId The sublist ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> deleteSubListAsync(UUID appId, String versionId, UUID clEntityId, int subListId) {
        return deleteSubListWithServiceResponseAsync(appId, versionId, clEntityId, subListId).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a sublist of a specific closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param subListId The sublist ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> deleteSubListWithServiceResponseAsync(UUID appId, String versionId, UUID clEntityId, int subListId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (clEntityId == null) {
            throw new IllegalArgumentException("Parameter clEntityId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.deleteSubList(appId, versionId, clEntityId, subListId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = deleteSubListDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> deleteSubListDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Updates one of the closed list's sublists.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param subListId The sublist ID.
     * @param wordListBaseUpdateObject A sublist update object containing the new canonical form and the list of words.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus updateSubList(UUID appId, String versionId, UUID clEntityId, int subListId, WordListBaseUpdateObject wordListBaseUpdateObject) {
        return updateSubListWithServiceResponseAsync(appId, versionId, clEntityId, subListId, wordListBaseUpdateObject).toBlocking().single().body();
    }

    /**
     * Updates one of the closed list's sublists.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param subListId The sublist ID.
     * @param wordListBaseUpdateObject A sublist update object containing the new canonical form and the list of words.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> updateSubListAsync(UUID appId, String versionId, UUID clEntityId, int subListId, WordListBaseUpdateObject wordListBaseUpdateObject, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(updateSubListWithServiceResponseAsync(appId, versionId, clEntityId, subListId, wordListBaseUpdateObject), serviceCallback);
    }

    /**
     * Updates one of the closed list's sublists.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param subListId The sublist ID.
     * @param wordListBaseUpdateObject A sublist update object containing the new canonical form and the list of words.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> updateSubListAsync(UUID appId, String versionId, UUID clEntityId, int subListId, WordListBaseUpdateObject wordListBaseUpdateObject) {
        return updateSubListWithServiceResponseAsync(appId, versionId, clEntityId, subListId, wordListBaseUpdateObject).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates one of the closed list's sublists.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param subListId The sublist ID.
     * @param wordListBaseUpdateObject A sublist update object containing the new canonical form and the list of words.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> updateSubListWithServiceResponseAsync(UUID appId, String versionId, UUID clEntityId, int subListId, WordListBaseUpdateObject wordListBaseUpdateObject) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (clEntityId == null) {
            throw new IllegalArgumentException("Parameter clEntityId is required and cannot be null.");
        }
        if (wordListBaseUpdateObject == null) {
            throw new IllegalArgumentException("Parameter wordListBaseUpdateObject is required and cannot be null.");
        }
        Validator.validate(wordListBaseUpdateObject);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.updateSubList(appId, versionId, clEntityId, subListId, wordListBaseUpdateObject, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = updateSubListDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> updateSubListDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Suggests examples that would improve the accuracy of the intent model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param getIntentSuggestionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;IntentsSuggestionExample&gt; object if successful.
     */
    public List<IntentsSuggestionExample> getIntentSuggestions(UUID appId, String versionId, UUID intentId, GetIntentSuggestionsOptionalParameter getIntentSuggestionsOptionalParameter) {
        return getIntentSuggestionsWithServiceResponseAsync(appId, versionId, intentId, getIntentSuggestionsOptionalParameter).toBlocking().single().body();
    }

    /**
     * Suggests examples that would improve the accuracy of the intent model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param getIntentSuggestionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IntentsSuggestionExample>> getIntentSuggestionsAsync(UUID appId, String versionId, UUID intentId, GetIntentSuggestionsOptionalParameter getIntentSuggestionsOptionalParameter, final ServiceCallback<List<IntentsSuggestionExample>> serviceCallback) {
        return ServiceFuture.fromResponse(getIntentSuggestionsWithServiceResponseAsync(appId, versionId, intentId, getIntentSuggestionsOptionalParameter), serviceCallback);
    }

    /**
     * Suggests examples that would improve the accuracy of the intent model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param getIntentSuggestionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;IntentsSuggestionExample&gt; object
     */
    public Observable<List<IntentsSuggestionExample>> getIntentSuggestionsAsync(UUID appId, String versionId, UUID intentId, GetIntentSuggestionsOptionalParameter getIntentSuggestionsOptionalParameter) {
        return getIntentSuggestionsWithServiceResponseAsync(appId, versionId, intentId, getIntentSuggestionsOptionalParameter).map(new Func1<ServiceResponse<List<IntentsSuggestionExample>>, List<IntentsSuggestionExample>>() {
            @Override
            public List<IntentsSuggestionExample> call(ServiceResponse<List<IntentsSuggestionExample>> response) {
                return response.body();
            }
        });
    }

    /**
     * Suggests examples that would improve the accuracy of the intent model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param getIntentSuggestionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;IntentsSuggestionExample&gt; object
     */
    public Observable<ServiceResponse<List<IntentsSuggestionExample>>> getIntentSuggestionsWithServiceResponseAsync(UUID appId, String versionId, UUID intentId, GetIntentSuggestionsOptionalParameter getIntentSuggestionsOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (intentId == null) {
            throw new IllegalArgumentException("Parameter intentId is required and cannot be null.");
        }
        final Integer take = getIntentSuggestionsOptionalParameter != null ? getIntentSuggestionsOptionalParameter.take() : null;
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return getIntentSuggestionsWithServiceResponseAsync(appId, versionId, intentId, take);
    }

    /**
     * Suggests examples that would improve the accuracy of the intent model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;IntentsSuggestionExample&gt; object
     */
    public Observable<ServiceResponse<List<IntentsSuggestionExample>>> getIntentSuggestionsWithServiceResponseAsync(UUID appId, String versionId, UUID intentId, Integer take) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (intentId == null) {
            throw new IllegalArgumentException("Parameter intentId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.getIntentSuggestions(appId, versionId, intentId, take, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<IntentsSuggestionExample>>>>() {
                @Override
                public Observable<ServiceResponse<List<IntentsSuggestionExample>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<IntentsSuggestionExample>> clientResponse = getIntentSuggestionsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<IntentsSuggestionExample>> getIntentSuggestionsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<IntentsSuggestionExample>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<IntentsSuggestionExample>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Get suggestion examples that would improve the accuracy of the entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The target entity extractor model to enhance.
     * @param getEntitySuggestionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntitiesSuggestionExample&gt; object if successful.
     */
    public List<EntitiesSuggestionExample> getEntitySuggestions(UUID appId, String versionId, UUID entityId, GetEntitySuggestionsOptionalParameter getEntitySuggestionsOptionalParameter) {
        return getEntitySuggestionsWithServiceResponseAsync(appId, versionId, entityId, getEntitySuggestionsOptionalParameter).toBlocking().single().body();
    }

    /**
     * Get suggestion examples that would improve the accuracy of the entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The target entity extractor model to enhance.
     * @param getEntitySuggestionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EntitiesSuggestionExample>> getEntitySuggestionsAsync(UUID appId, String versionId, UUID entityId, GetEntitySuggestionsOptionalParameter getEntitySuggestionsOptionalParameter, final ServiceCallback<List<EntitiesSuggestionExample>> serviceCallback) {
        return ServiceFuture.fromResponse(getEntitySuggestionsWithServiceResponseAsync(appId, versionId, entityId, getEntitySuggestionsOptionalParameter), serviceCallback);
    }

    /**
     * Get suggestion examples that would improve the accuracy of the entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The target entity extractor model to enhance.
     * @param getEntitySuggestionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntitiesSuggestionExample&gt; object
     */
    public Observable<List<EntitiesSuggestionExample>> getEntitySuggestionsAsync(UUID appId, String versionId, UUID entityId, GetEntitySuggestionsOptionalParameter getEntitySuggestionsOptionalParameter) {
        return getEntitySuggestionsWithServiceResponseAsync(appId, versionId, entityId, getEntitySuggestionsOptionalParameter).map(new Func1<ServiceResponse<List<EntitiesSuggestionExample>>, List<EntitiesSuggestionExample>>() {
            @Override
            public List<EntitiesSuggestionExample> call(ServiceResponse<List<EntitiesSuggestionExample>> response) {
                return response.body();
            }
        });
    }

    /**
     * Get suggestion examples that would improve the accuracy of the entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The target entity extractor model to enhance.
     * @param getEntitySuggestionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntitiesSuggestionExample&gt; object
     */
    public Observable<ServiceResponse<List<EntitiesSuggestionExample>>> getEntitySuggestionsWithServiceResponseAsync(UUID appId, String versionId, UUID entityId, GetEntitySuggestionsOptionalParameter getEntitySuggestionsOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (entityId == null) {
            throw new IllegalArgumentException("Parameter entityId is required and cannot be null.");
        }
        final Integer take = getEntitySuggestionsOptionalParameter != null ? getEntitySuggestionsOptionalParameter.take() : null;
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return getEntitySuggestionsWithServiceResponseAsync(appId, versionId, entityId, take);
    }

    /**
     * Get suggestion examples that would improve the accuracy of the entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The target entity extractor model to enhance.
     * @param take The number of entries to return. Maximum page size is 500. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntitiesSuggestionExample&gt; object
     */
    public Observable<ServiceResponse<List<EntitiesSuggestionExample>>> getEntitySuggestionsWithServiceResponseAsync(UUID appId, String versionId, UUID entityId, Integer take) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (entityId == null) {
            throw new IllegalArgumentException("Parameter entityId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.getEntitySuggestions(appId, versionId, entityId, take, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<EntitiesSuggestionExample>>>>() {
                @Override
                public Observable<ServiceResponse<List<EntitiesSuggestionExample>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<EntitiesSuggestionExample>> clientResponse = getEntitySuggestionsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<EntitiesSuggestionExample>> getEntitySuggestionsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<EntitiesSuggestionExample>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<EntitiesSuggestionExample>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Adds a list to an existing closed list.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param wordListCreateObject Words list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the int object if successful.
     */
    public int addSubList(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject) {
        return addSubListWithServiceResponseAsync(appId, versionId, clEntityId, wordListCreateObject).toBlocking().single().body();
    }

    /**
     * Adds a list to an existing closed list.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param wordListCreateObject Words list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Integer> addSubListAsync(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject, final ServiceCallback<Integer> serviceCallback) {
        return ServiceFuture.fromResponse(addSubListWithServiceResponseAsync(appId, versionId, clEntityId, wordListCreateObject), serviceCallback);
    }

    /**
     * Adds a list to an existing closed list.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param wordListCreateObject Words list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Integer object
     */
    public Observable<Integer> addSubListAsync(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject) {
        return addSubListWithServiceResponseAsync(appId, versionId, clEntityId, wordListCreateObject).map(new Func1<ServiceResponse<Integer>, Integer>() {
            @Override
            public Integer call(ServiceResponse<Integer> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds a list to an existing closed list.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param wordListCreateObject Words list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Integer object
     */
    public Observable<ServiceResponse<Integer>> addSubListWithServiceResponseAsync(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (clEntityId == null) {
            throw new IllegalArgumentException("Parameter clEntityId is required and cannot be null.");
        }
        if (wordListCreateObject == null) {
            throw new IllegalArgumentException("Parameter wordListCreateObject is required and cannot be null.");
        }
        Validator.validate(wordListCreateObject);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.addSubList(appId, versionId, clEntityId, wordListCreateObject, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Integer>>>() {
                @Override
                public Observable<ServiceResponse<Integer>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Integer> clientResponse = addSubListDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Integer> addSubListDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Integer, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<Integer>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Adds a customizable prebuilt domain along with all of its models to this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addCustomPrebuiltDomainOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UUID&gt; object if successful.
     */
    public List<UUID> addCustomPrebuiltDomain(UUID appId, String versionId, AddCustomPrebuiltDomainOptionalParameter addCustomPrebuiltDomainOptionalParameter) {
        return addCustomPrebuiltDomainWithServiceResponseAsync(appId, versionId, addCustomPrebuiltDomainOptionalParameter).toBlocking().single().body();
    }

    /**
     * Adds a customizable prebuilt domain along with all of its models to this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addCustomPrebuiltDomainOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<UUID>> addCustomPrebuiltDomainAsync(UUID appId, String versionId, AddCustomPrebuiltDomainOptionalParameter addCustomPrebuiltDomainOptionalParameter, final ServiceCallback<List<UUID>> serviceCallback) {
        return ServiceFuture.fromResponse(addCustomPrebuiltDomainWithServiceResponseAsync(appId, versionId, addCustomPrebuiltDomainOptionalParameter), serviceCallback);
    }

    /**
     * Adds a customizable prebuilt domain along with all of its models to this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addCustomPrebuiltDomainOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UUID&gt; object
     */
    public Observable<List<UUID>> addCustomPrebuiltDomainAsync(UUID appId, String versionId, AddCustomPrebuiltDomainOptionalParameter addCustomPrebuiltDomainOptionalParameter) {
        return addCustomPrebuiltDomainWithServiceResponseAsync(appId, versionId, addCustomPrebuiltDomainOptionalParameter).map(new Func1<ServiceResponse<List<UUID>>, List<UUID>>() {
            @Override
            public List<UUID> call(ServiceResponse<List<UUID>> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds a customizable prebuilt domain along with all of its models to this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addCustomPrebuiltDomainOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UUID&gt; object
     */
    public Observable<ServiceResponse<List<UUID>>> addCustomPrebuiltDomainWithServiceResponseAsync(UUID appId, String versionId, AddCustomPrebuiltDomainOptionalParameter addCustomPrebuiltDomainOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        final String domainName = addCustomPrebuiltDomainOptionalParameter != null ? addCustomPrebuiltDomainOptionalParameter.domainName() : null;
        PrebuiltDomainCreateBaseObject prebuiltDomainObject = new PrebuiltDomainCreateBaseObject();
        prebuiltDomainObject.withDomainName(null);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return addCustomPrebuiltDomainWithServiceResponseAsync(appId, versionId, domainName);
    }

    /**
     * Adds a customizable prebuilt domain along with all of its models to this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param domainName The domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UUID&gt; object
     */
    public Observable<ServiceResponse<List<UUID>>> addCustomPrebuiltDomainWithServiceResponseAsync(UUID appId, String versionId, String domainName) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        PrebuiltDomainCreateBaseObject prebuiltDomainObject = new PrebuiltDomainCreateBaseObject();
        prebuiltDomainObject.withDomainName(domainName);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.addCustomPrebuiltDomain(appId, versionId, this.client.acceptLanguage(), prebuiltDomainObject, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<UUID>>>>() {
                @Override
                public Observable<ServiceResponse<List<UUID>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<UUID>> clientResponse = addCustomPrebuiltDomainDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<UUID>> addCustomPrebuiltDomainDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<UUID>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<List<UUID>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Adds a custom prebuilt intent model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the custom prebuilt intent and the name of the domain to which this model belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    public UUID addCustomPrebuiltIntent(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject) {
        return addCustomPrebuiltIntentWithServiceResponseAsync(appId, versionId, prebuiltDomainModelCreateObject).toBlocking().single().body();
    }

    /**
     * Adds a custom prebuilt intent model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the custom prebuilt intent and the name of the domain to which this model belongs.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UUID> addCustomPrebuiltIntentAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject, final ServiceCallback<UUID> serviceCallback) {
        return ServiceFuture.fromResponse(addCustomPrebuiltIntentWithServiceResponseAsync(appId, versionId, prebuiltDomainModelCreateObject), serviceCallback);
    }

    /**
     * Adds a custom prebuilt intent model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the custom prebuilt intent and the name of the domain to which this model belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<UUID> addCustomPrebuiltIntentAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject) {
        return addCustomPrebuiltIntentWithServiceResponseAsync(appId, versionId, prebuiltDomainModelCreateObject).map(new Func1<ServiceResponse<UUID>, UUID>() {
            @Override
            public UUID call(ServiceResponse<UUID> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds a custom prebuilt intent model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the custom prebuilt intent and the name of the domain to which this model belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<ServiceResponse<UUID>> addCustomPrebuiltIntentWithServiceResponseAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (prebuiltDomainModelCreateObject == null) {
            throw new IllegalArgumentException("Parameter prebuiltDomainModelCreateObject is required and cannot be null.");
        }
        Validator.validate(prebuiltDomainModelCreateObject);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.addCustomPrebuiltIntent(appId, versionId, prebuiltDomainModelCreateObject, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UUID>>>() {
                @Override
                public Observable<ServiceResponse<UUID>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UUID> clientResponse = addCustomPrebuiltIntentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UUID> addCustomPrebuiltIntentDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UUID, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<UUID>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets custom prebuilt intents information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;IntentClassifier&gt; object if successful.
     */
    public List<IntentClassifier> listCustomPrebuiltIntents(UUID appId, String versionId) {
        return listCustomPrebuiltIntentsWithServiceResponseAsync(appId, versionId).toBlocking().single().body();
    }

    /**
     * Gets custom prebuilt intents information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IntentClassifier>> listCustomPrebuiltIntentsAsync(UUID appId, String versionId, final ServiceCallback<List<IntentClassifier>> serviceCallback) {
        return ServiceFuture.fromResponse(listCustomPrebuiltIntentsWithServiceResponseAsync(appId, versionId), serviceCallback);
    }

    /**
     * Gets custom prebuilt intents information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;IntentClassifier&gt; object
     */
    public Observable<List<IntentClassifier>> listCustomPrebuiltIntentsAsync(UUID appId, String versionId) {
        return listCustomPrebuiltIntentsWithServiceResponseAsync(appId, versionId).map(new Func1<ServiceResponse<List<IntentClassifier>>, List<IntentClassifier>>() {
            @Override
            public List<IntentClassifier> call(ServiceResponse<List<IntentClassifier>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets custom prebuilt intents information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;IntentClassifier&gt; object
     */
    public Observable<ServiceResponse<List<IntentClassifier>>> listCustomPrebuiltIntentsWithServiceResponseAsync(UUID appId, String versionId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.listCustomPrebuiltIntents(appId, versionId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<IntentClassifier>>>>() {
                @Override
                public Observable<ServiceResponse<List<IntentClassifier>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<IntentClassifier>> clientResponse = listCustomPrebuiltIntentsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<IntentClassifier>> listCustomPrebuiltIntentsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<IntentClassifier>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<IntentClassifier>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Adds a custom prebuilt entity model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the custom prebuilt entity and the name of the domain to which this model belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    public UUID addCustomPrebuiltEntity(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject) {
        return addCustomPrebuiltEntityWithServiceResponseAsync(appId, versionId, prebuiltDomainModelCreateObject).toBlocking().single().body();
    }

    /**
     * Adds a custom prebuilt entity model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the custom prebuilt entity and the name of the domain to which this model belongs.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UUID> addCustomPrebuiltEntityAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject, final ServiceCallback<UUID> serviceCallback) {
        return ServiceFuture.fromResponse(addCustomPrebuiltEntityWithServiceResponseAsync(appId, versionId, prebuiltDomainModelCreateObject), serviceCallback);
    }

    /**
     * Adds a custom prebuilt entity model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the custom prebuilt entity and the name of the domain to which this model belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<UUID> addCustomPrebuiltEntityAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject) {
        return addCustomPrebuiltEntityWithServiceResponseAsync(appId, versionId, prebuiltDomainModelCreateObject).map(new Func1<ServiceResponse<UUID>, UUID>() {
            @Override
            public UUID call(ServiceResponse<UUID> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds a custom prebuilt entity model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the custom prebuilt entity and the name of the domain to which this model belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<ServiceResponse<UUID>> addCustomPrebuiltEntityWithServiceResponseAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (prebuiltDomainModelCreateObject == null) {
            throw new IllegalArgumentException("Parameter prebuiltDomainModelCreateObject is required and cannot be null.");
        }
        Validator.validate(prebuiltDomainModelCreateObject);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.addCustomPrebuiltEntity(appId, versionId, prebuiltDomainModelCreateObject, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UUID>>>() {
                @Override
                public Observable<ServiceResponse<UUID>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UUID> clientResponse = addCustomPrebuiltEntityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UUID> addCustomPrebuiltEntityDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UUID, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<UUID>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all custom prebuilt entities information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityExtractor&gt; object if successful.
     */
    public List<EntityExtractor> listCustomPrebuiltEntities(UUID appId, String versionId) {
        return listCustomPrebuiltEntitiesWithServiceResponseAsync(appId, versionId).toBlocking().single().body();
    }

    /**
     * Gets all custom prebuilt entities information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EntityExtractor>> listCustomPrebuiltEntitiesAsync(UUID appId, String versionId, final ServiceCallback<List<EntityExtractor>> serviceCallback) {
        return ServiceFuture.fromResponse(listCustomPrebuiltEntitiesWithServiceResponseAsync(appId, versionId), serviceCallback);
    }

    /**
     * Gets all custom prebuilt entities information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityExtractor&gt; object
     */
    public Observable<List<EntityExtractor>> listCustomPrebuiltEntitiesAsync(UUID appId, String versionId) {
        return listCustomPrebuiltEntitiesWithServiceResponseAsync(appId, versionId).map(new Func1<ServiceResponse<List<EntityExtractor>>, List<EntityExtractor>>() {
            @Override
            public List<EntityExtractor> call(ServiceResponse<List<EntityExtractor>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets all custom prebuilt entities information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityExtractor&gt; object
     */
    public Observable<ServiceResponse<List<EntityExtractor>>> listCustomPrebuiltEntitiesWithServiceResponseAsync(UUID appId, String versionId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.listCustomPrebuiltEntities(appId, versionId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<EntityExtractor>>>>() {
                @Override
                public Observable<ServiceResponse<List<EntityExtractor>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<EntityExtractor>> clientResponse = listCustomPrebuiltEntitiesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<EntityExtractor>> listCustomPrebuiltEntitiesDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<EntityExtractor>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<EntityExtractor>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all custom prebuilt models information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;CustomPrebuiltModel&gt; object if successful.
     */
    public List<CustomPrebuiltModel> listCustomPrebuiltModels(UUID appId, String versionId) {
        return listCustomPrebuiltModelsWithServiceResponseAsync(appId, versionId).toBlocking().single().body();
    }

    /**
     * Gets all custom prebuilt models information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CustomPrebuiltModel>> listCustomPrebuiltModelsAsync(UUID appId, String versionId, final ServiceCallback<List<CustomPrebuiltModel>> serviceCallback) {
        return ServiceFuture.fromResponse(listCustomPrebuiltModelsWithServiceResponseAsync(appId, versionId), serviceCallback);
    }

    /**
     * Gets all custom prebuilt models information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CustomPrebuiltModel&gt; object
     */
    public Observable<List<CustomPrebuiltModel>> listCustomPrebuiltModelsAsync(UUID appId, String versionId) {
        return listCustomPrebuiltModelsWithServiceResponseAsync(appId, versionId).map(new Func1<ServiceResponse<List<CustomPrebuiltModel>>, List<CustomPrebuiltModel>>() {
            @Override
            public List<CustomPrebuiltModel> call(ServiceResponse<List<CustomPrebuiltModel>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets all custom prebuilt models information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CustomPrebuiltModel&gt; object
     */
    public Observable<ServiceResponse<List<CustomPrebuiltModel>>> listCustomPrebuiltModelsWithServiceResponseAsync(UUID appId, String versionId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.listCustomPrebuiltModels(appId, versionId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<CustomPrebuiltModel>>>>() {
                @Override
                public Observable<ServiceResponse<List<CustomPrebuiltModel>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<CustomPrebuiltModel>> clientResponse = listCustomPrebuiltModelsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<CustomPrebuiltModel>> listCustomPrebuiltModelsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<CustomPrebuiltModel>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<CustomPrebuiltModel>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes a prebuilt domain's models from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param domainName Domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus deleteCustomPrebuiltDomain(UUID appId, String versionId, String domainName) {
        return deleteCustomPrebuiltDomainWithServiceResponseAsync(appId, versionId, domainName).toBlocking().single().body();
    }

    /**
     * Deletes a prebuilt domain's models from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param domainName Domain name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> deleteCustomPrebuiltDomainAsync(UUID appId, String versionId, String domainName, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(deleteCustomPrebuiltDomainWithServiceResponseAsync(appId, versionId, domainName), serviceCallback);
    }

    /**
     * Deletes a prebuilt domain's models from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param domainName Domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> deleteCustomPrebuiltDomainAsync(UUID appId, String versionId, String domainName) {
        return deleteCustomPrebuiltDomainWithServiceResponseAsync(appId, versionId, domainName).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a prebuilt domain's models from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param domainName Domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> deleteCustomPrebuiltDomainWithServiceResponseAsync(UUID appId, String versionId, String domainName) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.deleteCustomPrebuiltDomain(appId, versionId, domainName, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = deleteCustomPrebuiltDomainDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> deleteCustomPrebuiltDomainDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets information about the hierarchical entity child model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HierarchicalChildEntity object if successful.
     */
    public HierarchicalChildEntity getHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId) {
        return getHierarchicalEntityChildWithServiceResponseAsync(appId, versionId, hEntityId, hChildId).toBlocking().single().body();
    }

    /**
     * Gets information about the hierarchical entity child model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<HierarchicalChildEntity> getHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId, final ServiceCallback<HierarchicalChildEntity> serviceCallback) {
        return ServiceFuture.fromResponse(getHierarchicalEntityChildWithServiceResponseAsync(appId, versionId, hEntityId, hChildId), serviceCallback);
    }

    /**
     * Gets information about the hierarchical entity child model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HierarchicalChildEntity object
     */
    public Observable<HierarchicalChildEntity> getHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId) {
        return getHierarchicalEntityChildWithServiceResponseAsync(appId, versionId, hEntityId, hChildId).map(new Func1<ServiceResponse<HierarchicalChildEntity>, HierarchicalChildEntity>() {
            @Override
            public HierarchicalChildEntity call(ServiceResponse<HierarchicalChildEntity> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about the hierarchical entity child model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HierarchicalChildEntity object
     */
    public Observable<ServiceResponse<HierarchicalChildEntity>> getHierarchicalEntityChildWithServiceResponseAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (hEntityId == null) {
            throw new IllegalArgumentException("Parameter hEntityId is required and cannot be null.");
        }
        if (hChildId == null) {
            throw new IllegalArgumentException("Parameter hChildId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.getHierarchicalEntityChild(appId, versionId, hEntityId, hChildId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<HierarchicalChildEntity>>>() {
                @Override
                public Observable<ServiceResponse<HierarchicalChildEntity>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<HierarchicalChildEntity> clientResponse = getHierarchicalEntityChildDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<HierarchicalChildEntity> getHierarchicalEntityChildDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<HierarchicalChildEntity, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<HierarchicalChildEntity>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Renames a single child in an existing hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param updateHierarchicalEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus updateHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId, UpdateHierarchicalEntityChildOptionalParameter updateHierarchicalEntityChildOptionalParameter) {
        return updateHierarchicalEntityChildWithServiceResponseAsync(appId, versionId, hEntityId, hChildId, updateHierarchicalEntityChildOptionalParameter).toBlocking().single().body();
    }

    /**
     * Renames a single child in an existing hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param updateHierarchicalEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> updateHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId, UpdateHierarchicalEntityChildOptionalParameter updateHierarchicalEntityChildOptionalParameter, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(updateHierarchicalEntityChildWithServiceResponseAsync(appId, versionId, hEntityId, hChildId, updateHierarchicalEntityChildOptionalParameter), serviceCallback);
    }

    /**
     * Renames a single child in an existing hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param updateHierarchicalEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> updateHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId, UpdateHierarchicalEntityChildOptionalParameter updateHierarchicalEntityChildOptionalParameter) {
        return updateHierarchicalEntityChildWithServiceResponseAsync(appId, versionId, hEntityId, hChildId, updateHierarchicalEntityChildOptionalParameter).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Renames a single child in an existing hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param updateHierarchicalEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> updateHierarchicalEntityChildWithServiceResponseAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId, UpdateHierarchicalEntityChildOptionalParameter updateHierarchicalEntityChildOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (hEntityId == null) {
            throw new IllegalArgumentException("Parameter hEntityId is required and cannot be null.");
        }
        if (hChildId == null) {
            throw new IllegalArgumentException("Parameter hChildId is required and cannot be null.");
        }
        final String name = updateHierarchicalEntityChildOptionalParameter != null ? updateHierarchicalEntityChildOptionalParameter.name() : null;
        HierarchicalChildModelUpdateObject hierarchicalChildModelUpdateObject = new HierarchicalChildModelUpdateObject();
        hierarchicalChildModelUpdateObject.withName(null);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return updateHierarchicalEntityChildWithServiceResponseAsync(appId, versionId, hEntityId, hChildId, name);
    }

    /**
     * Renames a single child in an existing hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param name the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> updateHierarchicalEntityChildWithServiceResponseAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId, String name) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (hEntityId == null) {
            throw new IllegalArgumentException("Parameter hEntityId is required and cannot be null.");
        }
        if (hChildId == null) {
            throw new IllegalArgumentException("Parameter hChildId is required and cannot be null.");
        }
        HierarchicalChildModelUpdateObject hierarchicalChildModelUpdateObject = new HierarchicalChildModelUpdateObject();
        hierarchicalChildModelUpdateObject.withName(name);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.updateHierarchicalEntityChild(appId, versionId, hEntityId, hChildId, this.client.acceptLanguage(), hierarchicalChildModelUpdateObject, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = updateHierarchicalEntityChildDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> updateHierarchicalEntityChildDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes a hierarchical entity extractor child from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus deleteHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId) {
        return deleteHierarchicalEntityChildWithServiceResponseAsync(appId, versionId, hEntityId, hChildId).toBlocking().single().body();
    }

    /**
     * Deletes a hierarchical entity extractor child from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> deleteHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(deleteHierarchicalEntityChildWithServiceResponseAsync(appId, versionId, hEntityId, hChildId), serviceCallback);
    }

    /**
     * Deletes a hierarchical entity extractor child from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> deleteHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId) {
        return deleteHierarchicalEntityChildWithServiceResponseAsync(appId, versionId, hEntityId, hChildId).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a hierarchical entity extractor child from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> deleteHierarchicalEntityChildWithServiceResponseAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (hEntityId == null) {
            throw new IllegalArgumentException("Parameter hEntityId is required and cannot be null.");
        }
        if (hChildId == null) {
            throw new IllegalArgumentException("Parameter hChildId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.deleteHierarchicalEntityChild(appId, versionId, hEntityId, hChildId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = deleteHierarchicalEntityChildDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> deleteHierarchicalEntityChildDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Creates a single child in an existing hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param addHierarchicalEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    public UUID addHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, AddHierarchicalEntityChildOptionalParameter addHierarchicalEntityChildOptionalParameter) {
        return addHierarchicalEntityChildWithServiceResponseAsync(appId, versionId, hEntityId, addHierarchicalEntityChildOptionalParameter).toBlocking().single().body();
    }

    /**
     * Creates a single child in an existing hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param addHierarchicalEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UUID> addHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, AddHierarchicalEntityChildOptionalParameter addHierarchicalEntityChildOptionalParameter, final ServiceCallback<UUID> serviceCallback) {
        return ServiceFuture.fromResponse(addHierarchicalEntityChildWithServiceResponseAsync(appId, versionId, hEntityId, addHierarchicalEntityChildOptionalParameter), serviceCallback);
    }

    /**
     * Creates a single child in an existing hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param addHierarchicalEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<UUID> addHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, AddHierarchicalEntityChildOptionalParameter addHierarchicalEntityChildOptionalParameter) {
        return addHierarchicalEntityChildWithServiceResponseAsync(appId, versionId, hEntityId, addHierarchicalEntityChildOptionalParameter).map(new Func1<ServiceResponse<UUID>, UUID>() {
            @Override
            public UUID call(ServiceResponse<UUID> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a single child in an existing hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param addHierarchicalEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<ServiceResponse<UUID>> addHierarchicalEntityChildWithServiceResponseAsync(UUID appId, String versionId, UUID hEntityId, AddHierarchicalEntityChildOptionalParameter addHierarchicalEntityChildOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (hEntityId == null) {
            throw new IllegalArgumentException("Parameter hEntityId is required and cannot be null.");
        }
        final String name = addHierarchicalEntityChildOptionalParameter != null ? addHierarchicalEntityChildOptionalParameter.name() : null;
        HierarchicalChildModelCreateObject hierarchicalChildModelCreateObject = new HierarchicalChildModelCreateObject();
        hierarchicalChildModelCreateObject.withName(null);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return addHierarchicalEntityChildWithServiceResponseAsync(appId, versionId, hEntityId, name);
    }

    /**
     * Creates a single child in an existing hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param name the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<ServiceResponse<UUID>> addHierarchicalEntityChildWithServiceResponseAsync(UUID appId, String versionId, UUID hEntityId, String name) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (hEntityId == null) {
            throw new IllegalArgumentException("Parameter hEntityId is required and cannot be null.");
        }
        HierarchicalChildModelCreateObject hierarchicalChildModelCreateObject = new HierarchicalChildModelCreateObject();
        hierarchicalChildModelCreateObject.withName(name);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.addHierarchicalEntityChild(appId, versionId, hEntityId, this.client.acceptLanguage(), hierarchicalChildModelCreateObject, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UUID>>>() {
                @Override
                public Observable<ServiceResponse<UUID>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UUID> clientResponse = addHierarchicalEntityChildDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UUID> addHierarchicalEntityChildDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UUID, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<UUID>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Creates a single child in an existing composite entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param addCompositeEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    public UUID addCompositeEntityChild(UUID appId, String versionId, UUID cEntityId, AddCompositeEntityChildOptionalParameter addCompositeEntityChildOptionalParameter) {
        return addCompositeEntityChildWithServiceResponseAsync(appId, versionId, cEntityId, addCompositeEntityChildOptionalParameter).toBlocking().single().body();
    }

    /**
     * Creates a single child in an existing composite entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param addCompositeEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UUID> addCompositeEntityChildAsync(UUID appId, String versionId, UUID cEntityId, AddCompositeEntityChildOptionalParameter addCompositeEntityChildOptionalParameter, final ServiceCallback<UUID> serviceCallback) {
        return ServiceFuture.fromResponse(addCompositeEntityChildWithServiceResponseAsync(appId, versionId, cEntityId, addCompositeEntityChildOptionalParameter), serviceCallback);
    }

    /**
     * Creates a single child in an existing composite entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param addCompositeEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<UUID> addCompositeEntityChildAsync(UUID appId, String versionId, UUID cEntityId, AddCompositeEntityChildOptionalParameter addCompositeEntityChildOptionalParameter) {
        return addCompositeEntityChildWithServiceResponseAsync(appId, versionId, cEntityId, addCompositeEntityChildOptionalParameter).map(new Func1<ServiceResponse<UUID>, UUID>() {
            @Override
            public UUID call(ServiceResponse<UUID> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a single child in an existing composite entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param addCompositeEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<ServiceResponse<UUID>> addCompositeEntityChildWithServiceResponseAsync(UUID appId, String versionId, UUID cEntityId, AddCompositeEntityChildOptionalParameter addCompositeEntityChildOptionalParameter) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (cEntityId == null) {
            throw new IllegalArgumentException("Parameter cEntityId is required and cannot be null.");
        }
        final String name = addCompositeEntityChildOptionalParameter != null ? addCompositeEntityChildOptionalParameter.name() : null;
        CompositeChildModelCreateObject compositeChildModelCreateObject = new CompositeChildModelCreateObject();
        compositeChildModelCreateObject.withName(null);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());

        return addCompositeEntityChildWithServiceResponseAsync(appId, versionId, cEntityId, name);
    }

    /**
     * Creates a single child in an existing composite entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param name the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    public Observable<ServiceResponse<UUID>> addCompositeEntityChildWithServiceResponseAsync(UUID appId, String versionId, UUID cEntityId, String name) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (cEntityId == null) {
            throw new IllegalArgumentException("Parameter cEntityId is required and cannot be null.");
        }
        CompositeChildModelCreateObject compositeChildModelCreateObject = new CompositeChildModelCreateObject();
        compositeChildModelCreateObject.withName(name);
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.addCompositeEntityChild(appId, versionId, cEntityId, this.client.acceptLanguage(), compositeChildModelCreateObject, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UUID>>>() {
                @Override
                public Observable<ServiceResponse<UUID>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UUID> clientResponse = addCompositeEntityChildDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UUID> addCompositeEntityChildDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UUID, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<UUID>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes a composite entity extractor child from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param cChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    public OperationStatus deleteCompositeEntityChild(UUID appId, String versionId, UUID cEntityId, UUID cChildId) {
        return deleteCompositeEntityChildWithServiceResponseAsync(appId, versionId, cEntityId, cChildId).toBlocking().single().body();
    }

    /**
     * Deletes a composite entity extractor child from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param cChildId The hierarchical entity extractor child ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatus> deleteCompositeEntityChildAsync(UUID appId, String versionId, UUID cEntityId, UUID cChildId, final ServiceCallback<OperationStatus> serviceCallback) {
        return ServiceFuture.fromResponse(deleteCompositeEntityChildWithServiceResponseAsync(appId, versionId, cEntityId, cChildId), serviceCallback);
    }

    /**
     * Deletes a composite entity extractor child from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param cChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<OperationStatus> deleteCompositeEntityChildAsync(UUID appId, String versionId, UUID cEntityId, UUID cChildId) {
        return deleteCompositeEntityChildWithServiceResponseAsync(appId, versionId, cEntityId, cChildId).map(new Func1<ServiceResponse<OperationStatus>, OperationStatus>() {
            @Override
            public OperationStatus call(ServiceResponse<OperationStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a composite entity extractor child from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param cChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    public Observable<ServiceResponse<OperationStatus>> deleteCompositeEntityChildWithServiceResponseAsync(UUID appId, String versionId, UUID cEntityId, UUID cChildId) {
        if (this.client.azureRegion() == null) {
            throw new IllegalArgumentException("Parameter this.client.azureRegion() is required and cannot be null.");
        }
        if (appId == null) {
            throw new IllegalArgumentException("Parameter appId is required and cannot be null.");
        }
        if (versionId == null) {
            throw new IllegalArgumentException("Parameter versionId is required and cannot be null.");
        }
        if (cEntityId == null) {
            throw new IllegalArgumentException("Parameter cEntityId is required and cannot be null.");
        }
        if (cChildId == null) {
            throw new IllegalArgumentException("Parameter cChildId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{AzureRegion}", this.client.azureRegion());
        return service.deleteCompositeEntityChild(appId, versionId, cEntityId, cChildId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatus>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatus> clientResponse = deleteCompositeEntityChildDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatus> deleteCompositeEntityChildDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatus, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatus>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
