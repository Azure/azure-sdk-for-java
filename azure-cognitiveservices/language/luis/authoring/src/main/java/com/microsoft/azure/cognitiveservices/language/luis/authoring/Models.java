/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.language.luis.authoring;

import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddIntentOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListIntentsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddEntityOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListEntitiesOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListHierarchicalEntitiesOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListCompositeEntitiesOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListClosedListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListPrebuiltsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListModelsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ExamplesMethodOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateIntentOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.DeleteIntentOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateEntityOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatchClosedListOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.GetIntentSuggestionsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.GetEntitySuggestionsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddCustomPrebuiltDomainModelsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateHierarchicalEntityChildOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddHierarchicalEntityChildOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddCompositeEntityChildOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.GetRegexEntityInfosOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.GetPatternAnyEntityInfosOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreatePrebuiltEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateClosedListEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateRegexEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateCompositeEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreatePatternAnyEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateHierarchicalEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateCustomPrebuiltEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddExplicitListItemOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdatePrebuiltEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateClosedListEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateRegexEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateCompositeEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdatePatternAnyEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateHierarchicalEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateCustomPrebuiltEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateExplicitListItemOptionalParameter;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AvailablePrebuiltEntityModel;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListEntityExtractor;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListModelCreateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListModelUpdateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CompositeEntityExtractor;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CompositeEntityModel;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CustomPrebuiltModel;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntitiesSuggestionExample;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityExtractor;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ExplicitListItem;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.HierarchicalChildEntity;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.HierarchicalEntityExtractor;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.HierarchicalEntityModel;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentClassifier;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentsSuggestionExample;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LabelTextObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelInfoResponse;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyEntityExtractor;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyModelCreateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyModelUpdateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomainModelCreateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltEntityExtractor;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexEntityExtractor;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexModelCreateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexModelUpdateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.WordListBaseUpdateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.WordListObject;
import java.util.List;
import java.util.UUID;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Models.
 */
public interface Models {
    /**
     * Adds an intent classifier to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID addIntent(UUID appId, String versionId, AddIntentOptionalParameter addIntentOptionalParameter);

    /**
     * Adds an intent classifier to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> addIntentAsync(UUID appId, String versionId, AddIntentOptionalParameter addIntentOptionalParameter);

    /**
     * Gets information about the intent models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listIntentsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;IntentClassifier&gt; object if successful.
     */
    List<IntentClassifier> listIntents(UUID appId, String versionId, ListIntentsOptionalParameter listIntentsOptionalParameter);

    /**
     * Gets information about the intent models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listIntentsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;IntentClassifier&gt; object
     */
    Observable<List<IntentClassifier>> listIntentsAsync(UUID appId, String versionId, ListIntentsOptionalParameter listIntentsOptionalParameter);

    /**
     * Adds an entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addEntityOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID addEntity(UUID appId, String versionId, AddEntityOptionalParameter addEntityOptionalParameter);

    /**
     * Adds an entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addEntityOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> addEntityAsync(UUID appId, String versionId, AddEntityOptionalParameter addEntityOptionalParameter);

    /**
     * Gets information about the entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityExtractor&gt; object if successful.
     */
    List<EntityExtractor> listEntities(UUID appId, String versionId, ListEntitiesOptionalParameter listEntitiesOptionalParameter);

    /**
     * Gets information about the entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityExtractor&gt; object
     */
    Observable<List<EntityExtractor>> listEntitiesAsync(UUID appId, String versionId, ListEntitiesOptionalParameter listEntitiesOptionalParameter);


    /**
     * Adds a hierarchical entity extractor to the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hierarchicalModelCreateObject A model containing the name and children of the new entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID addHierarchicalEntity(UUID appId, String versionId, HierarchicalEntityModel hierarchicalModelCreateObject);

    /**
     * Adds a hierarchical entity extractor to the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hierarchicalModelCreateObject A model containing the name and children of the new entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> addHierarchicalEntityAsync(UUID appId, String versionId, HierarchicalEntityModel hierarchicalModelCreateObject);


    /**
     * Gets information about the hierarchical entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listHierarchicalEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;HierarchicalEntityExtractor&gt; object if successful.
     */
    List<HierarchicalEntityExtractor> listHierarchicalEntities(UUID appId, String versionId, ListHierarchicalEntitiesOptionalParameter listHierarchicalEntitiesOptionalParameter);

    /**
     * Gets information about the hierarchical entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listHierarchicalEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;HierarchicalEntityExtractor&gt; object
     */
    Observable<List<HierarchicalEntityExtractor>> listHierarchicalEntitiesAsync(UUID appId, String versionId, ListHierarchicalEntitiesOptionalParameter listHierarchicalEntitiesOptionalParameter);


    /**
     * Adds a composite entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param compositeModelCreateObject A model containing the name and children of the new entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID addCompositeEntity(UUID appId, String versionId, CompositeEntityModel compositeModelCreateObject);

    /**
     * Adds a composite entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param compositeModelCreateObject A model containing the name and children of the new entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> addCompositeEntityAsync(UUID appId, String versionId, CompositeEntityModel compositeModelCreateObject);


    /**
     * Gets information about the composite entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listCompositeEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;CompositeEntityExtractor&gt; object if successful.
     */
    List<CompositeEntityExtractor> listCompositeEntities(UUID appId, String versionId, ListCompositeEntitiesOptionalParameter listCompositeEntitiesOptionalParameter);

    /**
     * Gets information about the composite entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listCompositeEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CompositeEntityExtractor&gt; object
     */
    Observable<List<CompositeEntityExtractor>> listCompositeEntitiesAsync(UUID appId, String versionId, ListCompositeEntitiesOptionalParameter listCompositeEntitiesOptionalParameter);

    /**
     * Gets information about the closedlist models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listClosedListsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ClosedListEntityExtractor&gt; object if successful.
     */
    List<ClosedListEntityExtractor> listClosedLists(UUID appId, String versionId, ListClosedListsOptionalParameter listClosedListsOptionalParameter);

    /**
     * Gets information about the closedlist models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listClosedListsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ClosedListEntityExtractor&gt; object
     */
    Observable<List<ClosedListEntityExtractor>> listClosedListsAsync(UUID appId, String versionId, ListClosedListsOptionalParameter listClosedListsOptionalParameter);


    /**
     * Adds a closed list model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param closedListModelCreateObject A model containing the name and words for the new closed list entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID addClosedList(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject);

    /**
     * Adds a closed list model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param closedListModelCreateObject A model containing the name and words for the new closed list entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> addClosedListAsync(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject);



    /**
     * Adds a list of prebuilt entity extractors to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltExtractorNames An array of prebuilt entity extractor names.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PrebuiltEntityExtractor&gt; object if successful.
     */
    List<PrebuiltEntityExtractor> addPrebuilt(UUID appId, String versionId, List<String> prebuiltExtractorNames);

    /**
     * Adds a list of prebuilt entity extractors to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltExtractorNames An array of prebuilt entity extractor names.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PrebuiltEntityExtractor&gt; object
     */
    Observable<List<PrebuiltEntityExtractor>> addPrebuiltAsync(UUID appId, String versionId, List<String> prebuiltExtractorNames);


    /**
     * Gets information about the prebuilt entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listPrebuiltsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PrebuiltEntityExtractor&gt; object if successful.
     */
    List<PrebuiltEntityExtractor> listPrebuilts(UUID appId, String versionId, ListPrebuiltsOptionalParameter listPrebuiltsOptionalParameter);

    /**
     * Gets information about the prebuilt entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listPrebuiltsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PrebuiltEntityExtractor&gt; object
     */
    Observable<List<PrebuiltEntityExtractor>> listPrebuiltsAsync(UUID appId, String versionId, ListPrebuiltsOptionalParameter listPrebuiltsOptionalParameter);


    /**
     * Gets all the available prebuilt entity extractors for the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;AvailablePrebuiltEntityModel&gt; object if successful.
     */
    List<AvailablePrebuiltEntityModel> listPrebuiltEntities(UUID appId, String versionId);

    /**
     * Gets all the available prebuilt entity extractors for the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AvailablePrebuiltEntityModel&gt; object
     */
    Observable<List<AvailablePrebuiltEntityModel>> listPrebuiltEntitiesAsync(UUID appId, String versionId);


    /**
     * Gets information about the application version models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listModelsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ModelInfoResponse&gt; object if successful.
     */
    List<ModelInfoResponse> listModels(UUID appId, String versionId, ListModelsOptionalParameter listModelsOptionalParameter);

    /**
     * Gets information about the application version models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listModelsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ModelInfoResponse&gt; object
     */
    Observable<List<ModelInfoResponse>> listModelsAsync(UUID appId, String versionId, ListModelsOptionalParameter listModelsOptionalParameter);

    /**
     * Gets the utterances for the given model in the given app version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param modelId The ID (GUID) of the model.
     * @param examplesMethodOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;LabelTextObject&gt; object if successful.
     */
    List<LabelTextObject> examplesMethod(UUID appId, String versionId, String modelId, ExamplesMethodOptionalParameter examplesMethodOptionalParameter);

    /**
     * Gets the utterances for the given model in the given app version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param modelId The ID (GUID) of the model.
     * @param examplesMethodOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LabelTextObject&gt; object
     */
    Observable<List<LabelTextObject>> examplesMethodAsync(UUID appId, String versionId, String modelId, ExamplesMethodOptionalParameter examplesMethodOptionalParameter);


    /**
     * Gets information about the intent model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IntentClassifier object if successful.
     */
    IntentClassifier getIntent(UUID appId, String versionId, UUID intentId);

    /**
     * Gets information about the intent model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntentClassifier object
     */
    Observable<IntentClassifier> getIntentAsync(UUID appId, String versionId, UUID intentId);


    /**
     * Updates the name of an intent classifier.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param updateIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateIntent(UUID appId, String versionId, UUID intentId, UpdateIntentOptionalParameter updateIntentOptionalParameter);

    /**
     * Updates the name of an intent classifier.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param updateIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateIntentAsync(UUID appId, String versionId, UUID intentId, UpdateIntentOptionalParameter updateIntentOptionalParameter);

    /**
     * Deletes an intent classifier from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param deleteIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteIntent(UUID appId, String versionId, UUID intentId, DeleteIntentOptionalParameter deleteIntentOptionalParameter);

    /**
     * Deletes an intent classifier from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param deleteIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteIntentAsync(UUID appId, String versionId, UUID intentId, DeleteIntentOptionalParameter deleteIntentOptionalParameter);


    /**
     * Gets information about the entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityExtractor object if successful.
     */
    EntityExtractor getEntity(UUID appId, String versionId, UUID entityId);

    /**
     * Gets information about the entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityExtractor object
     */
    Observable<EntityExtractor> getEntityAsync(UUID appId, String versionId, UUID entityId);


    /**
     * Updates the name of an entity extractor.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param updateEntityOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateEntity(UUID appId, String versionId, UUID entityId, UpdateEntityOptionalParameter updateEntityOptionalParameter);

    /**
     * Updates the name of an entity extractor.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param updateEntityOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateEntityAsync(UUID appId, String versionId, UUID entityId, UpdateEntityOptionalParameter updateEntityOptionalParameter);


    /**
     * Deletes an entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteEntity(UUID appId, String versionId, UUID entityId);

    /**
     * Deletes an entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteEntityAsync(UUID appId, String versionId, UUID entityId);



    /**
     * Gets information about the hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HierarchicalEntityExtractor object if successful.
     */
    HierarchicalEntityExtractor getHierarchicalEntity(UUID appId, String versionId, UUID hEntityId);

    /**
     * Gets information about the hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HierarchicalEntityExtractor object
     */
    Observable<HierarchicalEntityExtractor> getHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId);



    /**
     * Updates the name and children of a hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hierarchicalModelUpdateObject Model containing names of the children of the hierarchical entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateHierarchicalEntity(UUID appId, String versionId, UUID hEntityId, HierarchicalEntityModel hierarchicalModelUpdateObject);

    /**
     * Updates the name and children of a hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hierarchicalModelUpdateObject Model containing names of the children of the hierarchical entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId, HierarchicalEntityModel hierarchicalModelUpdateObject);



    /**
     * Deletes a hierarchical entity extractor from the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteHierarchicalEntity(UUID appId, String versionId, UUID hEntityId);

    /**
     * Deletes a hierarchical entity extractor from the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId);



    /**
     * Gets information about the composite entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CompositeEntityExtractor object if successful.
     */
    CompositeEntityExtractor getCompositeEntity(UUID appId, String versionId, UUID cEntityId);

    /**
     * Gets information about the composite entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompositeEntityExtractor object
     */
    Observable<CompositeEntityExtractor> getCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId);



    /**
     * Updates the composite entity extractor.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param compositeModelUpdateObject A model object containing the new entity extractor name and children.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateCompositeEntity(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject);

    /**
     * Updates the composite entity extractor.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param compositeModelUpdateObject A model object containing the new entity extractor name and children.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject);



    /**
     * Deletes a composite entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteCompositeEntity(UUID appId, String versionId, UUID cEntityId);

    /**
     * Deletes a composite entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId);



    /**
     * Gets information of a closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClosedListEntityExtractor object if successful.
     */
    ClosedListEntityExtractor getClosedList(UUID appId, String versionId, UUID clEntityId);

    /**
     * Gets information of a closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClosedListEntityExtractor object
     */
    Observable<ClosedListEntityExtractor> getClosedListAsync(UUID appId, String versionId, UUID clEntityId);



    /**
     * Updates the closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @param closedListModelUpdateObject The new entity name and words list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateClosedList(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject);

    /**
     * Updates the closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @param closedListModelUpdateObject The new entity name and words list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateClosedListAsync(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject);


    /**
     * Adds a batch of sublists to an existing closedlist.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @param patchClosedListOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus patchClosedList(UUID appId, String versionId, UUID clEntityId, PatchClosedListOptionalParameter patchClosedListOptionalParameter);

    /**
     * Adds a batch of sublists to an existing closedlist.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @param patchClosedListOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> patchClosedListAsync(UUID appId, String versionId, UUID clEntityId, PatchClosedListOptionalParameter patchClosedListOptionalParameter);


    /**
     * Deletes a closed list model from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteClosedList(UUID appId, String versionId, UUID clEntityId);

    /**
     * Deletes a closed list model from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteClosedListAsync(UUID appId, String versionId, UUID clEntityId);



    /**
     * Gets information about the prebuilt entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PrebuiltEntityExtractor object if successful.
     */
    PrebuiltEntityExtractor getPrebuilt(UUID appId, String versionId, UUID prebuiltId);

    /**
     * Gets information about the prebuilt entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrebuiltEntityExtractor object
     */
    Observable<PrebuiltEntityExtractor> getPrebuiltAsync(UUID appId, String versionId, UUID prebuiltId);



    /**
     * Deletes a prebuilt entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deletePrebuilt(UUID appId, String versionId, UUID prebuiltId);

    /**
     * Deletes a prebuilt entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deletePrebuiltAsync(UUID appId, String versionId, UUID prebuiltId);



    /**
     * Deletes a sublist of a specific closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param subListId The sublist ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteSubList(UUID appId, String versionId, UUID clEntityId, int subListId);

    /**
     * Deletes a sublist of a specific closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param subListId The sublist ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteSubListAsync(UUID appId, String versionId, UUID clEntityId, int subListId);



    /**
     * Updates one of the closed list's sublists.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param subListId The sublist ID.
     * @param wordListBaseUpdateObject A sublist update object containing the new canonical form and the list of words.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateSubList(UUID appId, String versionId, UUID clEntityId, int subListId, WordListBaseUpdateObject wordListBaseUpdateObject);

    /**
     * Updates one of the closed list's sublists.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param subListId The sublist ID.
     * @param wordListBaseUpdateObject A sublist update object containing the new canonical form and the list of words.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateSubListAsync(UUID appId, String versionId, UUID clEntityId, int subListId, WordListBaseUpdateObject wordListBaseUpdateObject);


    /**
     * Suggests examples that would improve the accuracy of the intent model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param getIntentSuggestionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;IntentsSuggestionExample&gt; object if successful.
     */
    List<IntentsSuggestionExample> getIntentSuggestions(UUID appId, String versionId, UUID intentId, GetIntentSuggestionsOptionalParameter getIntentSuggestionsOptionalParameter);

    /**
     * Suggests examples that would improve the accuracy of the intent model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param getIntentSuggestionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;IntentsSuggestionExample&gt; object
     */
    Observable<List<IntentsSuggestionExample>> getIntentSuggestionsAsync(UUID appId, String versionId, UUID intentId, GetIntentSuggestionsOptionalParameter getIntentSuggestionsOptionalParameter);

    /**
     * Get suggestion examples that would improve the accuracy of the entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The target entity extractor model to enhance.
     * @param getEntitySuggestionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntitiesSuggestionExample&gt; object if successful.
     */
    List<EntitiesSuggestionExample> getEntitySuggestions(UUID appId, String versionId, UUID entityId, GetEntitySuggestionsOptionalParameter getEntitySuggestionsOptionalParameter);

    /**
     * Get suggestion examples that would improve the accuracy of the entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The target entity extractor model to enhance.
     * @param getEntitySuggestionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntitiesSuggestionExample&gt; object
     */
    Observable<List<EntitiesSuggestionExample>> getEntitySuggestionsAsync(UUID appId, String versionId, UUID entityId, GetEntitySuggestionsOptionalParameter getEntitySuggestionsOptionalParameter);


    /**
     * Adds a list to an existing closed list.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param wordListCreateObject Words list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the int object if successful.
     */
    int addSubList(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject);

    /**
     * Adds a list to an existing closed list.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param wordListCreateObject Words list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    Observable<Integer> addSubListAsync(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject);


    /**
     * Adds a customizable prebuilt domain along with all of its models to this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addCustomPrebuiltDomainOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UUID&gt; object if successful.
     */
    List<UUID> addCustomPrebuiltDomain(UUID appId, String versionId, AddCustomPrebuiltDomainModelsOptionalParameter addCustomPrebuiltDomainOptionalParameter);

    /**
     * Adds a customizable prebuilt domain along with all of its models to this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addCustomPrebuiltDomainOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UUID&gt; object
     */
    Observable<List<UUID>> addCustomPrebuiltDomainAsync(UUID appId, String versionId, AddCustomPrebuiltDomainModelsOptionalParameter addCustomPrebuiltDomainOptionalParameter);


    /**
     * Adds a custom prebuilt intent model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the custom prebuilt intent and the name of the domain to
      *  which this model belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID addCustomPrebuiltIntent(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject);

    /**
     * Adds a custom prebuilt intent model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the custom prebuilt intent and the name of the domain to
      *  which this model belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> addCustomPrebuiltIntentAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject);



    /**
     * Gets custom prebuilt intents information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;IntentClassifier&gt; object if successful.
     */
    List<IntentClassifier> listCustomPrebuiltIntents(UUID appId, String versionId);

    /**
     * Gets custom prebuilt intents information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;IntentClassifier&gt; object
     */
    Observable<List<IntentClassifier>> listCustomPrebuiltIntentsAsync(UUID appId, String versionId);



    /**
     * Adds a custom prebuilt entity model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the custom prebuilt entity and the name of the domain to
      *  which this model belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID addCustomPrebuiltEntity(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject);

    /**
     * Adds a custom prebuilt entity model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the custom prebuilt entity and the name of the domain to
      *  which this model belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> addCustomPrebuiltEntityAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject);



    /**
     * Gets all custom prebuilt entities information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityExtractor&gt; object if successful.
     */
    List<EntityExtractor> listCustomPrebuiltEntities(UUID appId, String versionId);

    /**
     * Gets all custom prebuilt entities information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityExtractor&gt; object
     */
    Observable<List<EntityExtractor>> listCustomPrebuiltEntitiesAsync(UUID appId, String versionId);



    /**
     * Gets all custom prebuilt models information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;CustomPrebuiltModel&gt; object if successful.
     */
    List<CustomPrebuiltModel> listCustomPrebuiltModels(UUID appId, String versionId);

    /**
     * Gets all custom prebuilt models information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CustomPrebuiltModel&gt; object
     */
    Observable<List<CustomPrebuiltModel>> listCustomPrebuiltModelsAsync(UUID appId, String versionId);



    /**
     * Deletes a prebuilt domain's models from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param domainName Domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteCustomPrebuiltDomain(UUID appId, String versionId, String domainName);

    /**
     * Deletes a prebuilt domain's models from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param domainName Domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteCustomPrebuiltDomainAsync(UUID appId, String versionId, String domainName);



    /**
     * Gets information about the hierarchical entity child model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HierarchicalChildEntity object if successful.
     */
    HierarchicalChildEntity getHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId);

    /**
     * Gets information about the hierarchical entity child model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HierarchicalChildEntity object
     */
    Observable<HierarchicalChildEntity> getHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId);


    /**
     * Renames a single child in an existing hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param updateHierarchicalEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId, UpdateHierarchicalEntityChildOptionalParameter updateHierarchicalEntityChildOptionalParameter);

    /**
     * Renames a single child in an existing hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param updateHierarchicalEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId, UpdateHierarchicalEntityChildOptionalParameter updateHierarchicalEntityChildOptionalParameter);


    /**
     * Deletes a hierarchical entity extractor child from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId);

    /**
     * Deletes a hierarchical entity extractor child from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId);


    /**
     * Creates a single child in an existing hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param addHierarchicalEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID addHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, AddHierarchicalEntityChildOptionalParameter addHierarchicalEntityChildOptionalParameter);

    /**
     * Creates a single child in an existing hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param addHierarchicalEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> addHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, AddHierarchicalEntityChildOptionalParameter addHierarchicalEntityChildOptionalParameter);

    /**
     * Creates a single child in an existing composite entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param addCompositeEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID addCompositeEntityChild(UUID appId, String versionId, UUID cEntityId, AddCompositeEntityChildOptionalParameter addCompositeEntityChildOptionalParameter);

    /**
     * Creates a single child in an existing composite entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param addCompositeEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> addCompositeEntityChildAsync(UUID appId, String versionId, UUID cEntityId, AddCompositeEntityChildOptionalParameter addCompositeEntityChildOptionalParameter);


    /**
     * Deletes a composite entity extractor child from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param cChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteCompositeEntityChild(UUID appId, String versionId, UUID cEntityId, UUID cChildId);

    /**
     * Deletes a composite entity extractor child from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param cChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteCompositeEntityChildAsync(UUID appId, String versionId, UUID cEntityId, UUID cChildId);


    /**
     * Gets information about the regex entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param getRegexEntityInfosOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;RegexEntityExtractor&gt; object if successful.
     */
    List<RegexEntityExtractor> getRegexEntityInfos(UUID appId, String versionId, GetRegexEntityInfosOptionalParameter getRegexEntityInfosOptionalParameter);

    /**
     * Gets information about the regex entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param getRegexEntityInfosOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RegexEntityExtractor&gt; object
     */
    Observable<List<RegexEntityExtractor>> getRegexEntityInfosAsync(UUID appId, String versionId, GetRegexEntityInfosOptionalParameter getRegexEntityInfosOptionalParameter);


    /**
     * Adds a regex entity model to the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityExtractorCreateObj A model object containing the name and regex pattern for the new regex entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID createRegexEntityModel(UUID appId, String versionId, RegexModelCreateObject regexEntityExtractorCreateObj);

    /**
     * Adds a regex entity model to the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityExtractorCreateObj A model object containing the name and regex pattern for the new regex entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> createRegexEntityModelAsync(UUID appId, String versionId, RegexModelCreateObject regexEntityExtractorCreateObj);


    /**
     * Get information about the Pattern.Any entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param getPatternAnyEntityInfosOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PatternAnyEntityExtractor&gt; object if successful.
     */
    List<PatternAnyEntityExtractor> getPatternAnyEntityInfos(UUID appId, String versionId, GetPatternAnyEntityInfosOptionalParameter getPatternAnyEntityInfosOptionalParameter);

    /**
     * Get information about the Pattern.Any entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param getPatternAnyEntityInfosOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PatternAnyEntityExtractor&gt; object
     */
    Observable<List<PatternAnyEntityExtractor>> getPatternAnyEntityInfosAsync(UUID appId, String versionId, GetPatternAnyEntityInfosOptionalParameter getPatternAnyEntityInfosOptionalParameter);


    /**
     * Adds a pattern.any entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param extractorCreateObject A model object containing the name and explicit list for the new Pattern.Any entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID createPatternAnyEntityModel(UUID appId, String versionId, PatternAnyModelCreateObject extractorCreateObject);

    /**
     * Adds a pattern.any entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param extractorCreateObject A model object containing the name and explicit list for the new Pattern.Any entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> createPatternAnyEntityModelAsync(UUID appId, String versionId, PatternAnyModelCreateObject extractorCreateObject);



    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityRole&gt; object if successful.
     */
    List<EntityRole> getEntityRoles(UUID appId, String versionId, UUID entityId);

    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityRole&gt; object
     */
    Observable<List<EntityRole>> getEntityRolesAsync(UUID appId, String versionId, UUID entityId);


    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID createEntityRole(UUID appId, String versionId, UUID entityId, CreateEntityRoleOptionalParameter createEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> createEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateEntityRoleOptionalParameter createEntityRoleOptionalParameter);


    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityRole&gt; object if successful.
     */
    List<EntityRole> getPrebuiltEntityRoles(UUID appId, String versionId, UUID entityId);

    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityRole&gt; object
     */
    Observable<List<EntityRole>> getPrebuiltEntityRolesAsync(UUID appId, String versionId, UUID entityId);


    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createPrebuiltEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID createPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, CreatePrebuiltEntityRoleOptionalParameter createPrebuiltEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createPrebuiltEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> createPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreatePrebuiltEntityRoleOptionalParameter createPrebuiltEntityRoleOptionalParameter);


    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityRole&gt; object if successful.
     */
    List<EntityRole> getClosedListEntityRoles(UUID appId, String versionId, UUID entityId);

    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityRole&gt; object
     */
    Observable<List<EntityRole>> getClosedListEntityRolesAsync(UUID appId, String versionId, UUID entityId);


    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createClosedListEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID createClosedListEntityRole(UUID appId, String versionId, UUID entityId, CreateClosedListEntityRoleOptionalParameter createClosedListEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createClosedListEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> createClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateClosedListEntityRoleOptionalParameter createClosedListEntityRoleOptionalParameter);


    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityRole&gt; object if successful.
     */
    List<EntityRole> getRegexEntityRoles(UUID appId, String versionId, UUID entityId);

    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityRole&gt; object
     */
    Observable<List<EntityRole>> getRegexEntityRolesAsync(UUID appId, String versionId, UUID entityId);


    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createRegexEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID createRegexEntityRole(UUID appId, String versionId, UUID entityId, CreateRegexEntityRoleOptionalParameter createRegexEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createRegexEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> createRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateRegexEntityRoleOptionalParameter createRegexEntityRoleOptionalParameter);


    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityRole&gt; object if successful.
     */
    List<EntityRole> getCompositeEntityRoles(UUID appId, String versionId, UUID cEntityId);

    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityRole&gt; object
     */
    Observable<List<EntityRole>> getCompositeEntityRolesAsync(UUID appId, String versionId, UUID cEntityId);


    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param createCompositeEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID createCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, CreateCompositeEntityRoleOptionalParameter createCompositeEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param createCompositeEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> createCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, CreateCompositeEntityRoleOptionalParameter createCompositeEntityRoleOptionalParameter);


    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityRole&gt; object if successful.
     */
    List<EntityRole> getPatternAnyEntityRoles(UUID appId, String versionId, UUID entityId);

    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityRole&gt; object
     */
    Observable<List<EntityRole>> getPatternAnyEntityRolesAsync(UUID appId, String versionId, UUID entityId);


    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createPatternAnyEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID createPatternAnyEntityRole(UUID appId, String versionId, UUID entityId, CreatePatternAnyEntityRoleOptionalParameter createPatternAnyEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createPatternAnyEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> createPatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreatePatternAnyEntityRoleOptionalParameter createPatternAnyEntityRoleOptionalParameter);


    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityRole&gt; object if successful.
     */
    List<EntityRole> getHierarchicalEntityRoles(UUID appId, String versionId, UUID hEntityId);

    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityRole&gt; object
     */
    Observable<List<EntityRole>> getHierarchicalEntityRolesAsync(UUID appId, String versionId, UUID hEntityId);


    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param createHierarchicalEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID createHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, CreateHierarchicalEntityRoleOptionalParameter createHierarchicalEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param createHierarchicalEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> createHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, CreateHierarchicalEntityRoleOptionalParameter createHierarchicalEntityRoleOptionalParameter);


    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityRole&gt; object if successful.
     */
    List<EntityRole> getCustomPrebuiltEntityRoles(UUID appId, String versionId, UUID entityId);

    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityRole&gt; object
     */
    Observable<List<EntityRole>> getCustomPrebuiltEntityRolesAsync(UUID appId, String versionId, UUID entityId);


    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createCustomPrebuiltEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID createCustomPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, CreateCustomPrebuiltEntityRoleOptionalParameter createCustomPrebuiltEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createCustomPrebuiltEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> createCustomPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateCustomPrebuiltEntityRoleOptionalParameter createCustomPrebuiltEntityRoleOptionalParameter);


    /**
     * Get the explicit list of the pattern.any entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ExplicitListItem&gt; object if successful.
     */
    List<ExplicitListItem> getExplicitList(UUID appId, String versionId, UUID entityId);

    /**
     * Get the explicit list of the pattern.any entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ExplicitListItem&gt; object
     */
    Observable<List<ExplicitListItem>> getExplicitListAsync(UUID appId, String versionId, UUID entityId);


    /**
     * Add a new item to the explicit list for the Pattern.Any entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param addExplicitListItemOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the int object if successful.
     */
    int addExplicitListItem(UUID appId, String versionId, UUID entityId, AddExplicitListItemOptionalParameter addExplicitListItemOptionalParameter);

    /**
     * Add a new item to the explicit list for the Pattern.Any entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param addExplicitListItemOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    Observable<Integer> addExplicitListItemAsync(UUID appId, String versionId, UUID entityId, AddExplicitListItemOptionalParameter addExplicitListItemOptionalParameter);


    /**
     * Gets information of a regex entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regex entity model ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RegexEntityExtractor object if successful.
     */
    RegexEntityExtractor getRegexEntityEntityInfo(UUID appId, String versionId, UUID regexEntityId);

    /**
     * Gets information of a regex entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regex entity model ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RegexEntityExtractor object
     */
    Observable<RegexEntityExtractor> getRegexEntityEntityInfoAsync(UUID appId, String versionId, UUID regexEntityId);



    /**
     * Updates the regex entity model .
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regex entity extractor ID.
     * @param regexEntityUpdateObject An object containing the new entity name and regex pattern.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateRegexEntityModel(UUID appId, String versionId, UUID regexEntityId, RegexModelUpdateObject regexEntityUpdateObject);

    /**
     * Updates the regex entity model .
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regex entity extractor ID.
     * @param regexEntityUpdateObject An object containing the new entity name and regex pattern.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateRegexEntityModelAsync(UUID appId, String versionId, UUID regexEntityId, RegexModelUpdateObject regexEntityUpdateObject);



    /**
     * Deletes a regex entity model from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regex entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteRegexEntityModel(UUID appId, String versionId, UUID regexEntityId);

    /**
     * Deletes a regex entity model from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regex entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteRegexEntityModelAsync(UUID appId, String versionId, UUID regexEntityId);



    /**
     * Gets information about the application version's Pattern.Any model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PatternAnyEntityExtractor object if successful.
     */
    PatternAnyEntityExtractor getPatternAnyEntityInfo(UUID appId, String versionId, UUID entityId);

    /**
     * Gets information about the application version's Pattern.Any model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PatternAnyEntityExtractor object
     */
    Observable<PatternAnyEntityExtractor> getPatternAnyEntityInfoAsync(UUID appId, String versionId, UUID entityId);



    /**
     * Updates the name and explicit list of a Pattern.Any entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param patternAnyUpdateObject An object containing the explicit list of the Pattern.Any entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updatePatternAnyEntityModel(UUID appId, String versionId, UUID entityId, PatternAnyModelUpdateObject patternAnyUpdateObject);

    /**
     * Updates the name and explicit list of a Pattern.Any entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param patternAnyUpdateObject An object containing the explicit list of the Pattern.Any entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updatePatternAnyEntityModelAsync(UUID appId, String versionId, UUID entityId, PatternAnyModelUpdateObject patternAnyUpdateObject);



    /**
     * Deletes a Pattern.Any entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deletePatternAnyEntityModel(UUID appId, String versionId, UUID entityId);

    /**
     * Deletes a Pattern.Any entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deletePatternAnyEntityModelAsync(UUID appId, String versionId, UUID entityId);



    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityRole object if successful.
     */
    EntityRole getEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityRole object
     */
    Observable<EntityRole> getEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);


    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updateEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateEntityRoleOptionalParameter updateEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updateEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateEntityRoleOptionalParameter updateEntityRoleOptionalParameter);


    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);



    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityRole object if successful.
     */
    EntityRole getPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityRole object
     */
    Observable<EntityRole> getPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);


    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updatePrebuiltEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updatePrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePrebuiltEntityRoleOptionalParameter updatePrebuiltEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updatePrebuiltEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updatePrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePrebuiltEntityRoleOptionalParameter updatePrebuiltEntityRoleOptionalParameter);


    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deletePrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deletePrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);



    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityRole object if successful.
     */
    EntityRole getClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityRole object
     */
    Observable<EntityRole> getClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);


    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updateClosedListEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateClosedListEntityRoleOptionalParameter updateClosedListEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updateClosedListEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateClosedListEntityRoleOptionalParameter updateClosedListEntityRoleOptionalParameter);


    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);



    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityRole object if successful.
     */
    EntityRole getRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityRole object
     */
    Observable<EntityRole> getRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);


    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updateRegexEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateRegexEntityRoleOptionalParameter updateRegexEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updateRegexEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateRegexEntityRoleOptionalParameter updateRegexEntityRoleOptionalParameter);


    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);



    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityRole object if successful.
     */
    EntityRole getCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId);

    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityRole object
     */
    Observable<EntityRole> getCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId);


    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId The entity role ID.
     * @param updateCompositeEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId, UpdateCompositeEntityRoleOptionalParameter updateCompositeEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId The entity role ID.
     * @param updateCompositeEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId, UpdateCompositeEntityRoleOptionalParameter updateCompositeEntityRoleOptionalParameter);


    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId);

    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId);



    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityRole object if successful.
     */
    EntityRole getPatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityRole object
     */
    Observable<EntityRole> getPatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);


    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updatePatternAnyEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updatePatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePatternAnyEntityRoleOptionalParameter updatePatternAnyEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updatePatternAnyEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updatePatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePatternAnyEntityRoleOptionalParameter updatePatternAnyEntityRoleOptionalParameter);


    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deletePatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deletePatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);



    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityRole object if successful.
     */
    EntityRole getHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId);

    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityRole object
     */
    Observable<EntityRole> getHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId);


    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId The entity role ID.
     * @param updateHierarchicalEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId, UpdateHierarchicalEntityRoleOptionalParameter updateHierarchicalEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId The entity role ID.
     * @param updateHierarchicalEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId, UpdateHierarchicalEntityRoleOptionalParameter updateHierarchicalEntityRoleOptionalParameter);


    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId);

    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId);



    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityRole object if successful.
     */
    EntityRole getCustomEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityRole object
     */
    Observable<EntityRole> getCustomEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);


    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updateCustomPrebuiltEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateCustomPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateCustomPrebuiltEntityRoleOptionalParameter updateCustomPrebuiltEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updateCustomPrebuiltEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateCustomPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateCustomPrebuiltEntityRoleOptionalParameter updateCustomPrebuiltEntityRoleOptionalParameter);


    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteCustomEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteCustomEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);



    /**
     * Get the explicit list of the pattern.any entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity Id.
     * @param itemId The explicit list item Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ExplicitListItem object if successful.
     */
    ExplicitListItem getExplicitListItem(UUID appId, String versionId, UUID entityId, long itemId);

    /**
     * Get the explicit list of the pattern.any entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity Id.
     * @param itemId The explicit list item Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExplicitListItem object
     */
    Observable<ExplicitListItem> getExplicitListItemAsync(UUID appId, String versionId, UUID entityId, long itemId);


    /**
     * Updates an explicit list item for a Pattern.Any entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param itemId The explicit list item ID.
     * @param updateExplicitListItemOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateExplicitListItem(UUID appId, String versionId, UUID entityId, long itemId, UpdateExplicitListItemOptionalParameter updateExplicitListItemOptionalParameter);

    /**
     * Updates an explicit list item for a Pattern.Any entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param itemId The explicit list item ID.
     * @param updateExplicitListItemOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateExplicitListItemAsync(UUID appId, String versionId, UUID entityId, long itemId, UpdateExplicitListItemOptionalParameter updateExplicitListItemOptionalParameter);


    /**
     * Delete the explicit list item from the Pattern.any explicit list.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The pattern.any entity id.
     * @param itemId The explicit list item which will be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteExplicitListItem(UUID appId, String versionId, UUID entityId, long itemId);

    /**
     * Delete the explicit list item from the Pattern.any explicit list.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The pattern.any entity id.
     * @param itemId The explicit list item which will be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteExplicitListItemAsync(UUID appId, String versionId, UUID entityId, long itemId);


}
