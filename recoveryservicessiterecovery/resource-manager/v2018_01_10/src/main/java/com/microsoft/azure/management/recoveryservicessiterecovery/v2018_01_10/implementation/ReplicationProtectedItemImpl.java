/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservicessiterecovery.v2018_01_10.implementation;

import com.microsoft.azure.management.recoveryservicessiterecovery.v2018_01_10.ReplicationProtectedItem;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.recoveryservicessiterecovery.v2018_01_10.ReplicationProtectedItemProperties;

class ReplicationProtectedItemImpl extends CreatableUpdatableImpl<ReplicationProtectedItem, ReplicationProtectedItemInner, ReplicationProtectedItemImpl> implements ReplicationProtectedItem, ReplicationProtectedItem.Definition, ReplicationProtectedItem.Update {
    private final RecoveryServicesManager manager;
    private String fabricName;
    private String protectionContainerName;
    private String replicatedProtectedItemName;

    ReplicationProtectedItemImpl(String name, RecoveryServicesManager manager) {
        super(name, new ReplicationProtectedItemInner());
        this.manager = manager;
        // Set resource name
        this.replicatedProtectedItemName = name;
        //
    }

    ReplicationProtectedItemImpl(ReplicationProtectedItemInner inner, RecoveryServicesManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.replicatedProtectedItemName = inner.name();
        // resource ancestor names
        this.fabricName = IdParsingUtils.getValueFromIdByName(inner.id(), "replicationFabrics");
        this.protectionContainerName = IdParsingUtils.getValueFromIdByName(inner.id(), "replicationProtectionContainers");
        this.replicatedProtectedItemName = IdParsingUtils.getValueFromIdByName(inner.id(), "replicationProtectedItems");
        //
    }

    @Override
    public RecoveryServicesManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ReplicationProtectedItem> createResourceAsync() {
        ReplicationProtectedItemsInner client = this.manager().inner().replicationProtectedItems();
        return client.createAsync(this.fabricName, this.protectionContainerName, this.replicatedProtectedItemName)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ReplicationProtectedItem> updateResourceAsync() {
        ReplicationProtectedItemsInner client = this.manager().inner().replicationProtectedItems();
        return client.updateAsync(this.fabricName, this.protectionContainerName, this.replicatedProtectedItemName)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ReplicationProtectedItemInner> getInnerAsync() {
        ReplicationProtectedItemsInner client = this.manager().inner().replicationProtectedItems();
        return client.getAsync(this.fabricName, this.protectionContainerName, this.replicatedProtectedItemName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public ReplicationProtectedItemProperties properties() {
        return this.inner().properties();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ReplicationProtectedItemImpl withExistingReplicationProtectionContainer(String fabricName, String protectionContainerName) {
        this.fabricName = fabricName;
        this.protectionContainerName = protectionContainerName;
        return this;
    }

}
